
05 - Complete Code H7 FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172e4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  080175b8  080175b8  000185b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017e04  08017e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017e0c  08017e0c  00018e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017e10  08017e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  08017e14  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000057d4  240001f8  0801800c  000191f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240059cc  0801800c  000199cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000191f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f32  00000000  00000000  00019226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006992  00000000  00000000  0004b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002698  00000000  00000000  00051af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d9f  00000000  00000000  00054188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f991  00000000  00000000  00055f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030282  00000000  00000000  000958b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177c33  00000000  00000000  000c5b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023d76d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b088  00000000  00000000  0023d7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  00248838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f8 	.word	0x240001f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801759c 	.word	0x0801759c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001fc 	.word	0x240001fc
 800030c:	0801759c 	.word	0x0801759c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f043 0201 	orr.w	r2, r3, #1
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f023 0201 	bic.w	r2, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6a1a      	ldr	r2, [r3, #32]
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	621a      	str	r2, [r3, #32]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <Buzzer_PlayTone>:
  * @param  delays: Array of delay durations in milliseconds for each tone
  * @param  numTones: Number of tones to play
  * @retval None
  */
void Buzzer_PlayTone(uint16_t *prescalers, uint16_t *delays, uint8_t numTones)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	4613      	mov	r3, r2
 8000430:	71fb      	strb	r3, [r7, #7]
    // Enable the timer and channel
    LL_TIM_EnableCounter(BUZZER_TIM);
 8000432:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000436:	f7ff ffc3 	bl	80003c0 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 800043a:	2101      	movs	r1, #1
 800043c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000440:	f7ff ffde 	bl	8000400 <LL_TIM_CC_EnableChannel>

    // Set duty cycle (e.g., 25% as in original code)
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 8000444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	009a      	lsls	r2, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000458:	4913      	ldr	r1, [pc, #76]	@ (80004a8 <Buzzer_PlayTone+0x84>)
 800045a:	fba1 1303 	umull	r1, r3, r1, r3
 800045e:	095b      	lsrs	r3, r3, #5
 8000460:	6353      	str	r3, [r2, #52]	@ 0x34

    // Play each tone
    for (uint8_t i = 0; i < numTones; i++)
 8000462:	2300      	movs	r3, #0
 8000464:	75fb      	strb	r3, [r7, #23]
 8000466:	e012      	b.n	800048e <Buzzer_PlayTone+0x6a>
    {
        BUZZER_TIM->PSC = prescalers[i];
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
        HAL_Delay(delays[i]);
 8000478:	7dfb      	ldrb	r3, [r7, #23]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	68ba      	ldr	r2, [r7, #8]
 800047e:	4413      	add	r3, r2
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f003 f9f2 	bl	800386c <HAL_Delay>
    for (uint8_t i = 0; i < numTones; i++)
 8000488:	7dfb      	ldrb	r3, [r7, #23]
 800048a:	3301      	adds	r3, #1
 800048c:	75fb      	strb	r3, [r7, #23]
 800048e:	7dfa      	ldrb	r2, [r7, #23]
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	429a      	cmp	r2, r3
 8000494:	d3e8      	bcc.n	8000468 <Buzzer_PlayTone+0x44>
    }

    // Disable the timer to stop the buzzer
    LL_TIM_DisableCounter(BUZZER_TIM);
 8000496:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800049a:	f7ff ffa1 	bl	80003e0 <LL_TIM_DisableCounter>
}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	51eb851f 	.word	0x51eb851f

080004ac <StartupTone>:
/**
  * @brief  Play the startup tone sequence
  * @retval None
  */
void StartupTone(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
    // Define the startup tone sequence
    uint16_t prescalers[] = {1092, 592, 292};
 80004b2:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <StartupTone+0x40>)
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004bc:	6018      	str	r0, [r3, #0]
 80004be:	3304      	adds	r3, #4
 80004c0:	8019      	strh	r1, [r3, #0]
    uint16_t delays[] = {100, 100, 100};
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <StartupTone+0x44>)
 80004c4:	463b      	mov	r3, r7
 80004c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ca:	6018      	str	r0, [r3, #0]
 80004cc:	3304      	adds	r3, #4
 80004ce:	8019      	strh	r1, [r3, #0]
    uint8_t numTones = 3;
 80004d0:	2303      	movs	r3, #3
 80004d2:	73fb      	strb	r3, [r7, #15]

    // Play the sequence using Buzzer_PlayTone
    Buzzer_PlayTone(prescalers, delays, numTones);
 80004d4:	7bfa      	ldrb	r2, [r7, #15]
 80004d6:	4639      	mov	r1, r7
 80004d8:	f107 0308 	add.w	r3, r7, #8
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ffa1 	bl	8000424 <Buzzer_PlayTone>
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	080175b8 	.word	0x080175b8
 80004f0:	080175c0 	.word	0x080175c0

080004f4 <swap_buffers>:
#define WS2812_LATCH_DELAY_MS 1   // >50us required for WS2812 reset

// ----------------------------
// Helper: Swap Buffers Safely
// ----------------------------
static inline void swap_buffers(void) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
    uint32_t *temp = active_buffer;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <swap_buffers+0x28>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	607b      	str	r3, [r7, #4]
    active_buffer = prepare_buffer;
 8000500:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <swap_buffers+0x2c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a05      	ldr	r2, [pc, #20]	@ (800051c <swap_buffers+0x28>)
 8000506:	6013      	str	r3, [r2, #0]
    prepare_buffer = temp;
 8000508:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <swap_buffers+0x2c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	24000000 	.word	0x24000000
 8000520:	24000004 	.word	0x24000004

08000524 <AIRCRAFTLIGHTS_Init>:

// ----------------------------
// Initialize (Clear LEDs)
// ----------------------------
void AIRCRAFTLIGHTS_Init(TIM_HandleTypeDef *htim) {
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e00c      	b.n	800054c <AIRCRAFTLIGHTS_Init+0x28>
        pwm_buffer_a[i] = DUTY_RESET;
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <AIRCRAFTLIGHTS_Init+0x3c>)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2100      	movs	r1, #0
 8000538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        pwm_buffer_b[i] = DUTY_RESET;
 800053c:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <AIRCRAFTLIGHTS_Init+0x40>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2100      	movs	r1, #0
 8000542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b91      	cmp	r3, #145	@ 0x91
 8000550:	d9ef      	bls.n	8000532 <AIRCRAFTLIGHTS_Init+0xe>
    }
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	24000218 	.word	0x24000218
 8000564:	24000460 	.word	0x24000460

08000568 <aircraftlights>:
}

// ----------------------------
// Set Color for Individual LED
// ----------------------------
void aircraftlights(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	ed87 0a01 	vstr	s0, [r7, #4]
 800057a:	4603      	mov	r3, r0
 800057c:	72fb      	strb	r3, [r7, #11]
 800057e:	460b      	mov	r3, r1
 8000580:	72bb      	strb	r3, [r7, #10]
 8000582:	4613      	mov	r3, r2
 8000584:	727b      	strb	r3, [r7, #9]
    if (led_index < AIRCRAFT_LED_COUNT) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d865      	bhi.n	8000658 <aircraftlights+0xf0>
        if (brightness < 0.0f) brightness = 0.0f;
 800058c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	d502      	bpl.n	80005a0 <aircraftlights+0x38>
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0f) brightness = 1.0f;
 80005a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	dd02      	ble.n	80005b8 <aircraftlights+0x50>
 80005b2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80005b6:	607b      	str	r3, [r7, #4]

        float total_brightness = brightness * global_brightness;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <aircraftlights+0xfc>)
 80005ba:	edd3 7a00 	vldr	s15, [r3]
 80005be:	ed97 7a01 	vldr	s14, [r7, #4]
 80005c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c6:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // WS2812 uses GRB
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80005d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e0:	edc7 7a00 	vstr	s15, [r7]
 80005e4:	783b      	ldrb	r3, [r7, #0]
 80005e6:	b2d8      	uxtb	r0, r3
 80005e8:	491f      	ldr	r1, [pc, #124]	@ (8000668 <aircraftlights+0x100>)
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	4602      	mov	r2, r0
 80005f6:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red   * total_brightness);
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000602:	edd7 7a05 	vldr	s15, [r7, #20]
 8000606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800060e:	edc7 7a00 	vstr	s15, [r7]
 8000612:	783b      	ldrb	r3, [r7, #0]
 8000614:	b2d8      	uxtb	r0, r3
 8000616:	4914      	ldr	r1, [pc, #80]	@ (8000668 <aircraftlights+0x100>)
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	440b      	add	r3, r1
 8000622:	3301      	adds	r3, #1
 8000624:	4602      	mov	r2, r0
 8000626:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue  * total_brightness);
 8000628:	7a7b      	ldrb	r3, [r7, #9]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000632:	edd7 7a05 	vldr	s15, [r7, #20]
 8000636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063e:	edc7 7a00 	vstr	s15, [r7]
 8000642:	783b      	ldrb	r3, [r7, #0]
 8000644:	b2d8      	uxtb	r0, r3
 8000646:	4908      	ldr	r1, [pc, #32]	@ (8000668 <aircraftlights+0x100>)
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	440b      	add	r3, r1
 8000652:	3302      	adds	r3, #2
 8000654:	4602      	mov	r2, r0
 8000656:	701a      	strb	r2, [r3, #0]
    }
}
 8000658:	bf00      	nop
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	24000008 	.word	0x24000008
 8000668:	240006a8 	.word	0x240006a8

0800066c <encode_leds_to_pwm>:

// ----------------------------
// Encode LED Data → PWM Buffer
// ----------------------------
static void encode_leds_to_pwm(uint32_t *buffer) {
 800066c:	b480      	push	{r7}
 800066e:	b089      	sub	sp, #36	@ 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    uint32_t buffer_index = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

    // Clear buffer
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	e008      	b.n	8000690 <encode_leds_to_pwm+0x24>
        buffer[i] = DUTY_RESET;
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	3301      	adds	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	2b91      	cmp	r3, #145	@ 0x91
 8000694:	d9f3      	bls.n	800067e <encode_leds_to_pwm+0x12>
    }

    // Encode GRB
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e034      	b.n	8000706 <encode_leds_to_pwm+0x9a>
        for (uint32_t color = 0; color < 3; color++) {
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	e02b      	b.n	80006fa <encode_leds_to_pwm+0x8e>
            for (int8_t bit = 7; bit >= 0; bit--) {
 80006a2:	2307      	movs	r3, #7
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e021      	b.n	80006ec <encode_leds_to_pwm+0x80>
                buffer[buffer_index++] = (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 80006a8:	491c      	ldr	r1, [pc, #112]	@ (800071c <encode_leds_to_pwm+0xb0>)
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	18ca      	adds	r2, r1, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c0:	fa42 f303 	asr.w	r3, r2, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <encode_leds_to_pwm+0x64>
 80006cc:	22a0      	movs	r2, #160	@ 0xa0
 80006ce:	e000      	b.n	80006d2 <encode_leds_to_pwm+0x66>
 80006d0:	2250      	movs	r2, #80	@ 0x50
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	1c59      	adds	r1, r3, #1
 80006d6:	61f9      	str	r1, [r7, #28]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	440b      	add	r3, r1
 80006de:	601a      	str	r2, [r3, #0]
            for (int8_t bit = 7; bit >= 0; bit--) {
 80006e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dad9      	bge.n	80006a8 <encode_leds_to_pwm+0x3c>
        for (uint32_t color = 0; color < 3; color++) {
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3301      	adds	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d9d0      	bls.n	80006a2 <encode_leds_to_pwm+0x36>
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d9c7      	bls.n	800069c <encode_leds_to_pwm+0x30>
            }
        }
    }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3724      	adds	r7, #36	@ 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	240006a8 	.word	0x240006a8

08000720 <aircraftlights_update>:

// ----------------------------
// Send Data via DMA (No Flicker)
// ----------------------------
void aircraftlights_update(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    // Encode into the non-active buffer
    encode_leds_to_pwm(prepare_buffer);
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <aircraftlights_update+0x98>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff9f 	bl	800066c <encode_leds_to_pwm>
    swap_buffers();
 800072e:	f7ff fee1 	bl	80004f4 <swap_buffers>

    // Disable interrupts briefly (timing critical)
    taskENTER_CRITICAL();
 8000732:	f013 fde9 	bl	8014308 <vPortEnterCritical>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
    __disable_irq();

    // Stop any ongoing DMA
    HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 800073a:	2108      	movs	r1, #8
 800073c:	481f      	ldr	r0, [pc, #124]	@ (80007bc <aircraftlights_update+0x9c>)
 800073e:	f00d fe17 	bl	800e370 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 8000742:	481e      	ldr	r0, [pc, #120]	@ (80007bc <aircraftlights_update+0x9c>)
 8000744:	f00d fad0 	bl	800dce8 <HAL_TIM_Base_Stop>

    // Re-enable DMA IRQ
    HAL_NVIC_SetPriority(AIRCRAFTLIGHTS_TIMER_DMA_IRQn, 5, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2105      	movs	r1, #5
 800074c:	2010      	movs	r0, #16
 800074e:	f003 f98d 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AIRCRAFTLIGHTS_TIMER_DMA_IRQn);
 8000752:	2010      	movs	r0, #16
 8000754:	f003 f9a4 	bl	8003aa0 <HAL_NVIC_EnableIRQ>

    aircraftlights_data_sent_flag = 0;
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <aircraftlights_update+0xa0>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

    // Start DMA with timing protected
    HAL_TIM_Base_Start(&AIRCRAFTLIGHTS_TIMER);
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <aircraftlights_update+0x9c>)
 8000760:	f00d fa44 	bl	800dbec <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL,
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <aircraftlights_update+0xa4>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	2392      	movs	r3, #146	@ 0x92
 800076a:	2108      	movs	r1, #8
 800076c:	4813      	ldr	r0, [pc, #76]	@ (80007bc <aircraftlights_update+0x9c>)
 800076e:	f00d fbcb 	bl	800df08 <HAL_TIM_PWM_Start_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 8000772:	b662      	cpsie	i
}
 8000774:	bf00      	nop
                          active_buffer, AIRCRAFT_BUFFER_SIZE);

    // Re-enable IRQs immediately after DMA start
    __enable_irq();
    taskEXIT_CRITICAL();
 8000776:	f013 fdf9 	bl	801436c <vPortExitCritical>

    // Wait for DMA to complete (use semaphore or fallback)
    if (aircraftlights_dma_semaphore != NULL) {
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <aircraftlights_update+0xa8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00f      	beq.n	80007a2 <aircraftlights_update+0x82>
        xSemaphoreTake(aircraftlights_dma_semaphore, pdMS_TO_TICKS(2));
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <aircraftlights_update+0xa8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f011 fc81 	bl	8012090 <xQueueSemaphoreTake>
 800078e:	e00d      	b.n	80007ac <aircraftlights_update+0x8c>
    } else {
        while (!aircraftlights_data_sent_flag) {
            if (HAL_DMA_GetState(&AIRCRAFTLIGHTS_DMA) == HAL_DMA_STATE_READY) {
 8000790:	480e      	ldr	r0, [pc, #56]	@ (80007cc <aircraftlights_update+0xac>)
 8000792:	f005 fe1f 	bl	80063d4 <HAL_DMA_GetState>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d102      	bne.n	80007a2 <aircraftlights_update+0x82>
                aircraftlights_data_sent_flag = 1;
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <aircraftlights_update+0xa0>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
        while (!aircraftlights_data_sent_flag) {
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <aircraftlights_update+0xa0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f1      	beq.n	8000790 <aircraftlights_update+0x70>
            }
        }
    }

    // WS2812 latch delay to ensure proper reset
    vTaskDelay(pdMS_TO_TICKS(WS2812_LATCH_DELAY_MS));
 80007ac:	2001      	movs	r0, #1
 80007ae:	f012 f937 	bl	8012a20 <vTaskDelay>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24000004 	.word	0x24000004
 80007bc:	24000d58 	.word	0x24000d58
 80007c0:	24000214 	.word	0x24000214
 80007c4:	24000000 	.word	0x24000000
 80007c8:	240007ec 	.word	0x240007ec
 80007cc:	24000e1c 	.word	0x24000e1c

080007d0 <AircraftLights_PWM_Callback>:

// ----------------------------
// DMA Complete ISR
// ----------------------------
void AircraftLights_PWM_Callback(TIM_HandleTypeDef *htim) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <AircraftLights_PWM_Callback+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d122      	bne.n	800082a <AircraftLights_PWM_Callback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 80007e4:	2108      	movs	r1, #8
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <AircraftLights_PWM_Callback+0x64>)
 80007e8:	f00d fdc2 	bl	800e370 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <AircraftLights_PWM_Callback+0x64>)
 80007ee:	f00d fa7b 	bl	800dce8 <HAL_TIM_Base_Stop>
        aircraftlights_data_sent_flag = 1;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <AircraftLights_PWM_Callback+0x68>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]

        if (aircraftlights_dma_semaphore != NULL) {
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <AircraftLights_PWM_Callback+0x6c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d014      	beq.n	800082a <AircraftLights_PWM_Callback+0x5a>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(aircraftlights_dma_semaphore, &xHigherPriorityTaskWoken);
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <AircraftLights_PWM_Callback+0x6c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f107 020c 	add.w	r2, r7, #12
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f011 facc 	bl	8011dac <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <AircraftLights_PWM_Callback+0x5a>
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <AircraftLights_PWM_Callback+0x70>)
 800081c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	f3bf 8f4f 	dsb	sy
 8000826:	f3bf 8f6f 	isb	sy
        }
    }
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	24000d58 	.word	0x24000d58
 8000838:	24000214 	.word	0x24000214
 800083c:	240007ec 	.word	0x240007ec
 8000840:	e000ed04 	.word	0xe000ed04

08000844 <WS2812_Init>:
volatile uint8_t data_sent_flag = 0;
static uint32_t pwm_buffer[BUFFER_SIZE];
static uint8_t led_data[LED_COUNT][3];
static float global_brightness = 1.0;

void WS2812_Init(TIM_HandleTypeDef *htim) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e007      	b.n	8000862 <WS2812_Init+0x1e>
        pwm_buffer[i] = DUTY_RESET;
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <WS2812_Init+0x34>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2100      	movs	r1, #0
 8000858:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b49      	cmp	r3, #73	@ 0x49
 8000866:	d9f4      	bls.n	8000852 <WS2812_Init+0xe>
    }
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	240006b8 	.word	0x240006b8

0800087c <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	ed87 0a01 	vstr	s0, [r7, #4]
 800088e:	4603      	mov	r3, r0
 8000890:	72fb      	strb	r3, [r7, #11]
 8000892:	460b      	mov	r3, r1
 8000894:	72bb      	strb	r3, [r7, #10]
 8000896:	4613      	mov	r3, r2
 8000898:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d165      	bne.n	800096c <WS2812_SetColor+0xf0>
        if (brightness < 0.0) brightness = 0.0;
 80008a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ac:	d502      	bpl.n	80008b4 <WS2812_SetColor+0x38>
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 80008b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	dd02      	ble.n	80008cc <WS2812_SetColor+0x50>
 80008c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80008ca:	607b      	str	r3, [r7, #4]
        float total_brightness = brightness * global_brightness;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <WS2812_SetColor+0xfc>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008da:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness);
 80008de:	7abb      	ldrb	r3, [r7, #10]
 80008e0:	ee07 3a90 	vmov	s15, r3
 80008e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f4:	edc7 7a00 	vstr	s15, [r7]
 80008f8:	783b      	ldrb	r3, [r7, #0]
 80008fa:	b2d8      	uxtb	r0, r3
 80008fc:	491f      	ldr	r1, [pc, #124]	@ (800097c <WS2812_SetColor+0x100>)
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	440b      	add	r3, r1
 8000908:	4602      	mov	r2, r0
 800090a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 800090c:	7afb      	ldrb	r3, [r7, #11]
 800090e:	ee07 3a90 	vmov	s15, r3
 8000912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000916:	edd7 7a05 	vldr	s15, [r7, #20]
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000922:	edc7 7a00 	vstr	s15, [r7]
 8000926:	783b      	ldrb	r3, [r7, #0]
 8000928:	b2d8      	uxtb	r0, r3
 800092a:	4914      	ldr	r1, [pc, #80]	@ (800097c <WS2812_SetColor+0x100>)
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	440b      	add	r3, r1
 8000936:	3301      	adds	r3, #1
 8000938:	4602      	mov	r2, r0
 800093a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 800093c:	7a7b      	ldrb	r3, [r7, #9]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000946:	edd7 7a05 	vldr	s15, [r7, #20]
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000952:	edc7 7a00 	vstr	s15, [r7]
 8000956:	783b      	ldrb	r3, [r7, #0]
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <WS2812_SetColor+0x100>)
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	440b      	add	r3, r1
 8000966:	3302      	adds	r3, #2
 8000968:	4602      	mov	r2, r0
 800096a:	701a      	strb	r2, [r3, #0]
    }
}
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	2400000c 	.word	0x2400000c
 800097c:	240007e0 	.word	0x240007e0

08000980 <WS2812_Send>:

void WS2812_Send(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

    // Fill reset first
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	e007      	b.n	80009a0 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8000990:	4a31      	ldr	r2, [pc, #196]	@ (8000a58 <WS2812_Send+0xd8>)
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	2100      	movs	r1, #0
 8000996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3301      	adds	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	2b49      	cmp	r3, #73	@ 0x49
 80009a4:	d9f4      	bls.n	8000990 <WS2812_Send+0x10>
    }

    // Encode GRB bits
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e033      	b.n	8000a14 <WS2812_Send+0x94>
        for (uint32_t color = 0; color < 3; color++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	e02a      	b.n	8000a08 <WS2812_Send+0x88>
            for (int8_t bit = 7; bit >= 0; bit--) {
 80009b2:	2307      	movs	r3, #7
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	e020      	b.n	80009fa <WS2812_Send+0x7a>
                pwm_buffer[buffer_index++] = (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 80009b8:	4928      	ldr	r1, [pc, #160]	@ (8000a5c <WS2812_Send+0xdc>)
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	18ca      	adds	r2, r1, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <WS2812_Send+0x60>
 80009dc:	22a0      	movs	r2, #160	@ 0xa0
 80009de:	e000      	b.n	80009e2 <WS2812_Send+0x62>
 80009e0:	2250      	movs	r2, #80	@ 0x50
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	6179      	str	r1, [r7, #20]
 80009e8:	491b      	ldr	r1, [pc, #108]	@ (8000a58 <WS2812_Send+0xd8>)
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dada      	bge.n	80009b8 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) {
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d9d1      	bls.n	80009b2 <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0c8      	beq.n	80009ac <WS2812_Send+0x2c>
            }
        }
    }

    // Stop old DMA
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <WS2812_Send+0xe0>)
 8000a1e:	f00d fca7 	bl	800e370 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 8000a22:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <WS2812_Send+0xe0>)
 8000a24:	f00d f960 	bl	800dce8 <HAL_TIM_Base_Stop>

    // Ensure NVIC
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200f      	movs	r0, #15
 8000a2e:	f003 f81d 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f003 f834 	bl	8003aa0 <HAL_NVIC_EnableIRQ>

    // Reset flag
    data_sent_flag = 0;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <WS2812_Send+0xe4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]

    // Start DMA transfer
    HAL_TIM_Base_Start(&WS2812_TIMER);
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <WS2812_Send+0xe0>)
 8000a40:	f00d f8d4 	bl	800dbec <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 8000a44:	234a      	movs	r3, #74	@ 0x4a
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <WS2812_Send+0xd8>)
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <WS2812_Send+0xe0>)
 8000a4c:	f00d fa5c 	bl	800df08 <HAL_TIM_PWM_Start_DMA>
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	240006b8 	.word	0x240006b8
 8000a5c:	240007e0 	.word	0x240007e0
 8000a60:	24000d58 	.word	0x24000d58
 8000a64:	240006b4 	.word	0x240006b4

08000a68 <main_led>:

// Non-blocking main_led (works in FreeRTOS)
void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness, uint32_t main_led_time) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	72fb      	strb	r3, [r7, #11]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	72bb      	strb	r3, [r7, #10]
 8000a82:	4613      	mov	r3, r2
 8000a84:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 8000a86:	7a7b      	ldrb	r3, [r7, #9]
 8000a88:	7aba      	ldrb	r2, [r7, #10]
 8000a8a:	7af9      	ldrb	r1, [r7, #11]
 8000a8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff fef3 	bl	800087c <WS2812_SetColor>
    WS2812_Send();
 8000a96:	f7ff ff73 	bl	8000980 <WS2812_Send>

    // Wait for DMA to finish using semaphore (if available)
    if (ws2812_dma_semaphore != NULL) {
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <main_led+0xa0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <main_led+0x48>
        xSemaphoreTake(ws2812_dma_semaphore, pdMS_TO_TICKS(50));
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <main_led+0xa0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2132      	movs	r1, #50	@ 0x32
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f011 faf1 	bl	8012090 <xQueueSemaphoreTake>
 8000aae:	e018      	b.n	8000ae2 <main_led+0x7a>
    } else {
        // Fallback: Busy wait like original
        uint32_t start = HAL_GetTick();
 8000ab0:	f002 fed0 	bl	8003854 <HAL_GetTick>
 8000ab4:	6178      	str	r0, [r7, #20]
        while (!data_sent_flag && (HAL_GetTick() - start) < 100) {
 8000ab6:	e008      	b.n	8000aca <main_led+0x62>
            if (HAL_DMA_GetState(&WS2812_DMA) == HAL_DMA_STATE_READY) {
 8000ab8:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <main_led+0xa4>)
 8000aba:	f005 fc8b 	bl	80063d4 <HAL_DMA_GetState>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d102      	bne.n	8000aca <main_led+0x62>
                data_sent_flag = 1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <main_led+0xa8>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
        while (!data_sent_flag && (HAL_GetTick() - start) < 100) {
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <main_led+0xa8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d106      	bne.n	8000ae2 <main_led+0x7a>
 8000ad4:	f002 febe 	bl	8003854 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b63      	cmp	r3, #99	@ 0x63
 8000ae0:	d9ea      	bls.n	8000ab8 <main_led+0x50>
            }
        }
    }

    // Keeping LED ON for requested duration
    if (main_led_time > 0) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <main_led+0x98>
        vTaskDelay(pdMS_TO_TICKS(main_led_time));
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <main_led+0xac>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	099b      	lsrs	r3, r3, #6
 8000afa:	4618      	mov	r0, r3
 8000afc:	f011 ff90 	bl	8012a20 <vTaskDelay>
    }
}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240007e8 	.word	0x240007e8
 8000b0c:	24000da4 	.word	0x24000da4
 8000b10:	240006b4 	.word	0x240006b4
 8000b14:	10624dd3 	.word	0x10624dd3

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_DMA_Init+0x8c>)
 8000b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <MX_DMA_Init+0x8c>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_DMA_Init+0x8c>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2105      	movs	r1, #5
 8000b40:	200b      	movs	r0, #11
 8000b42:	f002 ff93 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b46:	200b      	movs	r0, #11
 8000b48:	f002 ffaa 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	200c      	movs	r0, #12
 8000b52:	f002 ff8b 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b56:	200c      	movs	r0, #12
 8000b58:	f002 ffa2 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2105      	movs	r1, #5
 8000b60:	200d      	movs	r0, #13
 8000b62:	f002 ff83 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b66:	200d      	movs	r0, #13
 8000b68:	f002 ff9a 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2105      	movs	r1, #5
 8000b70:	200e      	movs	r0, #14
 8000b72:	f002 ff7b 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b76:	200e      	movs	r0, #14
 8000b78:	f002 ff92 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	200f      	movs	r0, #15
 8000b82:	f002 ff73 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f002 ff8a 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2105      	movs	r1, #5
 8000b90:	2010      	movs	r0, #16
 8000b92:	f002 ff6b 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b96:	2010      	movs	r0, #16
 8000b98:	f002 ff82 	bl	8003aa0 <HAL_NVIC_EnableIRQ>

}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  InitTaskHandle = osThreadNew(InitTask, NULL, &InitTask_attributes);
 8000bac:	4a36      	ldr	r2, [pc, #216]	@ (8000c88 <MX_FREERTOS_Init+0xe0>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4836      	ldr	r0, [pc, #216]	@ (8000c8c <MX_FREERTOS_Init+0xe4>)
 8000bb2:	f010 fc11 	bl	80113d8 <osThreadNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a35      	ldr	r2, [pc, #212]	@ (8000c90 <MX_FREERTOS_Init+0xe8>)
 8000bba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_MUTEX */
  /* Add mutexes if required */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  spiDmaSem = xSemaphoreCreateBinary();
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f010 fef4 	bl	80119ae <xQueueGenericCreate>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <MX_FREERTOS_Init+0xec>)
 8000bca:	6013      	str	r3, [r2, #0]
  if (spiDmaSem == NULL) {
 8000bcc:	4b31      	ldr	r3, [pc, #196]	@ (8000c94 <MX_FREERTOS_Init+0xec>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <MX_FREERTOS_Init+0x30>
      Error_Handler();
 8000bd4:	f001 fa6a 	bl	80020ac <Error_Handler>
  }

  ws2812_dma_semaphore = xSemaphoreCreateBinary();
 8000bd8:	2203      	movs	r2, #3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f010 fee6 	bl	80119ae <xQueueGenericCreate>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <MX_FREERTOS_Init+0xf0>)
 8000be6:	6013      	str	r3, [r2, #0]
  if (ws2812_dma_semaphore == NULL) {
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <MX_FREERTOS_Init+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <MX_FREERTOS_Init+0x4c>
      Error_Handler();
 8000bf0:	f001 fa5c 	bl	80020ac <Error_Handler>
  }

  aircraftlights_dma_semaphore = xSemaphoreCreateBinary();
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f010 fed8 	bl	80119ae <xQueueGenericCreate>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a26      	ldr	r2, [pc, #152]	@ (8000c9c <MX_FREERTOS_Init+0xf4>)
 8000c02:	6013      	str	r3, [r2, #0]
  if (aircraftlights_dma_semaphore == NULL) {
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <MX_FREERTOS_Init+0xf4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <MX_FREERTOS_Init+0x68>
      Error_Handler();
 8000c0c:	f001 fa4e 	bl	80020ac <Error_Handler>
  /* Add queues if required */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c10:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <MX_FREERTOS_Init+0xf8>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4823      	ldr	r0, [pc, #140]	@ (8000ca4 <MX_FREERTOS_Init+0xfc>)
 8000c16:	f010 fbdf 	bl	80113d8 <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_FREERTOS_Init+0x100>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_init, NULL, &Task2_attributes);
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <MX_FREERTOS_Init+0x104>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4822      	ldr	r0, [pc, #136]	@ (8000cb0 <MX_FREERTOS_Init+0x108>)
 8000c26:	f010 fbd7 	bl	80113d8 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <MX_FREERTOS_Init+0x10c>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Task_1khzHandle = osThreadNew(Task_1khz_init, NULL, &Task_1khz_attributes);
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <MX_FREERTOS_Init+0x110>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4821      	ldr	r0, [pc, #132]	@ (8000cbc <MX_FREERTOS_Init+0x114>)
 8000c36:	f010 fbcf 	bl	80113d8 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <MX_FREERTOS_Init+0x118>)
 8000c3e:	6013      	str	r3, [r2, #0]

  Task_1khzHandle = osThreadNew(Task_100Hz_init, NULL, &Task_100Hz_attributes);
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <MX_FREERTOS_Init+0x11c>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <MX_FREERTOS_Init+0x120>)
 8000c46:	f010 fbc7 	bl	80113d8 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <MX_FREERTOS_Init+0x118>)
 8000c4e:	6013      	str	r3, [r2, #0]

  LedTaskHandle = osThreadNew(LedTask, NULL, &LedTask_attributes);
 8000c50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <MX_FREERTOS_Init+0x124>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <MX_FREERTOS_Init+0x128>)
 8000c56:	f010 fbbf 	bl	80113d8 <osThreadNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <MX_FREERTOS_Init+0x12c>)
 8000c5e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(LedTaskHandle);
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_FREERTOS_Init+0x12c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f010 fc49 	bl	80114fc <osThreadSuspend>

  AircraftLightsTaskHandle = osThreadNew(AircraftLightsTask, NULL, &AircraftLightsTask_attributes);
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_FREERTOS_Init+0x130>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <MX_FREERTOS_Init+0x134>)
 8000c70:	f010 fbb2 	bl	80113d8 <osThreadNew>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <MX_FREERTOS_Init+0x138>)
 8000c78:	6013      	str	r3, [r2, #0]
  osThreadSuspend(AircraftLightsTaskHandle);  // Start suspended, resume after init
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <MX_FREERTOS_Init+0x138>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f010 fc3c 	bl	80114fc <osThreadSuspend>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* Add event groups if required */
  /* USER CODE END RTOS_EVENTS */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08017934 	.word	0x08017934
 8000c8c:	08000d51 	.word	0x08000d51
 8000c90:	240007f4 	.word	0x240007f4
 8000c94:	240007e4 	.word	0x240007e4
 8000c98:	240007e8 	.word	0x240007e8
 8000c9c:	240007ec 	.word	0x240007ec
 8000ca0:	080179a0 	.word	0x080179a0
 8000ca4:	08000ce5 	.word	0x08000ce5
 8000ca8:	24000800 	.word	0x24000800
 8000cac:	080179c4 	.word	0x080179c4
 8000cb0:	08000d05 	.word	0x08000d05
 8000cb4:	24000804 	.word	0x24000804
 8000cb8:	080178ec 	.word	0x080178ec
 8000cbc:	08000d25 	.word	0x08000d25
 8000cc0:	240007f0 	.word	0x240007f0
 8000cc4:	08017910 	.word	0x08017910
 8000cc8:	08000d3b 	.word	0x08000d3b
 8000ccc:	08017958 	.word	0x08017958
 8000cd0:	08000df1 	.word	0x08000df1
 8000cd4:	240007f8 	.word	0x240007f8
 8000cd8:	0801797c 	.word	0x0801797c
 8000cdc:	08000e35 	.word	0x08000e35
 8000ce0:	240007fc 	.word	0x240007fc

08000ce4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  for(;;) {
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000cec:	2108      	movs	r1, #8
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <StartDefaultTask+0x1c>)
 8000cf0:	f006 fa35 	bl	800715e <HAL_GPIO_TogglePin>
    osDelay(800);
 8000cf4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000cf8:	f010 fc6f 	bl	80115da <osDelay>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000cfc:	bf00      	nop
 8000cfe:	e7f5      	b.n	8000cec <StartDefaultTask+0x8>
 8000d00:	58021000 	.word	0x58021000

08000d04 <Task2_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task2_init */
void Task2_init(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  for(;;) {
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <Task2_init+0x1c>)
 8000d10:	f006 fa25 	bl	800715e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000d14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d18:	f010 fc5f 	bl	80115da <osDelay>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8000d1c:	bf00      	nop
 8000d1e:	e7f5      	b.n	8000d0c <Task2_init+0x8>
 8000d20:	58021000 	.word	0x58021000

08000d24 <Task_1khz_init>:

/**
  * @brief Task3: IMU data acquisition
  */
void Task_1khz_init(void *argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    for(;;) {
        run_imu();
 8000d2c:	f001 f8ca 	bl	8001ec4 <run_imu>
        osDelay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f010 fc52 	bl	80115da <osDelay>
        run_imu();
 8000d36:	bf00      	nop
 8000d38:	e7f8      	b.n	8000d2c <Task_1khz_init+0x8>

08000d3a <Task_100Hz_init>:
    }
}

void Task_100Hz_init(void *arguement)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	for(;;) {

		run_mag();
 8000d42:	f001 f90b 	bl	8001f5c <run_mag>
		osDelay(10);
 8000d46:	200a      	movs	r0, #10
 8000d48:	f010 fc47 	bl	80115da <osDelay>
		run_mag();
 8000d4c:	bf00      	nop
 8000d4e:	e7f8      	b.n	8000d42 <Task_100Hz_init+0x8>

08000d50 <InitTask>:

/**
  * @brief InitTask: Initializes sensors & WS2812
  */
void InitTask(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    printf("Starting sensor initialization...\r\n");
 8000d58:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <InitTask+0x78>)
 8000d5a:	f014 fb45 	bl	80153e8 <puts>

    osThreadSuspend(Task_1khzHandle);
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <InitTask+0x7c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f010 fbca 	bl	80114fc <osThreadSuspend>
    osDelay(200);
 8000d68:	20c8      	movs	r0, #200	@ 0xc8
 8000d6a:	f010 fc36 	bl	80115da <osDelay>
    sensor_init();
 8000d6e:	f001 f92d 	bl	8001fcc <sensor_init>
    printf("Sensor initialization complete.\r\n");
 8000d72:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <InitTask+0x80>)
 8000d74:	f014 fb38 	bl	80153e8 <puts>

    /* Initialize WS2812 */
    extern TIM_HandleTypeDef htim3;
    WS2812_Init(&htim3);
 8000d78:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <InitTask+0x84>)
 8000d7a:	f7ff fd63 	bl	8000844 <WS2812_Init>
    printf("WS2812 LED Driver Initialized.\r\n");
 8000d7e:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <InitTask+0x88>)
 8000d80:	f014 fb32 	bl	80153e8 <puts>

    /* Initialize AircraftLights */
    extern TIM_HandleTypeDef htim3;
    AIRCRAFTLIGHTS_Init(&htim3);
 8000d84:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <InitTask+0x84>)
 8000d86:	f7ff fbcd 	bl	8000524 <AIRCRAFTLIGHTS_Init>
    printf("AircraftLights Driver Initialized.\r\n");
 8000d8a:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <InitTask+0x8c>)
 8000d8c:	f014 fb2c 	bl	80153e8 <puts>

    /* Resume other tasks */
    osThreadResume(Task_1khzHandle);
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <InitTask+0x7c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f010 fbd2 	bl	801153e <osThreadResume>
    osThreadResume(LedTaskHandle);
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <InitTask+0x90>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f010 fbcd 	bl	801153e <osThreadResume>
    osThreadResume(AircraftLightsTaskHandle);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <InitTask+0x94>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f010 fbc8 	bl	801153e <osThreadResume>

    printf("InitTask complete. Deleting InitTask...\r\n");
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <InitTask+0x98>)
 8000db0:	f014 fb1a 	bl	80153e8 <puts>
    osThreadTerminate(InitTaskHandle);
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <InitTask+0x9c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f010 fbe1 	bl	8011580 <osThreadTerminate>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	0801761c 	.word	0x0801761c
 8000dcc:	240007f0 	.word	0x240007f0
 8000dd0:	08017640 	.word	0x08017640
 8000dd4:	24000d58 	.word	0x24000d58
 8000dd8:	08017664 	.word	0x08017664
 8000ddc:	08017684 	.word	0x08017684
 8000de0:	240007f8 	.word	0x240007f8
 8000de4:	240007fc 	.word	0x240007fc
 8000de8:	080176a8 	.word	0x080176a8
 8000dec:	240007f4 	.word	0x240007f4

08000df0 <LedTask>:

/**
  * @brief LedTask: Controls WS2812 LED
  */
void LedTask(void *argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	6078      	str	r0, [r7, #4]
    for(;;) {

        main_led(0, 0, 255, 0, 0.1, 100);
 8000df8:	2364      	movs	r3, #100	@ 0x64
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000e30 <LedTask+0x40>
 8000e00:	2300      	movs	r3, #0
 8000e02:	22ff      	movs	r2, #255	@ 0xff
 8000e04:	2100      	movs	r1, #0
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fe2e 	bl	8000a68 <main_led>
        osDelay(100);
 8000e0c:	2064      	movs	r0, #100	@ 0x64
 8000e0e:	f010 fbe4 	bl	80115da <osDelay>

        main_led(0, 0, 0, 0, 0.1, 100);
 8000e12:	2364      	movs	r3, #100	@ 0x64
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000e30 <LedTask+0x40>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fe21 	bl	8000a68 <main_led>
        osDelay(100);
 8000e26:	2064      	movs	r0, #100	@ 0x64
 8000e28:	f010 fbd7 	bl	80115da <osDelay>
        main_led(0, 0, 255, 0, 0.1, 100);
 8000e2c:	bf00      	nop
 8000e2e:	e7e3      	b.n	8000df8 <LedTask+0x8>
 8000e30:	3dcccccd 	.word	0x3dcccccd

08000e34 <AircraftLightsTask>:

/**
  * @brief AircraftLightsTask: Controls Aircraft Lights
  */
void AircraftLightsTask(void *argument)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    for(;;) {

    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 8000e3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	21ff      	movs	r1, #255	@ 0xff
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fb8e 	bl	8000568 <aircraftlights>
    	aircraftlights(1, 0, 255, 0, 1.0);  // Green
 8000e4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e50:	2300      	movs	r3, #0
 8000e52:	22ff      	movs	r2, #255	@ 0xff
 8000e54:	2100      	movs	r1, #0
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff fb86 	bl	8000568 <aircraftlights>
    	aircraftlights(2, 0, 255, 0, 1.0);  // Green
 8000e5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e60:	2300      	movs	r3, #0
 8000e62:	22ff      	movs	r2, #255	@ 0xff
 8000e64:	2100      	movs	r1, #0
 8000e66:	2002      	movs	r0, #2
 8000e68:	f7ff fb7e 	bl	8000568 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);  // Red
 8000e6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e70:	2300      	movs	r3, #0
 8000e72:	2200      	movs	r2, #0
 8000e74:	21ff      	movs	r1, #255	@ 0xff
 8000e76:	2003      	movs	r0, #3
 8000e78:	f7ff fb76 	bl	8000568 <aircraftlights>
    	aircraftlights_update();
 8000e7c:	f7ff fc50 	bl	8000720 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(2000));
 8000e80:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e84:	f011 fdcc 	bl	8012a20 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 8000e88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e8c:	23ff      	movs	r3, #255	@ 0xff
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	21ff      	movs	r1, #255	@ 0xff
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fb68 	bl	8000568 <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 8000e98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e9c:	23ff      	movs	r3, #255	@ 0xff
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	21ff      	movs	r1, #255	@ 0xff
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f7ff fb60 	bl	8000568 <aircraftlights>
    	aircraftlights_update();
 8000ea8:	f7ff fc3a 	bl	8000720 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8000eac:	2023      	movs	r0, #35	@ 0x23
 8000eae:	f011 fdb7 	bl	8012a20 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 8000eb2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2200      	movs	r2, #0
 8000eba:	21ff      	movs	r1, #255	@ 0xff
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fb53 	bl	8000568 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 8000ec2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	21ff      	movs	r1, #255	@ 0xff
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f7ff fb4b 	bl	8000568 <aircraftlights>
    	aircraftlights_update();
 8000ed2:	f7ff fc25 	bl	8000720 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8000ed6:	2023      	movs	r0, #35	@ 0x23
 8000ed8:	f011 fda2 	bl	8012a20 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 8000edc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ee0:	23ff      	movs	r3, #255	@ 0xff
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	21ff      	movs	r1, #255	@ 0xff
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fb3e 	bl	8000568 <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 8000eec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ef0:	23ff      	movs	r3, #255	@ 0xff
 8000ef2:	22ff      	movs	r2, #255	@ 0xff
 8000ef4:	21ff      	movs	r1, #255	@ 0xff
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f7ff fb36 	bl	8000568 <aircraftlights>
    	aircraftlights_update();
 8000efc:	f7ff fc10 	bl	8000720 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8000f00:	2023      	movs	r0, #35	@ 0x23
 8000f02:	f011 fd8d 	bl	8012a20 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 8000f06:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fb29 	bl	8000568 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 8000f16:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	21ff      	movs	r1, #255	@ 0xff
 8000f20:	2003      	movs	r0, #3
 8000f22:	f7ff fb21 	bl	8000568 <aircraftlights>
    	aircraftlights_update();
 8000f26:	f7ff fbfb 	bl	8000720 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8000f2a:	2023      	movs	r0, #35	@ 0x23
 8000f2c:	f011 fd78 	bl	8012a20 <vTaskDelay>
    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 8000f30:	bf00      	nop
 8000f32:	e783      	b.n	8000e3c <AircraftLightsTask+0x8>

08000f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4b43      	ldr	r3, [pc, #268]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f50:	4a41      	ldr	r2, [pc, #260]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f68:	4b3b      	ldr	r3, [pc, #236]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	4a32      	ldr	r2, [pc, #200]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f96:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	4a2b      	ldr	r2, [pc, #172]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb4:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc8:	4a23      	ldr	r2, [pc, #140]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <MX_GPIO_Init+0x124>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2128      	movs	r1, #40	@ 0x28
 8001002:	4816      	ldr	r0, [pc, #88]	@ (800105c <MX_GPIO_Init+0x128>)
 8001004:	f006 f892 	bl	800712c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800100e:	4814      	ldr	r0, [pc, #80]	@ (8001060 <MX_GPIO_Init+0x12c>)
 8001010:	f006 f88c 	bl	800712c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001014:	2328      	movs	r3, #40	@ 0x28
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_GPIO_Init+0x128>)
 800102c:	f005 fdd4 	bl	8006bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <MX_GPIO_Init+0x12c>)
 800104a:	f005 fdc5 	bl	8006bd8 <HAL_GPIO_Init>

}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	@ 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	58024400 	.word	0x58024400
 800105c:	58021000 	.word	0x58021000
 8001060:	58020000 	.word	0x58020000

08001064 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	2364      	movs	r3, #100	@ 0x64
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2302      	movs	r3, #2
 8001086:	213c      	movs	r1, #60	@ 0x3c
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <HMC5883L_WriteReg+0x34>)
 800108a:	f006 f91f 	bl	80072cc <HAL_I2C_Master_Transmit>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000838 	.word	0x24000838

0800109c <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <HMC5883L_ReadReg+0x38>)
 80010b2:	f006 f90b 	bl	80072cc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 80010b6:	f107 020f 	add.w	r2, r7, #15
 80010ba:	2364      	movs	r3, #100	@ 0x64
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	213c      	movs	r1, #60	@ 0x3c
 80010c2:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <HMC5883L_ReadReg+0x38>)
 80010c4:	f006 fa1a 	bl	80074fc <HAL_I2C_Master_Receive>
    return rx_data;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000838 	.word	0x24000838

080010d8 <HMC5883L_Init>:

void HMC5883L_Init(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ffc0 	bl	8001064 <HMC5883L_WriteReg>
    HAL_Delay(100);
 80010e4:	2064      	movs	r0, #100	@ 0x64
 80010e6:	f002 fbc1 	bl	800386c <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 80010ea:	2178      	movs	r1, #120	@ 0x78
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff ffb9 	bl	8001064 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 80010f2:	2120      	movs	r1, #32
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ffb5 	bl	8001064 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 80010fa:	2100      	movs	r1, #0
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff ffb1 	bl	8001064 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f002 fbb2 	bl	800386c <HAL_Delay>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <HMC5883L_ReadMag_DMA>:
    data->mag_x = (int16_t)(raw_data[0] << 8 | raw_data[1]) / 1090.0f;
    data->mag_z = (int16_t)(raw_data[2] << 8 | raw_data[3]) / 1090.0f;
    data->mag_y = (int16_t)(raw_data[4] << 8 | raw_data[5]) / 1090.0f;
}

void HMC5883L_ReadMag_DMA(HMC5883L_Data_t *data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b092      	sub	sp, #72	@ 0x48
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
    hmc5883l_data_ptr = data;
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <HMC5883L_ReadMag_DMA+0xb0>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
    dma_data_ready = 0;
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <HMC5883L_ReadMag_DMA+0xb4>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    dma_error = 0;
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HMC5883L_ReadMag_DMA+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    char msg[50];
    HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(&hi2c1);
 8001126:	4828      	ldr	r0, [pc, #160]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 8001128:	f006 fcf1 	bl	8007b0e <HAL_I2C_GetState>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (i2c_state == HAL_I2C_STATE_READY) {
 8001132:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001136:	2b20      	cmp	r3, #32
 8001138:	d118      	bne.n	800116c <HMC5883L_ReadMag_DMA+0x60>
        if (HAL_I2C_Mem_Read_DMA(&hi2c1, HMC5883L_ADDR, HMC5883L_DATA_X_H, 1, hmc5883l_raw_data, 6) != HAL_OK) {
 800113a:	2306      	movs	r3, #6
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <HMC5883L_ReadMag_DMA+0xc0>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	213c      	movs	r1, #60	@ 0x3c
 8001148:	481f      	ldr	r0, [pc, #124]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 800114a:	f006 facd 	bl	80076e8 <HAL_I2C_Mem_Read_DMA>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02f      	beq.n	80011b4 <HMC5883L_ReadMag_DMA+0xa8>
            dma_error = 1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HMC5883L_ReadMag_DMA+0xb8>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
            printf("DMA Start Failed, Error: %lu\n", HAL_I2C_GetError(&hi2c1));
 800115a:	481b      	ldr	r0, [pc, #108]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 800115c:	f006 fce5 	bl	8007b2a <HAL_I2C_GetError>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <HMC5883L_ReadMag_DMA+0xc4>)
 8001166:	f014 f8d7 	bl	8015318 <iprintf>
        HAL_I2C_MspDeInit(&hi2c1);
        HAL_I2C_MspInit(&hi2c1);
        HAL_I2C_Init(&hi2c1);
        i2c_error = 1; // Trigger error handling in ProcessMagData
    }
}
 800116a:	e023      	b.n	80011b4 <HMC5883L_ReadMag_DMA+0xa8>
        dma_error = 1;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HMC5883L_ReadMag_DMA+0xb8>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
        printf("I2C Not Ready, State: %d\n", i2c_state);
 8001172:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001176:	4619      	mov	r1, r3
 8001178:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <HMC5883L_ReadMag_DMA+0xc8>)
 800117a:	f014 f8cd 	bl	8015318 <iprintf>
        __HAL_I2C_DISABLE(&hi2c1);
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
        HAL_I2C_Master_Abort_IT(&hi2c1, HMC5883L_ADDR);
 800118e:	213c      	movs	r1, #60	@ 0x3c
 8001190:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 8001192:	f006 fb8f 	bl	80078b4 <HAL_I2C_Master_Abort_IT>
        HAL_Delay(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f002 fb68 	bl	800386c <HAL_Delay>
        HAL_I2C_MspDeInit(&hi2c1);
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 800119e:	f000 fab3 	bl	8001708 <HAL_I2C_MspDeInit>
        HAL_I2C_MspInit(&hi2c1);
 80011a2:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 80011a4:	f000 f9d4 	bl	8001550 <HAL_I2C_MspInit>
        HAL_I2C_Init(&hi2c1);
 80011a8:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <HMC5883L_ReadMag_DMA+0xbc>)
 80011aa:	f005 fff3 	bl	8007194 <HAL_I2C_Init>
        i2c_error = 1; // Trigger error handling in ProcessMagData
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HMC5883L_ReadMag_DMA+0xcc>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3740      	adds	r7, #64	@ 0x40
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000810 	.word	0x24000810
 80011c0:	24000814 	.word	0x24000814
 80011c4:	24000815 	.word	0x24000815
 80011c8:	24000838 	.word	0x24000838
 80011cc:	24000808 	.word	0x24000808
 80011d0:	080176d4 	.word	0x080176d4
 80011d4:	080176f4 	.word	0x080176f4
 80011d8:	2400082c 	.word	0x2400082c

080011dc <HMC5883L_DMA_Complete_Callback>:

void HMC5883L_DMA_Complete_Callback(I2C_HandleTypeDef *hi2c) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1 && !dma_error) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HMC5883L_DMA_Complete_Callback+0xb4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d149      	bne.n	8001282 <HMC5883L_DMA_Complete_Callback+0xa6>
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <HMC5883L_DMA_Complete_Callback+0xb8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d144      	bne.n	8001282 <HMC5883L_DMA_Complete_Callback+0xa6>
        hmc5883l_data_ptr->mag_x = (int16_t)(hmc5883l_raw_data[0] << 8 | hmc5883l_raw_data[1]) / 1090.0f;
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HMC5883L_DMA_Complete_Callback+0xc0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80012a0 <HMC5883L_DMA_Complete_Callback+0xc4>
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	edc3 7a00 	vstr	s15, [r3]
        hmc5883l_data_ptr->mag_z = (int16_t)(hmc5883l_raw_data[2] << 8 | hmc5883l_raw_data[3]) / 1090.0f;
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	b21b      	sxth	r3, r3
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 8001230:	78db      	ldrb	r3, [r3, #3]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21b      	sxth	r3, r3
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HMC5883L_DMA_Complete_Callback+0xc0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80012a0 <HMC5883L_DMA_Complete_Callback+0xc4>
 8001248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124c:	edc3 7a02 	vstr	s15, [r3, #8]
        hmc5883l_data_ptr->mag_y = (int16_t)(hmc5883l_raw_data[4] << 8 | hmc5883l_raw_data[5]) / 1090.0f;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	b21b      	sxth	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HMC5883L_DMA_Complete_Callback+0xbc>)
 800125c:	795b      	ldrb	r3, [r3, #5]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HMC5883L_DMA_Complete_Callback+0xc0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80012a0 <HMC5883L_DMA_Complete_Callback+0xc4>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001278:	edc3 7a01 	vstr	s15, [r3, #4]
        dma_data_ready = 1;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HMC5883L_DMA_Complete_Callback+0xc8>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40005400 	.word	0x40005400
 8001294:	24000815 	.word	0x24000815
 8001298:	24000808 	.word	0x24000808
 800129c:	24000810 	.word	0x24000810
 80012a0:	44884000 	.word	0x44884000
 80012a4:	24000814 	.word	0x24000814

080012a8 <HMC5883L_GetCompassData>:
    mag_offsets.mag_x = offsets->mag_x;
    mag_offsets.mag_y = offsets->mag_y;
    mag_offsets.mag_z = offsets->mag_z;
}

Compass_Data_t* HMC5883L_GetCompassData(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    return &compass_data;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HMC5883L_GetCompassData+0x10>)
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	24000824 	.word	0x24000824
 80012bc:	00000000 	.word	0x00000000

080012c0 <ComputeHeading>:

static float ComputeHeading(HMC5883L_Data_t *mag_data, float declination) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	ed87 0a00 	vstr	s0, [r7]
    float heading = atan2f(-mag_data->mag_y, mag_data->mag_x) * RAD_TO_DEG;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d2:	eef1 7a67 	vneg.f32	s15, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	eef0 0a47 	vmov.f32	s1, s14
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f015 ffde 	bl	80172a4 <atan2f>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8001360 <ComputeHeading+0xa0>
 80012f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]
    heading += declination;
 8001300:	ed97 7a03 	vldr	s14, [r7, #12]
 8001304:	edd7 7a00 	vldr	s15, [r7]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (heading < 0.0f) heading += 360.0f;
 8001310:	edd7 7a03 	vldr	s15, [r7, #12]
 8001314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d507      	bpl.n	800132e <ComputeHeading+0x6e>
 800131e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001322:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001368 <ComputeHeading+0xa8>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132a:	edc7 7a03 	vstr	s15, [r7, #12]
    if (heading >= 360.0f) heading -= 360.0f;
 800132e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001332:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001368 <ComputeHeading+0xa8>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	db07      	blt.n	8001350 <ComputeHeading+0x90>
 8001340:	edd7 7a03 	vldr	s15, [r7, #12]
 8001344:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001368 <ComputeHeading+0xa8>
 8001348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800134c:	edc7 7a03 	vstr	s15, [r7, #12]
    return heading;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	ee07 3a90 	vmov	s15, r3
}
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	1a63c1f8 	.word	0x1a63c1f8
 8001364:	404ca5dc 	.word	0x404ca5dc
 8001368:	43b40000 	.word	0x43b40000

0800136c <HMC5883L_ProcessMagData>:


void HMC5883L_ProcessMagData(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b0a8      	sub	sp, #160	@ 0xa0
 8001370:	af00      	add	r7, sp, #0
    char msg[150];
    if (!dma_data_ready && !i2c_error && HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY) {
 8001372:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <HMC5883L_ProcessMagData+0x13c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10d      	bne.n	8001398 <HMC5883L_ProcessMagData+0x2c>
 800137c:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <HMC5883L_ProcessMagData+0x140>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HMC5883L_ProcessMagData+0x2c>
 8001386:	484a      	ldr	r0, [pc, #296]	@ (80014b0 <HMC5883L_ProcessMagData+0x144>)
 8001388:	f006 fbc1 	bl	8007b0e <HAL_I2C_GetState>
 800138c:	4603      	mov	r3, r0
 800138e:	2b20      	cmp	r3, #32
 8001390:	d102      	bne.n	8001398 <HMC5883L_ProcessMagData+0x2c>
        HMC5883L_ReadMag_DMA(&hmc_data);
 8001392:	4848      	ldr	r0, [pc, #288]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 8001394:	f7ff feba 	bl	800110c <HMC5883L_ReadMag_DMA>
    }
    if (dma_data_ready) {
 8001398:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <HMC5883L_ProcessMagData+0x13c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d033      	beq.n	800140a <HMC5883L_ProcessMagData+0x9e>
        dma_data_ready = 0;
 80013a2:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HMC5883L_ProcessMagData+0x13c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
        reset_attempts = 0; // Reset attempts on successful read
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
        hmc_data.mag_x -= mag_offsets.mag_x;
 80013ae:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <HMC5883L_ProcessMagData+0x150>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013c0:	edc3 7a00 	vstr	s15, [r3]
        hmc_data.mag_y -= mag_offsets.mag_y;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80013ca:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <HMC5883L_ProcessMagData+0x150>)
 80013cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013d6:	edc3 7a01 	vstr	s15, [r3, #4]
        hmc_data.mag_z -= mag_offsets.mag_z;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80013e0:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <HMC5883L_ProcessMagData+0x150>)
 80013e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013ec:	edc3 7a02 	vstr	s15, [r3, #8]
        compass_data.heading = ComputeHeading(&hmc_data, compass_data.declination);
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <HMC5883L_ProcessMagData+0x154>)
 80013f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	482e      	ldr	r0, [pc, #184]	@ (80014b4 <HMC5883L_ProcessMagData+0x148>)
 80013fc:	f7ff ff60 	bl	80012c0 <ComputeHeading>
 8001400:	eef0 7a40 	vmov.f32	s15, s0
 8001404:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <HMC5883L_ProcessMagData+0x154>)
 8001406:	edc3 7a00 	vstr	s15, [r3]
//        snprintf(msg, sizeof(msg), "Raw MX: %.2f, MY: %.2f, MZ: %.2f, Heading: %.2f deg\n",
//                 hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z, compass_data.heading);
    }
    if (i2c_error && reset_attempts < max_reset_attempts) {
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HMC5883L_ProcessMagData+0x140>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d034      	beq.n	800147e <HMC5883L_ProcessMagData+0x112>
 8001414:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2205      	movs	r2, #5
 800141a:	4293      	cmp	r3, r2
 800141c:	d22f      	bcs.n	800147e <HMC5883L_ProcessMagData+0x112>
        uint32_t current_time = HAL_GetTick();
 800141e:	f002 fa19 	bl	8003854 <HAL_GetTick>
 8001422:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        if (current_time - last_reset_time >= 1000) { // Wait 1s before retry
 8001426:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <HMC5883L_ProcessMagData+0x158>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001434:	d332      	bcc.n	800149c <HMC5883L_ProcessMagData+0x130>
            printf("I2C Error, resetting (%d/%d)...\n",
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	2205      	movs	r2, #5
 800143e:	4619      	mov	r1, r3
 8001440:	4821      	ldr	r0, [pc, #132]	@ (80014c8 <HMC5883L_ProcessMagData+0x15c>)
 8001442:	f013 ff69 	bl	8015318 <iprintf>
                     reset_attempts + 1, max_reset_attempts);
//            HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), 100);
            HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f002 fa10 	bl	800386c <HAL_Delay>
            HAL_I2C_MspDeInit(&hi2c1);
 800144c:	4818      	ldr	r0, [pc, #96]	@ (80014b0 <HMC5883L_ProcessMagData+0x144>)
 800144e:	f000 f95b 	bl	8001708 <HAL_I2C_MspDeInit>
            HAL_I2C_MspInit(&hi2c1);
 8001452:	4817      	ldr	r0, [pc, #92]	@ (80014b0 <HMC5883L_ProcessMagData+0x144>)
 8001454:	f000 f87c 	bl	8001550 <HAL_I2C_MspInit>
            HAL_I2C_Init(&hi2c1);
 8001458:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <HMC5883L_ProcessMagData+0x144>)
 800145a:	f005 fe9b 	bl	8007194 <HAL_I2C_Init>
            HMC5883L_Init(); // Reinitialize sensor
 800145e:	f7ff fe3b 	bl	80010d8 <HMC5883L_Init>
            i2c_error = 0;
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HMC5883L_ProcessMagData+0x140>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
            reset_attempts++;
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 8001472:	701a      	strb	r2, [r3, #0]
            last_reset_time = current_time;
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <HMC5883L_ProcessMagData+0x158>)
 8001476:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800147a:	6013      	str	r3, [r2, #0]
    if (i2c_error && reset_attempts < max_reset_attempts) {
 800147c:	e00e      	b.n	800149c <HMC5883L_ProcessMagData+0x130>
        }
    } else if (i2c_error && reset_attempts >= max_reset_attempts) {
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HMC5883L_ProcessMagData+0x140>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <HMC5883L_ProcessMagData+0x132>
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HMC5883L_ProcessMagData+0x14c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2205      	movs	r2, #5
 800148e:	4293      	cmp	r3, r2
 8001490:	d305      	bcc.n	800149e <HMC5883L_ProcessMagData+0x132>
        printf("Max I2C reset attempts reached, halting...\n");
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <HMC5883L_ProcessMagData+0x160>)
 8001494:	f013 ffa8 	bl	80153e8 <puts>
        while (1) {} // Halt execution
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HMC5883L_ProcessMagData+0x12c>
    if (i2c_error && reset_attempts < max_reset_attempts) {
 800149c:	bf00      	nop
    }
}
 800149e:	bf00      	nop
 80014a0:	37a0      	adds	r7, #160	@ 0xa0
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000814 	.word	0x24000814
 80014ac:	2400082c 	.word	0x2400082c
 80014b0:	24000838 	.word	0x24000838
 80014b4:	24000818 	.word	0x24000818
 80014b8:	24000834 	.word	0x24000834
 80014bc:	24000010 	.word	0x24000010
 80014c0:	24000824 	.word	0x24000824
 80014c4:	24000830 	.word	0x24000830
 80014c8:	08017710 	.word	0x08017710
 80014cc:	08017734 	.word	0x08017734

080014d0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f005 fe42 	bl	8007194 <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 fdc9 	bl	80020ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f008 faf7 	bl	8009b10 <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 fdc0 	bl	80020ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f008 fb39 	bl	8009ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 fdb7 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000838 	.word	0x24000838
 8001548:	40005400 	.word	0x40005400
 800154c:	00d049fb 	.word	0x00d049fb

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0b8      	sub	sp, #224	@ 0xe0
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22b8      	movs	r2, #184	@ 0xb8
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f014 f819 	bl	80155a8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5c      	ldr	r2, [pc, #368]	@ (80016ec <HAL_I2C_MspInit+0x19c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f040 80b1 	bne.w	80016e4 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001582:	f04f 0208 	mov.w	r2, #8
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4618      	mov	r0, r3
 800159a:	f00a f9c7 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80015a4:	f000 fd82 	bl	80020ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	4b51      	ldr	r3, [pc, #324]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ae:	4a50      	ldr	r2, [pc, #320]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b8:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ce:	2312      	movs	r3, #18
 80015d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e0:	2304      	movs	r3, #4
 80015e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015ea:	4619      	mov	r1, r3
 80015ec:	4841      	ldr	r0, [pc, #260]	@ (80016f4 <HAL_I2C_MspInit+0x1a4>)
 80015ee:	f005 faf3 	bl	8006bd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f2:	4b3f      	ldr	r3, [pc, #252]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f8:	4a3d      	ldr	r2, [pc, #244]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 80015fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <HAL_I2C_MspInit+0x1a0>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001612:	4a3a      	ldr	r2, [pc, #232]	@ (80016fc <HAL_I2C_MspInit+0x1ac>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001618:	2221      	movs	r2, #33	@ 0x21
 800161a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161c:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 800162a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800162e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001630:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001636:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001642:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001648:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800164e:	482a      	ldr	r0, [pc, #168]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001650:	f002 faba 	bl	8003bc8 <HAL_DMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800165a:	f000 fd27 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001662:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001664:	4a24      	ldr	r2, [pc, #144]	@ (80016f8 <HAL_I2C_MspInit+0x1a8>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800166a:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 800166c:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <HAL_I2C_MspInit+0x1b4>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 8001672:	2222      	movs	r2, #34	@ 0x22
 8001674:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 8001678:	2240      	movs	r2, #64	@ 0x40
 800167a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 8001684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016a8:	4815      	ldr	r0, [pc, #84]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 80016aa:	f002 fa8d 	bl	8003bc8 <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80016b4:	f000 fcfa 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a11      	ldr	r2, [pc, #68]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80016be:	4a10      	ldr	r2, [pc, #64]	@ (8001700 <HAL_I2C_MspInit+0x1b0>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2105      	movs	r1, #5
 80016c8:	201f      	movs	r0, #31
 80016ca:	f002 f9cf 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ce:	201f      	movs	r0, #31
 80016d0:	f002 f9e6 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2105      	movs	r1, #5
 80016d8:	2020      	movs	r0, #32
 80016da:	f002 f9c7 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016de:	2020      	movs	r0, #32
 80016e0:	f002 f9de 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016e4:	bf00      	nop
 80016e6:	37e0      	adds	r7, #224	@ 0xe0
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40005400 	.word	0x40005400
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58020400 	.word	0x58020400
 80016f8:	2400088c 	.word	0x2400088c
 80016fc:	40020010 	.word	0x40020010
 8001700:	24000904 	.word	0x24000904
 8001704:	40020028 	.word	0x40020028

08001708 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <HAL_I2C_MspDeInit+0x5c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d120      	bne.n	800175c <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_I2C_MspDeInit+0x60>)
 800171c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001720:	4a11      	ldr	r2, [pc, #68]	@ (8001768 <HAL_I2C_MspDeInit+0x60>)
 8001722:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001726:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	480f      	ldr	r0, [pc, #60]	@ (800176c <HAL_I2C_MspDeInit+0x64>)
 800172e:	f005 fbfb 	bl	8006f28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001736:	480d      	ldr	r0, [pc, #52]	@ (800176c <HAL_I2C_MspDeInit+0x64>)
 8001738:	f005 fbf6 	bl	8006f28 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fd99 	bl	8004278 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fd94 	bl	8004278 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001750:	201f      	movs	r0, #31
 8001752:	f002 f9b3 	bl	8003abc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001756:	2020      	movs	r0, #32
 8001758:	f002 f9b0 	bl	8003abc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40005400 	.word	0x40005400
 8001768:	58024400 	.word	0x58024400
 800176c:	58020400 	.word	0x58020400

08001770 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    HMC5883L_DMA_Complete_Callback(hi2c);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fd2f 	bl	80011dc <HMC5883L_DMA_Complete_Callback>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <CS_Low>:

// ====== FreeRTOS Semaphore for DMA ======
extern SemaphoreHandle_t spiDmaSem;   // declared in freertos.c

// ====== LOW LEVEL SPI FUNCTIONS ======
static void CS_Low(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001792:	4802      	ldr	r0, [pc, #8]	@ (800179c <CS_Low+0x14>)
 8001794:	f005 fcca 	bl	800712c <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58020000 	.word	0x58020000

080017a0 <CS_High>:
static void CS_High(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <CS_High+0x14>)
 80017ac:	f005 fcbe 	bl	800712c <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	58020000 	.word	0x58020000

080017b8 <HAL_SPI_TxRxCpltCallback>:

// ====== DMA Callback ======
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3) {    // check SPI3 DMA complete
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <HAL_SPI_TxRxCpltCallback+0x44>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d114      	bne.n	80017f4 <HAL_SPI_TxRxCpltCallback+0x3c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
        xSemaphoreGiveFromISR(spiDmaSem, &xHigherPriorityTaskWoken);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_SPI_TxRxCpltCallback+0x48>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f107 020c 	add.w	r2, r7, #12
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f010 fae7 	bl	8011dac <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_SPI_TxRxCpltCallback+0x3c>
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80017e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	f3bf 8f6f 	isb	sy
    }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40003c00 	.word	0x40003c00
 8001800:	240007e4 	.word	0x240007e4
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <SPI_RW>:

// ====== Single-Byte DMA Transfer with FreeRTOS Sync ======
static uint8_t SPI_RW(ICM42688P_HandleTypeDef *dev, uint8_t data) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    if (HAL_SPI_TransmitReceive_DMA(dev->hspi, &data, &rx, 1) != HAL_OK) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	f107 020f 	add.w	r2, r7, #15
 800181c:	1cf9      	adds	r1, r7, #3
 800181e:	2301      	movs	r3, #1
 8001820:	f00b fcac 	bl	800d17c <HAL_SPI_TransmitReceive_DMA>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SPI_RW+0x26>
        return 0xFF;
 800182a:	23ff      	movs	r3, #255	@ 0xff
 800182c:	e00b      	b.n	8001846 <SPI_RW+0x3e>
    }
    if (xSemaphoreTake(spiDmaSem, pdMS_TO_TICKS(10)) != pdTRUE) {
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <SPI_RW+0x48>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	210a      	movs	r1, #10
 8001834:	4618      	mov	r0, r3
 8001836:	f010 fc2b 	bl	8012090 <xQueueSemaphoreTake>
 800183a:	4603      	mov	r3, r0
 800183c:	2b01      	cmp	r3, #1
 800183e:	d001      	beq.n	8001844 <SPI_RW+0x3c>
        return 0xFF; // Timeout
 8001840:	23ff      	movs	r3, #255	@ 0xff
 8001842:	e000      	b.n	8001846 <SPI_RW+0x3e>
    }
    return rx;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	240007e4 	.word	0x240007e4

08001854 <ReadMulti>:

// ====== Multi-Byte DMA Read with FreeRTOS Sync ======
static void ReadMulti(ICM42688P_HandleTypeDef *dev, uint8_t reg, uint8_t *buf, uint16_t len) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
    CS_Low();
 8001868:	f7ff ff8e 	bl	8001788 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_READ);
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4619      	mov	r1, r3
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff ffc6 	bl	8001808 <SPI_RW>

    // Dummy TX buffer for receiving data
    static uint8_t dummy_tx[256];
    if (len > sizeof(dummy_tx)) len = sizeof(dummy_tx);
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001882:	d902      	bls.n	800188a <ReadMulti+0x36>
 8001884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001888:	813b      	strh	r3, [r7, #8]
    for (uint16_t i = 0; i < len; i++) dummy_tx[i] = 0xFF;
 800188a:	2300      	movs	r3, #0
 800188c:	82fb      	strh	r3, [r7, #22]
 800188e:	e006      	b.n	800189e <ReadMulti+0x4a>
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <ReadMulti+0x84>)
 8001894:	21ff      	movs	r1, #255	@ 0xff
 8001896:	54d1      	strb	r1, [r2, r3]
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	3301      	adds	r3, #1
 800189c:	82fb      	strh	r3, [r7, #22]
 800189e:	8afa      	ldrh	r2, [r7, #22]
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3f4      	bcc.n	8001890 <ReadMulti+0x3c>

    if (HAL_SPI_TransmitReceive_DMA(dev->hspi, dummy_tx, buf, len) != HAL_OK) {
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	490a      	ldr	r1, [pc, #40]	@ (80018d8 <ReadMulti+0x84>)
 80018b0:	f00b fc64 	bl	800d17c <HAL_SPI_TransmitReceive_DMA>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <ReadMulti+0x6c>
        CS_High();
 80018ba:	f7ff ff71 	bl	80017a0 <CS_High>
        return;
 80018be:	e007      	b.n	80018d0 <ReadMulti+0x7c>
    }

    xSemaphoreTake(spiDmaSem, pdMS_TO_TICKS(10));
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <ReadMulti+0x88>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	210a      	movs	r1, #10
 80018c6:	4618      	mov	r0, r3
 80018c8:	f010 fbe2 	bl	8012090 <xQueueSemaphoreTake>
    CS_High();
 80018cc:	f7ff ff68 	bl	80017a0 <CS_High>
}
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2400097c 	.word	0x2400097c
 80018dc:	240007e4 	.word	0x240007e4

080018e0 <WriteReg>:

// ====== Register Write ======
static void WriteReg(ICM42688P_HandleTypeDef *dev, uint8_t reg, uint8_t data) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
    CS_Low();
 80018f0:	f7ff ff4a 	bl	8001788 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_WRITE);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff85 	bl	8001808 <SPI_RW>
    SPI_RW(dev, data);
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff80 	bl	8001808 <SPI_RW>
    CS_High();
 8001908:	f7ff ff4a 	bl	80017a0 <CS_High>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <ReadReg>:

// ====== Register Read ======
static uint8_t ReadReg(ICM42688P_HandleTypeDef *dev, uint8_t reg) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
    CS_Low();
 8001920:	f7ff ff32 	bl	8001788 <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_READ);
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff6a 	bl	8001808 <SPI_RW>
    uint8_t val = SPI_RW(dev, 0xFF);
 8001934:	21ff      	movs	r1, #255	@ 0xff
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff66 	bl	8001808 <SPI_RW>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
    CS_High();
 8001940:	f7ff ff2e 	bl	80017a0 <CS_High>
    return val;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <SelectBank>:

// ====== Bank Select ======
static void SelectBank(ICM42688P_HandleTypeDef *dev, uint8_t bank) {
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
    WriteReg(dev, ICM42688P_REG_BANK_SEL, (bank & 0x07) << 4);
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	2176      	movs	r1, #118	@ 0x76
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb8 	bl	80018e0 <WriteReg>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <ICM42688P_DeviceReset>:

// ====== Device Reset ======
void ICM42688P_DeviceReset(ICM42688P_HandleTypeDef *dev) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    WriteReg(dev, ICM42688P_DEVICE_CONFIG, 0x01);
 8001980:	2201      	movs	r2, #1
 8001982:	2111      	movs	r1, #17
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffab 	bl	80018e0 <WriteReg>
    HAL_Delay(50);
 800198a:	2032      	movs	r0, #50	@ 0x32
 800198c:	f001 ff6e 	bl	800386c <HAL_Delay>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <ICM42688P_Init>:

// ====== Initialization ======
void ICM42688P_Init(ICM42688P_HandleTypeDef *dev, SPI_HandleTypeDef *hspi) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    dev->hspi = hspi;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	601a      	str	r2, [r3, #0]
    dev->accel_scale = 1.0f / 2048.0f;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 80019ae:	605a      	str	r2, [r3, #4]
    dev->gyro_scale  = 1.0f / 16.4f;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a23      	ldr	r2, [pc, #140]	@ (8001a40 <ICM42688P_Init+0xa8>)
 80019b4:	609a      	str	r2, [r3, #8]

    HAL_Delay(50);
 80019b6:	2032      	movs	r0, #50	@ 0x32
 80019b8:	f001 ff58 	bl	800386c <HAL_Delay>
    ICM42688P_DeviceReset(dev);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffdb 	bl	8001978 <ICM42688P_DeviceReset>
    SelectBank(dev, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffc2 	bl	800194e <SelectBank>

    uint8_t whoami = ReadReg(dev, ICM42688P_WHO_AM_I);
 80019ca:	2175      	movs	r1, #117	@ 0x75
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffa1 	bl	8001914 <ReadReg>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
    printf("WHO_AM_I=0x%02X\r\n", whoami);
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	4619      	mov	r1, r3
 80019da:	481a      	ldr	r0, [pc, #104]	@ (8001a44 <ICM42688P_Init+0xac>)
 80019dc:	f013 fc9c 	bl	8015318 <iprintf>
    if (whoami != ICM42688P_DEVICE_ID) {
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b47      	cmp	r3, #71	@ 0x47
 80019e4:	d004      	beq.n	80019f0 <ICM42688P_Init+0x58>
        printf("ICM42688P not found!\r\n");
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <ICM42688P_Init+0xb0>)
 80019e8:	f013 fcfe 	bl	80153e8 <puts>
        while (1);
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <ICM42688P_Init+0x54>
    }

    WriteReg(dev, ICM42688P_PWR_MGMT0, 0x0F);
 80019f0:	220f      	movs	r2, #15
 80019f2:	214e      	movs	r1, #78	@ 0x4e
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff73 	bl	80018e0 <WriteReg>
    HAL_Delay(10);
 80019fa:	200a      	movs	r0, #10
 80019fc:	f001 ff36 	bl	800386c <HAL_Delay>
    uint8_t pwr = ReadReg(dev, ICM42688P_PWR_MGMT0);
 8001a00:	214e      	movs	r1, #78	@ 0x4e
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff86 	bl	8001914 <ReadReg>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73bb      	strb	r3, [r7, #14]
    printf("PWR_MGMT0=0x%02X\r\n", pwr);
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <ICM42688P_Init+0xb4>)
 8001a12:	f013 fc81 	bl	8015318 <iprintf>

    WriteReg(dev, ICM42688P_GYRO_CONFIG0, 0x06);
 8001a16:	2206      	movs	r2, #6
 8001a18:	214f      	movs	r1, #79	@ 0x4f
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff60 	bl	80018e0 <WriteReg>
    WriteReg(dev, ICM42688P_ACCEL_CONFIG0, 0x06);
 8001a20:	2206      	movs	r2, #6
 8001a22:	2150      	movs	r1, #80	@ 0x50
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff5b 	bl	80018e0 <WriteReg>

    HAL_Delay(10);
 8001a2a:	200a      	movs	r0, #10
 8001a2c:	f001 ff1e 	bl	800386c <HAL_Delay>
    printf("ICM42688P Initialized Successfully\r\n");
 8001a30:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <ICM42688P_Init+0xb8>)
 8001a32:	f013 fcd9 	bl	80153e8 <puts>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	3d79c190 	.word	0x3d79c190
 8001a44:	08017760 	.word	0x08017760
 8001a48:	08017774 	.word	0x08017774
 8001a4c:	0801778c 	.word	0x0801778c
 8001a50:	080177a0 	.word	0x080177a0

08001a54 <ICM42688P_ReadData>:

// ====== Read Sensor Data ======
void ICM42688P_ReadData(ICM42688P_HandleTypeDef *dev, ICM42688P_Data_t *data) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    uint8_t buf[14];
    ReadMulti(dev, ICM42688P_TEMP_DATA1, buf, 14);
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	230e      	movs	r3, #14
 8001a64:	211d      	movs	r1, #29
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fef4 	bl	8001854 <ReadMulti>

    int16_t raw_temp  = (int16_t)((buf[0] << 8) | buf[1]);
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t raw_ax    = (int16_t)((buf[2] << 8) | buf[3]);
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t raw_ay    = (int16_t)((buf[4] << 8) | buf[5]);
 8001a8c:	7c3b      	ldrb	r3, [r7, #16]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	7c7b      	ldrb	r3, [r7, #17]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t raw_az    = (int16_t)((buf[6] << 8) | buf[7]);
 8001a9c:	7cbb      	ldrb	r3, [r7, #18]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	843b      	strh	r3, [r7, #32]
    int16_t raw_gx    = (int16_t)((buf[8] << 8) | buf[9]);
 8001aac:	7d3b      	ldrb	r3, [r7, #20]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	7d7b      	ldrb	r3, [r7, #21]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	83fb      	strh	r3, [r7, #30]
    int16_t raw_gy    = (int16_t)((buf[10] << 8) | buf[11]);
 8001abc:	7dbb      	ldrb	r3, [r7, #22]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	83bb      	strh	r3, [r7, #28]
    int16_t raw_gz    = (int16_t)((buf[12] << 8) | buf[13]);
 8001acc:	7e3b      	ldrb	r3, [r7, #24]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	7e7b      	ldrb	r3, [r7, #25]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	837b      	strh	r3, [r7, #26]

    data->temperature = ((float)raw_temp / 132.48f) + 25.0f;
 8001adc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001bb0 <ICM42688P_ReadData+0x15c>
 8001aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	edc3 7a06 	vstr	s15, [r3, #24]
    data->accel[0] = raw_ax * dev->accel_scale;
 8001afe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	edc3 7a00 	vstr	s15, [r3]
    data->accel[1] = raw_ay * dev->accel_scale;
 8001b1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel[2] = raw_az * dev->accel_scale;
 8001b36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	edc3 7a02 	vstr	s15, [r3, #8]
    data->gyro[0]  = raw_gx * dev->gyro_scale;
 8001b52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro[1]  = raw_gy * dev->gyro_scale;
 8001b6e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro[2]  = raw_gz * dev->gyro_scale;
 8001b8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	43047ae1 	.word	0x43047ae1

08001bb4 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d101      	bne.n	8001bcc <LL_USART_IsActiveFlag_FE+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_USART_IsActiveFlag_FE+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d101      	bne.n	8001bf2 <LL_USART_IsActiveFlag_ORE+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_USART_IsActiveFlag_ORE+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c10:	2b40      	cmp	r3, #64	@ 0x40
 8001c12:	d101      	bne.n	8001c18 <LL_USART_IsActiveFlag_TC+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_USART_IsActiveFlag_TC+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	2b80      	cmp	r3, #128	@ 0x80
 8001c38:	d101      	bne.n	8001c3e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	621a      	str	r2, [r3, #32]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2208      	movs	r2, #8
 8001c72:	621a      	str	r2, [r3, #32]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	e853 3f00 	ldrex	r3, [r3]
 8001c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f043 0320 	orr.w	r3, r3, #32
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	61ba      	str	r2, [r7, #24]
 8001ca2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca4:	6979      	ldr	r1, [r7, #20]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	e841 2300 	strex	r3, r2, [r1]
 8001cac:	613b      	str	r3, [r7, #16]
   return(result);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e9      	bne.n	8001c88 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e025      	b.n	8001d3e <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8001cf2:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <_write+0x80>)
 8001cf4:	f7ff ff71 	bl	8001bda <LL_USART_IsActiveFlag_ORE>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <_write+0x2a>
 8001cfe:	4818      	ldr	r0, [pc, #96]	@ (8001d60 <_write+0x80>)
 8001d00:	f7ff ff58 	bl	8001bb4 <LL_USART_IsActiveFlag_FE>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <_write+0x80>)
 8001d0c:	f7ff ffab 	bl	8001c66 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8001d10:	4813      	ldr	r0, [pc, #76]	@ (8001d60 <_write+0x80>)
 8001d12:	f7ff ff9b 	bl	8001c4c <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	e01c      	b.n	8001d56 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 8001d1c:	4810      	ldr	r0, [pc, #64]	@ (8001d60 <_write+0x80>)
 8001d1e:	f7ff ff82 	bl	8001c26 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0e4      	beq.n	8001cf2 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <_write+0x80>)
 8001d34:	f7ff ffc5 	bl	8001cc2 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbea      	blt.n	8001d1c <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8001d46:	bf00      	nop
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <_write+0x80>)
 8001d4a:	f7ff ff59 	bl	8001c00 <LL_USART_IsActiveFlag_TC>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f9      	beq.n	8001d48 <_write+0x68>
    return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40011400 	.word	0x40011400

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001d6a:	f000 f961 	bl	8002030 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6e:	f001 fd21 	bl	80037b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d72:	f000 f839 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d76:	f7ff f8dd 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d7a:	f7fe fecd 	bl	8000b18 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001d7e:	f001 fc4f 	bl	8003620 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001d82:	f000 fb63 	bl	800244c <MX_SPI3_Init>
  MX_I2C1_Init();
 8001d86:	f7ff fba3 	bl	80014d0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d8a:	f001 f96f 	bl	800306c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d8e:	f001 f8f7 	bl	8002f80 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 8001d92:	f000 f991 	bl	80020b8 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8001d96:	f000 fb03 	bl	80023a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  StartupTone();
 8001d9a:	f7fe fb87 	bl	80004ac <StartupTone>

  LL_USART_EnableIT_RXNE(USART6);
 8001d9e:	480f      	ldr	r0, [pc, #60]	@ (8001ddc <main+0x78>)
 8001da0:	f7ff ff6e 	bl	8001c80 <LL_USART_EnableIT_RXNE_RXFNE>

  HAL_Delay(500);
 8001da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001da8:	f001 fd60 	bl	800386c <HAL_Delay>

  /* === Initialize ICM42688P here === */
//  ICM42688P_Init(&icm, &hspi3);

  HMC5883L_Init();
 8001dac:	f7ff f994 	bl	80010d8 <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f7ff f973 	bl	800109c <HMC5883L_ReadReg>
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  printf("HMC5883L ID: %c\n", hmc_id);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4808      	ldr	r0, [pc, #32]	@ (8001de0 <main+0x7c>)
 8001dc0:	f013 faaa 	bl	8015318 <iprintf>

  WS2812_Init(&htim3);
 8001dc4:	4807      	ldr	r0, [pc, #28]	@ (8001de4 <main+0x80>)
 8001dc6:	f7fe fd3d 	bl	8000844 <WS2812_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001dca:	f00f fabb 	bl	8011344 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dce:	f7fe feeb 	bl	8000ba8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dd2:	f00f fadb 	bl	801138c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd6:	bf00      	nop
 8001dd8:	e7fd      	b.n	8001dd6 <main+0x72>
 8001dda:	bf00      	nop
 8001ddc:	40011400 	.word	0x40011400
 8001de0:	080177c4 	.word	0x080177c4
 8001de4:	24000d58 	.word	0x24000d58

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b09c      	sub	sp, #112	@ 0x70
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df2:	224c      	movs	r2, #76	@ 0x4c
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f013 fbd6 	bl	80155a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2220      	movs	r2, #32
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f013 fbd0 	bl	80155a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f008 fdc3 	bl	800a994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <SystemClock_Config+0xd8>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec0 <SystemClock_Config+0xd8>)
 8001e18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <SystemClock_Config+0xd8>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e2a:	bf00      	nop
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <SystemClock_Config+0xd8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e38:	d1f8      	bne.n	8001e2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e44:	2302      	movs	r3, #2
 8001e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001e50:	232c      	movs	r3, #44	@ 0x2c
 8001e52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e60:	230c      	movs	r3, #12
 8001e62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e70:	4618      	mov	r0, r3
 8001e72:	f008 fdc9 	bl	800aa08 <HAL_RCC_OscConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e7c:	f000 f916 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e80:	233f      	movs	r3, #63	@ 0x3f
 8001e82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	2303      	movs	r3, #3
 8001e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e90:	2340      	movs	r3, #64	@ 0x40
 8001e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e94:	2340      	movs	r3, #64	@ 0x40
 8001e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e9e:	2340      	movs	r3, #64	@ 0x40
 8001ea0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f009 f988 	bl	800b1bc <HAL_RCC_ClockConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001eb2:	f000 f8fb 	bl	80020ac <Error_Handler>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3770      	adds	r7, #112	@ 0x70
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	58024800 	.word	0x58024800

08001ec4 <run_imu>:
void send_task3(void)
{
	printf("Hello from Task3\r\n");
}

void run_imu(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af0c      	add	r7, sp, #48	@ 0x30

	if (!sensors_ready) return;
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <run_imu+0x88>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d038      	beq.n	8001f46 <run_imu+0x82>

    // Read sensor data directly
    ICM42688P_ReadData(&icm, &icmData);
 8001ed4:	491e      	ldr	r1, [pc, #120]	@ (8001f50 <run_imu+0x8c>)
 8001ed6:	481f      	ldr	r0, [pc, #124]	@ (8001f54 <run_imu+0x90>)
 8001ed8:	f7ff fdbc 	bl	8001a54 <ICM42688P_ReadData>

    // Print data (or send to other tasks / filters)
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
           icmData.accel[0], icmData.accel[1], icmData.accel[2],
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <run_imu+0x8c>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001ee2:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
           icmData.accel[0], icmData.accel[1], icmData.accel[2],
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <run_imu+0x8c>)
 8001ee8:	edd3 7a01 	vldr	s15, [r3, #4]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001eec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
           icmData.accel[0], icmData.accel[1], icmData.accel[2],
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <run_imu+0x8c>)
 8001ef2:	edd3 6a02 	vldr	s13, [r3, #8]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001ef6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
           icmData.gyro[0], icmData.gyro[1], icmData.gyro[2],
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <run_imu+0x8c>)
 8001efc:	edd3 5a03 	vldr	s11, [r3, #12]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001f00:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
           icmData.gyro[0], icmData.gyro[1], icmData.gyro[2],
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <run_imu+0x8c>)
 8001f06:	edd3 4a04 	vldr	s9, [r3, #16]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001f0a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
           icmData.gyro[0], icmData.gyro[1], icmData.gyro[2],
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <run_imu+0x8c>)
 8001f10:	edd3 3a05 	vldr	s7, [r3, #20]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001f14:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
           icmData.temperature);
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <run_imu+0x8c>)
 8001f1a:	edd3 2a06 	vldr	s5, [r3, #24]
    printf("Accel: %.2f %.2f %.2f | Gyro: %.2f %.2f %.2f | Temp: %.2f\r\n",
 8001f1e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001f22:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8001f26:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001f2a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001f2e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001f32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f36:	ed8d 7b00 	vstr	d7, [sp]
 8001f3a:	ec53 2b11 	vmov	r2, r3, d1
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <run_imu+0x94>)
 8001f40:	f013 f9ea 	bl	8015318 <iprintf>
 8001f44:	e000      	b.n	8001f48 <run_imu+0x84>
	if (!sensors_ready) return;
 8001f46:	bf00      	nop
}
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	24000aa4 	.word	0x24000aa4
 8001f50:	24000a88 	.word	0x24000a88
 8001f54:	24000a7c 	.word	0x24000a7c
 8001f58:	08017800 	.word	0x08017800

08001f5c <run_mag>:


void run_mag(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af06      	add	r7, sp, #24

	if (!sensors_ready) return;
 8001f62:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <run_mag+0x64>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d024      	beq.n	8001fb6 <run_mag+0x5a>

    HMC5883L_ProcessMagData();   // Reads raw data into hmc_data
 8001f6c:	f7ff f9fe 	bl	800136c <HMC5883L_ProcessMagData>
    Compass_Data_t *compass = HMC5883L_GetCompassData();
 8001f70:	f7ff f99a 	bl	80012a8 <HMC5883L_GetCompassData>
 8001f74:	6078      	str	r0, [r7, #4]

    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
           hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z,
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <run_mag+0x68>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
 8001f7c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
           hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z,
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <run_mag+0x68>)
 8001f82:	edd3 7a01 	vldr	s15, [r3, #4]
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
 8001f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
           hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z,
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <run_mag+0x68>)
 8001f8c:	edd3 6a02 	vldr	s13, [r3, #8]
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
 8001f90:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
           compass->heading);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	edd3 5a00 	vldr	s11, [r3]
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
 8001f9a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001f9e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001fa2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001fa6:	ed8d 7b00 	vstr	d7, [sp]
 8001faa:	ec53 2b14 	vmov	r2, r3, d4
 8001fae:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <run_mag+0x6c>)
 8001fb0:	f013 f9b2 	bl	8015318 <iprintf>
 8001fb4:	e000      	b.n	8001fb8 <run_mag+0x5c>
	if (!sensors_ready) return;
 8001fb6:	bf00      	nop
}
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	24000aa4 	.word	0x24000aa4
 8001fc4:	24000818 	.word	0x24000818
 8001fc8:	0801783c 	.word	0x0801783c

08001fcc <sensor_init>:

void sensor_init(void){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
    // === Initialize ICM42688P ===
	ICM42688P_Init(&icm, &hspi3);
 8001fd2:	4910      	ldr	r1, [pc, #64]	@ (8002014 <sensor_init+0x48>)
 8001fd4:	4810      	ldr	r0, [pc, #64]	@ (8002018 <sensor_init+0x4c>)
 8001fd6:	f7ff fcdf 	bl	8001998 <ICM42688P_Init>
	printf("ICM42688P initialization called.\r\n");
 8001fda:	4810      	ldr	r0, [pc, #64]	@ (800201c <sensor_init+0x50>)
 8001fdc:	f013 fa04 	bl	80153e8 <puts>

    // === Initialize HMC5883L ===
    HMC5883L_Init();
 8001fe0:	f7ff f87a 	bl	80010d8 <HMC5883L_Init>
    uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f7ff f859 	bl	800109c <HMC5883L_ReadReg>
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
    printf("HMC5883L ID: %c\r\n", hmc_id);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480b      	ldr	r0, [pc, #44]	@ (8002020 <sensor_init+0x54>)
 8001ff4:	f013 f990 	bl	8015318 <iprintf>

    WS2812_Init(&WS2812_TIMER);
 8001ff8:	480a      	ldr	r0, [pc, #40]	@ (8002024 <sensor_init+0x58>)
 8001ffa:	f7fe fc23 	bl	8000844 <WS2812_Init>

    printf("Sensor initialization complete. Deleting InitTask...\r\n");
 8001ffe:	480a      	ldr	r0, [pc, #40]	@ (8002028 <sensor_init+0x5c>)
 8002000:	f013 f9f2 	bl	80153e8 <puts>

    sensors_ready = 1;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <sensor_init+0x60>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	24000b8c 	.word	0x24000b8c
 8002018:	24000a7c 	.word	0x24000a7c
 800201c:	08017864 	.word	0x08017864
 8002020:	08017888 	.word	0x08017888
 8002024:	24000d58 	.word	0x24000d58
 8002028:	0801789c 	.word	0x0801789c
 800202c:	24000aa4 	.word	0x24000aa4

08002030 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002042:	f001 fd49 	bl	8003ad8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800204a:	2300      	movs	r3, #0
 800204c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002052:	231f      	movs	r3, #31
 8002054:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002056:	2387      	movs	r3, #135	@ 0x87
 8002058:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800205a:	2300      	movs	r3, #0
 800205c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800205e:	2300      	movs	r3, #0
 8002060:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002072:	463b      	mov	r3, r7
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fd67 	bl	8003b48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800207a:	2004      	movs	r0, #4
 800207c:	f001 fd44 	bl	8003b08 <HAL_MPU_Enable>

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800209a:	f001 fbc7 	bl	800382c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <Error_Handler+0x8>

080020b8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80020ce:	4b27      	ldr	r3, [pc, #156]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <MX_OCTOSPI1_Init+0xb8>)
 80020d2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80020e6:	4b21      	ldr	r3, [pc, #132]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020e8:	2220      	movs	r2, #32
 80020ea:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002106:	2201      	movs	r2, #1
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002112:	2200      	movs	r2, #0
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 800211e:	2208      	movs	r2, #8
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002124:	2200      	movs	r2, #0
 8002126:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 800212a:	2200      	movs	r2, #0
 800212c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800212e:	480f      	ldr	r0, [pc, #60]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002130:	f007 fd86 	bl	8009c40 <HAL_OSPI_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 800213a:	f7ff ffb7 	bl	80020ac <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002146:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800214a:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_OCTOSPI1_Init+0xb4>)
 8002156:	f007 fe3f 	bl	8009dd8 <HAL_OSPIM_Config>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8002160:	f7ff ffa4 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	24000aa8 	.word	0x24000aa8
 8002170:	52005000 	.word	0x52005000

08002174 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0bc      	sub	sp, #240	@ 0xf0
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	22b8      	movs	r2, #184	@ 0xb8
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f013 fa07 	bl	80155a8 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	@ (8002388 <HAL_OSPI_MspInit+0x214>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f040 80ec 	bne.w	800237e <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80021a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	4618      	mov	r0, r3
 80021bc:	f009 fbb6 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80021c6:	f7ff ff71 	bl	80020ac <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80021ca:	4b70      	ldr	r3, [pc, #448]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021d0:	4a6e      	ldr	r2, [pc, #440]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021d6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80021da:	4b6c      	ldr	r3, [pc, #432]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80021e8:	4b68      	ldr	r3, [pc, #416]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021ee:	4a67      	ldr	r2, [pc, #412]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80021f8:	4b64      	ldr	r3, [pc, #400]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 80021fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002206:	4b61      	ldr	r3, [pc, #388]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220c:	4a5f      	ldr	r2, [pc, #380]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002216:	4b5d      	ldr	r3, [pc, #372]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222a:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002234:	4b55      	ldr	r3, [pc, #340]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b52      	ldr	r3, [pc, #328]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002248:	4a50      	ldr	r2, [pc, #320]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002252:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002260:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002266:	4a49      	ldr	r2, [pc, #292]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002270:	4b46      	ldr	r3, [pc, #280]	@ (800238c <HAL_OSPI_MspInit+0x218>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800227e:	2304      	movs	r3, #4
 8002280:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002296:	2309      	movs	r3, #9
 8002298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022a0:	4619      	mov	r1, r3
 80022a2:	483b      	ldr	r0, [pc, #236]	@ (8002390 <HAL_OSPI_MspInit+0x21c>)
 80022a4:	f004 fc98 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022a8:	2308      	movs	r3, #8
 80022aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80022c0:	2309      	movs	r3, #9
 80022c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022ca:	4619      	mov	r1, r3
 80022cc:	4831      	ldr	r0, [pc, #196]	@ (8002394 <HAL_OSPI_MspInit+0x220>)
 80022ce:	f004 fc83 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80022ea:	2309      	movs	r3, #9
 80022ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022f4:	4619      	mov	r1, r3
 80022f6:	4828      	ldr	r0, [pc, #160]	@ (8002398 <HAL_OSPI_MspInit+0x224>)
 80022f8:	f004 fc6e 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022fc:	2308      	movs	r3, #8
 80022fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8002314:	230c      	movs	r3, #12
 8002316:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800231e:	4619      	mov	r1, r3
 8002320:	481d      	ldr	r0, [pc, #116]	@ (8002398 <HAL_OSPI_MspInit+0x224>)
 8002322:	f004 fc59 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002326:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800232a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8002340:	230b      	movs	r3, #11
 8002342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002346:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800234a:	4619      	mov	r1, r3
 800234c:	4810      	ldr	r0, [pc, #64]	@ (8002390 <HAL_OSPI_MspInit+0x21c>)
 800234e:	f004 fc43 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800236c:	2309      	movs	r3, #9
 800236e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <HAL_OSPI_MspInit+0x228>)
 800237a:	f004 fc2d 	bl	8006bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800237e:	bf00      	nop
 8002380:	37f0      	adds	r7, #240	@ 0xf0
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	52005000 	.word	0x52005000
 800238c:	58024400 	.word	0x58024400
 8002390:	58021000 	.word	0x58021000
 8002394:	58020800 	.word	0x58020800
 8002398:	58020000 	.word	0x58020000
 800239c:	58020c00 	.word	0x58020c00

080023a0 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023a6:	4a28      	ldr	r2, [pc, #160]	@ (8002448 <MX_SPI2_Init+0xa8>)
 80023a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023aa:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e4:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <MX_SPI2_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <MX_SPI2_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002410:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <MX_SPI2_Init+0xa4>)
 800241e:	2200      	movs	r2, #0
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002424:	2200      	movs	r2, #0
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <MX_SPI2_Init+0xa4>)
 800242a:	2200      	movs	r2, #0
 800242c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <MX_SPI2_Init+0xa4>)
 8002430:	f00a fd80 	bl	800cf34 <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800243a:	f7ff fe37 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	24000b04 	.word	0x24000b04
 8002448:	40003800 	.word	0x40003800

0800244c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002450:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002452:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <MX_SPI3_Init+0xac>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002458:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800245c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002466:	2207      	movs	r2, #7
 8002468:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800246a:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 800246c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002470:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002474:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002478:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 800247c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002480:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002482:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002484:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002488:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <MX_SPI3_Init+0xa8>)
 80024e2:	f00a fd27 	bl	800cf34 <HAL_SPI_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 80024ec:	f7ff fdde 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	24000b8c 	.word	0x24000b8c
 80024f8:	40003c00 	.word	0x40003c00

080024fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0bc      	sub	sp, #240	@ 0xf0
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	22b8      	movs	r2, #184	@ 0xb8
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f013 f843 	bl	80155a8 <memset>
  if(spiHandle->Instance==SPI2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a90      	ldr	r2, [pc, #576]	@ (8002768 <HAL_SPI_MspInit+0x26c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d16a      	bne.n	8002602 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800252c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002538:	2300      	movs	r3, #0
 800253a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f009 f9f3 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800254c:	f7ff fdae 	bl	80020ac <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002550:	4b86      	ldr	r3, [pc, #536]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002556:	4a85      	ldr	r2, [pc, #532]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002560:	4b82      	ldr	r3, [pc, #520]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	4b7f      	ldr	r3, [pc, #508]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002574:	4a7d      	ldr	r2, [pc, #500]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800257e:	4b7b      	ldr	r3, [pc, #492]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b77      	ldr	r3, [pc, #476]	@ (800276c <HAL_SPI_MspInit+0x270>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	4a76      	ldr	r2, [pc, #472]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259c:	4b73      	ldr	r3, [pc, #460]	@ (800276c <HAL_SPI_MspInit+0x270>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80025aa:	2306      	movs	r3, #6
 80025ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025c2:	2305      	movs	r3, #5
 80025c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025cc:	4619      	mov	r1, r3
 80025ce:	4868      	ldr	r0, [pc, #416]	@ (8002770 <HAL_SPI_MspInit+0x274>)
 80025d0:	f004 fb02 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025ee:	2305      	movs	r3, #5
 80025f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025f8:	4619      	mov	r1, r3
 80025fa:	485e      	ldr	r0, [pc, #376]	@ (8002774 <HAL_SPI_MspInit+0x278>)
 80025fc:	f004 faec 	bl	8006bd8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002600:	e0ad      	b.n	800275e <HAL_SPI_MspInit+0x262>
  else if(spiHandle->Instance==SPI3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	@ (8002778 <HAL_SPI_MspInit+0x27c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	f040 80a8 	bne.w	800275e <HAL_SPI_MspInit+0x262>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800260e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800261a:	2300      	movs	r3, #0
 800261c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	4618      	mov	r0, r3
 8002624:	f009 f982 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800262e:	f7ff fd3d 	bl	80020ac <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002632:	4b4e      	ldr	r3, [pc, #312]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002638:	4a4c      	ldr	r2, [pc, #304]	@ (800276c <HAL_SPI_MspInit+0x270>)
 800263a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800263e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002642:	4b4a      	ldr	r3, [pc, #296]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002650:	4b46      	ldr	r3, [pc, #280]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002656:	4a45      	ldr	r2, [pc, #276]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002660:	4b42      	ldr	r3, [pc, #264]	@ (800276c <HAL_SPI_MspInit+0x270>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800266e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002688:	2306      	movs	r3, #6
 800268a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002692:	4619      	mov	r1, r3
 8002694:	4836      	ldr	r0, [pc, #216]	@ (8002770 <HAL_SPI_MspInit+0x274>)
 8002696:	f004 fa9f 	bl	8006bd8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_SPI_MspInit+0x280>)
 800269c:	4a38      	ldr	r2, [pc, #224]	@ (8002780 <HAL_SPI_MspInit+0x284>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026a2:	223d      	movs	r2, #61	@ 0x3d
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b33      	ldr	r3, [pc, #204]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b32      	ldr	r3, [pc, #200]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b30      	ldr	r3, [pc, #192]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80026c6:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80026d8:	4828      	ldr	r0, [pc, #160]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026da:	f001 fa75 	bl	8003bc8 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_SPI_MspInit+0x1ec>
      Error_Handler();
 80026e4:	f7ff fce2 	bl	80020ac <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a24      	ldr	r2, [pc, #144]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80026ee:	4a23      	ldr	r2, [pc, #140]	@ (800277c <HAL_SPI_MspInit+0x280>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream3;
 80026f4:	4b23      	ldr	r3, [pc, #140]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 80026f6:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_SPI_MspInit+0x28c>)
 80026f8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80026fa:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 80026fc:	223e      	movs	r2, #62	@ 0x3e
 80026fe:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002700:	4b20      	ldr	r3, [pc, #128]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002706:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270c:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 800270e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002712:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002720:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272c:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002732:	4814      	ldr	r0, [pc, #80]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002734:	f001 fa48 	bl	8003bc8 <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 800273e:	f7ff fcb5 	bl	80020ac <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 8002746:	679a      	str	r2, [r3, #120]	@ 0x78
 8002748:	4a0e      	ldr	r2, [pc, #56]	@ (8002784 <HAL_SPI_MspInit+0x288>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2105      	movs	r1, #5
 8002752:	2033      	movs	r0, #51	@ 0x33
 8002754:	f001 f98a 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002758:	2033      	movs	r0, #51	@ 0x33
 800275a:	f001 f9a1 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	37f0      	adds	r7, #240	@ 0xf0
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40003800 	.word	0x40003800
 800276c:	58024400 	.word	0x58024400
 8002770:	58020800 	.word	0x58020800
 8002774:	58020400 	.word	0x58020400
 8002778:	40003c00 	.word	0x40003c00
 800277c:	24000c14 	.word	0x24000c14
 8002780:	40020040 	.word	0x40020040
 8002784:	24000c8c 	.word	0x24000c8c
 8002788:	40020058 	.word	0x40020058

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_MspInit+0x38>)
 8002794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002798:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <HAL_MspInit+0x38>)
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_MspInit+0x38>)
 80027a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	210f      	movs	r1, #15
 80027b4:	f06f 0001 	mvn.w	r0, #1
 80027b8:	f001 f958 	bl	8003a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	58024400 	.word	0x58024400

080027c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	@ 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d844      	bhi.n	8002860 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	2019      	movs	r0, #25
 80027dc:	f001 f946 	bl	8003a6c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027e0:	2019      	movs	r0, #25
 80027e2:	f001 f95d 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80027e6:	4a24      	ldr	r2, [pc, #144]	@ (8002878 <HAL_InitTick+0xb0>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_InitTick+0xb4>)
 80027ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f2:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_InitTick+0xb4>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_InitTick+0xb4>)
 80027fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800280a:	f107 020c 	add.w	r2, r7, #12
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f009 f847 	bl	800b8a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800281a:	f009 f82f 	bl	800b87c <HAL_RCC_GetPCLK2Freq>
 800281e:	4603      	mov	r3, r0
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002826:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <HAL_InitTick+0xb8>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9b      	lsrs	r3, r3, #18
 800282e:	3b01      	subs	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002832:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <HAL_InitTick+0xbc>)
 8002834:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <HAL_InitTick+0xc0>)
 8002836:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_InitTick+0xbc>)
 800283a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800283e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002840:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <HAL_InitTick+0xbc>)
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002846:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_InitTick+0xbc>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_InitTick+0xbc>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002852:	480c      	ldr	r0, [pc, #48]	@ (8002884 <HAL_InitTick+0xbc>)
 8002854:	f00b f973 	bl	800db3e <HAL_TIM_Base_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <HAL_InitTick+0xa6>
 800285e:	e001      	b.n	8002864 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e005      	b.n	8002870 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002864:	4807      	ldr	r0, [pc, #28]	@ (8002884 <HAL_InitTick+0xbc>)
 8002866:	f00b fa67 	bl	800dd38 <HAL_TIM_Base_Start_IT>
 800286a:	4603      	mov	r3, r0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3738      	adds	r7, #56	@ 0x38
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	24000024 	.word	0x24000024
 800287c:	58024400 	.word	0x58024400
 8002880:	431bde83 	.word	0x431bde83
 8002884:	24000d04 	.word	0x24000d04
 8002888:	40010000 	.word	0x40010000

0800288c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d101      	bne.n	80028a4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_USART_ReceiveData8>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <NMI_Handler+0x4>

080028d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <MemManage_Handler+0x4>

080028e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <DMA1_Stream0_IRQHandler+0x10>)
 800290a:	f002 fe39 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2400088c 	.word	0x2400088c

08002918 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <DMA1_Stream1_IRQHandler+0x10>)
 800291e:	f002 fe2f 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	24000904 	.word	0x24000904

0800292c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <DMA1_Stream2_IRQHandler+0x10>)
 8002932:	f002 fe25 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	24000c14 	.word	0x24000c14

08002940 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <DMA1_Stream3_IRQHandler+0x10>)
 8002946:	f002 fe1b 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	24000c8c 	.word	0x24000c8c

08002954 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <DMA1_Stream4_IRQHandler+0x10>)
 800295a:	f002 fe11 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24000da4 	.word	0x24000da4

08002968 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <DMA1_Stream5_IRQHandler+0x10>)
 800296e:	f002 fe07 	bl	8005580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000e1c 	.word	0x24000e1c

0800297c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <TIM1_UP_IRQHandler+0x10>)
 8002982:	f00b fded 	bl	800e560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000d04 	.word	0x24000d04

08002990 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <TIM3_IRQHandler+0x10>)
 8002996:	f00b fde3 	bl	800e560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000d58 	.word	0x24000d58

080029a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <I2C1_EV_IRQHandler+0x10>)
 80029aa:	f004 ffd7 	bl	800795c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000838 	.word	0x24000838

080029b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <I2C1_ER_IRQHandler+0x10>)
 80029be:	f004 ffe7 	bl	8007990 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	24000838 	.word	0x24000838

080029cc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <SPI3_IRQHandler+0x10>)
 80029d2:	f00a fd8b 	bl	800d4ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	24000b8c 	.word	0x24000b8c

080029e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART6))
 80029e4:	4808      	ldr	r0, [pc, #32]	@ (8002a08 <USART6_IRQHandler+0x28>)
 80029e6:	f7ff ff51 	bl	800288c <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <USART6_IRQHandler+0x24>
			{
	//			LL_USART_ClearFlag_RXNE(USART6);
				uart6_rx_data = LL_USART_ReceiveData8(USART6);
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <USART6_IRQHandler+0x28>)
 80029f2:	f7ff ff5e 	bl	80028b2 <LL_USART_ReceiveData8>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <USART6_IRQHandler+0x2c>)
 80029fc:	701a      	strb	r2, [r3, #0]
				uart6_rx_flag = 1;
 80029fe:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <USART6_IRQHandler+0x30>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	24000d51 	.word	0x24000d51
 8002a10:	24000d50 	.word	0x24000d50

08002a14 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    // --- WS2812 Handling ---
    if (htim->Instance == WS2812_TIMER.Instance) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d122      	bne.n	8002a6e <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002a28:	2104      	movs	r1, #4
 8002a2a:	4817      	ldr	r0, [pc, #92]	@ (8002a88 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002a2c:	f00b fca0 	bl	800e370 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002a30:	4815      	ldr	r0, [pc, #84]	@ (8002a88 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002a32:	f00b f959 	bl	800dce8 <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 8002a36:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

        if (ws2812_dma_semaphore != NULL) {
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(ws2812_dma_semaphore, &xHigherPriorityTaskWoken);
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f00f f9aa 	bl	8011dac <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	f3bf 8f6f 	isb	sy
        }
    }

    // --- Aircraft Lights Handling ---
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d102      	bne.n	8002a80 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>
        AircraftLights_PWM_Callback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd fea8 	bl	80007d0 <AircraftLights_PWM_Callback>
    }
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	24000d58 	.word	0x24000d58
 8002a8c:	240006b4 	.word	0x240006b4
 8002a90:	240007e8 	.word	0x240007e8
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_kill>:

int _kill(int pid, int sig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab2:	f012 fe29 	bl	8015708 <__errno>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2216      	movs	r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_exit>:

void _exit (int status)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffe7 	bl	8002aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ada:	bf00      	nop
 8002adc:	e7fd      	b.n	8002ada <_exit+0x12>

08002ade <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e00a      	b.n	8002b06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002af0:	f3af 8000 	nop.w
 8002af4:	4601      	mov	r1, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	60ba      	str	r2, [r7, #8]
 8002afc:	b2ca      	uxtb	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbf0      	blt.n	8002af0 <_read+0x12>
  }

  return len;
 8002b0e:	687b      	ldr	r3, [r7, #4]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b40:	605a      	str	r2, [r3, #4]
  return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <_isatty>:

int _isatty(int file)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b58:	2301      	movs	r3, #1
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f012 fdaa 	bl	8015708 <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	24050000 	.word	0x24050000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	24000d54 	.word	0x24000d54
 8002be8:	240059d0 	.word	0x240059d0

08002bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cec <SystemInit+0x100>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	4a3d      	ldr	r2, [pc, #244]	@ (8002cec <SystemInit+0x100>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c00:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <SystemInit+0x104>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d807      	bhi.n	8002c1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c0c:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <SystemInit+0x104>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 030f 	bic.w	r3, r3, #15
 8002c14:	4a36      	ldr	r2, [pc, #216]	@ (8002cf0 <SystemInit+0x104>)
 8002c16:	f043 0307 	orr.w	r3, r3, #7
 8002c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c1c:	4b35      	ldr	r3, [pc, #212]	@ (8002cf4 <SystemInit+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a34      	ldr	r2, [pc, #208]	@ (8002cf4 <SystemInit+0x108>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <SystemInit+0x108>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <SystemInit+0x108>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4930      	ldr	r1, [pc, #192]	@ (8002cf4 <SystemInit+0x108>)
 8002c34:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <SystemInit+0x10c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <SystemInit+0x104>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c46:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf0 <SystemInit+0x104>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 030f 	bic.w	r3, r3, #15
 8002c4e:	4a28      	ldr	r2, [pc, #160]	@ (8002cf0 <SystemInit+0x104>)
 8002c50:	f043 0307 	orr.w	r3, r3, #7
 8002c54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c56:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <SystemInit+0x108>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <SystemInit+0x108>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <SystemInit+0x108>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <SystemInit+0x108>)
 8002c6a:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <SystemInit+0x110>)
 8002c6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <SystemInit+0x108>)
 8002c70:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <SystemInit+0x114>)
 8002c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <SystemInit+0x108>)
 8002c76:	4a23      	ldr	r2, [pc, #140]	@ (8002d04 <SystemInit+0x118>)
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <SystemInit+0x108>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c80:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <SystemInit+0x108>)
 8002c82:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <SystemInit+0x118>)
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <SystemInit+0x108>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <SystemInit+0x108>)
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <SystemInit+0x118>)
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <SystemInit+0x108>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <SystemInit+0x108>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	@ (8002cf4 <SystemInit+0x108>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <SystemInit+0x108>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <SystemInit+0x108>)
 8002cac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d113      	bne.n	8002ce0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <SystemInit+0x108>)
 8002cba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <SystemInit+0x108>)
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <SystemInit+0x11c>)
 8002cca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002cce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002cd0:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <SystemInit+0x108>)
 8002cd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002cd6:	4a07      	ldr	r2, [pc, #28]	@ (8002cf4 <SystemInit+0x108>)
 8002cd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cdc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	52002000 	.word	0x52002000
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cfc:	02020200 	.word	0x02020200
 8002d00:	01ff0000 	.word	0x01ff0000
 8002d04:	01010280 	.word	0x01010280
 8002d08:	52004000 	.word	0x52004000

08002d0c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <ExitRun0Mode+0x2c>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <ExitRun0Mode+0x2c>)
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002d1c:	bf00      	nop
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <ExitRun0Mode+0x2c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f9      	beq.n	8002d1e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	58024800 	.word	0x58024800

08002d3c <LL_TIM_EnableARRPreload>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d028      	beq.n	8002dbe <LL_TIM_OC_EnableFast+0x62>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d023      	beq.n	8002dba <LL_TIM_OC_EnableFast+0x5e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d01e      	beq.n	8002db6 <LL_TIM_OC_EnableFast+0x5a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b40      	cmp	r3, #64	@ 0x40
 8002d7c:	d019      	beq.n	8002db2 <LL_TIM_OC_EnableFast+0x56>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d84:	d013      	beq.n	8002dae <LL_TIM_OC_EnableFast+0x52>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8c:	d00d      	beq.n	8002daa <LL_TIM_OC_EnableFast+0x4e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d94:	d007      	beq.n	8002da6 <LL_TIM_OC_EnableFast+0x4a>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9c:	d101      	bne.n	8002da2 <LL_TIM_OC_EnableFast+0x46>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e00e      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002da2:	2308      	movs	r3, #8
 8002da4:	e00c      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002da6:	2306      	movs	r3, #6
 8002da8:	e00a      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002daa:	2305      	movs	r3, #5
 8002dac:	e008      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e006      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002db2:	2303      	movs	r3, #3
 8002db4:	e004      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_TIM_OC_EnableFast+0x64>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <LL_TIM_OC_EnableFast+0x98>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	440b      	add	r3, r1
 8002dd0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4907      	ldr	r1, [pc, #28]	@ (8002df8 <LL_TIM_OC_EnableFast+0x9c>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2304      	movs	r3, #4
 8002de0:	408b      	lsls	r3, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	601a      	str	r2, [r3, #0]

}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	080179f8 	.word	0x080179f8
 8002df8:	08017a04 	.word	0x08017a04

08002dfc <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d028      	beq.n	8002e5e <LL_TIM_OC_EnablePreload+0x62>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d023      	beq.n	8002e5a <LL_TIM_OC_EnablePreload+0x5e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d01e      	beq.n	8002e56 <LL_TIM_OC_EnablePreload+0x5a>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	d019      	beq.n	8002e52 <LL_TIM_OC_EnablePreload+0x56>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e24:	d013      	beq.n	8002e4e <LL_TIM_OC_EnablePreload+0x52>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2c:	d00d      	beq.n	8002e4a <LL_TIM_OC_EnablePreload+0x4e>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e34:	d007      	beq.n	8002e46 <LL_TIM_OC_EnablePreload+0x4a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e3c:	d101      	bne.n	8002e42 <LL_TIM_OC_EnablePreload+0x46>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e00e      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e42:	2308      	movs	r3, #8
 8002e44:	e00c      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00a      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	e008      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e006      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e004      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_TIM_OC_EnablePreload+0x64>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3318      	adds	r3, #24
 8002e66:	4619      	mov	r1, r3
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <LL_TIM_OC_EnablePreload+0x98>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	440b      	add	r3, r1
 8002e70:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	4907      	ldr	r1, [pc, #28]	@ (8002e98 <LL_TIM_OC_EnablePreload+0x9c>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2308      	movs	r3, #8
 8002e80:	408b      	lsls	r3, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	080179f8 	.word	0x080179f8
 8002e98:	08017a04 	.word	0x08017a04

08002e9c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <LL_TIM_SetClockSource+0x28>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	fffebff8 	.word	0xfffebff8

08002ec8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	605a      	str	r2, [r3, #4]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <LL_AHB4_GRP1_EnableClock+0x34>)
 8002f1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002f1e:	4909      	ldr	r1, [pc, #36]	@ (8002f44 <LL_AHB4_GRP1_EnableClock+0x34>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <LL_AHB4_GRP1_EnableClock+0x34>)
 8002f2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	58024400 	.word	0x58024400

08002f48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <LL_APB1_GRP1_EnableClock+0x34>)
 8002f52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002f56:	4909      	ldr	r1, [pc, #36]	@ (8002f7c <LL_APB1_GRP1_EnableClock+0x34>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <LL_APB1_GRP1_EnableClock+0x34>)
 8002f62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	58024400 	.word	0x58024400

08002f80 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim3_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b094      	sub	sp, #80	@ 0x50
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002f86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f012 fb02 	bl	80155a8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff ffc7 	bl	8002f48 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 8002fba:	f240 2322 	movw	r3, #546	@ 0x222
 8002fbe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 8002fc4:	23f9      	movs	r3, #249	@ 0xf9
 8002fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002fcc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002fd6:	f00d fc55 	bl	8010884 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8002fda:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002fde:	f7ff fead 	bl	8002d3c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002fe8:	f7ff ff58 	bl	8002e9c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002fec:	2101      	movs	r1, #1
 8002fee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002ff2:	f7ff ff03 	bl	8002dfc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ff6:	2360      	movs	r3, #96	@ 0x60
 8002ff8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	461a      	mov	r2, r3
 8003010:	2101      	movs	r1, #1
 8003012:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003016:	f00d fcd5 	bl	80109c4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800301a:	2101      	movs	r1, #1
 800301c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003020:	f7ff fe9c 	bl	8002d5c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003024:	2100      	movs	r1, #0
 8003026:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800302a:	f7ff ff4d 	bl	8002ec8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800302e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003032:	f7ff ff5c 	bl	8002eee <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8003036:	2001      	movs	r0, #1
 8003038:	f7ff ff6a 	bl	8002f10 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800303c:	2320      	movs	r3, #32
 800303e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003040:	2302      	movs	r3, #2
 8003042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003050:	2301      	movs	r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4803      	ldr	r0, [pc, #12]	@ (8003068 <MX_TIM2_Init+0xe8>)
 800305a:	f00c fc73 	bl	800f944 <LL_GPIO_Init>

}
 800305e:	bf00      	nop
 8003060:	3750      	adds	r7, #80	@ 0x50
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58020000 	.word	0x58020000

0800306c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08e      	sub	sp, #56	@ 0x38
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800308c:	463b      	mov	r3, r7
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	615a      	str	r2, [r3, #20]
 800309c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800309e:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030a0:	4a32      	ldr	r2, [pc, #200]	@ (800316c <MX_TIM3_Init+0x100>)
 80030a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030a4:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030b2:	f240 1257 	movw	r2, #343	@ 0x157
 80030b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030be:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030c4:	4828      	ldr	r0, [pc, #160]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030c6:	f00a fd3a 	bl	800db3e <HAL_TIM_Base_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80030d0:	f7fe ffec 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030de:	4619      	mov	r1, r3
 80030e0:	4821      	ldr	r0, [pc, #132]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030e2:	f00b fc59 	bl	800e998 <HAL_TIM_ConfigClockSource>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80030ec:	f7fe ffde 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030f0:	481d      	ldr	r0, [pc, #116]	@ (8003168 <MX_TIM3_Init+0xfc>)
 80030f2:	f00a fea7 	bl	800de44 <HAL_TIM_PWM_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80030fc:	f7fe ffd6 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	4619      	mov	r1, r3
 800310e:	4816      	ldr	r0, [pc, #88]	@ (8003168 <MX_TIM3_Init+0xfc>)
 8003110:	f00c fa84 	bl	800f61c <HAL_TIMEx_MasterConfigSynchronization>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800311a:	f7fe ffc7 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800311e:	2360      	movs	r3, #96	@ 0x60
 8003120:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800312e:	463b      	mov	r3, r7
 8003130:	2204      	movs	r2, #4
 8003132:	4619      	mov	r1, r3
 8003134:	480c      	ldr	r0, [pc, #48]	@ (8003168 <MX_TIM3_Init+0xfc>)
 8003136:	f00b fb1b 	bl	800e770 <HAL_TIM_PWM_ConfigChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003140:	f7fe ffb4 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003144:	463b      	mov	r3, r7
 8003146:	2208      	movs	r2, #8
 8003148:	4619      	mov	r1, r3
 800314a:	4807      	ldr	r0, [pc, #28]	@ (8003168 <MX_TIM3_Init+0xfc>)
 800314c:	f00b fb10 	bl	800e770 <HAL_TIM_PWM_ConfigChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003156:	f7fe ffa9 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800315a:	4803      	ldr	r0, [pc, #12]	@ (8003168 <MX_TIM3_Init+0xfc>)
 800315c:	f000 f896 	bl	800328c <HAL_TIM_MspPostInit>

}
 8003160:	bf00      	nop
 8003162:	3738      	adds	r7, #56	@ 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	24000d58 	.word	0x24000d58
 800316c:	40000400 	.word	0x40000400

08003170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a3d      	ldr	r2, [pc, #244]	@ (8003274 <HAL_TIM_Base_MspInit+0x104>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d174      	bne.n	800326c <HAL_TIM_Base_MspInit+0xfc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003182:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <HAL_TIM_Base_MspInit+0x108>)
 8003184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003188:	4a3b      	ldr	r2, [pc, #236]	@ (8003278 <HAL_TIM_Base_MspInit+0x108>)
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003192:	4b39      	ldr	r3, [pc, #228]	@ (8003278 <HAL_TIM_Base_MspInit+0x108>)
 8003194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream4;
 80031a0:	4b36      	ldr	r3, [pc, #216]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031a2:	4a37      	ldr	r2, [pc, #220]	@ (8003280 <HAL_TIM_Base_MspInit+0x110>)
 80031a4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80031a6:	4b35      	ldr	r3, [pc, #212]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031a8:	2218      	movs	r2, #24
 80031aa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ac:	4b33      	ldr	r3, [pc, #204]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b2:	4b32      	ldr	r3, [pc, #200]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80031b8:	4b30      	ldr	r3, [pc, #192]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031be:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031c0:	4b2e      	ldr	r3, [pc, #184]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031c6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031c8:	4b2c      	ldr	r3, [pc, #176]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031ce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80031d0:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80031d6:	4b29      	ldr	r3, [pc, #164]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031dc:	4b27      	ldr	r3, [pc, #156]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80031e2:	4826      	ldr	r0, [pc, #152]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031e4:	f000 fcf0 	bl	8003bc8 <HAL_DMA_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80031ee:	f7fe ff5d 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a21      	ldr	r2, [pc, #132]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80031f8:	4a20      	ldr	r2, [pc, #128]	@ (800327c <HAL_TIM_Base_MspInit+0x10c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream5;
 80031fe:	4b21      	ldr	r3, [pc, #132]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003200:	4a21      	ldr	r2, [pc, #132]	@ (8003288 <HAL_TIM_Base_MspInit+0x118>)
 8003202:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8003204:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003206:	2219      	movs	r2, #25
 8003208:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320a:	4b1e      	ldr	r3, [pc, #120]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 800320c:	2240      	movs	r2, #64	@ 0x40
 800320e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003210:	4b1c      	ldr	r3, [pc, #112]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003216:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800321c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800321e:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003220:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003224:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003226:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003228:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800322c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003230:	2200      	movs	r2, #0
 8003232:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003236:	2200      	movs	r2, #0
 8003238:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 800323c:	2200      	movs	r2, #0
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003240:	4810      	ldr	r0, [pc, #64]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003242:	f000 fcc1 	bl	8003bc8 <HAL_DMA_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_MspInit+0xe0>
    {
      Error_Handler();
 800324c:	f7fe ff2e 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003254:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003256:	4a0b      	ldr	r2, [pc, #44]	@ (8003284 <HAL_TIM_Base_MspInit+0x114>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800325c:	2200      	movs	r2, #0
 800325e:	2105      	movs	r1, #5
 8003260:	201d      	movs	r0, #29
 8003262:	f000 fc03 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003266:	201d      	movs	r0, #29
 8003268:	f000 fc1a 	bl	8003aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40000400 	.word	0x40000400
 8003278:	58024400 	.word	0x58024400
 800327c:	24000da4 	.word	0x24000da4
 8003280:	40020070 	.word	0x40020070
 8003284:	24000e1c 	.word	0x24000e1c
 8003288:	40020088 	.word	0x40020088

0800328c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	@ (8003334 <HAL_TIM_MspPostInit+0xa8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d13d      	bne.n	800332a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b4:	4a20      	ldr	r2, [pc, #128]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d2:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032dc:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <HAL_TIM_MspPostInit+0xac>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032fa:	2302      	movs	r3, #2
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	480d      	ldr	r0, [pc, #52]	@ (800333c <HAL_TIM_MspPostInit+0xb0>)
 8003306:	f003 fc67 	bl	8006bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800331a:	2302      	movs	r3, #2
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4806      	ldr	r0, [pc, #24]	@ (8003340 <HAL_TIM_MspPostInit+0xb4>)
 8003326:	f003 fc57 	bl	8006bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	@ 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40000400 	.word	0x40000400
 8003338:	58024400 	.word	0x58024400
 800333c:	58020000 	.word	0x58020000
 8003340:	58020400 	.word	0x58020400

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	@ (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	@ (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	@ (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_USART_Enable>:
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_USART_DisableFIFO>:
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_USART_SetTXFIFOThreshold>:
{
 8003496:	b480      	push	{r7}
 8003498:	b089      	sub	sp, #36	@ 0x24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3308      	adds	r3, #8
 80034a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	075b      	lsls	r3, r3, #29
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3308      	adds	r3, #8
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	61ba      	str	r2, [r7, #24]
 80034c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	613b      	str	r3, [r7, #16]
   return(result);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e4      	bne.n	80034a0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3724      	adds	r7, #36	@ 0x24
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_USART_SetRXFIFOThreshold>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3308      	adds	r3, #8
 80034f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	065b      	lsls	r3, r3, #25
 8003506:	4313      	orrs	r3, r2
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3308      	adds	r3, #8
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	61ba      	str	r2, [r7, #24]
 8003512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	613b      	str	r3, [r7, #16]
   return(result);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e4      	bne.n	80034ee <LL_USART_SetRXFIFOThreshold+0xa>
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3724      	adds	r7, #36	@ 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_USART_ConfigAsyncMode>:
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_USART_IsActiveFlag_TEACK>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003572:	d101      	bne.n	8003578 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <LL_USART_IsActiveFlag_TEACK+0x1c>
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_USART_IsActiveFlag_REACK>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800359a:	d101      	bne.n	80035a0 <LL_USART_IsActiveFlag_REACK+0x1a>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <LL_USART_IsActiveFlag_REACK+0x1c>
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <LL_AHB4_GRP1_EnableClock>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80035ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80035be:	4909      	ldr	r1, [pc, #36]	@ (80035e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80035ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	58024400 	.word	0x58024400

080035e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <LL_APB2_GRP1_EnableClock+0x34>)
 80035f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80035f6:	4909      	ldr	r1, [pc, #36]	@ (800361c <LL_APB2_GRP1_EnableClock+0x34>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <LL_APB2_GRP1_EnableClock+0x34>)
 8003602:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400

08003620 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0bc      	sub	sp, #240	@ 0xf0
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003626:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800362a:	2220      	movs	r2, #32
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f011 ffba 	bl	80155a8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
 8003644:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003646:	463b      	mov	r3, r7
 8003648:	22b8      	movs	r2, #184	@ 0xb8
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f011 ffab 	bl	80155a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003652:	f04f 0201 	mov.w	r2, #1
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800365e:	2300      	movs	r3, #0
 8003660:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003662:	463b      	mov	r3, r7
 8003664:	4618      	mov	r0, r3
 8003666:	f008 f961 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8003670:	f7fe fd1c 	bl	80020ac <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003674:	2020      	movs	r0, #32
 8003676:	f7ff ffb7 	bl	80035e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 800367a:	2004      	movs	r0, #4
 800367c:	f7ff ff98 	bl	80035b0 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003680:	23c0      	movs	r3, #192	@ 0xc0
 8003682:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003686:	2302      	movs	r3, #2
 8003688:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800369e:	2307      	movs	r3, #7
 80036a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80036a8:	4619      	mov	r1, r3
 80036aa:	482a      	ldr	r0, [pc, #168]	@ (8003754 <MX_USART6_UART_Init+0x134>)
 80036ac:	f00c f94a 	bl	800f944 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80036b0:	f7ff fe48 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2200      	movs	r2, #0
 80036b8:	2105      	movs	r1, #5
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fe98 	bl	80033f0 <NVIC_EncodePriority>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4619      	mov	r1, r3
 80036c4:	2047      	movs	r0, #71	@ 0x47
 80036c6:	f7ff fe69 	bl	800339c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80036ca:	2047      	movs	r0, #71	@ 0x47
 80036cc:	f7ff fe48 	bl	8003360 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 80036d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80036da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80036f0:	230c      	movs	r3, #12
 80036f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 8003702:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003706:	4619      	mov	r1, r3
 8003708:	4813      	ldr	r0, [pc, #76]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 800370a:	f00d fd15 	bl	8011138 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800370e:	2100      	movs	r1, #0
 8003710:	4811      	ldr	r0, [pc, #68]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 8003712:	f7ff fec0 	bl	8003496 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8003716:	2100      	movs	r1, #0
 8003718:	480f      	ldr	r0, [pc, #60]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 800371a:	f7ff fee3 	bl	80034e4 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 800371e:	480e      	ldr	r0, [pc, #56]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 8003720:	f7ff fea9 	bl	8003476 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8003724:	480c      	ldr	r0, [pc, #48]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 8003726:	f7ff ff04 	bl	8003532 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 800372a:	480b      	ldr	r0, [pc, #44]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 800372c:	f7ff fe93 	bl	8003456 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8003730:	bf00      	nop
 8003732:	4809      	ldr	r0, [pc, #36]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 8003734:	f7ff ff13 	bl	800355e <LL_USART_IsActiveFlag_TEACK>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f9      	beq.n	8003732 <MX_USART6_UART_Init+0x112>
 800373e:	4806      	ldr	r0, [pc, #24]	@ (8003758 <MX_USART6_UART_Init+0x138>)
 8003740:	f7ff ff21 	bl	8003586 <LL_USART_IsActiveFlag_REACK>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f3      	beq.n	8003732 <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	37f0      	adds	r7, #240	@ 0xf0
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58020800 	.word	0x58020800
 8003758:	40011400 	.word	0x40011400

0800375c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800375c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003798 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003760:	f7ff fad4 	bl	8002d0c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003764:	f7ff fa42 	bl	8002bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	@ (800379c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	@ (80037a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	@ (80037ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800378e:	f011 ffc1 	bl	8015714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003792:	f7fe fae7 	bl	8001d64 <main>
  bx  lr
 8003796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003798:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800379c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037a0:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80037a4:	08017e14 	.word	0x08017e14
  ldr r2, =_sbss
 80037a8:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80037ac:	240059cc 	.word	0x240059cc

080037b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC3_IRQHandler>
	...

080037b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ba:	2003      	movs	r0, #3
 80037bc:	f000 f94b 	bl	8003a56 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037c0:	f007 feb2 	bl	800b528 <HAL_RCC_GetSysClockFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_Init+0x68>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	4913      	ldr	r1, [pc, #76]	@ (8003820 <HAL_Init+0x6c>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <HAL_Init+0x68>)
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003820 <HAL_Init+0x6c>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003824 <HAL_Init+0x70>)
 80037f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <HAL_Init+0x74>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037fe:	200f      	movs	r0, #15
 8003800:	f7fe ffe2 	bl	80027c8 <HAL_InitTick>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e002      	b.n	8003814 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800380e:	f7fe ffbd 	bl	800278c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	58024400 	.word	0x58024400
 8003820:	080179e8 	.word	0x080179e8
 8003824:	24000020 	.word	0x24000020
 8003828:	2400001c 	.word	0x2400001c

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	24000028 	.word	0x24000028
 8003850:	24000e94 	.word	0x24000e94

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	24000e94 	.word	0x24000e94

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	24000028 	.word	0x24000028

080038b4 <__NVIC_SetPriorityGrouping>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <__NVIC_SetPriorityGrouping+0x40>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <__NVIC_SetPriorityGrouping+0x40>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00
 80038f8:	05fa0000 	.word	0x05fa0000

080038fc <__NVIC_GetPriorityGrouping>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <__NVIC_GetPriorityGrouping+0x18>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0307 	and.w	r3, r3, #7
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_EnableIRQ>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	db0b      	blt.n	8003942 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	4907      	ldr	r1, [pc, #28]	@ (8003950 <__NVIC_EnableIRQ+0x38>)
 8003932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	2001      	movs	r0, #1
 800393a:	fa00 f202 	lsl.w	r2, r0, r2
 800393e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e100 	.word	0xe000e100

08003954 <__NVIC_DisableIRQ>:
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db12      	blt.n	800398c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	490a      	ldr	r1, [pc, #40]	@ (8003998 <__NVIC_DisableIRQ+0x44>)
 800396e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	3320      	adds	r3, #32
 800397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003980:	f3bf 8f4f 	dsb	sy
}
 8003984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003986:	f3bf 8f6f 	isb	sy
}
 800398a:	bf00      	nop
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	@ (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff28 	bl	80038b4 <__NVIC_SetPriorityGrouping>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7a:	f7ff ff3f 	bl	80038fc <__NVIC_GetPriorityGrouping>
 8003a7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f7ff ffb3 	bl	80039f0 <NVIC_EncodePriority>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff82 	bl	800399c <__NVIC_SetPriority>
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff32 	bl	8003918 <__NVIC_EnableIRQ>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff42 	bl	8003954 <__NVIC_DisableIRQ>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003adc:	f3bf 8f5f 	dmb	sy
}
 8003ae0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <HAL_MPU_Disable+0x28>)
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	4a06      	ldr	r2, [pc, #24]	@ (8003b00 <HAL_MPU_Disable+0x28>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_MPU_Disable+0x2c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000ed00 	.word	0xe000ed00
 8003b04:	e000ed90 	.word	0xe000ed90

08003b08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003b10:	4a0b      	ldr	r2, [pc, #44]	@ (8003b40 <HAL_MPU_Enable+0x38>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_MPU_Enable+0x3c>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	4a09      	ldr	r2, [pc, #36]	@ (8003b44 <HAL_MPU_Enable+0x3c>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b26:	f3bf 8f4f 	dsb	sy
}
 8003b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b2c:	f3bf 8f6f 	isb	sy
}
 8003b30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed90 	.word	0xe000ed90
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	785a      	ldrb	r2, [r3, #1]
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003b58:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003b64:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7b1b      	ldrb	r3, [r3, #12]
 8003b70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7adb      	ldrb	r3, [r3, #11]
 8003b76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7a9b      	ldrb	r3, [r3, #10]
 8003b7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7b5b      	ldrb	r3, [r3, #13]
 8003b86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7b9b      	ldrb	r3, [r3, #14]
 8003b8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7bdb      	ldrb	r3, [r3, #15]
 8003b96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7a5b      	ldrb	r3, [r3, #9]
 8003b9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7a1b      	ldrb	r3, [r3, #8]
 8003ba6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ba8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bb0:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bb2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bb4:	6113      	str	r3, [r2, #16]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000ed90 	.word	0xe000ed90

08003bc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff fe40 	bl	8003854 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e312      	b.n	8004206 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a66      	ldr	r2, [pc, #408]	@ (8003d80 <HAL_DMA_Init+0x1b8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d04a      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a65      	ldr	r2, [pc, #404]	@ (8003d84 <HAL_DMA_Init+0x1bc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d045      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a63      	ldr	r2, [pc, #396]	@ (8003d88 <HAL_DMA_Init+0x1c0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d040      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a62      	ldr	r2, [pc, #392]	@ (8003d8c <HAL_DMA_Init+0x1c4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d03b      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a60      	ldr	r2, [pc, #384]	@ (8003d90 <HAL_DMA_Init+0x1c8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d036      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5f      	ldr	r2, [pc, #380]	@ (8003d94 <HAL_DMA_Init+0x1cc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d031      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5d      	ldr	r2, [pc, #372]	@ (8003d98 <HAL_DMA_Init+0x1d0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02c      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003d9c <HAL_DMA_Init+0x1d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d027      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5a      	ldr	r2, [pc, #360]	@ (8003da0 <HAL_DMA_Init+0x1d8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a59      	ldr	r2, [pc, #356]	@ (8003da4 <HAL_DMA_Init+0x1dc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a57      	ldr	r2, [pc, #348]	@ (8003da8 <HAL_DMA_Init+0x1e0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <HAL_DMA_Init+0x1e4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a54      	ldr	r2, [pc, #336]	@ (8003db0 <HAL_DMA_Init+0x1e8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a53      	ldr	r2, [pc, #332]	@ (8003db4 <HAL_DMA_Init+0x1ec>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a51      	ldr	r2, [pc, #324]	@ (8003db8 <HAL_DMA_Init+0x1f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_Init+0xb8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a50      	ldr	r2, [pc, #320]	@ (8003dbc <HAL_DMA_Init+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA_Init+0xbc>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_Init+0xbe>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 813c 	beq.w	8003f04 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a37      	ldr	r2, [pc, #220]	@ (8003d80 <HAL_DMA_Init+0x1b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04a      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a36      	ldr	r2, [pc, #216]	@ (8003d84 <HAL_DMA_Init+0x1bc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d045      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a34      	ldr	r2, [pc, #208]	@ (8003d88 <HAL_DMA_Init+0x1c0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d040      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a33      	ldr	r2, [pc, #204]	@ (8003d8c <HAL_DMA_Init+0x1c4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d03b      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	@ (8003d90 <HAL_DMA_Init+0x1c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d036      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a30      	ldr	r2, [pc, #192]	@ (8003d94 <HAL_DMA_Init+0x1cc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d031      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <HAL_DMA_Init+0x1d0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02c      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d9c <HAL_DMA_Init+0x1d4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d027      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8003da0 <HAL_DMA_Init+0x1d8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8003da4 <HAL_DMA_Init+0x1dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d01d      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a28      	ldr	r2, [pc, #160]	@ (8003da8 <HAL_DMA_Init+0x1e0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a27      	ldr	r2, [pc, #156]	@ (8003dac <HAL_DMA_Init+0x1e4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a25      	ldr	r2, [pc, #148]	@ (8003db0 <HAL_DMA_Init+0x1e8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <HAL_DMA_Init+0x1ec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <HAL_DMA_Init+0x1f0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_DMA_Init+0x174>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a21      	ldr	r2, [pc, #132]	@ (8003dbc <HAL_DMA_Init+0x1f4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d108      	bne.n	8003d4e <HAL_DMA_Init+0x186>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e007      	b.n	8003d5e <HAL_DMA_Init+0x196>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d5e:	e02f      	b.n	8003dc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d60:	f7ff fd78 	bl	8003854 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d928      	bls.n	8003dc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2203      	movs	r2, #3
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e242      	b.n	8004206 <HAL_DMA_Init+0x63e>
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1c8      	bne.n	8003d60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4b83      	ldr	r3, [pc, #524]	@ (8003fe8 <HAL_DMA_Init+0x420>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003de6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b28      	cmp	r3, #40	@ 0x28
 8003e2a:	d903      	bls.n	8003e34 <HAL_DMA_Init+0x26c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e32:	d91f      	bls.n	8003e74 <HAL_DMA_Init+0x2ac>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e3a:	d903      	bls.n	8003e44 <HAL_DMA_Init+0x27c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b42      	cmp	r3, #66	@ 0x42
 8003e42:	d917      	bls.n	8003e74 <HAL_DMA_Init+0x2ac>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b46      	cmp	r3, #70	@ 0x46
 8003e4a:	d903      	bls.n	8003e54 <HAL_DMA_Init+0x28c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b48      	cmp	r3, #72	@ 0x48
 8003e52:	d90f      	bls.n	8003e74 <HAL_DMA_Init+0x2ac>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e5a:	d903      	bls.n	8003e64 <HAL_DMA_Init+0x29c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b52      	cmp	r3, #82	@ 0x52
 8003e62:	d907      	bls.n	8003e74 <HAL_DMA_Init+0x2ac>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b73      	cmp	r3, #115	@ 0x73
 8003e6a:	d905      	bls.n	8003e78 <HAL_DMA_Init+0x2b0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b77      	cmp	r3, #119	@ 0x77
 8003e72:	d801      	bhi.n	8003e78 <HAL_DMA_Init+0x2b0>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_DMA_Init+0x2b2>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e84:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d117      	bne.n	8003ee0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f002 fcfe 	bl	80068c4 <DMA_CheckFifoParam>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e192      	b.n	8004206 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f002 fc39 	bl	8006760 <DMA_CalcBaseAndBitshift>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	223f      	movs	r2, #63	@ 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	e0c8      	b.n	8004096 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a38      	ldr	r2, [pc, #224]	@ (8003fec <HAL_DMA_Init+0x424>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <HAL_DMA_Init+0x428>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d01d      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ff4 <HAL_DMA_Init+0x42c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a34      	ldr	r2, [pc, #208]	@ (8003ff8 <HAL_DMA_Init+0x430>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a32      	ldr	r2, [pc, #200]	@ (8003ffc <HAL_DMA_Init+0x434>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a31      	ldr	r2, [pc, #196]	@ (8004000 <HAL_DMA_Init+0x438>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2f      	ldr	r2, [pc, #188]	@ (8004004 <HAL_DMA_Init+0x43c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Init+0x38c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004008 <HAL_DMA_Init+0x440>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Init+0x390>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_Init+0x392>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8092 	beq.w	8004084 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_DMA_Init+0x424>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d021      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <HAL_DMA_Init+0x428>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01c      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_DMA_Init+0x42c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d017      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <HAL_DMA_Init+0x430>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d012      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <HAL_DMA_Init+0x434>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	@ (8004000 <HAL_DMA_Init+0x438>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	@ (8004004 <HAL_DMA_Init+0x43c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <HAL_DMA_Init+0x3e6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a17      	ldr	r2, [pc, #92]	@ (8004008 <HAL_DMA_Init+0x440>)
 8003fac:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_DMA_Init+0x444>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d01c      	beq.n	8004010 <HAL_DMA_Init+0x448>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b80      	cmp	r3, #128	@ 0x80
 8003fdc:	d102      	bne.n	8003fe4 <HAL_DMA_Init+0x41c>
 8003fde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fe2:	e016      	b.n	8004012 <HAL_DMA_Init+0x44a>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e014      	b.n	8004012 <HAL_DMA_Init+0x44a>
 8003fe8:	fe10803f 	.word	0xfe10803f
 8003fec:	58025408 	.word	0x58025408
 8003ff0:	5802541c 	.word	0x5802541c
 8003ff4:	58025430 	.word	0x58025430
 8003ff8:	58025444 	.word	0x58025444
 8003ffc:	58025458 	.word	0x58025458
 8004000:	5802546c 	.word	0x5802546c
 8004004:	58025480 	.word	0x58025480
 8004008:	58025494 	.word	0x58025494
 800400c:	fffe000f 	.word	0xfffe000f
 8004010:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004040:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	4b6e      	ldr	r3, [pc, #440]	@ (8004210 <HAL_DMA_Init+0x648>)
 8004058:	4413      	add	r3, r2
 800405a:	4a6e      	ldr	r2, [pc, #440]	@ (8004214 <HAL_DMA_Init+0x64c>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	009a      	lsls	r2, r3, #2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f002 fb79 	bl	8006760 <DMA_CalcBaseAndBitshift>
 800406e:	4603      	mov	r3, r0
 8004070:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2201      	movs	r2, #1
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e008      	b.n	8004096 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2240      	movs	r2, #64	@ 0x40
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0b7      	b.n	8004206 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5f      	ldr	r2, [pc, #380]	@ (8004218 <HAL_DMA_Init+0x650>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d072      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5d      	ldr	r2, [pc, #372]	@ (800421c <HAL_DMA_Init+0x654>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d06d      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004220 <HAL_DMA_Init+0x658>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d068      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004224 <HAL_DMA_Init+0x65c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d063      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a59      	ldr	r2, [pc, #356]	@ (8004228 <HAL_DMA_Init+0x660>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d05e      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a57      	ldr	r2, [pc, #348]	@ (800422c <HAL_DMA_Init+0x664>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d059      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a56      	ldr	r2, [pc, #344]	@ (8004230 <HAL_DMA_Init+0x668>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d054      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a54      	ldr	r2, [pc, #336]	@ (8004234 <HAL_DMA_Init+0x66c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d04f      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a53      	ldr	r2, [pc, #332]	@ (8004238 <HAL_DMA_Init+0x670>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d04a      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a51      	ldr	r2, [pc, #324]	@ (800423c <HAL_DMA_Init+0x674>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d045      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a50      	ldr	r2, [pc, #320]	@ (8004240 <HAL_DMA_Init+0x678>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d040      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a4e      	ldr	r2, [pc, #312]	@ (8004244 <HAL_DMA_Init+0x67c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d03b      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a4d      	ldr	r2, [pc, #308]	@ (8004248 <HAL_DMA_Init+0x680>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d036      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a4b      	ldr	r2, [pc, #300]	@ (800424c <HAL_DMA_Init+0x684>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d031      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a4a      	ldr	r2, [pc, #296]	@ (8004250 <HAL_DMA_Init+0x688>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d02c      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a48      	ldr	r2, [pc, #288]	@ (8004254 <HAL_DMA_Init+0x68c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d027      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a47      	ldr	r2, [pc, #284]	@ (8004258 <HAL_DMA_Init+0x690>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a45      	ldr	r2, [pc, #276]	@ (800425c <HAL_DMA_Init+0x694>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a44      	ldr	r2, [pc, #272]	@ (8004260 <HAL_DMA_Init+0x698>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a42      	ldr	r2, [pc, #264]	@ (8004264 <HAL_DMA_Init+0x69c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a41      	ldr	r2, [pc, #260]	@ (8004268 <HAL_DMA_Init+0x6a0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3f      	ldr	r2, [pc, #252]	@ (800426c <HAL_DMA_Init+0x6a4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3e      	ldr	r2, [pc, #248]	@ (8004270 <HAL_DMA_Init+0x6a8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_DMA_Init+0x5be>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3c      	ldr	r2, [pc, #240]	@ (8004274 <HAL_DMA_Init+0x6ac>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_DMA_Init+0x5c2>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_DMA_Init+0x5c4>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d032      	beq.n	80041f6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f002 fc13 	bl	80069bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b80      	cmp	r3, #128	@ 0x80
 800419c:	d102      	bne.n	80041a4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_DMA_Init+0x61c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d80c      	bhi.n	80041e4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f002 fc90 	bl	8006af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e008      	b.n	80041f6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	a7fdabf8 	.word	0xa7fdabf8
 8004214:	cccccccd 	.word	0xcccccccd
 8004218:	40020010 	.word	0x40020010
 800421c:	40020028 	.word	0x40020028
 8004220:	40020040 	.word	0x40020040
 8004224:	40020058 	.word	0x40020058
 8004228:	40020070 	.word	0x40020070
 800422c:	40020088 	.word	0x40020088
 8004230:	400200a0 	.word	0x400200a0
 8004234:	400200b8 	.word	0x400200b8
 8004238:	40020410 	.word	0x40020410
 800423c:	40020428 	.word	0x40020428
 8004240:	40020440 	.word	0x40020440
 8004244:	40020458 	.word	0x40020458
 8004248:	40020470 	.word	0x40020470
 800424c:	40020488 	.word	0x40020488
 8004250:	400204a0 	.word	0x400204a0
 8004254:	400204b8 	.word	0x400204b8
 8004258:	58025408 	.word	0x58025408
 800425c:	5802541c 	.word	0x5802541c
 8004260:	58025430 	.word	0x58025430
 8004264:	58025444 	.word	0x58025444
 8004268:	58025458 	.word	0x58025458
 800426c:	5802546c 	.word	0x5802546c
 8004270:	58025480 	.word	0x58025480
 8004274:	58025494 	.word	0x58025494

08004278 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e1a8      	b.n	80045dc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a82      	ldr	r2, [pc, #520]	@ (8004498 <HAL_DMA_DeInit+0x220>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a80      	ldr	r2, [pc, #512]	@ (800449c <HAL_DMA_DeInit+0x224>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7f      	ldr	r2, [pc, #508]	@ (80044a0 <HAL_DMA_DeInit+0x228>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7d      	ldr	r2, [pc, #500]	@ (80044a4 <HAL_DMA_DeInit+0x22c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7c      	ldr	r2, [pc, #496]	@ (80044a8 <HAL_DMA_DeInit+0x230>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a7a      	ldr	r2, [pc, #488]	@ (80044ac <HAL_DMA_DeInit+0x234>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a79      	ldr	r2, [pc, #484]	@ (80044b0 <HAL_DMA_DeInit+0x238>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a77      	ldr	r2, [pc, #476]	@ (80044b4 <HAL_DMA_DeInit+0x23c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a76      	ldr	r2, [pc, #472]	@ (80044b8 <HAL_DMA_DeInit+0x240>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a74      	ldr	r2, [pc, #464]	@ (80044bc <HAL_DMA_DeInit+0x244>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a73      	ldr	r2, [pc, #460]	@ (80044c0 <HAL_DMA_DeInit+0x248>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a71      	ldr	r2, [pc, #452]	@ (80044c4 <HAL_DMA_DeInit+0x24c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a70      	ldr	r2, [pc, #448]	@ (80044c8 <HAL_DMA_DeInit+0x250>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	@ (80044cc <HAL_DMA_DeInit+0x254>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6d      	ldr	r2, [pc, #436]	@ (80044d0 <HAL_DMA_DeInit+0x258>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_DMA_DeInit+0xb2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6b      	ldr	r2, [pc, #428]	@ (80044d4 <HAL_DMA_DeInit+0x25c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <HAL_DMA_DeInit+0xc4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e007      	b.n	800434c <HAL_DMA_DeInit+0xd4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a51      	ldr	r2, [pc, #324]	@ (8004498 <HAL_DMA_DeInit+0x220>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d04a      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a50      	ldr	r2, [pc, #320]	@ (800449c <HAL_DMA_DeInit+0x224>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d045      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a4e      	ldr	r2, [pc, #312]	@ (80044a0 <HAL_DMA_DeInit+0x228>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d040      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a4d      	ldr	r2, [pc, #308]	@ (80044a4 <HAL_DMA_DeInit+0x22c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d03b      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4b      	ldr	r2, [pc, #300]	@ (80044a8 <HAL_DMA_DeInit+0x230>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d036      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a4a      	ldr	r2, [pc, #296]	@ (80044ac <HAL_DMA_DeInit+0x234>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d031      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a48      	ldr	r2, [pc, #288]	@ (80044b0 <HAL_DMA_DeInit+0x238>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02c      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a47      	ldr	r2, [pc, #284]	@ (80044b4 <HAL_DMA_DeInit+0x23c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d027      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a45      	ldr	r2, [pc, #276]	@ (80044b8 <HAL_DMA_DeInit+0x240>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a44      	ldr	r2, [pc, #272]	@ (80044bc <HAL_DMA_DeInit+0x244>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d01d      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a42      	ldr	r2, [pc, #264]	@ (80044c0 <HAL_DMA_DeInit+0x248>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a41      	ldr	r2, [pc, #260]	@ (80044c4 <HAL_DMA_DeInit+0x24c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_DMA_DeInit+0x250>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3e      	ldr	r2, [pc, #248]	@ (80044cc <HAL_DMA_DeInit+0x254>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3c      	ldr	r2, [pc, #240]	@ (80044d0 <HAL_DMA_DeInit+0x258>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_DeInit+0x174>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3b      	ldr	r2, [pc, #236]	@ (80044d4 <HAL_DMA_DeInit+0x25c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_DeInit+0x178>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_DeInit+0x17a>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d025      	beq.n	8004442 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2221      	movs	r2, #33	@ 0x21
 8004424:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f002 f99a 	bl	8006760 <DMA_CalcBaseAndBitshift>
 800442c:	4603      	mov	r3, r0
 800442e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	223f      	movs	r2, #63	@ 0x3f
 800443a:	409a      	lsls	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e081      	b.n	8004546 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <HAL_DMA_DeInit+0x260>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	@ (80044dc <HAL_DMA_DeInit+0x264>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <HAL_DMA_DeInit+0x268>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <HAL_DMA_DeInit+0x26c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_DMA_DeInit+0x270>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <HAL_DMA_DeInit+0x274>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_DMA_DeInit+0x278>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_DMA_DeInit+0x21a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_DMA_DeInit+0x27c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d132      	bne.n	80044f8 <HAL_DMA_DeInit+0x280>
 8004492:	2301      	movs	r3, #1
 8004494:	e031      	b.n	80044fa <HAL_DMA_DeInit+0x282>
 8004496:	bf00      	nop
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d021      	beq.n	8004542 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f002 f91a 	bl	8006760 <DMA_CalcBaseAndBitshift>
 800452c:	4603      	mov	r3, r0
 800452e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	e001      	b.n	8004546 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e04a      	b.n	80045dc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fa38 	bl	80069bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004564:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00f      	beq.n	800458e <HAL_DMA_DeInit+0x316>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d80b      	bhi.n	800458e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f002 faba 	bl	8006af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800458c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e226      	b.n	8004a4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_DMA_Start_IT+0x2a>
 800460a:	2302      	movs	r3, #2
 800460c:	e21f      	b.n	8004a4e <HAL_DMA_Start_IT+0x46a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	f040 820a 	bne.w	8004a38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_DMA_Start_IT+0x1f4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a66      	ldr	r2, [pc, #408]	@ (80047dc <HAL_DMA_Start_IT+0x1f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a65      	ldr	r2, [pc, #404]	@ (80047e0 <HAL_DMA_Start_IT+0x1fc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a63      	ldr	r2, [pc, #396]	@ (80047e4 <HAL_DMA_Start_IT+0x200>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a62      	ldr	r2, [pc, #392]	@ (80047e8 <HAL_DMA_Start_IT+0x204>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a60      	ldr	r2, [pc, #384]	@ (80047ec <HAL_DMA_Start_IT+0x208>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5f      	ldr	r2, [pc, #380]	@ (80047f0 <HAL_DMA_Start_IT+0x20c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5d      	ldr	r2, [pc, #372]	@ (80047f4 <HAL_DMA_Start_IT+0x210>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a5c      	ldr	r2, [pc, #368]	@ (80047f8 <HAL_DMA_Start_IT+0x214>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5a      	ldr	r2, [pc, #360]	@ (80047fc <HAL_DMA_Start_IT+0x218>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a59      	ldr	r2, [pc, #356]	@ (8004800 <HAL_DMA_Start_IT+0x21c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a57      	ldr	r2, [pc, #348]	@ (8004804 <HAL_DMA_Start_IT+0x220>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a56      	ldr	r2, [pc, #344]	@ (8004808 <HAL_DMA_Start_IT+0x224>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a54      	ldr	r2, [pc, #336]	@ (800480c <HAL_DMA_Start_IT+0x228>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a53      	ldr	r2, [pc, #332]	@ (8004810 <HAL_DMA_Start_IT+0x22c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_Start_IT+0xee>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a51      	ldr	r2, [pc, #324]	@ (8004814 <HAL_DMA_Start_IT+0x230>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_DMA_Start_IT+0x100>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e007      	b.n	80046f4 <HAL_DMA_Start_IT+0x110>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f001 fe84 	bl	8006408 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	@ (80047d8 <HAL_DMA_Start_IT+0x1f4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04a      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <HAL_DMA_Start_IT+0x1f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d045      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a31      	ldr	r2, [pc, #196]	@ (80047e0 <HAL_DMA_Start_IT+0x1fc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d040      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a30      	ldr	r2, [pc, #192]	@ (80047e4 <HAL_DMA_Start_IT+0x200>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d03b      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <HAL_DMA_Start_IT+0x204>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d036      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2d      	ldr	r2, [pc, #180]	@ (80047ec <HAL_DMA_Start_IT+0x208>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d031      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <HAL_DMA_Start_IT+0x20c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02c      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_DMA_Start_IT+0x210>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d027      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <HAL_DMA_Start_IT+0x214>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <HAL_DMA_Start_IT+0x218>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d01d      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <HAL_DMA_Start_IT+0x21c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <HAL_DMA_Start_IT+0x220>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_DMA_Start_IT+0x224>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_DMA_Start_IT+0x228>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_DMA_Start_IT+0x22c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_DMA_Start_IT+0x1bc>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_DMA_Start_IT+0x230>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_DMA_Start_IT+0x1c0>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_DMA_Start_IT+0x1c2>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d036      	beq.n	8004818 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 021e 	bic.w	r2, r3, #30
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0216 	orr.w	r2, r2, #22
 80047bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03e      	beq.n	8004844 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0208 	orr.w	r2, r2, #8
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e035      	b.n	8004844 <HAL_DMA_Start_IT+0x260>
 80047d8:	40020010 	.word	0x40020010
 80047dc:	40020028 	.word	0x40020028
 80047e0:	40020040 	.word	0x40020040
 80047e4:	40020058 	.word	0x40020058
 80047e8:	40020070 	.word	0x40020070
 80047ec:	40020088 	.word	0x40020088
 80047f0:	400200a0 	.word	0x400200a0
 80047f4:	400200b8 	.word	0x400200b8
 80047f8:	40020410 	.word	0x40020410
 80047fc:	40020428 	.word	0x40020428
 8004800:	40020440 	.word	0x40020440
 8004804:	40020458 	.word	0x40020458
 8004808:	40020470 	.word	0x40020470
 800480c:	40020488 	.word	0x40020488
 8004810:	400204a0 	.word	0x400204a0
 8004814:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 020e 	bic.w	r2, r3, #14
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 020a 	orr.w	r2, r2, #10
 800482a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0204 	orr.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a83      	ldr	r2, [pc, #524]	@ (8004a58 <HAL_DMA_Start_IT+0x474>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d072      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a82      	ldr	r2, [pc, #520]	@ (8004a5c <HAL_DMA_Start_IT+0x478>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d06d      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a80      	ldr	r2, [pc, #512]	@ (8004a60 <HAL_DMA_Start_IT+0x47c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d068      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7f      	ldr	r2, [pc, #508]	@ (8004a64 <HAL_DMA_Start_IT+0x480>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d063      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a7d      	ldr	r2, [pc, #500]	@ (8004a68 <HAL_DMA_Start_IT+0x484>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d05e      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a6c <HAL_DMA_Start_IT+0x488>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d059      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a7a      	ldr	r2, [pc, #488]	@ (8004a70 <HAL_DMA_Start_IT+0x48c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d054      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a79      	ldr	r2, [pc, #484]	@ (8004a74 <HAL_DMA_Start_IT+0x490>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d04f      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a77      	ldr	r2, [pc, #476]	@ (8004a78 <HAL_DMA_Start_IT+0x494>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a76      	ldr	r2, [pc, #472]	@ (8004a7c <HAL_DMA_Start_IT+0x498>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a74      	ldr	r2, [pc, #464]	@ (8004a80 <HAL_DMA_Start_IT+0x49c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a73      	ldr	r2, [pc, #460]	@ (8004a84 <HAL_DMA_Start_IT+0x4a0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a71      	ldr	r2, [pc, #452]	@ (8004a88 <HAL_DMA_Start_IT+0x4a4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a70      	ldr	r2, [pc, #448]	@ (8004a8c <HAL_DMA_Start_IT+0x4a8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a90 <HAL_DMA_Start_IT+0x4ac>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6d      	ldr	r2, [pc, #436]	@ (8004a94 <HAL_DMA_Start_IT+0x4b0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004a98 <HAL_DMA_Start_IT+0x4b4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6a      	ldr	r2, [pc, #424]	@ (8004a9c <HAL_DMA_Start_IT+0x4b8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a68      	ldr	r2, [pc, #416]	@ (8004aa0 <HAL_DMA_Start_IT+0x4bc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a67      	ldr	r2, [pc, #412]	@ (8004aa4 <HAL_DMA_Start_IT+0x4c0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a65      	ldr	r2, [pc, #404]	@ (8004aa8 <HAL_DMA_Start_IT+0x4c4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a64      	ldr	r2, [pc, #400]	@ (8004aac <HAL_DMA_Start_IT+0x4c8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a62      	ldr	r2, [pc, #392]	@ (8004ab0 <HAL_DMA_Start_IT+0x4cc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_Start_IT+0x350>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a61      	ldr	r2, [pc, #388]	@ (8004ab4 <HAL_DMA_Start_IT+0x4d0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Start_IT+0x354>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_DMA_Start_IT+0x356>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01a      	beq.n	8004974 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004972:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <HAL_DMA_Start_IT+0x474>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04a      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a36      	ldr	r2, [pc, #216]	@ (8004a5c <HAL_DMA_Start_IT+0x478>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d045      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a34      	ldr	r2, [pc, #208]	@ (8004a60 <HAL_DMA_Start_IT+0x47c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d040      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a33      	ldr	r2, [pc, #204]	@ (8004a64 <HAL_DMA_Start_IT+0x480>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d03b      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a31      	ldr	r2, [pc, #196]	@ (8004a68 <HAL_DMA_Start_IT+0x484>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d036      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a30      	ldr	r2, [pc, #192]	@ (8004a6c <HAL_DMA_Start_IT+0x488>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a70 <HAL_DMA_Start_IT+0x48c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02c      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2d      	ldr	r2, [pc, #180]	@ (8004a74 <HAL_DMA_Start_IT+0x490>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d027      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <HAL_DMA_Start_IT+0x494>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a7c <HAL_DMA_Start_IT+0x498>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a28      	ldr	r2, [pc, #160]	@ (8004a80 <HAL_DMA_Start_IT+0x49c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <HAL_DMA_Start_IT+0x4a0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <HAL_DMA_Start_IT+0x4a4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <HAL_DMA_Start_IT+0x4a8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <HAL_DMA_Start_IT+0x4ac>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_Start_IT+0x430>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	@ (8004a94 <HAL_DMA_Start_IT+0x4b0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d108      	bne.n	8004a26 <HAL_DMA_Start_IT+0x442>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e012      	b.n	8004a4c <HAL_DMA_Start_IT+0x468>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e009      	b.n	8004a4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	58025408 	.word	0x58025408
 8004a9c:	5802541c 	.word	0x5802541c
 8004aa0:	58025430 	.word	0x58025430
 8004aa4:	58025444 	.word	0x58025444
 8004aa8:	58025458 	.word	0x58025458
 8004aac:	5802546c 	.word	0x5802546c
 8004ab0:	58025480 	.word	0x58025480
 8004ab4:	58025494 	.word	0x58025494

08004ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004ac0:	f7fe fec8 	bl	8003854 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e2dc      	b.n	800508a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d008      	beq.n	8004aee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2280      	movs	r2, #128	@ 0x80
 8004ae0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e2cd      	b.n	800508a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a76      	ldr	r2, [pc, #472]	@ (8004ccc <HAL_DMA_Abort+0x214>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a74      	ldr	r2, [pc, #464]	@ (8004cd0 <HAL_DMA_Abort+0x218>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a73      	ldr	r2, [pc, #460]	@ (8004cd4 <HAL_DMA_Abort+0x21c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a71      	ldr	r2, [pc, #452]	@ (8004cd8 <HAL_DMA_Abort+0x220>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a70      	ldr	r2, [pc, #448]	@ (8004cdc <HAL_DMA_Abort+0x224>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce0 <HAL_DMA_Abort+0x228>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ce4 <HAL_DMA_Abort+0x22c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce8 <HAL_DMA_Abort+0x230>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a6a      	ldr	r2, [pc, #424]	@ (8004cec <HAL_DMA_Abort+0x234>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a68      	ldr	r2, [pc, #416]	@ (8004cf0 <HAL_DMA_Abort+0x238>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a67      	ldr	r2, [pc, #412]	@ (8004cf4 <HAL_DMA_Abort+0x23c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a65      	ldr	r2, [pc, #404]	@ (8004cf8 <HAL_DMA_Abort+0x240>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a64      	ldr	r2, [pc, #400]	@ (8004cfc <HAL_DMA_Abort+0x244>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a62      	ldr	r2, [pc, #392]	@ (8004d00 <HAL_DMA_Abort+0x248>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a61      	ldr	r2, [pc, #388]	@ (8004d04 <HAL_DMA_Abort+0x24c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_Abort+0xd6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5f      	ldr	r2, [pc, #380]	@ (8004d08 <HAL_DMA_Abort+0x250>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_DMA_Abort+0xda>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_DMA_Abort+0xdc>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 021e 	bic.w	r2, r2, #30
 8004ba6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e00a      	b.n	8004bd6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 020e 	bic.w	r2, r2, #14
 8004bce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <HAL_DMA_Abort+0x214>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d072      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd0 <HAL_DMA_Abort+0x218>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d06d      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a39      	ldr	r2, [pc, #228]	@ (8004cd4 <HAL_DMA_Abort+0x21c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d068      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a37      	ldr	r2, [pc, #220]	@ (8004cd8 <HAL_DMA_Abort+0x220>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d063      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a36      	ldr	r2, [pc, #216]	@ (8004cdc <HAL_DMA_Abort+0x224>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d05e      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a34      	ldr	r2, [pc, #208]	@ (8004ce0 <HAL_DMA_Abort+0x228>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d059      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a33      	ldr	r2, [pc, #204]	@ (8004ce4 <HAL_DMA_Abort+0x22c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d054      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a31      	ldr	r2, [pc, #196]	@ (8004ce8 <HAL_DMA_Abort+0x230>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04f      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a30      	ldr	r2, [pc, #192]	@ (8004cec <HAL_DMA_Abort+0x234>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d04a      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf0 <HAL_DMA_Abort+0x238>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d045      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf4 <HAL_DMA_Abort+0x23c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d040      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf8 <HAL_DMA_Abort+0x240>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2a      	ldr	r2, [pc, #168]	@ (8004cfc <HAL_DMA_Abort+0x244>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d036      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	@ (8004d00 <HAL_DMA_Abort+0x248>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	@ (8004d04 <HAL_DMA_Abort+0x24c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	@ (8004d08 <HAL_DMA_Abort+0x250>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d027      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	@ (8004d0c <HAL_DMA_Abort+0x254>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	@ (8004d10 <HAL_DMA_Abort+0x258>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	@ (8004d14 <HAL_DMA_Abort+0x25c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <HAL_DMA_Abort+0x260>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d1c <HAL_DMA_Abort+0x264>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1c      	ldr	r2, [pc, #112]	@ (8004d20 <HAL_DMA_Abort+0x268>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d24 <HAL_DMA_Abort+0x26c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_DMA_Abort+0x20e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <HAL_DMA_Abort+0x270>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d132      	bne.n	8004d2c <HAL_DMA_Abort+0x274>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e031      	b.n	8004d2e <HAL_DMA_Abort+0x276>
 8004cca:	bf00      	nop
 8004ccc:	40020010 	.word	0x40020010
 8004cd0:	40020028 	.word	0x40020028
 8004cd4:	40020040 	.word	0x40020040
 8004cd8:	40020058 	.word	0x40020058
 8004cdc:	40020070 	.word	0x40020070
 8004ce0:	40020088 	.word	0x40020088
 8004ce4:	400200a0 	.word	0x400200a0
 8004ce8:	400200b8 	.word	0x400200b8
 8004cec:	40020410 	.word	0x40020410
 8004cf0:	40020428 	.word	0x40020428
 8004cf4:	40020440 	.word	0x40020440
 8004cf8:	40020458 	.word	0x40020458
 8004cfc:	40020470 	.word	0x40020470
 8004d00:	40020488 	.word	0x40020488
 8004d04:	400204a0 	.word	0x400204a0
 8004d08:	400204b8 	.word	0x400204b8
 8004d0c:	58025408 	.word	0x58025408
 8004d10:	5802541c 	.word	0x5802541c
 8004d14:	58025430 	.word	0x58025430
 8004d18:	58025444 	.word	0x58025444
 8004d1c:	58025458 	.word	0x58025458
 8004d20:	5802546c 	.word	0x5802546c
 8004d24:	58025480 	.word	0x58025480
 8004d28:	58025494 	.word	0x58025494
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6d      	ldr	r2, [pc, #436]	@ (8004efc <HAL_DMA_Abort+0x444>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d04a      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6b      	ldr	r2, [pc, #428]	@ (8004f00 <HAL_DMA_Abort+0x448>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d045      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6a      	ldr	r2, [pc, #424]	@ (8004f04 <HAL_DMA_Abort+0x44c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d040      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a68      	ldr	r2, [pc, #416]	@ (8004f08 <HAL_DMA_Abort+0x450>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a67      	ldr	r2, [pc, #412]	@ (8004f0c <HAL_DMA_Abort+0x454>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d036      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a65      	ldr	r2, [pc, #404]	@ (8004f10 <HAL_DMA_Abort+0x458>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d031      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a64      	ldr	r2, [pc, #400]	@ (8004f14 <HAL_DMA_Abort+0x45c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d02c      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a62      	ldr	r2, [pc, #392]	@ (8004f18 <HAL_DMA_Abort+0x460>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d027      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a61      	ldr	r2, [pc, #388]	@ (8004f1c <HAL_DMA_Abort+0x464>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f20 <HAL_DMA_Abort+0x468>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01d      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5e      	ldr	r2, [pc, #376]	@ (8004f24 <HAL_DMA_Abort+0x46c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d018      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f28 <HAL_DMA_Abort+0x470>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004f2c <HAL_DMA_Abort+0x474>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a59      	ldr	r2, [pc, #356]	@ (8004f30 <HAL_DMA_Abort+0x478>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a58      	ldr	r2, [pc, #352]	@ (8004f34 <HAL_DMA_Abort+0x47c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_Abort+0x32a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a56      	ldr	r2, [pc, #344]	@ (8004f38 <HAL_DMA_Abort+0x480>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <HAL_DMA_Abort+0x33c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e007      	b.n	8004e04 <HAL_DMA_Abort+0x34c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e04:	e013      	b.n	8004e2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e06:	f7fe fd25 	bl	8003854 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d90c      	bls.n	8004e2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e12d      	b.n	800508a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <HAL_DMA_Abort+0x444>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04a      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <HAL_DMA_Abort+0x448>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d045      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2c      	ldr	r2, [pc, #176]	@ (8004f04 <HAL_DMA_Abort+0x44c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f08 <HAL_DMA_Abort+0x450>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d03b      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a29      	ldr	r2, [pc, #164]	@ (8004f0c <HAL_DMA_Abort+0x454>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d036      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a27      	ldr	r2, [pc, #156]	@ (8004f10 <HAL_DMA_Abort+0x458>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <HAL_DMA_Abort+0x45c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d02c      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a24      	ldr	r2, [pc, #144]	@ (8004f18 <HAL_DMA_Abort+0x460>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d027      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a23      	ldr	r2, [pc, #140]	@ (8004f1c <HAL_DMA_Abort+0x464>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a21      	ldr	r2, [pc, #132]	@ (8004f20 <HAL_DMA_Abort+0x468>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a20      	ldr	r2, [pc, #128]	@ (8004f24 <HAL_DMA_Abort+0x46c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	@ (8004f28 <HAL_DMA_Abort+0x470>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <HAL_DMA_Abort+0x474>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <HAL_DMA_Abort+0x478>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <HAL_DMA_Abort+0x47c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_DMA_Abort+0x422>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a18      	ldr	r2, [pc, #96]	@ (8004f38 <HAL_DMA_Abort+0x480>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_Abort+0x426>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_Abort+0x428>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d02b      	beq.n	8004f3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	223f      	movs	r2, #63	@ 0x3f
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	e02a      	b.n	8004f52 <HAL_DMA_Abort+0x49a>
 8004efc:	40020010 	.word	0x40020010
 8004f00:	40020028 	.word	0x40020028
 8004f04:	40020040 	.word	0x40020040
 8004f08:	40020058 	.word	0x40020058
 8004f0c:	40020070 	.word	0x40020070
 8004f10:	40020088 	.word	0x40020088
 8004f14:	400200a0 	.word	0x400200a0
 8004f18:	400200b8 	.word	0x400200b8
 8004f1c:	40020410 	.word	0x40020410
 8004f20:	40020428 	.word	0x40020428
 8004f24:	40020440 	.word	0x40020440
 8004f28:	40020458 	.word	0x40020458
 8004f2c:	40020470 	.word	0x40020470
 8004f30:	40020488 	.word	0x40020488
 8004f34:	400204a0 	.word	0x400204a0
 8004f38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4f      	ldr	r2, [pc, #316]	@ (8005094 <HAL_DMA_Abort+0x5dc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d072      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a4d      	ldr	r2, [pc, #308]	@ (8005098 <HAL_DMA_Abort+0x5e0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d06d      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800509c <HAL_DMA_Abort+0x5e4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d068      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a4a      	ldr	r2, [pc, #296]	@ (80050a0 <HAL_DMA_Abort+0x5e8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d063      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a49      	ldr	r2, [pc, #292]	@ (80050a4 <HAL_DMA_Abort+0x5ec>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d05e      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a47      	ldr	r2, [pc, #284]	@ (80050a8 <HAL_DMA_Abort+0x5f0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d059      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a46      	ldr	r2, [pc, #280]	@ (80050ac <HAL_DMA_Abort+0x5f4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d054      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a44      	ldr	r2, [pc, #272]	@ (80050b0 <HAL_DMA_Abort+0x5f8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04f      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a43      	ldr	r2, [pc, #268]	@ (80050b4 <HAL_DMA_Abort+0x5fc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a41      	ldr	r2, [pc, #260]	@ (80050b8 <HAL_DMA_Abort+0x600>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a40      	ldr	r2, [pc, #256]	@ (80050bc <HAL_DMA_Abort+0x604>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80050c0 <HAL_DMA_Abort+0x608>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3d      	ldr	r2, [pc, #244]	@ (80050c4 <HAL_DMA_Abort+0x60c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80050c8 <HAL_DMA_Abort+0x610>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80050cc <HAL_DMA_Abort+0x614>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a38      	ldr	r2, [pc, #224]	@ (80050d0 <HAL_DMA_Abort+0x618>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a37      	ldr	r2, [pc, #220]	@ (80050d4 <HAL_DMA_Abort+0x61c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <HAL_DMA_Abort+0x620>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a34      	ldr	r2, [pc, #208]	@ (80050dc <HAL_DMA_Abort+0x624>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a32      	ldr	r2, [pc, #200]	@ (80050e0 <HAL_DMA_Abort+0x628>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a31      	ldr	r2, [pc, #196]	@ (80050e4 <HAL_DMA_Abort+0x62c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2f      	ldr	r2, [pc, #188]	@ (80050e8 <HAL_DMA_Abort+0x630>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2e      	ldr	r2, [pc, #184]	@ (80050ec <HAL_DMA_Abort+0x634>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_Abort+0x58a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <HAL_DMA_Abort+0x638>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_DMA_Abort+0x58e>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_DMA_Abort+0x590>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005054:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800506c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005076:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40020010 	.word	0x40020010
 8005098:	40020028 	.word	0x40020028
 800509c:	40020040 	.word	0x40020040
 80050a0:	40020058 	.word	0x40020058
 80050a4:	40020070 	.word	0x40020070
 80050a8:	40020088 	.word	0x40020088
 80050ac:	400200a0 	.word	0x400200a0
 80050b0:	400200b8 	.word	0x400200b8
 80050b4:	40020410 	.word	0x40020410
 80050b8:	40020428 	.word	0x40020428
 80050bc:	40020440 	.word	0x40020440
 80050c0:	40020458 	.word	0x40020458
 80050c4:	40020470 	.word	0x40020470
 80050c8:	40020488 	.word	0x40020488
 80050cc:	400204a0 	.word	0x400204a0
 80050d0:	400204b8 	.word	0x400204b8
 80050d4:	58025408 	.word	0x58025408
 80050d8:	5802541c 	.word	0x5802541c
 80050dc:	58025430 	.word	0x58025430
 80050e0:	58025444 	.word	0x58025444
 80050e4:	58025458 	.word	0x58025458
 80050e8:	5802546c 	.word	0x5802546c
 80050ec:	58025480 	.word	0x58025480
 80050f0:	58025494 	.word	0x58025494

080050f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e237      	b.n	8005576 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d004      	beq.n	800511c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2280      	movs	r2, #128	@ 0x80
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e22c      	b.n	8005576 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a5c      	ldr	r2, [pc, #368]	@ (8005294 <HAL_DMA_Abort_IT+0x1a0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d04a      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a5b      	ldr	r2, [pc, #364]	@ (8005298 <HAL_DMA_Abort_IT+0x1a4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d045      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a59      	ldr	r2, [pc, #356]	@ (800529c <HAL_DMA_Abort_IT+0x1a8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d040      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a58      	ldr	r2, [pc, #352]	@ (80052a0 <HAL_DMA_Abort_IT+0x1ac>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d03b      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a56      	ldr	r2, [pc, #344]	@ (80052a4 <HAL_DMA_Abort_IT+0x1b0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d036      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a55      	ldr	r2, [pc, #340]	@ (80052a8 <HAL_DMA_Abort_IT+0x1b4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d031      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a53      	ldr	r2, [pc, #332]	@ (80052ac <HAL_DMA_Abort_IT+0x1b8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02c      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a52      	ldr	r2, [pc, #328]	@ (80052b0 <HAL_DMA_Abort_IT+0x1bc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d027      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a50      	ldr	r2, [pc, #320]	@ (80052b4 <HAL_DMA_Abort_IT+0x1c0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4f      	ldr	r2, [pc, #316]	@ (80052b8 <HAL_DMA_Abort_IT+0x1c4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a4d      	ldr	r2, [pc, #308]	@ (80052bc <HAL_DMA_Abort_IT+0x1c8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a4c      	ldr	r2, [pc, #304]	@ (80052c0 <HAL_DMA_Abort_IT+0x1cc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4a      	ldr	r2, [pc, #296]	@ (80052c4 <HAL_DMA_Abort_IT+0x1d0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a49      	ldr	r2, [pc, #292]	@ (80052c8 <HAL_DMA_Abort_IT+0x1d4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a47      	ldr	r2, [pc, #284]	@ (80052cc <HAL_DMA_Abort_IT+0x1d8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_Abort_IT+0xc8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a46      	ldr	r2, [pc, #280]	@ (80052d0 <HAL_DMA_Abort_IT+0x1dc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_DMA_Abort_IT+0xcc>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_DMA_Abort_IT+0xce>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8086 	beq.w	80052d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2204      	movs	r2, #4
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005294 <HAL_DMA_Abort_IT+0x1a0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d04a      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2e      	ldr	r2, [pc, #184]	@ (8005298 <HAL_DMA_Abort_IT+0x1a4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d045      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <HAL_DMA_Abort_IT+0x1a8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d040      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <HAL_DMA_Abort_IT+0x1ac>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d03b      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_DMA_Abort_IT+0x1b0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d036      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a28      	ldr	r2, [pc, #160]	@ (80052a8 <HAL_DMA_Abort_IT+0x1b4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d031      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <HAL_DMA_Abort_IT+0x1b8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02c      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a25      	ldr	r2, [pc, #148]	@ (80052b0 <HAL_DMA_Abort_IT+0x1bc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d027      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a23      	ldr	r2, [pc, #140]	@ (80052b4 <HAL_DMA_Abort_IT+0x1c0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d022      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a22      	ldr	r2, [pc, #136]	@ (80052b8 <HAL_DMA_Abort_IT+0x1c4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d01d      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <HAL_DMA_Abort_IT+0x1c8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d018      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1f      	ldr	r2, [pc, #124]	@ (80052c0 <HAL_DMA_Abort_IT+0x1cc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1d      	ldr	r2, [pc, #116]	@ (80052c4 <HAL_DMA_Abort_IT+0x1d0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1c      	ldr	r2, [pc, #112]	@ (80052c8 <HAL_DMA_Abort_IT+0x1d4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_DMA_Abort_IT+0x1d8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_DMA_Abort_IT+0x17c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a19      	ldr	r2, [pc, #100]	@ (80052d0 <HAL_DMA_Abort_IT+0x1dc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <HAL_DMA_Abort_IT+0x18e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e178      	b.n	8005574 <HAL_DMA_Abort_IT+0x480>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e16f      	b.n	8005574 <HAL_DMA_Abort_IT+0x480>
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	40020058 	.word	0x40020058
 80052a4:	40020070 	.word	0x40020070
 80052a8:	40020088 	.word	0x40020088
 80052ac:	400200a0 	.word	0x400200a0
 80052b0:	400200b8 	.word	0x400200b8
 80052b4:	40020410 	.word	0x40020410
 80052b8:	40020428 	.word	0x40020428
 80052bc:	40020440 	.word	0x40020440
 80052c0:	40020458 	.word	0x40020458
 80052c4:	40020470 	.word	0x40020470
 80052c8:	40020488 	.word	0x40020488
 80052cc:	400204a0 	.word	0x400204a0
 80052d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 020e 	bic.w	r2, r2, #14
 80052e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a6c      	ldr	r2, [pc, #432]	@ (800549c <HAL_DMA_Abort_IT+0x3a8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04a      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6b      	ldr	r2, [pc, #428]	@ (80054a0 <HAL_DMA_Abort_IT+0x3ac>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d045      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a69      	ldr	r2, [pc, #420]	@ (80054a4 <HAL_DMA_Abort_IT+0x3b0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d040      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a68      	ldr	r2, [pc, #416]	@ (80054a8 <HAL_DMA_Abort_IT+0x3b4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d03b      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a66      	ldr	r2, [pc, #408]	@ (80054ac <HAL_DMA_Abort_IT+0x3b8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d036      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a65      	ldr	r2, [pc, #404]	@ (80054b0 <HAL_DMA_Abort_IT+0x3bc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d031      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a63      	ldr	r2, [pc, #396]	@ (80054b4 <HAL_DMA_Abort_IT+0x3c0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d02c      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a62      	ldr	r2, [pc, #392]	@ (80054b8 <HAL_DMA_Abort_IT+0x3c4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d027      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a60      	ldr	r2, [pc, #384]	@ (80054bc <HAL_DMA_Abort_IT+0x3c8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a5f      	ldr	r2, [pc, #380]	@ (80054c0 <HAL_DMA_Abort_IT+0x3cc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d01d      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5d      	ldr	r2, [pc, #372]	@ (80054c4 <HAL_DMA_Abort_IT+0x3d0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a5c      	ldr	r2, [pc, #368]	@ (80054c8 <HAL_DMA_Abort_IT+0x3d4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a5a      	ldr	r2, [pc, #360]	@ (80054cc <HAL_DMA_Abort_IT+0x3d8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a59      	ldr	r2, [pc, #356]	@ (80054d0 <HAL_DMA_Abort_IT+0x3dc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a57      	ldr	r2, [pc, #348]	@ (80054d4 <HAL_DMA_Abort_IT+0x3e0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_DMA_Abort_IT+0x290>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a56      	ldr	r2, [pc, #344]	@ (80054d8 <HAL_DMA_Abort_IT+0x3e4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d108      	bne.n	8005396 <HAL_DMA_Abort_IT+0x2a2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e007      	b.n	80053a6 <HAL_DMA_Abort_IT+0x2b2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3c      	ldr	r2, [pc, #240]	@ (800549c <HAL_DMA_Abort_IT+0x3a8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d072      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a3a      	ldr	r2, [pc, #232]	@ (80054a0 <HAL_DMA_Abort_IT+0x3ac>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d06d      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a39      	ldr	r2, [pc, #228]	@ (80054a4 <HAL_DMA_Abort_IT+0x3b0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d068      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a37      	ldr	r2, [pc, #220]	@ (80054a8 <HAL_DMA_Abort_IT+0x3b4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d063      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a36      	ldr	r2, [pc, #216]	@ (80054ac <HAL_DMA_Abort_IT+0x3b8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d05e      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a34      	ldr	r2, [pc, #208]	@ (80054b0 <HAL_DMA_Abort_IT+0x3bc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d059      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a33      	ldr	r2, [pc, #204]	@ (80054b4 <HAL_DMA_Abort_IT+0x3c0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d054      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a31      	ldr	r2, [pc, #196]	@ (80054b8 <HAL_DMA_Abort_IT+0x3c4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04f      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a30      	ldr	r2, [pc, #192]	@ (80054bc <HAL_DMA_Abort_IT+0x3c8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <HAL_DMA_Abort_IT+0x3cc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2d      	ldr	r2, [pc, #180]	@ (80054c4 <HAL_DMA_Abort_IT+0x3d0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2b      	ldr	r2, [pc, #172]	@ (80054c8 <HAL_DMA_Abort_IT+0x3d4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <HAL_DMA_Abort_IT+0x3d8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a28      	ldr	r2, [pc, #160]	@ (80054d0 <HAL_DMA_Abort_IT+0x3dc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a27      	ldr	r2, [pc, #156]	@ (80054d4 <HAL_DMA_Abort_IT+0x3e0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a25      	ldr	r2, [pc, #148]	@ (80054d8 <HAL_DMA_Abort_IT+0x3e4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a24      	ldr	r2, [pc, #144]	@ (80054dc <HAL_DMA_Abort_IT+0x3e8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a22      	ldr	r2, [pc, #136]	@ (80054e0 <HAL_DMA_Abort_IT+0x3ec>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <HAL_DMA_Abort_IT+0x3f0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <HAL_DMA_Abort_IT+0x3f4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1e      	ldr	r2, [pc, #120]	@ (80054ec <HAL_DMA_Abort_IT+0x3f8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1c      	ldr	r2, [pc, #112]	@ (80054f0 <HAL_DMA_Abort_IT+0x3fc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1b      	ldr	r2, [pc, #108]	@ (80054f4 <HAL_DMA_Abort_IT+0x400>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_Abort_IT+0x3a2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <HAL_DMA_Abort_IT+0x404>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d132      	bne.n	80054fc <HAL_DMA_Abort_IT+0x408>
 8005496:	2301      	movs	r3, #1
 8005498:	e031      	b.n	80054fe <HAL_DMA_Abort_IT+0x40a>
 800549a:	bf00      	nop
 800549c:	40020010 	.word	0x40020010
 80054a0:	40020028 	.word	0x40020028
 80054a4:	40020040 	.word	0x40020040
 80054a8:	40020058 	.word	0x40020058
 80054ac:	40020070 	.word	0x40020070
 80054b0:	40020088 	.word	0x40020088
 80054b4:	400200a0 	.word	0x400200a0
 80054b8:	400200b8 	.word	0x400200b8
 80054bc:	40020410 	.word	0x40020410
 80054c0:	40020428 	.word	0x40020428
 80054c4:	40020440 	.word	0x40020440
 80054c8:	40020458 	.word	0x40020458
 80054cc:	40020470 	.word	0x40020470
 80054d0:	40020488 	.word	0x40020488
 80054d4:	400204a0 	.word	0x400204a0
 80054d8:	400204b8 	.word	0x400204b8
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d028      	beq.n	8005554 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005510:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005530:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005548:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005552:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop

08005580 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800558c:	4b67      	ldr	r3, [pc, #412]	@ (800572c <HAL_DMA_IRQHandler+0x1ac>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a67      	ldr	r2, [pc, #412]	@ (8005730 <HAL_DMA_IRQHandler+0x1b0>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0a9b      	lsrs	r3, r3, #10
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005734 <HAL_DMA_IRQHandler+0x1b4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d04a      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005738 <HAL_DMA_IRQHandler+0x1b8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d045      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5c      	ldr	r2, [pc, #368]	@ (800573c <HAL_DMA_IRQHandler+0x1bc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d040      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005740 <HAL_DMA_IRQHandler+0x1c0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d03b      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a59      	ldr	r2, [pc, #356]	@ (8005744 <HAL_DMA_IRQHandler+0x1c4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d036      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a57      	ldr	r2, [pc, #348]	@ (8005748 <HAL_DMA_IRQHandler+0x1c8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a56      	ldr	r2, [pc, #344]	@ (800574c <HAL_DMA_IRQHandler+0x1cc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d02c      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a54      	ldr	r2, [pc, #336]	@ (8005750 <HAL_DMA_IRQHandler+0x1d0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d027      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a53      	ldr	r2, [pc, #332]	@ (8005754 <HAL_DMA_IRQHandler+0x1d4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a51      	ldr	r2, [pc, #324]	@ (8005758 <HAL_DMA_IRQHandler+0x1d8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01d      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a50      	ldr	r2, [pc, #320]	@ (800575c <HAL_DMA_IRQHandler+0x1dc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a4e      	ldr	r2, [pc, #312]	@ (8005760 <HAL_DMA_IRQHandler+0x1e0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a4d      	ldr	r2, [pc, #308]	@ (8005764 <HAL_DMA_IRQHandler+0x1e4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a4b      	ldr	r2, [pc, #300]	@ (8005768 <HAL_DMA_IRQHandler+0x1e8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a4a      	ldr	r2, [pc, #296]	@ (800576c <HAL_DMA_IRQHandler+0x1ec>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_DMA_IRQHandler+0xd2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a48      	ldr	r2, [pc, #288]	@ (8005770 <HAL_DMA_IRQHandler+0x1f0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_DMA_IRQHandler+0xd6>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_DMA_IRQHandler+0xd8>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 842b 	beq.w	8005eb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2208      	movs	r2, #8
 8005668:	409a      	lsls	r2, r3
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80a2 	beq.w	80057b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2e      	ldr	r2, [pc, #184]	@ (8005734 <HAL_DMA_IRQHandler+0x1b4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d04a      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <HAL_DMA_IRQHandler+0x1b8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d045      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2b      	ldr	r2, [pc, #172]	@ (800573c <HAL_DMA_IRQHandler+0x1bc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d040      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2a      	ldr	r2, [pc, #168]	@ (8005740 <HAL_DMA_IRQHandler+0x1c0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d03b      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a28      	ldr	r2, [pc, #160]	@ (8005744 <HAL_DMA_IRQHandler+0x1c4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d036      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a27      	ldr	r2, [pc, #156]	@ (8005748 <HAL_DMA_IRQHandler+0x1c8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d031      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a25      	ldr	r2, [pc, #148]	@ (800574c <HAL_DMA_IRQHandler+0x1cc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02c      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a24      	ldr	r2, [pc, #144]	@ (8005750 <HAL_DMA_IRQHandler+0x1d0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d027      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <HAL_DMA_IRQHandler+0x1d4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a21      	ldr	r2, [pc, #132]	@ (8005758 <HAL_DMA_IRQHandler+0x1d8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d01d      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <HAL_DMA_IRQHandler+0x1dc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005760 <HAL_DMA_IRQHandler+0x1e0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <HAL_DMA_IRQHandler+0x1e4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005768 <HAL_DMA_IRQHandler+0x1e8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	@ (800576c <HAL_DMA_IRQHandler+0x1ec>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_DMA_IRQHandler+0x194>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a18      	ldr	r2, [pc, #96]	@ (8005770 <HAL_DMA_IRQHandler+0x1f0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d12f      	bne.n	8005774 <HAL_DMA_IRQHandler+0x1f4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	e02e      	b.n	8005788 <HAL_DMA_IRQHandler+0x208>
 800572a:	bf00      	nop
 800572c:	2400001c 	.word	0x2400001c
 8005730:	1b4e81b5 	.word	0x1b4e81b5
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	bf14      	ite	ne
 8005782:	2301      	movne	r3, #1
 8005784:	2300      	moveq	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2208      	movs	r2, #8
 80057a6:	409a      	lsls	r2, r3
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d06e      	beq.n	80058ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a69      	ldr	r2, [pc, #420]	@ (8005978 <HAL_DMA_IRQHandler+0x3f8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a67      	ldr	r2, [pc, #412]	@ (800597c <HAL_DMA_IRQHandler+0x3fc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a66      	ldr	r2, [pc, #408]	@ (8005980 <HAL_DMA_IRQHandler+0x400>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a64      	ldr	r2, [pc, #400]	@ (8005984 <HAL_DMA_IRQHandler+0x404>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a63      	ldr	r2, [pc, #396]	@ (8005988 <HAL_DMA_IRQHandler+0x408>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a61      	ldr	r2, [pc, #388]	@ (800598c <HAL_DMA_IRQHandler+0x40c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a60      	ldr	r2, [pc, #384]	@ (8005990 <HAL_DMA_IRQHandler+0x410>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a5e      	ldr	r2, [pc, #376]	@ (8005994 <HAL_DMA_IRQHandler+0x414>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a5d      	ldr	r2, [pc, #372]	@ (8005998 <HAL_DMA_IRQHandler+0x418>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5b      	ldr	r2, [pc, #364]	@ (800599c <HAL_DMA_IRQHandler+0x41c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a5a      	ldr	r2, [pc, #360]	@ (80059a0 <HAL_DMA_IRQHandler+0x420>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a58      	ldr	r2, [pc, #352]	@ (80059a4 <HAL_DMA_IRQHandler+0x424>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a57      	ldr	r2, [pc, #348]	@ (80059a8 <HAL_DMA_IRQHandler+0x428>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a55      	ldr	r2, [pc, #340]	@ (80059ac <HAL_DMA_IRQHandler+0x42c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a54      	ldr	r2, [pc, #336]	@ (80059b0 <HAL_DMA_IRQHandler+0x430>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_IRQHandler+0x2ee>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a52      	ldr	r2, [pc, #328]	@ (80059b4 <HAL_DMA_IRQHandler+0x434>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10a      	bne.n	8005884 <HAL_DMA_IRQHandler+0x304>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e003      	b.n	800588c <HAL_DMA_IRQHandler+0x30c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	f043 0202 	orr.w	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2204      	movs	r2, #4
 80058b6:	409a      	lsls	r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 808f 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005978 <HAL_DMA_IRQHandler+0x3f8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d04a      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2a      	ldr	r2, [pc, #168]	@ (800597c <HAL_DMA_IRQHandler+0x3fc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d045      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a29      	ldr	r2, [pc, #164]	@ (8005980 <HAL_DMA_IRQHandler+0x400>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d040      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a27      	ldr	r2, [pc, #156]	@ (8005984 <HAL_DMA_IRQHandler+0x404>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d03b      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a26      	ldr	r2, [pc, #152]	@ (8005988 <HAL_DMA_IRQHandler+0x408>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d036      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a24      	ldr	r2, [pc, #144]	@ (800598c <HAL_DMA_IRQHandler+0x40c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d031      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a23      	ldr	r2, [pc, #140]	@ (8005990 <HAL_DMA_IRQHandler+0x410>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d02c      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a21      	ldr	r2, [pc, #132]	@ (8005994 <HAL_DMA_IRQHandler+0x414>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d027      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <HAL_DMA_IRQHandler+0x418>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1e      	ldr	r2, [pc, #120]	@ (800599c <HAL_DMA_IRQHandler+0x41c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01d      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <HAL_DMA_IRQHandler+0x420>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <HAL_DMA_IRQHandler+0x424>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1a      	ldr	r2, [pc, #104]	@ (80059a8 <HAL_DMA_IRQHandler+0x428>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	@ (80059ac <HAL_DMA_IRQHandler+0x42c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <HAL_DMA_IRQHandler+0x430>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_DMA_IRQHandler+0x3e2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <HAL_DMA_IRQHandler+0x434>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d12a      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x438>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e023      	b.n	80059c0 <HAL_DMA_IRQHandler+0x440>
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2204      	movs	r2, #4
 80059ce:	409a      	lsls	r2, r3
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f043 0204 	orr.w	r2, r3, #4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	2210      	movs	r2, #16
 80059ea:	409a      	lsls	r2, r3
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a6 	beq.w	8005b42 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a85      	ldr	r2, [pc, #532]	@ (8005c10 <HAL_DMA_IRQHandler+0x690>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04a      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a83      	ldr	r2, [pc, #524]	@ (8005c14 <HAL_DMA_IRQHandler+0x694>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d045      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a82      	ldr	r2, [pc, #520]	@ (8005c18 <HAL_DMA_IRQHandler+0x698>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a80      	ldr	r2, [pc, #512]	@ (8005c1c <HAL_DMA_IRQHandler+0x69c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d03b      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a7f      	ldr	r2, [pc, #508]	@ (8005c20 <HAL_DMA_IRQHandler+0x6a0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d036      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c24 <HAL_DMA_IRQHandler+0x6a4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d031      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a7c      	ldr	r2, [pc, #496]	@ (8005c28 <HAL_DMA_IRQHandler+0x6a8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d02c      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a7a      	ldr	r2, [pc, #488]	@ (8005c2c <HAL_DMA_IRQHandler+0x6ac>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d027      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a79      	ldr	r2, [pc, #484]	@ (8005c30 <HAL_DMA_IRQHandler+0x6b0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a77      	ldr	r2, [pc, #476]	@ (8005c34 <HAL_DMA_IRQHandler+0x6b4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a76      	ldr	r2, [pc, #472]	@ (8005c38 <HAL_DMA_IRQHandler+0x6b8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a74      	ldr	r2, [pc, #464]	@ (8005c3c <HAL_DMA_IRQHandler+0x6bc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a73      	ldr	r2, [pc, #460]	@ (8005c40 <HAL_DMA_IRQHandler+0x6c0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a71      	ldr	r2, [pc, #452]	@ (8005c44 <HAL_DMA_IRQHandler+0x6c4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a70      	ldr	r2, [pc, #448]	@ (8005c48 <HAL_DMA_IRQHandler+0x6c8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x516>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a6e      	ldr	r2, [pc, #440]	@ (8005c4c <HAL_DMA_IRQHandler+0x6cc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10a      	bne.n	8005aac <HAL_DMA_IRQHandler+0x52c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e009      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x540>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d03e      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2210      	movs	r2, #16
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d108      	bne.n	8005b02 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d024      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
 8005b00:	e01f      	b.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01b      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
 8005b12:	e016      	b.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0208 	bic.w	r2, r2, #8
 8005b30:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8110 	beq.w	8005d78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c10 <HAL_DMA_IRQHandler+0x690>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d04a      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2b      	ldr	r2, [pc, #172]	@ (8005c14 <HAL_DMA_IRQHandler+0x694>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d045      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <HAL_DMA_IRQHandler+0x698>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d040      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	@ (8005c1c <HAL_DMA_IRQHandler+0x69c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d03b      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a26      	ldr	r2, [pc, #152]	@ (8005c20 <HAL_DMA_IRQHandler+0x6a0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d036      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a25      	ldr	r2, [pc, #148]	@ (8005c24 <HAL_DMA_IRQHandler+0x6a4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d031      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a23      	ldr	r2, [pc, #140]	@ (8005c28 <HAL_DMA_IRQHandler+0x6a8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02c      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a22      	ldr	r2, [pc, #136]	@ (8005c2c <HAL_DMA_IRQHandler+0x6ac>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d027      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <HAL_DMA_IRQHandler+0x6b0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c34 <HAL_DMA_IRQHandler+0x6b4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01d      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <HAL_DMA_IRQHandler+0x6b8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <HAL_DMA_IRQHandler+0x6bc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c40 <HAL_DMA_IRQHandler+0x6c0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a19      	ldr	r2, [pc, #100]	@ (8005c44 <HAL_DMA_IRQHandler+0x6c4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <HAL_DMA_IRQHandler+0x6c8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x678>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <HAL_DMA_IRQHandler+0x6cc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d12b      	bne.n	8005c50 <HAL_DMA_IRQHandler+0x6d0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e02a      	b.n	8005c64 <HAL_DMA_IRQHandler+0x6e4>
 8005c0e:	bf00      	nop
 8005c10:	40020010 	.word	0x40020010
 8005c14:	40020028 	.word	0x40020028
 8005c18:	40020040 	.word	0x40020040
 8005c1c:	40020058 	.word	0x40020058
 8005c20:	40020070 	.word	0x40020070
 8005c24:	40020088 	.word	0x40020088
 8005c28:	400200a0 	.word	0x400200a0
 8005c2c:	400200b8 	.word	0x400200b8
 8005c30:	40020410 	.word	0x40020410
 8005c34:	40020428 	.word	0x40020428
 8005c38:	40020440 	.word	0x40020440
 8005c3c:	40020458 	.word	0x40020458
 8005c40:	40020470 	.word	0x40020470
 8005c44:	40020488 	.word	0x40020488
 8005c48:	400204a0 	.word	0x400204a0
 8005c4c:	400204b8 	.word	0x400204b8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8087 	beq.w	8005d78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2220      	movs	r2, #32
 8005c74:	409a      	lsls	r2, r3
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d139      	bne.n	8005cfa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0216 	bic.w	r2, r2, #22
 8005c94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ca4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <HAL_DMA_IRQHandler+0x736>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0208 	bic.w	r2, r2, #8
 8005cc4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	223f      	movs	r2, #63	@ 0x3f
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 834a 	beq.w	8006384 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
          }
          return;
 8005cf8:	e344      	b.n	8006384 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d018      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d108      	bne.n	8005d28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
 8005d26:	e027      	b.n	8005d78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d023      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
 8005d38:	e01e      	b.n	8005d78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10f      	bne.n	8005d68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0210 	bic.w	r2, r2, #16
 8005d56:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8306 	beq.w	800638e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8088 	beq.w	8005ea0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8005f88 <HAL_DMA_IRQHandler+0xa08>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d04a      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a79      	ldr	r2, [pc, #484]	@ (8005f8c <HAL_DMA_IRQHandler+0xa0c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d045      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a77      	ldr	r2, [pc, #476]	@ (8005f90 <HAL_DMA_IRQHandler+0xa10>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d040      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a76      	ldr	r2, [pc, #472]	@ (8005f94 <HAL_DMA_IRQHandler+0xa14>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d03b      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a74      	ldr	r2, [pc, #464]	@ (8005f98 <HAL_DMA_IRQHandler+0xa18>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d036      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a73      	ldr	r2, [pc, #460]	@ (8005f9c <HAL_DMA_IRQHandler+0xa1c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d031      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a71      	ldr	r2, [pc, #452]	@ (8005fa0 <HAL_DMA_IRQHandler+0xa20>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02c      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a70      	ldr	r2, [pc, #448]	@ (8005fa4 <HAL_DMA_IRQHandler+0xa24>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d027      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa8 <HAL_DMA_IRQHandler+0xa28>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6d      	ldr	r2, [pc, #436]	@ (8005fac <HAL_DMA_IRQHandler+0xa2c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d01d      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb0 <HAL_DMA_IRQHandler+0xa30>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8005fb4 <HAL_DMA_IRQHandler+0xa34>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a68      	ldr	r2, [pc, #416]	@ (8005fb8 <HAL_DMA_IRQHandler+0xa38>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a67      	ldr	r2, [pc, #412]	@ (8005fbc <HAL_DMA_IRQHandler+0xa3c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a65      	ldr	r2, [pc, #404]	@ (8005fc0 <HAL_DMA_IRQHandler+0xa40>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x8b8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a64      	ldr	r2, [pc, #400]	@ (8005fc4 <HAL_DMA_IRQHandler+0xa44>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <HAL_DMA_IRQHandler+0x8ca>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e007      	b.n	8005e5a <HAL_DMA_IRQHandler+0x8da>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d307      	bcc.n	8005e76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f2      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x8da>
 8005e74:	e000      	b.n	8005e78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e76:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005e8e:	e003      	b.n	8005e98 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8272 	beq.w	800638e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
 8005eb2:	e26c      	b.n	800638e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a43      	ldr	r2, [pc, #268]	@ (8005fc8 <HAL_DMA_IRQHandler+0xa48>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a42      	ldr	r2, [pc, #264]	@ (8005fcc <HAL_DMA_IRQHandler+0xa4c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d01d      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a40      	ldr	r2, [pc, #256]	@ (8005fd0 <HAL_DMA_IRQHandler+0xa50>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fd4 <HAL_DMA_IRQHandler+0xa54>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8005fd8 <HAL_DMA_IRQHandler+0xa58>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a3c      	ldr	r2, [pc, #240]	@ (8005fdc <HAL_DMA_IRQHandler+0xa5c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe0 <HAL_DMA_IRQHandler+0xa60>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x984>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a39      	ldr	r2, [pc, #228]	@ (8005fe4 <HAL_DMA_IRQHandler+0xa64>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_DMA_IRQHandler+0x988>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_DMA_IRQHandler+0x98a>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 823f 	beq.w	800638e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2204      	movs	r2, #4
 8005f22:	409a      	lsls	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80cd 	beq.w	80060c8 <HAL_DMA_IRQHandler+0xb48>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80c7 	beq.w	80060c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2204      	movs	r2, #4
 8005f44:	409a      	lsls	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d049      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8210 	beq.w	8006388 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f70:	e20a      	b.n	8006388 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8206 	beq.w	8006388 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f84:	e200      	b.n	8006388 <HAL_DMA_IRQHandler+0xe08>
 8005f86:	bf00      	nop
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8
 8005fc8:	58025408 	.word	0x58025408
 8005fcc:	5802541c 	.word	0x5802541c
 8005fd0:	58025430 	.word	0x58025430
 8005fd4:	58025444 	.word	0x58025444
 8005fd8:	58025458 	.word	0x58025458
 8005fdc:	5802546c 	.word	0x5802546c
 8005fe0:	58025480 	.word	0x58025480
 8005fe4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d160      	bne.n	80060b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a7f      	ldr	r2, [pc, #508]	@ (80061f4 <HAL_DMA_IRQHandler+0xc74>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d04a      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <HAL_DMA_IRQHandler+0xc78>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d045      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a7c      	ldr	r2, [pc, #496]	@ (80061fc <HAL_DMA_IRQHandler+0xc7c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d040      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7a      	ldr	r2, [pc, #488]	@ (8006200 <HAL_DMA_IRQHandler+0xc80>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d03b      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a79      	ldr	r2, [pc, #484]	@ (8006204 <HAL_DMA_IRQHandler+0xc84>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d036      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a77      	ldr	r2, [pc, #476]	@ (8006208 <HAL_DMA_IRQHandler+0xc88>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d031      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a76      	ldr	r2, [pc, #472]	@ (800620c <HAL_DMA_IRQHandler+0xc8c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d02c      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	@ (8006210 <HAL_DMA_IRQHandler+0xc90>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d027      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a73      	ldr	r2, [pc, #460]	@ (8006214 <HAL_DMA_IRQHandler+0xc94>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a71      	ldr	r2, [pc, #452]	@ (8006218 <HAL_DMA_IRQHandler+0xc98>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a70      	ldr	r2, [pc, #448]	@ (800621c <HAL_DMA_IRQHandler+0xc9c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a6e      	ldr	r2, [pc, #440]	@ (8006220 <HAL_DMA_IRQHandler+0xca0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a6d      	ldr	r2, [pc, #436]	@ (8006224 <HAL_DMA_IRQHandler+0xca4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6b      	ldr	r2, [pc, #428]	@ (8006228 <HAL_DMA_IRQHandler+0xca8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6a      	ldr	r2, [pc, #424]	@ (800622c <HAL_DMA_IRQHandler+0xcac>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_DMA_IRQHandler+0xb12>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a68      	ldr	r2, [pc, #416]	@ (8006230 <HAL_DMA_IRQHandler+0xcb0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <HAL_DMA_IRQHandler+0xb24>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0208 	bic.w	r2, r2, #8
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e007      	b.n	80060b4 <HAL_DMA_IRQHandler+0xb34>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0204 	bic.w	r2, r2, #4
 80060b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8165 	beq.w	8006388 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c6:	e15f      	b.n	8006388 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2202      	movs	r2, #2
 80060d2:	409a      	lsls	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80c5 	beq.w	8006268 <HAL_DMA_IRQHandler+0xce8>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80bf 	beq.w	8006268 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2202      	movs	r2, #2
 80060f4:	409a      	lsls	r2, r3
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d018      	beq.n	8006136 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 813a 	beq.w	800638c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006120:	e134      	b.n	800638c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8130 	beq.w	800638c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006134:	e12a      	b.n	800638c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8089 	bne.w	8006254 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a2b      	ldr	r2, [pc, #172]	@ (80061f4 <HAL_DMA_IRQHandler+0xc74>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04a      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a29      	ldr	r2, [pc, #164]	@ (80061f8 <HAL_DMA_IRQHandler+0xc78>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d045      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a28      	ldr	r2, [pc, #160]	@ (80061fc <HAL_DMA_IRQHandler+0xc7c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a26      	ldr	r2, [pc, #152]	@ (8006200 <HAL_DMA_IRQHandler+0xc80>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a25      	ldr	r2, [pc, #148]	@ (8006204 <HAL_DMA_IRQHandler+0xc84>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d036      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_DMA_IRQHandler+0xc88>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d031      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <HAL_DMA_IRQHandler+0xc8c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d02c      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a20      	ldr	r2, [pc, #128]	@ (8006210 <HAL_DMA_IRQHandler+0xc90>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d027      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1f      	ldr	r2, [pc, #124]	@ (8006214 <HAL_DMA_IRQHandler+0xc94>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_DMA_IRQHandler+0xc98>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <HAL_DMA_IRQHandler+0xc9c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <HAL_DMA_IRQHandler+0xca0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <HAL_DMA_IRQHandler+0xca4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <HAL_DMA_IRQHandler+0xca8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a16      	ldr	r2, [pc, #88]	@ (800622c <HAL_DMA_IRQHandler+0xcac>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xc62>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a14      	ldr	r2, [pc, #80]	@ (8006230 <HAL_DMA_IRQHandler+0xcb0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d128      	bne.n	8006234 <HAL_DMA_IRQHandler+0xcb4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0214 	bic.w	r2, r2, #20
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e027      	b.n	8006244 <HAL_DMA_IRQHandler+0xcc4>
 80061f4:	40020010 	.word	0x40020010
 80061f8:	40020028 	.word	0x40020028
 80061fc:	40020040 	.word	0x40020040
 8006200:	40020058 	.word	0x40020058
 8006204:	40020070 	.word	0x40020070
 8006208:	40020088 	.word	0x40020088
 800620c:	400200a0 	.word	0x400200a0
 8006210:	400200b8 	.word	0x400200b8
 8006214:	40020410 	.word	0x40020410
 8006218:	40020428 	.word	0x40020428
 800621c:	40020440 	.word	0x40020440
 8006220:	40020458 	.word	0x40020458
 8006224:	40020470 	.word	0x40020470
 8006228:	40020488 	.word	0x40020488
 800622c:	400204a0 	.word	0x400204a0
 8006230:	400204b8 	.word	0x400204b8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 020a 	bic.w	r2, r2, #10
 8006242:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8097 	beq.w	800638c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006266:	e091      	b.n	800638c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	2208      	movs	r2, #8
 8006272:	409a      	lsls	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8088 	beq.w	800638e <HAL_DMA_IRQHandler+0xe0e>
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8082 	beq.w	800638e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a41      	ldr	r2, [pc, #260]	@ (8006394 <HAL_DMA_IRQHandler+0xe14>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a3f      	ldr	r2, [pc, #252]	@ (8006398 <HAL_DMA_IRQHandler+0xe18>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a3e      	ldr	r2, [pc, #248]	@ (800639c <HAL_DMA_IRQHandler+0xe1c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a3c      	ldr	r2, [pc, #240]	@ (80063a0 <HAL_DMA_IRQHandler+0xe20>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3b      	ldr	r2, [pc, #236]	@ (80063a4 <HAL_DMA_IRQHandler+0xe24>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a39      	ldr	r2, [pc, #228]	@ (80063a8 <HAL_DMA_IRQHandler+0xe28>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a38      	ldr	r2, [pc, #224]	@ (80063ac <HAL_DMA_IRQHandler+0xe2c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a36      	ldr	r2, [pc, #216]	@ (80063b0 <HAL_DMA_IRQHandler+0xe30>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a35      	ldr	r2, [pc, #212]	@ (80063b4 <HAL_DMA_IRQHandler+0xe34>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a33      	ldr	r2, [pc, #204]	@ (80063b8 <HAL_DMA_IRQHandler+0xe38>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a32      	ldr	r2, [pc, #200]	@ (80063bc <HAL_DMA_IRQHandler+0xe3c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a30      	ldr	r2, [pc, #192]	@ (80063c0 <HAL_DMA_IRQHandler+0xe40>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2f      	ldr	r2, [pc, #188]	@ (80063c4 <HAL_DMA_IRQHandler+0xe44>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2d      	ldr	r2, [pc, #180]	@ (80063c8 <HAL_DMA_IRQHandler+0xe48>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2c      	ldr	r2, [pc, #176]	@ (80063cc <HAL_DMA_IRQHandler+0xe4c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_DMA_IRQHandler+0xdaa>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2a      	ldr	r2, [pc, #168]	@ (80063d0 <HAL_DMA_IRQHandler+0xe50>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <HAL_DMA_IRQHandler+0xdbc>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 021c 	bic.w	r2, r2, #28
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e007      	b.n	800634c <HAL_DMA_IRQHandler+0xdcc>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 020e 	bic.w	r2, r2, #14
 800634a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2201      	movs	r2, #1
 8006356:	409a      	lsls	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
 8006382:	e004      	b.n	800638e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800638c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800638e:	3728      	adds	r7, #40	@ 0x28
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40020010 	.word	0x40020010
 8006398:	40020028 	.word	0x40020028
 800639c:	40020040 	.word	0x40020040
 80063a0:	40020058 	.word	0x40020058
 80063a4:	40020070 	.word	0x40020070
 80063a8:	40020088 	.word	0x40020088
 80063ac:	400200a0 	.word	0x400200a0
 80063b0:	400200b8 	.word	0x400200b8
 80063b4:	40020410 	.word	0x40020410
 80063b8:	40020428 	.word	0x40020428
 80063bc:	40020440 	.word	0x40020440
 80063c0:	40020458 	.word	0x40020458
 80063c4:	40020470 	.word	0x40020470
 80063c8:	40020488 	.word	0x40020488
 80063cc:	400204a0 	.word	0x400204a0
 80063d0:	400204b8 	.word	0x400204b8

080063d4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063e2:	b2db      	uxtb	r3, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006420:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a7f      	ldr	r2, [pc, #508]	@ (8006624 <DMA_SetConfig+0x21c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d072      	beq.n	8006512 <DMA_SetConfig+0x10a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a7d      	ldr	r2, [pc, #500]	@ (8006628 <DMA_SetConfig+0x220>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d06d      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7c      	ldr	r2, [pc, #496]	@ (800662c <DMA_SetConfig+0x224>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d068      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a7a      	ldr	r2, [pc, #488]	@ (8006630 <DMA_SetConfig+0x228>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d063      	beq.n	8006512 <DMA_SetConfig+0x10a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a79      	ldr	r2, [pc, #484]	@ (8006634 <DMA_SetConfig+0x22c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d05e      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a77      	ldr	r2, [pc, #476]	@ (8006638 <DMA_SetConfig+0x230>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d059      	beq.n	8006512 <DMA_SetConfig+0x10a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a76      	ldr	r2, [pc, #472]	@ (800663c <DMA_SetConfig+0x234>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d054      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a74      	ldr	r2, [pc, #464]	@ (8006640 <DMA_SetConfig+0x238>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d04f      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a73      	ldr	r2, [pc, #460]	@ (8006644 <DMA_SetConfig+0x23c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04a      	beq.n	8006512 <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a71      	ldr	r2, [pc, #452]	@ (8006648 <DMA_SetConfig+0x240>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d045      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a70      	ldr	r2, [pc, #448]	@ (800664c <DMA_SetConfig+0x244>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d040      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a6e      	ldr	r2, [pc, #440]	@ (8006650 <DMA_SetConfig+0x248>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d03b      	beq.n	8006512 <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a6d      	ldr	r2, [pc, #436]	@ (8006654 <DMA_SetConfig+0x24c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d036      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006658 <DMA_SetConfig+0x250>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6a      	ldr	r2, [pc, #424]	@ (800665c <DMA_SetConfig+0x254>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02c      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a68      	ldr	r2, [pc, #416]	@ (8006660 <DMA_SetConfig+0x258>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d027      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a67      	ldr	r2, [pc, #412]	@ (8006664 <DMA_SetConfig+0x25c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a65      	ldr	r2, [pc, #404]	@ (8006668 <DMA_SetConfig+0x260>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01d      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a64      	ldr	r2, [pc, #400]	@ (800666c <DMA_SetConfig+0x264>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a62      	ldr	r2, [pc, #392]	@ (8006670 <DMA_SetConfig+0x268>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a61      	ldr	r2, [pc, #388]	@ (8006674 <DMA_SetConfig+0x26c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a5f      	ldr	r2, [pc, #380]	@ (8006678 <DMA_SetConfig+0x270>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <DMA_SetConfig+0x10a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a5e      	ldr	r2, [pc, #376]	@ (800667c <DMA_SetConfig+0x274>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <DMA_SetConfig+0x10a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a5c      	ldr	r2, [pc, #368]	@ (8006680 <DMA_SetConfig+0x278>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d101      	bne.n	8006516 <DMA_SetConfig+0x10e>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <DMA_SetConfig+0x110>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006524:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006536:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a39      	ldr	r2, [pc, #228]	@ (8006624 <DMA_SetConfig+0x21c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04a      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a38      	ldr	r2, [pc, #224]	@ (8006628 <DMA_SetConfig+0x220>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a36      	ldr	r2, [pc, #216]	@ (800662c <DMA_SetConfig+0x224>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d040      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a35      	ldr	r2, [pc, #212]	@ (8006630 <DMA_SetConfig+0x228>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a33      	ldr	r2, [pc, #204]	@ (8006634 <DMA_SetConfig+0x22c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <DMA_SetConfig+0x230>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a30      	ldr	r2, [pc, #192]	@ (800663c <DMA_SetConfig+0x234>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2f      	ldr	r2, [pc, #188]	@ (8006640 <DMA_SetConfig+0x238>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a2d      	ldr	r2, [pc, #180]	@ (8006644 <DMA_SetConfig+0x23c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2c      	ldr	r2, [pc, #176]	@ (8006648 <DMA_SetConfig+0x240>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2a      	ldr	r2, [pc, #168]	@ (800664c <DMA_SetConfig+0x244>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a29      	ldr	r2, [pc, #164]	@ (8006650 <DMA_SetConfig+0x248>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a27      	ldr	r2, [pc, #156]	@ (8006654 <DMA_SetConfig+0x24c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a26      	ldr	r2, [pc, #152]	@ (8006658 <DMA_SetConfig+0x250>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a24      	ldr	r2, [pc, #144]	@ (800665c <DMA_SetConfig+0x254>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <DMA_SetConfig+0x1d0>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <DMA_SetConfig+0x258>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <DMA_SetConfig+0x1d4>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <DMA_SetConfig+0x1d6>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d059      	beq.n	8006696 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	223f      	movs	r2, #63	@ 0x3f
 80065ec:	409a      	lsls	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006600:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b40      	cmp	r3, #64	@ 0x40
 8006610:	d138      	bne.n	8006684 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006622:	e086      	b.n	8006732 <DMA_SetConfig+0x32a>
 8006624:	40020010 	.word	0x40020010
 8006628:	40020028 	.word	0x40020028
 800662c:	40020040 	.word	0x40020040
 8006630:	40020058 	.word	0x40020058
 8006634:	40020070 	.word	0x40020070
 8006638:	40020088 	.word	0x40020088
 800663c:	400200a0 	.word	0x400200a0
 8006640:	400200b8 	.word	0x400200b8
 8006644:	40020410 	.word	0x40020410
 8006648:	40020428 	.word	0x40020428
 800664c:	40020440 	.word	0x40020440
 8006650:	40020458 	.word	0x40020458
 8006654:	40020470 	.word	0x40020470
 8006658:	40020488 	.word	0x40020488
 800665c:	400204a0 	.word	0x400204a0
 8006660:	400204b8 	.word	0x400204b8
 8006664:	58025408 	.word	0x58025408
 8006668:	5802541c 	.word	0x5802541c
 800666c:	58025430 	.word	0x58025430
 8006670:	58025444 	.word	0x58025444
 8006674:	58025458 	.word	0x58025458
 8006678:	5802546c 	.word	0x5802546c
 800667c:	58025480 	.word	0x58025480
 8006680:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]
}
 8006694:	e04d      	b.n	8006732 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <DMA_SetConfig+0x338>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <DMA_SetConfig+0x33c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a26      	ldr	r2, [pc, #152]	@ (8006748 <DMA_SetConfig+0x340>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a24      	ldr	r2, [pc, #144]	@ (800674c <DMA_SetConfig+0x344>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a23      	ldr	r2, [pc, #140]	@ (8006750 <DMA_SetConfig+0x348>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a21      	ldr	r2, [pc, #132]	@ (8006754 <DMA_SetConfig+0x34c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a20      	ldr	r2, [pc, #128]	@ (8006758 <DMA_SetConfig+0x350>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <DMA_SetConfig+0x2de>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <DMA_SetConfig+0x354>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d101      	bne.n	80066ea <DMA_SetConfig+0x2e2>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <DMA_SetConfig+0x2e4>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d020      	beq.n	8006732 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2201      	movs	r2, #1
 80066fa:	409a      	lsls	r2, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b40      	cmp	r3, #64	@ 0x40
 800670e:	d108      	bne.n	8006722 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	60da      	str	r2, [r3, #12]
}
 8006720:	e007      	b.n	8006732 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	60da      	str	r2, [r3, #12]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	58025408 	.word	0x58025408
 8006744:	5802541c 	.word	0x5802541c
 8006748:	58025430 	.word	0x58025430
 800674c:	58025444 	.word	0x58025444
 8006750:	58025458 	.word	0x58025458
 8006754:	5802546c 	.word	0x5802546c
 8006758:	58025480 	.word	0x58025480
 800675c:	58025494 	.word	0x58025494

08006760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a42      	ldr	r2, [pc, #264]	@ (8006878 <DMA_CalcBaseAndBitshift+0x118>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04a      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a41      	ldr	r2, [pc, #260]	@ (800687c <DMA_CalcBaseAndBitshift+0x11c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d045      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a3f      	ldr	r2, [pc, #252]	@ (8006880 <DMA_CalcBaseAndBitshift+0x120>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d040      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3e      	ldr	r2, [pc, #248]	@ (8006884 <DMA_CalcBaseAndBitshift+0x124>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d03b      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a3c      	ldr	r2, [pc, #240]	@ (8006888 <DMA_CalcBaseAndBitshift+0x128>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d036      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a3b      	ldr	r2, [pc, #236]	@ (800688c <DMA_CalcBaseAndBitshift+0x12c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d031      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a39      	ldr	r2, [pc, #228]	@ (8006890 <DMA_CalcBaseAndBitshift+0x130>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02c      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a38      	ldr	r2, [pc, #224]	@ (8006894 <DMA_CalcBaseAndBitshift+0x134>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d027      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a36      	ldr	r2, [pc, #216]	@ (8006898 <DMA_CalcBaseAndBitshift+0x138>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a35      	ldr	r2, [pc, #212]	@ (800689c <DMA_CalcBaseAndBitshift+0x13c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01d      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a33      	ldr	r2, [pc, #204]	@ (80068a0 <DMA_CalcBaseAndBitshift+0x140>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <DMA_CalcBaseAndBitshift+0x144>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a30      	ldr	r2, [pc, #192]	@ (80068a8 <DMA_CalcBaseAndBitshift+0x148>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a2f      	ldr	r2, [pc, #188]	@ (80068ac <DMA_CalcBaseAndBitshift+0x14c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2d      	ldr	r2, [pc, #180]	@ (80068b0 <DMA_CalcBaseAndBitshift+0x150>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <DMA_CalcBaseAndBitshift+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2c      	ldr	r2, [pc, #176]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x154>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <DMA_CalcBaseAndBitshift+0xac>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <DMA_CalcBaseAndBitshift+0xae>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d024      	beq.n	800685c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	3b10      	subs	r3, #16
 800681a:	4a27      	ldr	r2, [pc, #156]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x158>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	4a24      	ldr	r2, [pc, #144]	@ (80068bc <DMA_CalcBaseAndBitshift+0x15c>)
 800682c:	5cd3      	ldrb	r3, [r2, r3]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d908      	bls.n	800684c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	4b1f      	ldr	r3, [pc, #124]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x160>)
 8006842:	4013      	ands	r3, r2
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	@ 0x58
 800684a:	e00d      	b.n	8006868 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	4b1b      	ldr	r3, [pc, #108]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x160>)
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6593      	str	r3, [r2, #88]	@ 0x58
 800685a:	e005      	b.n	8006868 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40020010 	.word	0x40020010
 800687c:	40020028 	.word	0x40020028
 8006880:	40020040 	.word	0x40020040
 8006884:	40020058 	.word	0x40020058
 8006888:	40020070 	.word	0x40020070
 800688c:	40020088 	.word	0x40020088
 8006890:	400200a0 	.word	0x400200a0
 8006894:	400200b8 	.word	0x400200b8
 8006898:	40020410 	.word	0x40020410
 800689c:	40020428 	.word	0x40020428
 80068a0:	40020440 	.word	0x40020440
 80068a4:	40020458 	.word	0x40020458
 80068a8:	40020470 	.word	0x40020470
 80068ac:	40020488 	.word	0x40020488
 80068b0:	400204a0 	.word	0x400204a0
 80068b4:	400204b8 	.word	0x400204b8
 80068b8:	aaaaaaab 	.word	0xaaaaaaab
 80068bc:	08017a10 	.word	0x08017a10
 80068c0:	fffffc00 	.word	0xfffffc00

080068c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d120      	bne.n	800691a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d858      	bhi.n	8006992 <DMA_CheckFifoParam+0xce>
 80068e0:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <DMA_CheckFifoParam+0x24>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	0800690b 	.word	0x0800690b
 80068f0:	080068f9 	.word	0x080068f9
 80068f4:	08006993 	.word	0x08006993
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d048      	beq.n	8006996 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006908:	e045      	b.n	8006996 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006912:	d142      	bne.n	800699a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006918:	e03f      	b.n	800699a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d123      	bne.n	800696c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b03      	cmp	r3, #3
 800692a:	d838      	bhi.n	800699e <DMA_CheckFifoParam+0xda>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <DMA_CheckFifoParam+0x70>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	0800694b 	.word	0x0800694b
 800693c:	08006945 	.word	0x08006945
 8006940:	0800695d 	.word	0x0800695d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
        break;
 8006948:	e030      	b.n	80069ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d025      	beq.n	80069a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800695a:	e022      	b.n	80069a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006964:	d11f      	bne.n	80069a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800696a:	e01c      	b.n	80069a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	2b02      	cmp	r3, #2
 8006972:	d902      	bls.n	800697a <DMA_CheckFifoParam+0xb6>
 8006974:	2b03      	cmp	r3, #3
 8006976:	d003      	beq.n	8006980 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006978:	e018      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
        break;
 800697e:	e015      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
    break;
 8006990:	e00b      	b.n	80069aa <DMA_CheckFifoParam+0xe6>
        break;
 8006992:	bf00      	nop
 8006994:	e00a      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        break;
 8006996:	bf00      	nop
 8006998:	e008      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        break;
 800699a:	bf00      	nop
 800699c:	e006      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        break;
 800699e:	bf00      	nop
 80069a0:	e004      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
        break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
    break;
 80069aa:	bf00      	nop
    }
  }

  return status;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop

080069bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a38      	ldr	r2, [pc, #224]	@ (8006ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a36      	ldr	r2, [pc, #216]	@ (8006ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01d      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a35      	ldr	r2, [pc, #212]	@ (8006ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a33      	ldr	r2, [pc, #204]	@ (8006abc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a32      	ldr	r2, [pc, #200]	@ (8006ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a30      	ldr	r2, [pc, #192]	@ (8006ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a2d      	ldr	r2, [pc, #180]	@ (8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01a      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	3b08      	subs	r3, #8
 8006a2c:	4a28      	ldr	r2, [pc, #160]	@ (8006ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4b26      	ldr	r3, [pc, #152]	@ (8006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	461a      	mov	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a24      	ldr	r2, [pc, #144]	@ (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2201      	movs	r2, #1
 8006a52:	409a      	lsls	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a58:	e024      	b.n	8006aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	3b10      	subs	r3, #16
 8006a62:	4a1e      	ldr	r2, [pc, #120]	@ (8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a64:	fba2 2303 	umull	r2, r3, r2, r3
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d806      	bhi.n	8006a82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d902      	bls.n	8006a82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4b18      	ldr	r3, [pc, #96]	@ (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	58025408 	.word	0x58025408
 8006ab4:	5802541c 	.word	0x5802541c
 8006ab8:	58025430 	.word	0x58025430
 8006abc:	58025444 	.word	0x58025444
 8006ac0:	58025458 	.word	0x58025458
 8006ac4:	5802546c 	.word	0x5802546c
 8006ac8:	58025480 	.word	0x58025480
 8006acc:	58025494 	.word	0x58025494
 8006ad0:	cccccccd 	.word	0xcccccccd
 8006ad4:	16009600 	.word	0x16009600
 8006ad8:	58025880 	.word	0x58025880
 8006adc:	aaaaaaab 	.word	0xaaaaaaab
 8006ae0:	400204b8 	.word	0x400204b8
 8006ae4:	4002040f 	.word	0x4002040f
 8006ae8:	10008200 	.word	0x10008200
 8006aec:	40020880 	.word	0x40020880

08006af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04a      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d847      	bhi.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a25      	ldr	r2, [pc, #148]	@ (8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d022      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a24      	ldr	r2, [pc, #144]	@ (8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d01d      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a22      	ldr	r2, [pc, #136]	@ (8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d018      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a21      	ldr	r2, [pc, #132]	@ (8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00e      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	@ (8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d009      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a15      	ldr	r2, [pc, #84]	@ (8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b78:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b7a:	e009      	b.n	8006b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4b14      	ldr	r3, [pc, #80]	@ (8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b8e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	58025408 	.word	0x58025408
 8006bac:	5802541c 	.word	0x5802541c
 8006bb0:	58025430 	.word	0x58025430
 8006bb4:	58025444 	.word	0x58025444
 8006bb8:	58025458 	.word	0x58025458
 8006bbc:	5802546c 	.word	0x5802546c
 8006bc0:	58025480 	.word	0x58025480
 8006bc4:	58025494 	.word	0x58025494
 8006bc8:	1600963f 	.word	0x1600963f
 8006bcc:	58025940 	.word	0x58025940
 8006bd0:	1000823f 	.word	0x1000823f
 8006bd4:	40020940 	.word	0x40020940

08006bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b089      	sub	sp, #36	@ 0x24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006be6:	4b86      	ldr	r3, [pc, #536]	@ (8006e00 <HAL_GPIO_Init+0x228>)
 8006be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bea:	e18c      	b.n	8006f06 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 817e 	beq.w	8006f00 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d005      	beq.n	8006c1c <HAL_GPIO_Init+0x44>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d130      	bne.n	8006c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	2203      	movs	r2, #3
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c52:	2201      	movs	r2, #1
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	091b      	lsrs	r3, r3, #4
 8006c68:	f003 0201 	and.w	r2, r3, #1
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d017      	beq.n	8006cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	2203      	movs	r2, #3
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d123      	bne.n	8006d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	08da      	lsrs	r2, r3, #3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3208      	adds	r2, #8
 8006cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	220f      	movs	r2, #15
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	08da      	lsrs	r2, r3, #3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3208      	adds	r2, #8
 8006d08:	69b9      	ldr	r1, [r7, #24]
 8006d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	2203      	movs	r2, #3
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 0203 	and.w	r2, r3, #3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80d8 	beq.w	8006f00 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d50:	4b2c      	ldr	r3, [pc, #176]	@ (8006e04 <HAL_GPIO_Init+0x22c>)
 8006d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d56:	4a2b      	ldr	r2, [pc, #172]	@ (8006e04 <HAL_GPIO_Init+0x22c>)
 8006d58:	f043 0302 	orr.w	r3, r3, #2
 8006d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d60:	4b28      	ldr	r3, [pc, #160]	@ (8006e04 <HAL_GPIO_Init+0x22c>)
 8006d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d6e:	4a26      	ldr	r2, [pc, #152]	@ (8006e08 <HAL_GPIO_Init+0x230>)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	089b      	lsrs	r3, r3, #2
 8006d74:	3302      	adds	r3, #2
 8006d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	220f      	movs	r2, #15
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1d      	ldr	r2, [pc, #116]	@ (8006e0c <HAL_GPIO_Init+0x234>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d04a      	beq.n	8006e30 <HAL_GPIO_Init+0x258>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e10 <HAL_GPIO_Init+0x238>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d02b      	beq.n	8006dfa <HAL_GPIO_Init+0x222>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e14 <HAL_GPIO_Init+0x23c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d025      	beq.n	8006df6 <HAL_GPIO_Init+0x21e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1a      	ldr	r2, [pc, #104]	@ (8006e18 <HAL_GPIO_Init+0x240>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01f      	beq.n	8006df2 <HAL_GPIO_Init+0x21a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a19      	ldr	r2, [pc, #100]	@ (8006e1c <HAL_GPIO_Init+0x244>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d019      	beq.n	8006dee <HAL_GPIO_Init+0x216>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	@ (8006e20 <HAL_GPIO_Init+0x248>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <HAL_GPIO_Init+0x212>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a17      	ldr	r2, [pc, #92]	@ (8006e24 <HAL_GPIO_Init+0x24c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00d      	beq.n	8006de6 <HAL_GPIO_Init+0x20e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <HAL_GPIO_Init+0x250>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <HAL_GPIO_Init+0x20a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <HAL_GPIO_Init+0x254>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d101      	bne.n	8006dde <HAL_GPIO_Init+0x206>
 8006dda:	2309      	movs	r3, #9
 8006ddc:	e029      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006dde:	230a      	movs	r3, #10
 8006de0:	e027      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006de2:	2307      	movs	r3, #7
 8006de4:	e025      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006de6:	2306      	movs	r3, #6
 8006de8:	e023      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006dea:	2305      	movs	r3, #5
 8006dec:	e021      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006dee:	2304      	movs	r3, #4
 8006df0:	e01f      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006df2:	2303      	movs	r3, #3
 8006df4:	e01d      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e01b      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e019      	b.n	8006e32 <HAL_GPIO_Init+0x25a>
 8006dfe:	bf00      	nop
 8006e00:	58000080 	.word	0x58000080
 8006e04:	58024400 	.word	0x58024400
 8006e08:	58000400 	.word	0x58000400
 8006e0c:	58020000 	.word	0x58020000
 8006e10:	58020400 	.word	0x58020400
 8006e14:	58020800 	.word	0x58020800
 8006e18:	58020c00 	.word	0x58020c00
 8006e1c:	58021000 	.word	0x58021000
 8006e20:	58021400 	.word	0x58021400
 8006e24:	58021800 	.word	0x58021800
 8006e28:	58021c00 	.word	0x58021c00
 8006e2c:	58022400 	.word	0x58022400
 8006e30:	2300      	movs	r3, #0
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	f002 0203 	and.w	r2, r2, #3
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	4093      	lsls	r3, r2
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e42:	4938      	ldr	r1, [pc, #224]	@ (8006f24 <HAL_GPIO_Init+0x34c>)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	3302      	adds	r3, #2
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f47f ae6b 	bne.w	8006bec <HAL_GPIO_Init+0x14>
  }
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	3724      	adds	r7, #36	@ 0x24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	58000400 	.word	0x58000400

08006f28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f36:	4b72      	ldr	r3, [pc, #456]	@ (8007100 <HAL_GPIO_DeInit+0x1d8>)
 8006f38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006f3a:	e0d3      	b.n	80070e4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	4013      	ands	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80c6 	beq.w	80070de <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006f52:	4a6c      	ldr	r2, [pc, #432]	@ (8007104 <HAL_GPIO_DeInit+0x1dc>)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	3302      	adds	r3, #2
 8006f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	220f      	movs	r2, #15
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a64      	ldr	r2, [pc, #400]	@ (8007108 <HAL_GPIO_DeInit+0x1e0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d031      	beq.n	8006fe0 <HAL_GPIO_DeInit+0xb8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a63      	ldr	r2, [pc, #396]	@ (800710c <HAL_GPIO_DeInit+0x1e4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d02b      	beq.n	8006fdc <HAL_GPIO_DeInit+0xb4>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a62      	ldr	r2, [pc, #392]	@ (8007110 <HAL_GPIO_DeInit+0x1e8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d025      	beq.n	8006fd8 <HAL_GPIO_DeInit+0xb0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a61      	ldr	r2, [pc, #388]	@ (8007114 <HAL_GPIO_DeInit+0x1ec>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01f      	beq.n	8006fd4 <HAL_GPIO_DeInit+0xac>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a60      	ldr	r2, [pc, #384]	@ (8007118 <HAL_GPIO_DeInit+0x1f0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d019      	beq.n	8006fd0 <HAL_GPIO_DeInit+0xa8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800711c <HAL_GPIO_DeInit+0x1f4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_GPIO_DeInit+0xa4>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8007120 <HAL_GPIO_DeInit+0x1f8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00d      	beq.n	8006fc8 <HAL_GPIO_DeInit+0xa0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a5d      	ldr	r2, [pc, #372]	@ (8007124 <HAL_GPIO_DeInit+0x1fc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <HAL_GPIO_DeInit+0x9c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8007128 <HAL_GPIO_DeInit+0x200>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <HAL_GPIO_DeInit+0x98>
 8006fbc:	2309      	movs	r3, #9
 8006fbe:	e010      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fc0:	230a      	movs	r3, #10
 8006fc2:	e00e      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fc4:	2307      	movs	r3, #7
 8006fc6:	e00c      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fc8:	2306      	movs	r3, #6
 8006fca:	e00a      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fcc:	2305      	movs	r3, #5
 8006fce:	e008      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	e006      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e004      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e002      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_GPIO_DeInit+0xba>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	f002 0203 	and.w	r2, r2, #3
 8006fe8:	0092      	lsls	r2, r2, #2
 8006fea:	4093      	lsls	r3, r2
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d136      	bne.n	8007060 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	43db      	mvns	r3, r3
 8007008:	401a      	ands	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	43db      	mvns	r3, r3
 8007018:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800701c:	4013      	ands	r3, r2
 800701e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	43db      	mvns	r3, r3
 800702a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800702e:	4013      	ands	r3, r2
 8007030:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	220f      	movs	r2, #15
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007042:	4a30      	ldr	r2, [pc, #192]	@ (8007104 <HAL_GPIO_DeInit+0x1dc>)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	3302      	adds	r3, #2
 800704a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	43da      	mvns	r2, r3
 8007052:	482c      	ldr	r0, [pc, #176]	@ (8007104 <HAL_GPIO_DeInit+0x1dc>)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	400a      	ands	r2, r1
 800705a:	3302      	adds	r3, #2
 800705c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	2103      	movs	r1, #3
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	08da      	lsrs	r2, r3, #3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3208      	adds	r2, #8
 800707c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	220f      	movs	r2, #15
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	43db      	mvns	r3, r3
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	08d2      	lsrs	r2, r2, #3
 8007094:	4019      	ands	r1, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3208      	adds	r2, #8
 800709a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2103      	movs	r1, #3
 80070a8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	401a      	ands	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	2101      	movs	r1, #1
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	43db      	mvns	r3, r3
 80070c2:	401a      	ands	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2103      	movs	r1, #3
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	401a      	ands	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	3301      	adds	r3, #1
 80070e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f af25 	bne.w	8006f3c <HAL_GPIO_DeInit+0x14>
  }
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	58000080 	.word	0x58000080
 8007104:	58000400 	.word	0x58000400
 8007108:	58020000 	.word	0x58020000
 800710c:	58020400 	.word	0x58020400
 8007110:	58020800 	.word	0x58020800
 8007114:	58020c00 	.word	0x58020c00
 8007118:	58021000 	.word	0x58021000
 800711c:	58021400 	.word	0x58021400
 8007120:	58021800 	.word	0x58021800
 8007124:	58021c00 	.word	0x58021c00
 8007128:	58022400 	.word	0x58022400

0800712c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	807b      	strh	r3, [r7, #2]
 8007138:	4613      	mov	r3, r2
 800713a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800713c:	787b      	ldrb	r3, [r7, #1]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007142:	887a      	ldrh	r2, [r7, #2]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007148:	e003      	b.n	8007152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800714a:	887b      	ldrh	r3, [r7, #2]
 800714c:	041a      	lsls	r2, r3, #16
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	619a      	str	r2, [r3, #24]
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007170:	887a      	ldrh	r2, [r7, #2]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4013      	ands	r3, r2
 8007176:	041a      	lsls	r2, r3, #16
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	43d9      	mvns	r1, r3
 800717c:	887b      	ldrh	r3, [r7, #2]
 800717e:	400b      	ands	r3, r1
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	619a      	str	r2, [r3, #24]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e08b      	b.n	80072be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fa f9c8 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2224      	movs	r2, #36	@ 0x24
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80071e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d107      	bne.n	800720e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	e006      	b.n	800721c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800721a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d108      	bne.n	8007236 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	e007      	b.n	8007246 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007244:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b1d      	ldr	r3, [pc, #116]	@ (80072c8 <HAL_I2C_Init+0x134>)
 8007252:	430b      	orrs	r3, r1
 8007254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69d9      	ldr	r1, [r3, #28]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	02008000 	.word	0x02008000

080072cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	461a      	mov	r2, r3
 80072d8:	460b      	mov	r3, r1
 80072da:	817b      	strh	r3, [r7, #10]
 80072dc:	4613      	mov	r3, r2
 80072de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	f040 80fd 	bne.w	80074e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_I2C_Master_Transmit+0x30>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e0f6      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007304:	f7fc faa6 	bl	8003854 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	2319      	movs	r3, #25
 8007310:	2201      	movs	r2, #1
 8007312:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f002 f896 	bl	8009448 <I2C_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e0e1      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2221      	movs	r2, #33	@ 0x21
 800732a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2210      	movs	r2, #16
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	893a      	ldrh	r2, [r7, #8]
 8007346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	2bff      	cmp	r3, #255	@ 0xff
 8007356:	d906      	bls.n	8007366 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	22ff      	movs	r2, #255	@ 0xff
 800735c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800735e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e007      	b.n	8007376 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007370:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007374:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d024      	beq.n	80073c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	781a      	ldrb	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3301      	adds	r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	8979      	ldrh	r1, [r7, #10]
 80073ba:	4b4e      	ldr	r3, [pc, #312]	@ (80074f4 <HAL_I2C_Master_Transmit+0x228>)
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f002 fa91 	bl	80098e8 <I2C_TransferConfig>
 80073c6:	e066      	b.n	8007496 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	8979      	ldrh	r1, [r7, #10]
 80073d0:	4b48      	ldr	r3, [pc, #288]	@ (80074f4 <HAL_I2C_Master_Transmit+0x228>)
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f002 fa86 	bl	80098e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80073dc:	e05b      	b.n	8007496 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	6a39      	ldr	r1, [r7, #32]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f002 f889 	bl	80094fa <I2C_WaitOnTXISFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e07b      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	781a      	ldrb	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d034      	beq.n	8007496 <HAL_I2C_Master_Transmit+0x1ca>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	d130      	bne.n	8007496 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2200      	movs	r2, #0
 800743c:	2180      	movs	r1, #128	@ 0x80
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f002 f802 	bl	8009448 <I2C_WaitOnFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e04d      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007452:	b29b      	uxth	r3, r3
 8007454:	2bff      	cmp	r3, #255	@ 0xff
 8007456:	d90e      	bls.n	8007476 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	22ff      	movs	r2, #255	@ 0xff
 800745c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007462:	b2da      	uxtb	r2, r3
 8007464:	8979      	ldrh	r1, [r7, #10]
 8007466:	2300      	movs	r3, #0
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f002 fa3a 	bl	80098e8 <I2C_TransferConfig>
 8007474:	e00f      	b.n	8007496 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007484:	b2da      	uxtb	r2, r3
 8007486:	8979      	ldrh	r1, [r7, #10]
 8007488:	2300      	movs	r3, #0
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f002 fa29 	bl	80098e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d19e      	bne.n	80073de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	6a39      	ldr	r1, [r7, #32]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f002 f86f 	bl	8009588 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e01a      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2220      	movs	r2, #32
 80074ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <HAL_I2C_Master_Transmit+0x22c>)
 80074c8:	400b      	ands	r3, r1
 80074ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e000      	b.n	80074ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	80002000 	.word	0x80002000
 80074f8:	fe00e800 	.word	0xfe00e800

080074fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	461a      	mov	r2, r3
 8007508:	460b      	mov	r3, r1
 800750a:	817b      	strh	r3, [r7, #10]
 800750c:	4613      	mov	r3, r2
 800750e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b20      	cmp	r3, #32
 800751a:	f040 80db 	bne.w	80076d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_I2C_Master_Receive+0x30>
 8007528:	2302      	movs	r3, #2
 800752a:	e0d4      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007534:	f7fc f98e 	bl	8003854 <HAL_GetTick>
 8007538:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	2319      	movs	r3, #25
 8007540:	2201      	movs	r2, #1
 8007542:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 ff7e 	bl	8009448 <I2C_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e0bf      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2222      	movs	r2, #34	@ 0x22
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2210      	movs	r2, #16
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	893a      	ldrh	r2, [r7, #8]
 8007576:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	2bff      	cmp	r3, #255	@ 0xff
 8007586:	d90e      	bls.n	80075a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	22ff      	movs	r2, #255	@ 0xff
 800758c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007592:	b2da      	uxtb	r2, r3
 8007594:	8979      	ldrh	r1, [r7, #10]
 8007596:	4b52      	ldr	r3, [pc, #328]	@ (80076e0 <HAL_I2C_Master_Receive+0x1e4>)
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f002 f9a2 	bl	80098e8 <I2C_TransferConfig>
 80075a4:	e06d      	b.n	8007682 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	8979      	ldrh	r1, [r7, #10]
 80075b8:	4b49      	ldr	r3, [pc, #292]	@ (80076e0 <HAL_I2C_Master_Receive+0x1e4>)
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f002 f991 	bl	80098e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80075c6:	e05c      	b.n	8007682 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	6a39      	ldr	r1, [r7, #32]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f002 f81f 	bl	8009610 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e07c      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d034      	beq.n	8007682 <HAL_I2C_Master_Receive+0x186>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d130      	bne.n	8007682 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	2200      	movs	r2, #0
 8007628:	2180      	movs	r1, #128	@ 0x80
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f001 ff0c 	bl	8009448 <I2C_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e04d      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	2bff      	cmp	r3, #255	@ 0xff
 8007642:	d90e      	bls.n	8007662 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	22ff      	movs	r2, #255	@ 0xff
 8007648:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764e:	b2da      	uxtb	r2, r3
 8007650:	8979      	ldrh	r1, [r7, #10]
 8007652:	2300      	movs	r3, #0
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f002 f944 	bl	80098e8 <I2C_TransferConfig>
 8007660:	e00f      	b.n	8007682 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007670:	b2da      	uxtb	r2, r3
 8007672:	8979      	ldrh	r1, [r7, #10]
 8007674:	2300      	movs	r3, #0
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f002 f933 	bl	80098e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d19d      	bne.n	80075c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	6a39      	ldr	r1, [r7, #32]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f001 ff79 	bl	8009588 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e01a      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2220      	movs	r2, #32
 80076a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6859      	ldr	r1, [r3, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <HAL_I2C_Master_Receive+0x1e8>)
 80076b4:	400b      	ands	r3, r1
 80076b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	80002400 	.word	0x80002400
 80076e4:	fe00e800 	.word	0xfe00e800

080076e8 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	817b      	strh	r3, [r7, #10]
 80076fa:	460b      	mov	r3, r1
 80076fc:	813b      	strh	r3, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b20      	cmp	r3, #32
 800770c:	f040 80c2 	bne.w	8007894 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_I2C_Mem_Read_DMA+0x34>
 8007716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e0b6      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007736:	d101      	bne.n	800773c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007738:	2302      	movs	r3, #2
 800773a:	e0ac      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_I2C_Mem_Read_DMA+0x62>
 8007746:	2302      	movs	r3, #2
 8007748:	e0a5      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2222      	movs	r2, #34	@ 0x22
 8007756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2240      	movs	r2, #64	@ 0x40
 800775e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a4a      	ldr	r2, [pc, #296]	@ (80078a0 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8007778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a49      	ldr	r2, [pc, #292]	@ (80078a4 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800777e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8007780:	897a      	ldrh	r2, [r7, #10]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	2bff      	cmp	r3, #255	@ 0xff
 800778e:	d903      	bls.n	8007798 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	22ff      	movs	r2, #255	@ 0xff
 8007794:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007796:	e004      	b.n	80077a2 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d109      	bne.n	80077bc <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80077ba:	e00b      	b.n	80077d4 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077bc:	893b      	ldrh	r3, [r7, #8]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80077ca:	893b      	ldrh	r3, [r7, #8]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d020      	beq.n	800781e <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	4a31      	ldr	r2, [pc, #196]	@ (80078a8 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80077e2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	4a30      	ldr	r2, [pc, #192]	@ (80078ac <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80077ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	2200      	movs	r2, #0
 80077f2:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f8:	2200      	movs	r2, #0
 80077fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3324      	adds	r3, #36	@ 0x24
 8007806:	4619      	mov	r1, r3
 8007808:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800780e:	f7fc fee9 	bl	80045e4 <HAL_DMA_Start_IT>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d127      	bne.n	800786c <HAL_I2C_Mem_Read_DMA+0x184>
 800781c:	e013      	b.n	8007846 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007832:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e027      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	b2da      	uxtb	r2, r3
 800784a:	8979      	ldrh	r1, [r7, #10]
 800784c:	4b18      	ldr	r3, [pc, #96]	@ (80078b0 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2300      	movs	r3, #0
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f002 f848 	bl	80098e8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007860:	2101      	movs	r1, #1
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f002 f872 	bl	800994c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	e014      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007880:	f043 0210 	orr.w	r2, r3, #16
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	ffff0000 	.word	0xffff0000
 80078a4:	08007f31 	.word	0x08007f31
 80078a8:	08009103 	.word	0x08009103
 80078ac:	08009199 	.word	0x08009199
 80078b0:	80002000 	.word	0x80002000

080078b4 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  HAL_I2C_ModeTypeDef tmp_mode = hi2c->Mode;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078c6:	73fb      	strb	r3, [r7, #15]

  if ((tmp_mode == HAL_I2C_MODE_MASTER) || (tmp_mode == HAL_I2C_MODE_MEM))
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d002      	beq.n	80078d4 <HAL_I2C_Master_Abort_IT+0x20>
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b40      	cmp	r3, #64	@ 0x40
 80078d2:	d13c      	bne.n	800794e <HAL_I2C_Master_Abort_IT+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_I2C_Master_Abort_IT+0x2e>
 80078de:	2302      	movs	r3, #2
 80078e0:	e036      	b.n	8007950 <HAL_I2C_Master_Abort_IT+0x9c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b21      	cmp	r3, #33	@ 0x21
 80078f4:	d107      	bne.n	8007906 <HAL_I2C_Master_Abort_IT+0x52>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80078f6:	2101      	movs	r1, #1
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 f8ab 	bl	8009a54 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2211      	movs	r2, #17
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
 8007904:	e00c      	b.n	8007920 <HAL_I2C_Master_Abort_IT+0x6c>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b22      	cmp	r3, #34	@ 0x22
 8007910:	d106      	bne.n	8007920 <HAL_I2C_Master_Abort_IT+0x6c>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007912:	2102      	movs	r1, #2
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f002 f89d 	bl	8009a54 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2212      	movs	r2, #18
 800791e:	631a      	str	r2, [r3, #48]	@ 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2260      	movs	r2, #96	@ 0x60
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 8007928:	8879      	ldrh	r1, [r7, #2]
 800792a:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <HAL_I2C_Master_Abort_IT+0xa4>)
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007932:	2201      	movs	r2, #1
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 ffd7 	bl	80098e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007942:	2120      	movs	r1, #32
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f002 f801 	bl	800994c <I2C_Enable_IRQ>

    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_I2C_Master_Abort_IT+0x9c>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	80004000 	.word	0x80004000

0800795c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	4798      	blx	r3
  }
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c4:	f043 0201 	orr.w	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	0a9b      	lsrs	r3, r3, #10
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d010      	beq.n	8007a04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	09db      	lsrs	r3, r3, #7
 80079e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f2:	f043 0208 	orr.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	0a5b      	lsrs	r3, r3, #9
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	09db      	lsrs	r3, r3, #7
 8007a14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a20:	f043 0202 	orr.w	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 030b 	and.w	r3, r3, #11
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fa21 	bl	8008e8c <I2C_ITError>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1c:	b2db      	uxtb	r3, r3
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <I2C_Slave_ISR_IT+0x24>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e0ed      	b.n	8007d42 <I2C_Slave_ISR_IT+0x200>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007b86:	6939      	ldr	r1, [r7, #16]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fecf 	bl	800892c <I2C_ITSlaveCplt>
 8007b8e:	e0d3      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	091b      	lsrs	r3, r3, #4
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d04d      	beq.n	8007c38 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	091b      	lsrs	r3, r3, #4
 8007ba0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d047      	beq.n	8007c38 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d128      	bne.n	8007c04 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b28      	cmp	r3, #40	@ 0x28
 8007bbc:	d108      	bne.n	8007bd0 <I2C_Slave_ISR_IT+0x8e>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bc4:	d104      	bne.n	8007bd0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007bc6:	6939      	ldr	r1, [r7, #16]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f001 f909 	bl	8008de0 <I2C_ITListenCplt>
 8007bce:	e032      	b.n	8007c36 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b29      	cmp	r3, #41	@ 0x29
 8007bda:	d10e      	bne.n	8007bfa <I2C_Slave_ISR_IT+0xb8>
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007be2:	d00a      	beq.n	8007bfa <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2210      	movs	r2, #16
 8007bea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f001 fa64 	bl	80090ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fd71 	bl	80086da <I2C_ITSlaveSeqCplt>
 8007bf8:	e01d      	b.n	8007c36 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2210      	movs	r2, #16
 8007c00:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c02:	e096      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c10:	f043 0204 	orr.w	r2, r3, #4
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <I2C_Slave_ISR_IT+0xe6>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c24:	f040 8085 	bne.w	8007d32 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 f92c 	bl	8008e8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c34:	e07d      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1f0>
 8007c36:	e07c      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d030      	beq.n	8007ca6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02a      	beq.n	8007ca6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d018      	beq.n	8007c8c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d14f      	bne.n	8007d36 <I2C_Slave_ISR_IT+0x1f4>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c9c:	d04b      	beq.n	8007d36 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fd1b 	bl	80086da <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ca4:	e047      	b.n	8007d36 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	08db      	lsrs	r3, r3, #3
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007cbe:	6939      	ldr	r1, [r7, #16]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fc49 	bl	8008558 <I2C_ITAddrCplt>
 8007cc6:	e037      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d031      	beq.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d02b      	beq.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d1a:	e00d      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d22:	d002      	beq.n	8007d2a <I2C_Slave_ISR_IT+0x1e8>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fcd5 	bl	80086da <I2C_ITSlaveSeqCplt>
 8007d30:	e002      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007d36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	af02      	add	r7, sp, #8
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <I2C_Master_ISR_DMA+0x1a>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e0e1      	b.n	8007f28 <I2C_Master_ISR_DMA+0x1de>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	091b      	lsrs	r3, r3, #4
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d017      	beq.n	8007da8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d011      	beq.n	8007da8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2210      	movs	r2, #16
 8007d8a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d90:	f043 0204 	orr.w	r2, r3, #4
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007d98:	2120      	movs	r1, #32
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f001 fdd6 	bl	800994c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 f98a 	bl	80090ba <I2C_Flush_TXDR>
 8007da6:	e0ba      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	09db      	lsrs	r3, r3, #7
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d072      	beq.n	8007e9a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d06c      	beq.n	8007e9a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04e      	beq.n	8007e78 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2bff      	cmp	r3, #255	@ 0xff
 8007df0:	d906      	bls.n	8007e00 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	22ff      	movs	r2, #255	@ 0xff
 8007df6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	e010      	b.n	8007e22 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e12:	d003      	beq.n	8007e1c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e002      	b.n	8007e22 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e20:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	8a79      	ldrh	r1, [r7, #18]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 fd59 	bl	80098e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b22      	cmp	r3, #34	@ 0x22
 8007e52:	d108      	bne.n	8007e66 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007e64:	e05b      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007e76:	e052      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e86:	d003      	beq.n	8007e90 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fbe9 	bl	8008660 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007e8e:	e046      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e90:	2140      	movs	r1, #64	@ 0x40
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fffa 	bl	8008e8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007e98:	e041      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	099b      	lsrs	r3, r3, #6
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d029      	beq.n	8007efa <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	099b      	lsrs	r3, r3, #6
 8007eaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d023      	beq.n	8007efa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d119      	bne.n	8007ef0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eca:	d027      	beq.n	8007f1c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ed4:	d108      	bne.n	8007ee8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ee4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007ee6:	e019      	b.n	8007f1c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 fbb9 	bl	8008660 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007eee:	e015      	b.n	8007f1c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ef0:	2140      	movs	r1, #64	@ 0x40
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 ffca 	bl	8008e8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ef8:	e010      	b.n	8007f1c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	095b      	lsrs	r3, r3, #5
 8007f0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fc3f 	bl	8008798 <I2C_ITMasterCplt>
 8007f1a:	e000      	b.n	8007f1e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007f1c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007f3c:	4b92      	ldr	r3, [pc, #584]	@ (8008188 <I2C_Mem_ISR_DMA+0x258>)
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <I2C_Mem_ISR_DMA+0x1e>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e118      	b.n	8008180 <I2C_Mem_ISR_DMA+0x250>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	091b      	lsrs	r3, r3, #4
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d017      	beq.n	8007f92 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d011      	beq.n	8007f92 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2210      	movs	r2, #16
 8007f74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007f82:	2120      	movs	r1, #32
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 fce1 	bl	800994c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 f895 	bl	80090ba <I2C_Flush_TXDR>
 8007f90:	e0f1      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00f      	beq.n	8007fbe <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007fb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fba:	651a      	str	r2, [r3, #80]	@ 0x50
 8007fbc:	e0db      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	09db      	lsrs	r3, r3, #7
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d060      	beq.n	800808c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	099b      	lsrs	r3, r3, #6
 8007fce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d05a      	beq.n	800808c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fd3b 	bl	8009a54 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007fde:	2110      	movs	r1, #16
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f001 fcb3 	bl	800994c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d048      	beq.n	8008082 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2bff      	cmp	r3, #255	@ 0xff
 8007ff8:	d910      	bls.n	800801c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	22ff      	movs	r2, #255	@ 0xff
 8007ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008004:	b299      	uxth	r1, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800800a:	b2da      	uxtb	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f001 fc67 	bl	80098e8 <I2C_TransferConfig>
 800801a:	e011      	b.n	8008040 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802a:	b299      	uxth	r1, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008030:	b2da      	uxtb	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f001 fc54 	bl	80098e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b22      	cmp	r3, #34	@ 0x22
 800805c:	d108      	bne.n	8008070 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800806c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800806e:	e082      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800807e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008080:	e079      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008082:	2140      	movs	r1, #64	@ 0x40
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 ff01 	bl	8008e8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800808a:	e074      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	099b      	lsrs	r3, r3, #6
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d05e      	beq.n	8008156 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	099b      	lsrs	r3, r3, #6
 800809c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d058      	beq.n	8008156 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080a4:	2101      	movs	r1, #1
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f001 fcd4 	bl	8009a54 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80080ac:	2110      	movs	r1, #16
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 fc4c 	bl	800994c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b22      	cmp	r3, #34	@ 0x22
 80080be:	d101      	bne.n	80080c4 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80080c0:	4b32      	ldr	r3, [pc, #200]	@ (800818c <I2C_Mem_ISR_DMA+0x25c>)
 80080c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2bff      	cmp	r3, #255	@ 0xff
 80080cc:	d910      	bls.n	80080f0 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	22ff      	movs	r2, #255	@ 0xff
 80080d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d8:	b299      	uxth	r1, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fbfd 	bl	80098e8 <I2C_TransferConfig>
 80080ee:	e011      	b.n	8008114 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fe:	b299      	uxth	r1, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008104:	b2da      	uxtb	r2, r3
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 fbea 	bl	80098e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b22      	cmp	r3, #34	@ 0x22
 8008130:	d108      	bne.n	8008144 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008140:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008142:	e018      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008152:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008154:	e00f      	b.n	8008176 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	095b      	lsrs	r3, r3, #5
 8008166:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 fb11 	bl	8008798 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	80002000 	.word	0x80002000
 800818c:	80002400 	.word	0x80002400

08008190 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <I2C_Slave_ISR_DMA+0x24>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e1cc      	b.n	800854e <I2C_Slave_ISR_DMA+0x3be>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	095b      	lsrs	r3, r3, #5
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fba8 	bl	800892c <I2C_ITSlaveCplt>
 80081dc:	e1b2      	b.n	8008544 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 819c 	beq.w	8008524 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8195 	beq.w	8008524 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0b9b      	lsrs	r3, r3, #14
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0bdb      	lsrs	r3, r3, #15
 800820a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8181 	beq.w	8008516 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d07c      	beq.n	8008316 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	0bdb      	lsrs	r3, r3, #15
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d076      	beq.n	8008316 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a75      	ldr	r2, [pc, #468]	@ (8008404 <I2C_Slave_ISR_DMA+0x274>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d059      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a73      	ldr	r2, [pc, #460]	@ (8008408 <I2C_Slave_ISR_DMA+0x278>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d053      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a71      	ldr	r2, [pc, #452]	@ (800840c <I2C_Slave_ISR_DMA+0x27c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d04d      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a6f      	ldr	r2, [pc, #444]	@ (8008410 <I2C_Slave_ISR_DMA+0x280>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d047      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a6d      	ldr	r2, [pc, #436]	@ (8008414 <I2C_Slave_ISR_DMA+0x284>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d041      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a6b      	ldr	r2, [pc, #428]	@ (8008418 <I2C_Slave_ISR_DMA+0x288>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d03b      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a69      	ldr	r2, [pc, #420]	@ (800841c <I2C_Slave_ISR_DMA+0x28c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d035      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a67      	ldr	r2, [pc, #412]	@ (8008420 <I2C_Slave_ISR_DMA+0x290>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d02f      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a65      	ldr	r2, [pc, #404]	@ (8008424 <I2C_Slave_ISR_DMA+0x294>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d029      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a63      	ldr	r2, [pc, #396]	@ (8008428 <I2C_Slave_ISR_DMA+0x298>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d023      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a61      	ldr	r2, [pc, #388]	@ (800842c <I2C_Slave_ISR_DMA+0x29c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d01d      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a5f      	ldr	r2, [pc, #380]	@ (8008430 <I2C_Slave_ISR_DMA+0x2a0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d017      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a5d      	ldr	r2, [pc, #372]	@ (8008434 <I2C_Slave_ISR_DMA+0x2a4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d011      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a5b      	ldr	r2, [pc, #364]	@ (8008438 <I2C_Slave_ISR_DMA+0x2a8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a59      	ldr	r2, [pc, #356]	@ (800843c <I2C_Slave_ISR_DMA+0x2ac>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d005      	beq.n	80082e8 <I2C_Slave_ISR_DMA+0x158>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a57      	ldr	r2, [pc, #348]	@ (8008440 <I2C_Slave_ISR_DMA+0x2b0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d109      	bne.n	80082fc <I2C_Slave_ISR_DMA+0x16c>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2301      	moveq	r3, #1
 80082f6:	2300      	movne	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	e008      	b.n	800830e <I2C_Slave_ISR_DMA+0x17e>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8008312:	2301      	movs	r3, #1
 8008314:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 809f 	beq.w	800845e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	0b9b      	lsrs	r3, r3, #14
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8098 	beq.w	800845e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a33      	ldr	r2, [pc, #204]	@ (8008404 <I2C_Slave_ISR_DMA+0x274>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d059      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a31      	ldr	r2, [pc, #196]	@ (8008408 <I2C_Slave_ISR_DMA+0x278>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d053      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a2f      	ldr	r2, [pc, #188]	@ (800840c <I2C_Slave_ISR_DMA+0x27c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d04d      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a2d      	ldr	r2, [pc, #180]	@ (8008410 <I2C_Slave_ISR_DMA+0x280>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d047      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a2b      	ldr	r2, [pc, #172]	@ (8008414 <I2C_Slave_ISR_DMA+0x284>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d041      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a29      	ldr	r2, [pc, #164]	@ (8008418 <I2C_Slave_ISR_DMA+0x288>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d03b      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a27      	ldr	r2, [pc, #156]	@ (800841c <I2C_Slave_ISR_DMA+0x28c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d035      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a25      	ldr	r2, [pc, #148]	@ (8008420 <I2C_Slave_ISR_DMA+0x290>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d02f      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a23      	ldr	r2, [pc, #140]	@ (8008424 <I2C_Slave_ISR_DMA+0x294>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d029      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a21      	ldr	r2, [pc, #132]	@ (8008428 <I2C_Slave_ISR_DMA+0x298>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d023      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	@ (800842c <I2C_Slave_ISR_DMA+0x29c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d01d      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <I2C_Slave_ISR_DMA+0x2a0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d017      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <I2C_Slave_ISR_DMA+0x2a4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d011      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <I2C_Slave_ISR_DMA+0x2a8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00b      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a17      	ldr	r2, [pc, #92]	@ (800843c <I2C_Slave_ISR_DMA+0x2ac>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d005      	beq.n	80083ee <I2C_Slave_ISR_DMA+0x25e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a15      	ldr	r2, [pc, #84]	@ (8008440 <I2C_Slave_ISR_DMA+0x2b0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d12a      	bne.n	8008444 <I2C_Slave_ISR_DMA+0x2b4>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e029      	b.n	8008456 <I2C_Slave_ISR_DMA+0x2c6>
 8008402:	bf00      	nop
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800845a:	2301      	movs	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d128      	bne.n	80084b6 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b28      	cmp	r3, #40	@ 0x28
 800846e:	d108      	bne.n	8008482 <I2C_Slave_ISR_DMA+0x2f2>
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008476:	d104      	bne.n	8008482 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fcb0 	bl	8008de0 <I2C_ITListenCplt>
 8008480:	e048      	b.n	8008514 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b29      	cmp	r3, #41	@ 0x29
 800848c:	d10e      	bne.n	80084ac <I2C_Slave_ISR_DMA+0x31c>
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008494:	d00a      	beq.n	80084ac <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2210      	movs	r2, #16
 800849c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 fe0b 	bl	80090ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f918 	bl	80086da <I2C_ITSlaveSeqCplt>
 80084aa:	e033      	b.n	8008514 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2210      	movs	r2, #16
 80084b2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80084b4:	e034      	b.n	8008520 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2210      	movs	r2, #16
 80084bc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084c2:	f043 0204 	orr.w	r2, r3, #4
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084d0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <I2C_Slave_ISR_DMA+0x350>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084de:	d11f      	bne.n	8008520 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	2b21      	cmp	r3, #33	@ 0x21
 80084e4:	d002      	beq.n	80084ec <I2C_Slave_ISR_DMA+0x35c>
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	2b29      	cmp	r3, #41	@ 0x29
 80084ea:	d103      	bne.n	80084f4 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2221      	movs	r2, #33	@ 0x21
 80084f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80084f2:	e008      	b.n	8008506 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b22      	cmp	r3, #34	@ 0x22
 80084f8:	d002      	beq.n	8008500 <I2C_Slave_ISR_DMA+0x370>
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084fe:	d102      	bne.n	8008506 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2222      	movs	r2, #34	@ 0x22
 8008504:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850a:	4619      	mov	r1, r3
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fcbd 	bl	8008e8c <I2C_ITError>
      if (treatdmanack == 1U)
 8008512:	e005      	b.n	8008520 <I2C_Slave_ISR_DMA+0x390>
 8008514:	e004      	b.n	8008520 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2210      	movs	r2, #16
 800851c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800851e:	e011      	b.n	8008544 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008520:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008522:	e00f      	b.n	8008544 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	08db      	lsrs	r3, r3, #3
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f80a 	bl	8008558 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008568:	b2db      	uxtb	r3, r3
 800856a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800856e:	2b28      	cmp	r3, #40	@ 0x28
 8008570:	d16a      	bne.n	8008648 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	b29b      	uxth	r3, r3
 800858c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008590:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800859e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80085ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d138      	bne.n	8008628 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80085b6:	897b      	ldrh	r3, [r7, #10]
 80085b8:	09db      	lsrs	r3, r3, #7
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	89bb      	ldrh	r3, [r7, #12]
 80085be:	4053      	eors	r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f003 0306 	and.w	r3, r3, #6
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d11c      	bne.n	8008604 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80085ca:	897b      	ldrh	r3, [r7, #10]
 80085cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d13b      	bne.n	8008658 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2208      	movs	r2, #8
 80085ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80085f6:	89ba      	ldrh	r2, [r7, #12]
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fa50 	bl	8007aa2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008602:	e029      	b.n	8008658 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008604:	893b      	ldrh	r3, [r7, #8]
 8008606:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fa21 	bl	8009a54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800861a:	89ba      	ldrh	r2, [r7, #12]
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fa3e 	bl	8007aa2 <HAL_I2C_AddrCallback>
}
 8008626:	e017      	b.n	8008658 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 fa11 	bl	8009a54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800863a:	89ba      	ldrh	r2, [r7, #12]
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff fa2e 	bl	8007aa2 <HAL_I2C_AddrCallback>
}
 8008646:	e007      	b.n	8008658 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2208      	movs	r2, #8
 800864e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b21      	cmp	r3, #33	@ 0x21
 800867a:	d115      	bne.n	80086a8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2211      	movs	r2, #17
 8008688:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008690:	2101      	movs	r1, #1
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 f9de 	bl	8009a54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff f9d6 	bl	8007a52 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086a6:	e014      	b.n	80086d2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2212      	movs	r2, #18
 80086b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80086bc:	2102      	movs	r1, #2
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 f9c8 	bl	8009a54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff f9ca 	bl	8007a66 <HAL_I2C_MasterRxCpltCallback>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	0b9b      	lsrs	r3, r3, #14
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d008      	beq.n	8008710 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e00d      	b.n	800872c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	0bdb      	lsrs	r3, r3, #15
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800872a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b29      	cmp	r3, #41	@ 0x29
 8008736:	d112      	bne.n	800875e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2228      	movs	r2, #40	@ 0x28
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2221      	movs	r2, #33	@ 0x21
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008746:	2101      	movs	r1, #1
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 f983 	bl	8009a54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff f98f 	bl	8007a7a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800875c:	e017      	b.n	800878e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b2a      	cmp	r3, #42	@ 0x2a
 8008768:	d111      	bne.n	800878e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2228      	movs	r2, #40	@ 0x28
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2222      	movs	r2, #34	@ 0x22
 8008776:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008778:	2102      	movs	r1, #2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 f96a 	bl	8009a54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff f980 	bl	8007a8e <HAL_I2C_SlaveRxCpltCallback>
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2220      	movs	r2, #32
 80087ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b21      	cmp	r3, #33	@ 0x21
 80087b8:	d107      	bne.n	80087ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087ba:	2101      	movs	r1, #1
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f949 	bl	8009a54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2211      	movs	r2, #17
 80087c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80087c8:	e00c      	b.n	80087e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	@ 0x22
 80087d4:	d106      	bne.n	80087e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80087d6:	2102      	movs	r1, #2
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f93b 	bl	8009a54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2212      	movs	r2, #18
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6859      	ldr	r1, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008924 <I2C_ITMasterCplt+0x18c>)
 80087f0:	400b      	ands	r3, r1
 80087f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a4a      	ldr	r2, [pc, #296]	@ (8008928 <I2C_ITMasterCplt+0x190>)
 80087fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2210      	movs	r2, #16
 8008812:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008818:	f043 0204 	orr.w	r2, r3, #4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b60      	cmp	r3, #96	@ 0x60
 800882a:	d10b      	bne.n	8008844 <I2C_ITMasterCplt+0xac>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	089b      	lsrs	r3, r3, #2
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	b2db      	uxtb	r3, r3
 8008840:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008842:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fc38 	bl	80090ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b60      	cmp	r3, #96	@ 0x60
 800885a:	d002      	beq.n	8008862 <I2C_ITMasterCplt+0xca>
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d006      	beq.n	8008870 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fb0f 	bl	8008e8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800886e:	e054      	b.n	800891a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b21      	cmp	r3, #33	@ 0x21
 800887a:	d124      	bne.n	80088c6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b40      	cmp	r3, #64	@ 0x40
 8008894:	d10b      	bne.n	80088ae <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff f913 	bl	8007ad2 <HAL_I2C_MemTxCpltCallback>
}
 80088ac:	e035      	b.n	800891a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff f8c7 	bl	8007a52 <HAL_I2C_MasterTxCpltCallback>
}
 80088c4:	e029      	b.n	800891a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b22      	cmp	r3, #34	@ 0x22
 80088d0:	d123      	bne.n	800891a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b40      	cmp	r3, #64	@ 0x40
 80088ea:	d10b      	bne.n	8008904 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7f8 ff37 	bl	8001770 <HAL_I2C_MemRxCpltCallback>
}
 8008902:	e00a      	b.n	800891a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f8a6 	bl	8007a66 <HAL_I2C_MasterRxCpltCallback>
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	fe00e800 	.word	0xfe00e800
 8008928:	ffff0000 	.word	0xffff0000

0800892c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800894e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2220      	movs	r2, #32
 8008956:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	2b21      	cmp	r3, #33	@ 0x21
 800895c:	d002      	beq.n	8008964 <I2C_ITSlaveCplt+0x38>
 800895e:	7afb      	ldrb	r3, [r7, #11]
 8008960:	2b29      	cmp	r3, #41	@ 0x29
 8008962:	d108      	bne.n	8008976 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008964:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 f873 	bl	8009a54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2221      	movs	r2, #33	@ 0x21
 8008972:	631a      	str	r2, [r3, #48]	@ 0x30
 8008974:	e019      	b.n	80089aa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008976:	7afb      	ldrb	r3, [r7, #11]
 8008978:	2b22      	cmp	r3, #34	@ 0x22
 800897a:	d002      	beq.n	8008982 <I2C_ITSlaveCplt+0x56>
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008980:	d108      	bne.n	8008994 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008982:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f864 	bl	8009a54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2222      	movs	r2, #34	@ 0x22
 8008990:	631a      	str	r2, [r3, #48]	@ 0x30
 8008992:	e00a      	b.n	80089aa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	2b28      	cmp	r3, #40	@ 0x28
 8008998:	d107      	bne.n	80089aa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800899a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f858 	bl	8009a54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6859      	ldr	r1, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	4b80      	ldr	r3, [pc, #512]	@ (8008bc8 <I2C_ITSlaveCplt+0x29c>)
 80089c6:	400b      	ands	r3, r1
 80089c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb75 	bl	80090ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	0b9b      	lsrs	r3, r3, #14
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d07a      	beq.n	8008ad2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8112 	beq.w	8008c1a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a73      	ldr	r2, [pc, #460]	@ (8008bcc <I2C_ITSlaveCplt+0x2a0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d059      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a71      	ldr	r2, [pc, #452]	@ (8008bd0 <I2C_ITSlaveCplt+0x2a4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d053      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a6f      	ldr	r2, [pc, #444]	@ (8008bd4 <I2C_ITSlaveCplt+0x2a8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d04d      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a6d      	ldr	r2, [pc, #436]	@ (8008bd8 <I2C_ITSlaveCplt+0x2ac>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d047      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8008bdc <I2C_ITSlaveCplt+0x2b0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d041      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a69      	ldr	r2, [pc, #420]	@ (8008be0 <I2C_ITSlaveCplt+0x2b4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d03b      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a67      	ldr	r2, [pc, #412]	@ (8008be4 <I2C_ITSlaveCplt+0x2b8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d035      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a65      	ldr	r2, [pc, #404]	@ (8008be8 <I2C_ITSlaveCplt+0x2bc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d02f      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a63      	ldr	r2, [pc, #396]	@ (8008bec <I2C_ITSlaveCplt+0x2c0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d029      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a61      	ldr	r2, [pc, #388]	@ (8008bf0 <I2C_ITSlaveCplt+0x2c4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d023      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a5f      	ldr	r2, [pc, #380]	@ (8008bf4 <I2C_ITSlaveCplt+0x2c8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a5d      	ldr	r2, [pc, #372]	@ (8008bf8 <I2C_ITSlaveCplt+0x2cc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d017      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a5b      	ldr	r2, [pc, #364]	@ (8008bfc <I2C_ITSlaveCplt+0x2d0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d011      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a59      	ldr	r2, [pc, #356]	@ (8008c00 <I2C_ITSlaveCplt+0x2d4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d00b      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a57      	ldr	r2, [pc, #348]	@ (8008c04 <I2C_ITSlaveCplt+0x2d8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d005      	beq.n	8008ab6 <I2C_ITSlaveCplt+0x18a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a55      	ldr	r2, [pc, #340]	@ (8008c08 <I2C_ITSlaveCplt+0x2dc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d105      	bne.n	8008ac2 <I2C_ITSlaveCplt+0x196>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	e004      	b.n	8008acc <I2C_ITSlaveCplt+0x1a0>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008ad0:	e0a3      	b.n	8008c1a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	0bdb      	lsrs	r3, r3, #15
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 809d 	beq.w	8008c1a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008aee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8090 	beq.w	8008c1a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a32      	ldr	r2, [pc, #200]	@ (8008bcc <I2C_ITSlaveCplt+0x2a0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d059      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a30      	ldr	r2, [pc, #192]	@ (8008bd0 <I2C_ITSlaveCplt+0x2a4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d053      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd4 <I2C_ITSlaveCplt+0x2a8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d04d      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a2c      	ldr	r2, [pc, #176]	@ (8008bd8 <I2C_ITSlaveCplt+0x2ac>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d047      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <I2C_ITSlaveCplt+0x2b0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d041      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a28      	ldr	r2, [pc, #160]	@ (8008be0 <I2C_ITSlaveCplt+0x2b4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d03b      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a26      	ldr	r2, [pc, #152]	@ (8008be4 <I2C_ITSlaveCplt+0x2b8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d035      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a24      	ldr	r2, [pc, #144]	@ (8008be8 <I2C_ITSlaveCplt+0x2bc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d02f      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a22      	ldr	r2, [pc, #136]	@ (8008bec <I2C_ITSlaveCplt+0x2c0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d029      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a20      	ldr	r2, [pc, #128]	@ (8008bf0 <I2C_ITSlaveCplt+0x2c4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d023      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1e      	ldr	r2, [pc, #120]	@ (8008bf4 <I2C_ITSlaveCplt+0x2c8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01d      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf8 <I2C_ITSlaveCplt+0x2cc>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d017      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1a      	ldr	r2, [pc, #104]	@ (8008bfc <I2C_ITSlaveCplt+0x2d0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d011      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <I2C_ITSlaveCplt+0x2d4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00b      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a16      	ldr	r2, [pc, #88]	@ (8008c04 <I2C_ITSlaveCplt+0x2d8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d005      	beq.n	8008bba <I2C_ITSlaveCplt+0x28e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a14      	ldr	r2, [pc, #80]	@ (8008c08 <I2C_ITSlaveCplt+0x2dc>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d128      	bne.n	8008c0c <I2C_ITSlaveCplt+0x2e0>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	e027      	b.n	8008c16 <I2C_ITSlaveCplt+0x2ea>
 8008bc6:	bf00      	nop
 8008bc8:	fe00e800 	.word	0xfe00e800
 8008bcc:	40020010 	.word	0x40020010
 8008bd0:	40020028 	.word	0x40020028
 8008bd4:	40020040 	.word	0x40020040
 8008bd8:	40020058 	.word	0x40020058
 8008bdc:	40020070 	.word	0x40020070
 8008be0:	40020088 	.word	0x40020088
 8008be4:	400200a0 	.word	0x400200a0
 8008be8:	400200b8 	.word	0x400200b8
 8008bec:	40020410 	.word	0x40020410
 8008bf0:	40020428 	.word	0x40020428
 8008bf4:	40020440 	.word	0x40020440
 8008bf8:	40020458 	.word	0x40020458
 8008bfc:	40020470 	.word	0x40020470
 8008c00:	40020488 	.word	0x40020488
 8008c04:	400204a0 	.word	0x400204a0
 8008c08:	400204b8 	.word	0x400204b8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	089b      	lsrs	r3, r3, #2
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d020      	beq.n	8008c68 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f023 0304 	bic.w	r3, r3, #4
 8008c2c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d005      	beq.n	8008c7e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c76:	f043 0204 	orr.w	r2, r3, #4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	091b      	lsrs	r3, r3, #4
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d04a      	beq.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	091b      	lsrs	r3, r3, #4
 8008c8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d044      	beq.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d128      	bne.n	8008cf2 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b28      	cmp	r3, #40	@ 0x28
 8008caa:	d108      	bne.n	8008cbe <I2C_ITSlaveCplt+0x392>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cb2:	d104      	bne.n	8008cbe <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008cb4:	6979      	ldr	r1, [r7, #20]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f892 	bl	8008de0 <I2C_ITListenCplt>
 8008cbc:	e030      	b.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b29      	cmp	r3, #41	@ 0x29
 8008cc8:	d10e      	bne.n	8008ce8 <I2C_ITSlaveCplt+0x3bc>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008cd0:	d00a      	beq.n	8008ce8 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9ed 	bl	80090ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fcfa 	bl	80086da <I2C_ITSlaveSeqCplt>
 8008ce6:	e01b      	b.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2210      	movs	r2, #16
 8008cee:	61da      	str	r2, [r3, #28]
 8008cf0:	e016      	b.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	f043 0204 	orr.w	r2, r3, #4
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <I2C_ITSlaveCplt+0x3e8>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d12:	d105      	bne.n	8008d20 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f8b6 	bl	8008e8c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d010      	beq.n	8008d58 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8a5 	bl	8008e8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b28      	cmp	r3, #40	@ 0x28
 8008d4c:	d141      	bne.n	8008dd2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d4e:	6979      	ldr	r1, [r7, #20]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f845 	bl	8008de0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d56:	e03c      	b.n	8008dd2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d60:	d014      	beq.n	8008d8c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff fcb9 	bl	80086da <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ddc <I2C_ITSlaveCplt+0x4b0>)
 8008d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fe fe9a 	bl	8007abe <HAL_I2C_ListenCpltCallback>
}
 8008d8a:	e022      	b.n	8008dd2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b22      	cmp	r3, #34	@ 0x22
 8008d96:	d10e      	bne.n	8008db6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fe fe6d 	bl	8007a8e <HAL_I2C_SlaveRxCpltCallback>
}
 8008db4:	e00d      	b.n	8008dd2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fe fe54 	bl	8007a7a <HAL_I2C_SlaveTxCpltCallback>
}
 8008dd2:	bf00      	nop
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	ffff0000 	.word	0xffff0000

08008de0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a26      	ldr	r2, [pc, #152]	@ (8008e88 <I2C_ITListenCplt+0xa8>)
 8008dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	089b      	lsrs	r3, r3, #2
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d022      	beq.n	8008e5e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e22:	b2d2      	uxtb	r2, r2
 8008e24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d012      	beq.n	8008e5e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	f043 0204 	orr.w	r2, r3, #4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e5e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fdf6 	bl	8009a54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2210      	movs	r2, #16
 8008e6e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7fe fe20 	bl	8007abe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	ffff0000 	.word	0xffff0000

08008e8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e9c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a6d      	ldr	r2, [pc, #436]	@ (8009060 <I2C_ITError+0x1d4>)
 8008eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b28      	cmp	r3, #40	@ 0x28
 8008ec2:	d005      	beq.n	8008ed0 <I2C_ITError+0x44>
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	2b29      	cmp	r3, #41	@ 0x29
 8008ec8:	d002      	beq.n	8008ed0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ece:	d10b      	bne.n	8008ee8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ed0:	2103      	movs	r1, #3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fdbe 	bl	8009a54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2228      	movs	r2, #40	@ 0x28
 8008edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a60      	ldr	r2, [pc, #384]	@ (8009064 <I2C_ITError+0x1d8>)
 8008ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ee6:	e030      	b.n	8008f4a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ee8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fdb1 	bl	8009a54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8e1 	bl	80090ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b60      	cmp	r3, #96	@ 0x60
 8008f02:	d01f      	beq.n	8008f44 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d114      	bne.n	8008f44 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d109      	bne.n	8008f3c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2210      	movs	r2, #16
 8008f2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f34:	f043 0204 	orr.w	r2, r3, #4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2220      	movs	r2, #32
 8008f42:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d039      	beq.n	8008fcc <I2C_ITError+0x140>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b11      	cmp	r3, #17
 8008f5c:	d002      	beq.n	8008f64 <I2C_ITError+0xd8>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b21      	cmp	r3, #33	@ 0x21
 8008f62:	d133      	bne.n	8008fcc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f72:	d107      	bne.n	8008f84 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd fa23 	bl	80063d4 <HAL_DMA_GetState>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d017      	beq.n	8008fc4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f98:	4a33      	ldr	r2, [pc, #204]	@ (8009068 <I2C_ITError+0x1dc>)
 8008f9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fc f8a3 	bl	80050f4 <HAL_DMA_Abort_IT>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d04d      	beq.n	8009050 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fc2:	e045      	b.n	8009050 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f851 	bl	800906c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fca:	e041      	b.n	8009050 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d039      	beq.n	8009048 <I2C_ITError+0x1bc>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b12      	cmp	r3, #18
 8008fd8:	d002      	beq.n	8008fe0 <I2C_ITError+0x154>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b22      	cmp	r3, #34	@ 0x22
 8008fde:	d133      	bne.n	8009048 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fee:	d107      	bne.n	8009000 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ffe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009004:	4618      	mov	r0, r3
 8009006:	f7fd f9e5 	bl	80063d4 <HAL_DMA_GetState>
 800900a:	4603      	mov	r3, r0
 800900c:	2b01      	cmp	r3, #1
 800900e:	d017      	beq.n	8009040 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009014:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <I2C_ITError+0x1dc>)
 8009016:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009024:	4618      	mov	r0, r3
 8009026:	f7fc f865 	bl	80050f4 <HAL_DMA_Abort_IT>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800903a:	4610      	mov	r0, r2
 800903c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800903e:	e009      	b.n	8009054 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f813 	bl	800906c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009046:	e005      	b.n	8009054 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f80f 	bl	800906c <I2C_TreatErrorCallback>
  }
}
 800904e:	e002      	b.n	8009056 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009050:	bf00      	nop
 8009052:	e000      	b.n	8009056 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009054:	bf00      	nop
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	ffff0000 	.word	0xffff0000
 8009064:	08007b43 	.word	0x08007b43
 8009068:	0800940d 	.word	0x0800940d

0800906c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b60      	cmp	r3, #96	@ 0x60
 800907e:	d10e      	bne.n	800909e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7fe fd2f 	bl	8007afa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800909c:	e009      	b.n	80090b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7fe fd1a 	bl	8007ae6 <HAL_I2C_ErrorCallback>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d103      	bne.n	80090d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2200      	movs	r2, #0
 80090d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d007      	beq.n	80090f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699a      	ldr	r2, [r3, #24]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f042 0201 	orr.w	r2, r2, #1
 80090f4:	619a      	str	r2, [r3, #24]
  }
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800911e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d104      	bne.n	8009134 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800912a:	2120      	movs	r1, #32
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fc0d 	bl	800994c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009132:	e02d      	b.n	8009190 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800913c:	441a      	add	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2bff      	cmp	r3, #255	@ 0xff
 800914a:	d903      	bls.n	8009154 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	22ff      	movs	r2, #255	@ 0xff
 8009150:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009152:	e004      	b.n	800915e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3324      	adds	r3, #36	@ 0x24
 8009168:	4619      	mov	r1, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009174:	f7fb fa36 	bl	80045e4 <HAL_DMA_Start_IT>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800917e:	2110      	movs	r1, #16
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff fe83 	bl	8008e8c <I2C_ITError>
}
 8009186:	e003      	b.n	8009190 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009188:	2140      	movs	r1, #64	@ 0x40
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fbde 	bl	800994c <I2C_Enable_IRQ>
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d076      	beq.n	80092a0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a71      	ldr	r2, [pc, #452]	@ (8009380 <I2C_DMAError+0x1e8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d059      	beq.n	8009272 <I2C_DMAError+0xda>
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a6f      	ldr	r2, [pc, #444]	@ (8009384 <I2C_DMAError+0x1ec>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d053      	beq.n	8009272 <I2C_DMAError+0xda>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a6d      	ldr	r2, [pc, #436]	@ (8009388 <I2C_DMAError+0x1f0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d04d      	beq.n	8009272 <I2C_DMAError+0xda>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a6b      	ldr	r2, [pc, #428]	@ (800938c <I2C_DMAError+0x1f4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d047      	beq.n	8009272 <I2C_DMAError+0xda>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a69      	ldr	r2, [pc, #420]	@ (8009390 <I2C_DMAError+0x1f8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d041      	beq.n	8009272 <I2C_DMAError+0xda>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a67      	ldr	r2, [pc, #412]	@ (8009394 <I2C_DMAError+0x1fc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d03b      	beq.n	8009272 <I2C_DMAError+0xda>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a65      	ldr	r2, [pc, #404]	@ (8009398 <I2C_DMAError+0x200>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d035      	beq.n	8009272 <I2C_DMAError+0xda>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a63      	ldr	r2, [pc, #396]	@ (800939c <I2C_DMAError+0x204>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d02f      	beq.n	8009272 <I2C_DMAError+0xda>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a61      	ldr	r2, [pc, #388]	@ (80093a0 <I2C_DMAError+0x208>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d029      	beq.n	8009272 <I2C_DMAError+0xda>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a5f      	ldr	r2, [pc, #380]	@ (80093a4 <I2C_DMAError+0x20c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d023      	beq.n	8009272 <I2C_DMAError+0xda>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a5d      	ldr	r2, [pc, #372]	@ (80093a8 <I2C_DMAError+0x210>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d01d      	beq.n	8009272 <I2C_DMAError+0xda>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a5b      	ldr	r2, [pc, #364]	@ (80093ac <I2C_DMAError+0x214>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d017      	beq.n	8009272 <I2C_DMAError+0xda>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a59      	ldr	r2, [pc, #356]	@ (80093b0 <I2C_DMAError+0x218>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d011      	beq.n	8009272 <I2C_DMAError+0xda>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a57      	ldr	r2, [pc, #348]	@ (80093b4 <I2C_DMAError+0x21c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00b      	beq.n	8009272 <I2C_DMAError+0xda>
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a55      	ldr	r2, [pc, #340]	@ (80093b8 <I2C_DMAError+0x220>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d005      	beq.n	8009272 <I2C_DMAError+0xda>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a53      	ldr	r2, [pc, #332]	@ (80093bc <I2C_DMAError+0x224>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d109      	bne.n	8009286 <I2C_DMAError+0xee>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	bf0c      	ite	eq
 800927e:	2301      	moveq	r3, #1
 8009280:	2300      	movne	r3, #0
 8009282:	b2db      	uxtb	r3, r3
 8009284:	e008      	b.n	8009298 <I2C_DMAError+0x100>
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf0c      	ite	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	2300      	movne	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800929c:	2301      	movs	r3, #1
 800929e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8098 	beq.w	80093da <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a33      	ldr	r2, [pc, #204]	@ (8009380 <I2C_DMAError+0x1e8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d059      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a31      	ldr	r2, [pc, #196]	@ (8009384 <I2C_DMAError+0x1ec>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d053      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a2f      	ldr	r2, [pc, #188]	@ (8009388 <I2C_DMAError+0x1f0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d04d      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2d      	ldr	r2, [pc, #180]	@ (800938c <I2C_DMAError+0x1f4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d047      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a2b      	ldr	r2, [pc, #172]	@ (8009390 <I2C_DMAError+0x1f8>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d041      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a29      	ldr	r2, [pc, #164]	@ (8009394 <I2C_DMAError+0x1fc>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d03b      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a27      	ldr	r2, [pc, #156]	@ (8009398 <I2C_DMAError+0x200>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d035      	beq.n	800936a <I2C_DMAError+0x1d2>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a25      	ldr	r2, [pc, #148]	@ (800939c <I2C_DMAError+0x204>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d02f      	beq.n	800936a <I2C_DMAError+0x1d2>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a23      	ldr	r2, [pc, #140]	@ (80093a0 <I2C_DMAError+0x208>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d029      	beq.n	800936a <I2C_DMAError+0x1d2>
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a21      	ldr	r2, [pc, #132]	@ (80093a4 <I2C_DMAError+0x20c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d023      	beq.n	800936a <I2C_DMAError+0x1d2>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1f      	ldr	r2, [pc, #124]	@ (80093a8 <I2C_DMAError+0x210>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d01d      	beq.n	800936a <I2C_DMAError+0x1d2>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1d      	ldr	r2, [pc, #116]	@ (80093ac <I2C_DMAError+0x214>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d017      	beq.n	800936a <I2C_DMAError+0x1d2>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a1b      	ldr	r2, [pc, #108]	@ (80093b0 <I2C_DMAError+0x218>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d011      	beq.n	800936a <I2C_DMAError+0x1d2>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a19      	ldr	r2, [pc, #100]	@ (80093b4 <I2C_DMAError+0x21c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00b      	beq.n	800936a <I2C_DMAError+0x1d2>
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a17      	ldr	r2, [pc, #92]	@ (80093b8 <I2C_DMAError+0x220>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d005      	beq.n	800936a <I2C_DMAError+0x1d2>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a15      	ldr	r2, [pc, #84]	@ (80093bc <I2C_DMAError+0x224>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d12a      	bne.n	80093c0 <I2C_DMAError+0x228>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	bf0c      	ite	eq
 8009376:	2301      	moveq	r3, #1
 8009378:	2300      	movne	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	e029      	b.n	80093d2 <I2C_DMAError+0x23a>
 800937e:	bf00      	nop
 8009380:	40020010 	.word	0x40020010
 8009384:	40020028 	.word	0x40020028
 8009388:	40020040 	.word	0x40020040
 800938c:	40020058 	.word	0x40020058
 8009390:	40020070 	.word	0x40020070
 8009394:	40020088 	.word	0x40020088
 8009398:	400200a0 	.word	0x400200a0
 800939c:	400200b8 	.word	0x400200b8
 80093a0:	40020410 	.word	0x40020410
 80093a4:	40020428 	.word	0x40020428
 80093a8:	40020440 	.word	0x40020440
 80093ac:	40020458 	.word	0x40020458
 80093b0:	40020470 	.word	0x40020470
 80093b4:	40020488 	.word	0x40020488
 80093b8:	400204a0 	.word	0x400204a0
 80093bc:	400204b8 	.word	0x400204b8
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bf0c      	ite	eq
 80093cc:	2301      	moveq	r3, #1
 80093ce:	2300      	movne	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80093d6:	2301      	movs	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fd f808 	bl	80063f0 <HAL_DMA_GetError>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d00e      	beq.n	8009404 <I2C_DMAError+0x26c>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093fa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80093fc:	2110      	movs	r1, #16
 80093fe:	68b8      	ldr	r0, [r7, #8]
 8009400:	f7ff fd44 	bl	8008e8c <I2C_ITError>
  }
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009418:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009426:	2200      	movs	r2, #0
 8009428:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009436:	2200      	movs	r2, #0
 8009438:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fe16 	bl	800906c <I2C_TreatErrorCallback>
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009458:	e03b      	b.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f962 	bl	8009728 <I2C_IsErrorOccurred>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e041      	b.n	80094f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009474:	d02d      	beq.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7fa f9ed 	bl	8003854 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d122      	bne.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	bf0c      	ite	eq
 800949c:	2301      	moveq	r3, #1
 800949e:	2300      	movne	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d113      	bne.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e00f      	b.n	80094f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699a      	ldr	r2, [r3, #24]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4013      	ands	r3, r2
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	bf0c      	ite	eq
 80094e2:	2301      	moveq	r3, #1
 80094e4:	2300      	movne	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d0b4      	beq.n	800945a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009506:	e033      	b.n	8009570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f90b 	bl	8009728 <I2C_IsErrorOccurred>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e031      	b.n	8009580 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009522:	d025      	beq.n	8009570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009524:	f7fa f996 	bl	8003854 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	d302      	bcc.n	800953a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d11a      	bne.n	8009570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b02      	cmp	r3, #2
 8009546:	d013      	beq.n	8009570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954c:	f043 0220 	orr.w	r2, r3, #32
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e007      	b.n	8009580 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b02      	cmp	r3, #2
 800957c:	d1c4      	bne.n	8009508 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009594:	e02f      	b.n	80095f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f8c4 	bl	8009728 <I2C_IsErrorOccurred>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e02d      	b.n	8009606 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095aa:	f7fa f953 	bl	8003854 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d302      	bcc.n	80095c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11a      	bne.n	80095f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d013      	beq.n	80095f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d2:	f043 0220 	orr.w	r2, r3, #32
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2220      	movs	r2, #32
 80095de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e007      	b.n	8009606 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b20      	cmp	r3, #32
 8009602:	d1c8      	bne.n	8009596 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009620:	e071      	b.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f87e 	bl	8009728 <I2C_IsErrorOccurred>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b20      	cmp	r3, #32
 8009642:	d13b      	bne.n	80096bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d138      	bne.n	80096bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b04      	cmp	r3, #4
 8009656:	d105      	bne.n	8009664 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	2b10      	cmp	r3, #16
 8009670:	d121      	bne.n	80096b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2210      	movs	r2, #16
 8009678:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2204      	movs	r2, #4
 800967e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2220      	movs	r2, #32
 8009686:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6859      	ldr	r1, [r3, #4]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b24      	ldr	r3, [pc, #144]	@ (8009724 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009694:	400b      	ands	r3, r1
 8009696:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2220      	movs	r2, #32
 800969c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
 80096b4:	e002      	b.n	80096bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80096bc:	f7fa f8ca 	bl	8003854 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d302      	bcc.n	80096d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d119      	bne.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d116      	bne.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d00f      	beq.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ea:	f043 0220 	orr.w	r2, r3, #32
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b04      	cmp	r3, #4
 8009712:	d002      	beq.n	800971a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d083      	beq.n	8009622 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	fe00e800 	.word	0xfe00e800

08009728 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	@ 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	2b00      	cmp	r3, #0
 8009752:	d068      	beq.n	8009826 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2210      	movs	r2, #16
 800975a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800975c:	e049      	b.n	80097f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009764:	d045      	beq.n	80097f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009766:	f7fa f875 	bl	8003854 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	429a      	cmp	r2, r3
 8009774:	d302      	bcc.n	800977c <I2C_IsErrorOccurred+0x54>
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d13a      	bne.n	80097f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009786:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800978e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800979a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800979e:	d121      	bne.n	80097e4 <I2C_IsErrorOccurred+0xbc>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a6:	d01d      	beq.n	80097e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097a8:	7cfb      	ldrb	r3, [r7, #19]
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d01a      	beq.n	80097e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80097be:	f7fa f849 	bl	8003854 <HAL_GetTick>
 80097c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097c4:	e00e      	b.n	80097e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80097c6:	f7fa f845 	bl	8003854 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b19      	cmp	r3, #25
 80097d2:	d907      	bls.n	80097e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	f043 0320 	orr.w	r3, r3, #32
 80097da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80097e2:	e006      	b.n	80097f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d1e9      	bne.n	80097c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	f003 0320 	and.w	r3, r3, #32
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d003      	beq.n	8009808 <I2C_IsErrorOccurred+0xe0>
 8009800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0aa      	beq.n	800975e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2220      	movs	r2, #32
 8009816:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	f043 0304 	orr.w	r3, r3, #4
 800981e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009848:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	f043 0308 	orr.w	r3, r3, #8
 8009860:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800986a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	f043 0302 	orr.w	r3, r3, #2
 8009882:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800988c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01c      	beq.n	80098d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f7ff fc0c 	bl	80090ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6859      	ldr	r1, [r3, #4]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <I2C_IsErrorOccurred+0x1bc>)
 80098ae:	400b      	ands	r3, r1
 80098b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80098d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3728      	adds	r7, #40	@ 0x28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	fe00e800 	.word	0xfe00e800

080098e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	817b      	strh	r3, [r7, #10]
 80098f6:	4613      	mov	r3, r2
 80098f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098fa:	897b      	ldrh	r3, [r7, #10]
 80098fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009900:	7a7b      	ldrb	r3, [r7, #9]
 8009902:	041b      	lsls	r3, r3, #16
 8009904:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009908:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	4313      	orrs	r3, r2
 8009912:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009916:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	0d5b      	lsrs	r3, r3, #21
 8009922:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009926:	4b08      	ldr	r3, [pc, #32]	@ (8009948 <I2C_TransferConfig+0x60>)
 8009928:	430b      	orrs	r3, r1
 800992a:	43db      	mvns	r3, r3
 800992c:	ea02 0103 	and.w	r1, r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	03ff63ff 	.word	0x03ff63ff

0800994c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009960:	4a39      	ldr	r2, [pc, #228]	@ (8009a48 <I2C_Enable_IRQ+0xfc>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d032      	beq.n	80099cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800996a:	4a38      	ldr	r2, [pc, #224]	@ (8009a4c <I2C_Enable_IRQ+0x100>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d02d      	beq.n	80099cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009974:	4a36      	ldr	r2, [pc, #216]	@ (8009a50 <I2C_Enable_IRQ+0x104>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d028      	beq.n	80099cc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800997a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800997e:	2b00      	cmp	r3, #0
 8009980:	da03      	bge.n	800998a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009988:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800998a:	887b      	ldrh	r3, [r7, #2]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800999a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800999c:	887b      	ldrh	r3, [r7, #2]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80099ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80099ae:	887b      	ldrh	r3, [r7, #2]
 80099b0:	2b10      	cmp	r3, #16
 80099b2:	d103      	bne.n	80099bc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80099ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099bc:	887b      	ldrh	r3, [r7, #2]
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d133      	bne.n	8009a2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f043 0320 	orr.w	r3, r3, #32
 80099c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099ca:	e02e      	b.n	8009a2a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da03      	bge.n	80099dc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099dc:	887b      	ldrh	r3, [r7, #2]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80099ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099ee:	887b      	ldrh	r3, [r7, #2]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80099fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d103      	bne.n	8009a0e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a0e:	887b      	ldrh	r3, [r7, #2]
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d103      	bne.n	8009a1c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009a1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a1c:	887b      	ldrh	r3, [r7, #2]
 8009a1e:	2b40      	cmp	r3, #64	@ 0x40
 8009a20:	d103      	bne.n	8009a2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a28:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	601a      	str	r2, [r3, #0]
}
 8009a3a:	bf00      	nop
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	08007d4b 	.word	0x08007d4b
 8009a4c:	08008191 	.word	0x08008191
 8009a50:	08007f31 	.word	0x08007f31

08009a54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00f      	beq.n	8009a8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009a74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a82:	2b28      	cmp	r3, #40	@ 0x28
 8009a84:	d003      	beq.n	8009a8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009a8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a8e:	887b      	ldrh	r3, [r7, #2]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00f      	beq.n	8009ab8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009a9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009aac:	2b28      	cmp	r3, #40	@ 0x28
 8009aae:	d003      	beq.n	8009ab8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009ab6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	da03      	bge.n	8009ac8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009ac6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	d103      	bne.n	8009ad6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009ad4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d103      	bne.n	8009ae4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f043 0320 	orr.w	r3, r3, #32
 8009ae2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009ae4:	887b      	ldrh	r3, [r7, #2]
 8009ae6:	2b40      	cmp	r3, #64	@ 0x40
 8009ae8:	d103      	bne.n	8009af2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009af0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	43da      	mvns	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	400a      	ands	r2, r1
 8009b02:	601a      	str	r2, [r3, #0]
}
 8009b04:	bf00      	nop
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d138      	bne.n	8009b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e032      	b.n	8009b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2224      	movs	r2, #36	@ 0x24
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6819      	ldr	r1, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e000      	b.n	8009b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b98:	2302      	movs	r3, #2
  }
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b20      	cmp	r3, #32
 8009bba:	d139      	bne.n	8009c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e033      	b.n	8009c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2224      	movs	r2, #36	@ 0x24
 8009bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e000      	b.n	8009c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c30:	2302      	movs	r3, #2
  }
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
	...

08009c40 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009c4c:	f7f9 fe02 	bl	8003854 <HAL_GetTick>
 8009c50:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	73fb      	strb	r3, [r7, #15]
 8009c5c:	e0a5      	b.n	8009daa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f040 809e 	bne.w	8009daa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f8 fa80 	bl	8002174 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009c74:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f89d 	bl	8009db8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	4b4b      	ldr	r3, [pc, #300]	@ (8009db4 <HAL_OSPI_Init+0x174>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	68d1      	ldr	r1, [r2, #12]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6912      	ldr	r2, [r2, #16]
 8009c90:	3a01      	subs	r2, #1
 8009c92:	0412      	lsls	r2, r2, #16
 8009c94:	4311      	orrs	r1, r2
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6952      	ldr	r2, [r2, #20]
 8009c9a:	3a01      	subs	r2, #1
 8009c9c:	0212      	lsls	r2, r2, #8
 8009c9e:	4311      	orrs	r1, r2
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009ca4:	4311      	orrs	r1, r2
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	69d2      	ldr	r2, [r2, #28]
 8009caa:	4311      	orrs	r1, r2
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1a      	ldr	r2, [r3, #32]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cce:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ce4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	021a      	lsls	r2, r3, #8
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2120      	movs	r1, #32
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd4f 	bl	800a7b0 <OSPI_WaitFlagStateUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d146      	bne.n	8009daa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	1e5a      	subs	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009d52:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0201 	orr.w	r2, r2, #1
 8009d78:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d107      	bne.n	8009d92 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 0202 	orr.w	r2, r2, #2
 8009d90:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d9a:	d103      	bne.n	8009da4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	651a      	str	r2, [r3, #80]	@ 0x50
 8009da2:	e002      	b.n	8009daa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	f8e0f8f4 	.word	0xf8e0f8f4

08009db8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b094      	sub	sp, #80	@ 0x50
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a9d      	ldr	r2, [pc, #628]	@ (800a06c <HAL_OSPIM_Config+0x294>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d105      	bne.n	8009e06 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8009e04:	e004      	b.n	8009e10 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009e06:	2301      	movs	r3, #1
 8009e08:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e16:	e01d      	b.n	8009e54 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8009e18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	b2d8      	uxtb	r0, r3
 8009e20:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009e24:	f107 0114 	add.w	r1, r7, #20
 8009e28:	4613      	mov	r3, r2
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	4413      	add	r3, r2
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	440b      	add	r3, r1
 8009e32:	4619      	mov	r1, r3
 8009e34:	f000 fcf4 	bl	800a820 <OSPIM_GetConfig>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2208      	movs	r2, #8
 8009e48:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d9dd      	bls.n	8009e18 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f040 8499 	bne.w	800a798 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009e66:	4b81      	ldr	r3, [pc, #516]	@ (800a06c <HAL_OSPIM_Config+0x294>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009e72:	4b7e      	ldr	r3, [pc, #504]	@ (800a06c <HAL_OSPIM_Config+0x294>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a7d      	ldr	r2, [pc, #500]	@ (800a06c <HAL_OSPIM_Config+0x294>)
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009e7e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009e8a:	4b79      	ldr	r3, [pc, #484]	@ (800a070 <HAL_OSPIM_Config+0x298>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009e96:	4b76      	ldr	r3, [pc, #472]	@ (800a070 <HAL_OSPIM_Config+0x298>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a75      	ldr	r2, [pc, #468]	@ (800a070 <HAL_OSPIM_Config+0x298>)
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009ea2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ea6:	f043 0302 	orr.w	r3, r3, #2
 8009eaa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009eae:	4971      	ldr	r1, [pc, #452]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	3350      	adds	r3, #80	@ 0x50
 8009ebc:	443b      	add	r3, r7
 8009ebe:	3b34      	subs	r3, #52	@ 0x34
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	6859      	ldr	r1, [r3, #4]
 8009eca:	486a      	ldr	r0, [pc, #424]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ece:	4613      	mov	r3, r2
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	00db      	lsls	r3, r3, #3
 8009ed6:	3350      	adds	r3, #80	@ 0x50
 8009ed8:	443b      	add	r3, r7
 8009eda:	3b34      	subs	r3, #52	@ 0x34
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4403      	add	r3, r0
 8009ee8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009eea:	4b62      	ldr	r3, [pc, #392]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80c0 	beq.w	800a078 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009ef8:	4b5e      	ldr	r3, [pc, #376]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a5d      	ldr	r2, [pc, #372]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009f04:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f040 8162 	bne.w	800a1d2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8009f0e:	4959      	ldr	r1, [pc, #356]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009f10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f14:	4613      	mov	r3, r2
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	4413      	add	r3, r2
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	3350      	adds	r3, #80	@ 0x50
 8009f1e:	443b      	add	r3, r7
 8009f20:	3b3c      	subs	r3, #60	@ 0x3c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	6859      	ldr	r1, [r3, #4]
 8009f2c:	4851      	ldr	r0, [pc, #324]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009f2e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f32:	4613      	mov	r3, r2
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	4413      	add	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	3350      	adds	r3, #80	@ 0x50
 8009f3c:	443b      	add	r3, r7
 8009f3e:	3b3c      	subs	r3, #60	@ 0x3c
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	f041 0202 	orr.w	r2, r1, #2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4403      	add	r3, r0
 8009f4c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009f4e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f52:	4613      	mov	r3, r2
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	4413      	add	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	3350      	adds	r3, #80	@ 0x50
 8009f5c:	443b      	add	r3, r7
 8009f5e:	3b38      	subs	r3, #56	@ 0x38
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d01f      	beq.n	8009fa6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8009f66:	4943      	ldr	r1, [pc, #268]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009f68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	3350      	adds	r3, #80	@ 0x50
 8009f76:	443b      	add	r3, r7
 8009f78:	3b38      	subs	r3, #56	@ 0x38
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	483b      	ldr	r0, [pc, #236]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009f86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	4413      	add	r3, r2
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	3350      	adds	r3, #80	@ 0x50
 8009f94:	443b      	add	r3, r7
 8009f96:	3b38      	subs	r3, #56	@ 0x38
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	f041 0220 	orr.w	r2, r1, #32
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4403      	add	r3, r0
 8009fa4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009fa6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009faa:	4613      	mov	r3, r2
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	3350      	adds	r3, #80	@ 0x50
 8009fb4:	443b      	add	r3, r7
 8009fb6:	3b30      	subs	r3, #48	@ 0x30
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d023      	beq.n	800a006 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8009fbe:	492d      	ldr	r1, [pc, #180]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009fc0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	4413      	add	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	3350      	adds	r3, #80	@ 0x50
 8009fce:	443b      	add	r3, r7
 8009fd0:	3b30      	subs	r3, #48	@ 0x30
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	6859      	ldr	r1, [r3, #4]
 8009fe0:	4824      	ldr	r0, [pc, #144]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 8009fe2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4413      	add	r3, r2
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	3350      	adds	r3, #80	@ 0x50
 8009ff0:	443b      	add	r3, r7
 8009ff2:	3b30      	subs	r3, #48	@ 0x30
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4403      	add	r3, r0
 800a004:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a006:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a00a:	4613      	mov	r3, r2
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4413      	add	r3, r2
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	3350      	adds	r3, #80	@ 0x50
 800a014:	443b      	add	r3, r7
 800a016:	3b2c      	subs	r3, #44	@ 0x2c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80d9 	beq.w	800a1d2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a020:	4914      	ldr	r1, [pc, #80]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 800a022:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	3350      	adds	r3, #80	@ 0x50
 800a030:	443b      	add	r3, r7
 800a032:	3b2c      	subs	r3, #44	@ 0x2c
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3b01      	subs	r3, #1
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	440b      	add	r3, r1
 800a040:	6859      	ldr	r1, [r3, #4]
 800a042:	480c      	ldr	r0, [pc, #48]	@ (800a074 <HAL_OSPIM_Config+0x29c>)
 800a044:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a048:	4613      	mov	r3, r2
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	4413      	add	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	3350      	adds	r3, #80	@ 0x50
 800a052:	443b      	add	r3, r7
 800a054:	3b2c      	subs	r3, #44	@ 0x2c
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3b01      	subs	r3, #1
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4403      	add	r3, r0
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	e0b3      	b.n	800a1d2 <HAL_OSPIM_Config+0x3fa>
 800a06a:	bf00      	nop
 800a06c:	52005000 	.word	0x52005000
 800a070:	5200a000 	.word	0x5200a000
 800a074:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a07a:	4613      	mov	r3, r2
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	4413      	add	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	3350      	adds	r3, #80	@ 0x50
 800a084:	443b      	add	r3, r7
 800a086:	3b3c      	subs	r3, #60	@ 0x3c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 80a1 	beq.w	800a1d2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a090:	4995      	ldr	r1, [pc, #596]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a094:	4613      	mov	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	3350      	adds	r3, #80	@ 0x50
 800a09e:	443b      	add	r3, r7
 800a0a0:	3b3c      	subs	r3, #60	@ 0x3c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	6859      	ldr	r1, [r3, #4]
 800a0ac:	488e      	ldr	r0, [pc, #568]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a0ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	3350      	adds	r3, #80	@ 0x50
 800a0ba:	443b      	add	r3, r7
 800a0bc:	3b3c      	subs	r3, #60	@ 0x3c
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f021 0201 	bic.w	r2, r1, #1
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4403      	add	r3, r0
 800a0ca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a0cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	3350      	adds	r3, #80	@ 0x50
 800a0d8:	443b      	add	r3, r7
 800a0da:	3b38      	subs	r3, #56	@ 0x38
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01d      	beq.n	800a11e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a0e2:	4981      	ldr	r1, [pc, #516]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a0e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	3350      	adds	r3, #80	@ 0x50
 800a0f0:	443b      	add	r3, r7
 800a0f2:	3b38      	subs	r3, #56	@ 0x38
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	6859      	ldr	r1, [r3, #4]
 800a0fe:	487a      	ldr	r0, [pc, #488]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a102:	4613      	mov	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	4413      	add	r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	3350      	adds	r3, #80	@ 0x50
 800a10c:	443b      	add	r3, r7
 800a10e:	3b38      	subs	r3, #56	@ 0x38
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3b01      	subs	r3, #1
 800a114:	f021 0210 	bic.w	r2, r1, #16
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4403      	add	r3, r0
 800a11c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a11e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	3350      	adds	r3, #80	@ 0x50
 800a12a:	443b      	add	r3, r7
 800a12c:	3b30      	subs	r3, #48	@ 0x30
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d021      	beq.n	800a178 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a134:	496c      	ldr	r1, [pc, #432]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a138:	4613      	mov	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	3350      	adds	r3, #80	@ 0x50
 800a142:	443b      	add	r3, r7
 800a144:	3b30      	subs	r3, #48	@ 0x30
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3b01      	subs	r3, #1
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	4864      	ldr	r0, [pc, #400]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	3350      	adds	r3, #80	@ 0x50
 800a162:	443b      	add	r3, r7
 800a164:	3b30      	subs	r3, #48	@ 0x30
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3b01      	subs	r3, #1
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4403      	add	r3, r0
 800a176:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	3350      	adds	r3, #80	@ 0x50
 800a184:	443b      	add	r3, r7
 800a186:	3b2c      	subs	r3, #44	@ 0x2c
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d021      	beq.n	800a1d2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a18e:	4956      	ldr	r1, [pc, #344]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	3350      	adds	r3, #80	@ 0x50
 800a19c:	443b      	add	r3, r7
 800a19e:	3b2c      	subs	r3, #44	@ 0x2c
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	6859      	ldr	r1, [r3, #4]
 800a1ae:	484e      	ldr	r0, [pc, #312]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a1b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	3350      	adds	r3, #80	@ 0x50
 800a1bc:	443b      	add	r3, r7
 800a1be:	3b2c      	subs	r3, #44	@ 0x2c
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4403      	add	r3, r0
 800a1d0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6819      	ldr	r1, [r3, #0]
 800a1d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1da:	4613      	mov	r3, r2
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	3350      	adds	r3, #80	@ 0x50
 800a1e4:	443b      	add	r3, r7
 800a1e6:	3b3c      	subs	r3, #60	@ 0x3c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	d03c      	beq.n	800a268 <HAL_OSPIM_Config+0x490>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6899      	ldr	r1, [r3, #8]
 800a1f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	3350      	adds	r3, #80	@ 0x50
 800a200:	443b      	add	r3, r7
 800a202:	3b34      	subs	r3, #52	@ 0x34
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4299      	cmp	r1, r3
 800a208:	d02e      	beq.n	800a268 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	6859      	ldr	r1, [r3, #4]
 800a20e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a212:	4613      	mov	r3, r2
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	4413      	add	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	3350      	adds	r3, #80	@ 0x50
 800a21c:	443b      	add	r3, r7
 800a21e:	3b38      	subs	r3, #56	@ 0x38
 800a220:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a222:	4299      	cmp	r1, r3
 800a224:	d103      	bne.n	800a22e <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d11c      	bne.n	800a268 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	68d9      	ldr	r1, [r3, #12]
 800a232:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a236:	4613      	mov	r3, r2
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	4413      	add	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	3350      	adds	r3, #80	@ 0x50
 800a240:	443b      	add	r3, r7
 800a242:	3b30      	subs	r3, #48	@ 0x30
 800a244:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a246:	4299      	cmp	r1, r3
 800a248:	d00e      	beq.n	800a268 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6919      	ldr	r1, [r3, #16]
 800a24e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a252:	4613      	mov	r3, r2
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	4413      	add	r3, r2
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	3350      	adds	r3, #80	@ 0x50
 800a25c:	443b      	add	r3, r7
 800a25e:	3b2c      	subs	r3, #44	@ 0x2c
 800a260:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a262:	4299      	cmp	r1, r3
 800a264:	f040 810e 	bne.w	800a484 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	6819      	ldr	r1, [r3, #0]
 800a26c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a270:	4613      	mov	r3, r2
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	4413      	add	r3, r2
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	3350      	adds	r3, #80	@ 0x50
 800a27a:	443b      	add	r3, r7
 800a27c:	3b3c      	subs	r3, #60	@ 0x3c
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4299      	cmp	r1, r3
 800a282:	d133      	bne.n	800a2ec <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6859      	ldr	r1, [r3, #4]
 800a288:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a28c:	4613      	mov	r3, r2
 800a28e:	005b      	lsls	r3, r3, #1
 800a290:	4413      	add	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	3350      	adds	r3, #80	@ 0x50
 800a296:	443b      	add	r3, r7
 800a298:	3b38      	subs	r3, #56	@ 0x38
 800a29a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d125      	bne.n	800a2ec <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	68d9      	ldr	r1, [r3, #12]
 800a2a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	3350      	adds	r3, #80	@ 0x50
 800a2b2:	443b      	add	r3, r7
 800a2b4:	3b30      	subs	r3, #48	@ 0x30
 800a2b6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	d117      	bne.n	800a2ec <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	6919      	ldr	r1, [r3, #16]
 800a2c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	3350      	adds	r3, #80	@ 0x50
 800a2ce:	443b      	add	r3, r7
 800a2d0:	3b2c      	subs	r3, #44	@ 0x2c
 800a2d2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a2d4:	4299      	cmp	r1, r3
 800a2d6:	d109      	bne.n	800a2ec <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a2d8:	4b03      	ldr	r3, [pc, #12]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a02      	ldr	r2, [pc, #8]	@ (800a2e8 <HAL_OSPIM_Config+0x510>)
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	e0ce      	b.n	800a484 <HAL_OSPIM_Config+0x6ac>
 800a2e6:	bf00      	nop
 800a2e8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a2ec:	49bb      	ldr	r1, [pc, #748]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a2ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	3350      	adds	r3, #80	@ 0x50
 800a2fc:	443b      	add	r3, r7
 800a2fe:	3b3c      	subs	r3, #60	@ 0x3c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3b01      	subs	r3, #1
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	440b      	add	r3, r1
 800a308:	6859      	ldr	r1, [r3, #4]
 800a30a:	48b4      	ldr	r0, [pc, #720]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a30c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a310:	4613      	mov	r3, r2
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	4413      	add	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	3350      	adds	r3, #80	@ 0x50
 800a31a:	443b      	add	r3, r7
 800a31c:	3b3c      	subs	r3, #60	@ 0x3c
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3b01      	subs	r3, #1
 800a322:	f021 0201 	bic.w	r2, r1, #1
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4403      	add	r3, r0
 800a32a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a32c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a330:	4613      	mov	r3, r2
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	4413      	add	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	3350      	adds	r3, #80	@ 0x50
 800a33a:	443b      	add	r3, r7
 800a33c:	3b38      	subs	r3, #56	@ 0x38
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d01f      	beq.n	800a384 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a344:	49a5      	ldr	r1, [pc, #660]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a346:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a34a:	4613      	mov	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	3350      	adds	r3, #80	@ 0x50
 800a354:	443b      	add	r3, r7
 800a356:	3b38      	subs	r3, #56	@ 0x38
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	489e      	ldr	r0, [pc, #632]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a364:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a368:	4613      	mov	r3, r2
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	4413      	add	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	3350      	adds	r3, #80	@ 0x50
 800a372:	443b      	add	r3, r7
 800a374:	3b38      	subs	r3, #56	@ 0x38
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3b01      	subs	r3, #1
 800a37a:	f021 0210 	bic.w	r2, r1, #16
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4403      	add	r3, r0
 800a382:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a384:	4995      	ldr	r1, [pc, #596]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a386:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a38a:	4613      	mov	r3, r2
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	4413      	add	r3, r2
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	3350      	adds	r3, #80	@ 0x50
 800a394:	443b      	add	r3, r7
 800a396:	3b34      	subs	r3, #52	@ 0x34
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	440b      	add	r3, r1
 800a3a0:	6859      	ldr	r1, [r3, #4]
 800a3a2:	488e      	ldr	r0, [pc, #568]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a3a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	3350      	adds	r3, #80	@ 0x50
 800a3b2:	443b      	add	r3, r7
 800a3b4:	3b34      	subs	r3, #52	@ 0x34
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4403      	add	r3, r0
 800a3c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a3c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	3350      	adds	r3, #80	@ 0x50
 800a3d2:	443b      	add	r3, r7
 800a3d4:	3b30      	subs	r3, #48	@ 0x30
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d023      	beq.n	800a424 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a3dc:	497f      	ldr	r1, [pc, #508]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a3de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4413      	add	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	3350      	adds	r3, #80	@ 0x50
 800a3ec:	443b      	add	r3, r7
 800a3ee:	3b30      	subs	r3, #48	@ 0x30
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	6859      	ldr	r1, [r3, #4]
 800a3fe:	4877      	ldr	r0, [pc, #476]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a400:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	3350      	adds	r3, #80	@ 0x50
 800a40e:	443b      	add	r3, r7
 800a410:	3b30      	subs	r3, #48	@ 0x30
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3b01      	subs	r3, #1
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4403      	add	r3, r0
 800a422:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a424:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	3350      	adds	r3, #80	@ 0x50
 800a432:	443b      	add	r3, r7
 800a434:	3b2c      	subs	r3, #44	@ 0x2c
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d023      	beq.n	800a484 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a43c:	4967      	ldr	r1, [pc, #412]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a43e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a442:	4613      	mov	r3, r2
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	4413      	add	r3, r2
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	3350      	adds	r3, #80	@ 0x50
 800a44c:	443b      	add	r3, r7
 800a44e:	3b2c      	subs	r3, #44	@ 0x2c
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3b01      	subs	r3, #1
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	440b      	add	r3, r1
 800a45c:	6859      	ldr	r1, [r3, #4]
 800a45e:	485f      	ldr	r0, [pc, #380]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a460:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a464:	4613      	mov	r3, r2
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	4413      	add	r3, r2
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	3350      	adds	r3, #80	@ 0x50
 800a46e:	443b      	add	r3, r7
 800a470:	3b2c      	subs	r3, #44	@ 0x2c
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3b01      	subs	r3, #1
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4403      	add	r3, r0
 800a482:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a484:	4a55      	ldr	r2, [pc, #340]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a498:	025b      	lsls	r3, r3, #9
 800a49a:	431a      	orrs	r2, r3
 800a49c:	494f      	ldr	r1, [pc, #316]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	1e5a      	subs	r2, r3, #1
 800a4b4:	4b49      	ldr	r3, [pc, #292]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	0c1b      	lsrs	r3, r3, #16
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d90a      	bls.n	800a4d6 <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a4c0:	4b46      	ldr	r3, [pc, #280]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	4942      	ldr	r1, [pc, #264]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a4d6:	4b41      	ldr	r3, [pc, #260]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 809a 	beq.w	800a618 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a4e4:	4a3d      	ldr	r2, [pc, #244]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f023 0203 	bic.w	r2, r3, #3
 800a4f6:	4939      	ldr	r1, [pc, #228]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	f042 0201 	orr.w	r2, r2, #1
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d011      	beq.n	800a534 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a510:	4a32      	ldr	r2, [pc, #200]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	3b01      	subs	r3, #1
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a522:	492e      	ldr	r1, [pc, #184]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	3b01      	subs	r3, #1
 800a52a:	f042 0210 	orr.w	r2, r2, #16
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	440b      	add	r3, r1
 800a532:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d016      	beq.n	800a56e <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a540:	4a26      	ldr	r2, [pc, #152]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	3b01      	subs	r3, #1
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a556:	4921      	ldr	r1, [pc, #132]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	440b      	add	r3, r1
 800a56a:	605a      	str	r2, [r3, #4]
 800a56c:	e019      	b.n	800a5a2 <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d015      	beq.n	800a5a2 <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a576:	4a19      	ldr	r2, [pc, #100]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a58c:	4913      	ldr	r1, [pc, #76]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	3b01      	subs	r3, #1
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	440b      	add	r3, r1
 800a5a0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d018      	beq.n	800a5e0 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a5ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a5c4:	4905      	ldr	r1, [pc, #20]	@ (800a5dc <HAL_OSPIM_Config+0x804>)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	440b      	add	r3, r1
 800a5d8:	605a      	str	r2, [r3, #4]
 800a5da:	e0c5      	b.n	800a768 <HAL_OSPIM_Config+0x990>
 800a5dc:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80bf 	beq.w	800a768 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a5ea:	4a6e      	ldr	r2, [pc, #440]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a600:	4968      	ldr	r1, [pc, #416]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	3b01      	subs	r3, #1
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	605a      	str	r2, [r3, #4]
 800a616:	e0a7      	b.n	800a768 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a618:	4a62      	ldr	r2, [pc, #392]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3b01      	subs	r3, #1
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f023 0203 	bic.w	r2, r3, #3
 800a62a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	431a      	orrs	r2, r3
 800a630:	495c      	ldr	r1, [pc, #368]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3b01      	subs	r3, #1
 800a638:	f042 0201 	orr.w	r2, r2, #1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	440b      	add	r3, r1
 800a640:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d014      	beq.n	800a674 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a64a:	4a56      	ldr	r2, [pc, #344]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	3b01      	subs	r3, #1
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65e:	015b      	lsls	r3, r3, #5
 800a660:	431a      	orrs	r2, r3
 800a662:	4950      	ldr	r1, [pc, #320]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	f042 0210 	orr.w	r2, r2, #16
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d019      	beq.n	800a6b4 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a680:	4a48      	ldr	r2, [pc, #288]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	3b01      	subs	r3, #1
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a698:	049b      	lsls	r3, r3, #18
 800a69a:	431a      	orrs	r2, r3
 800a69c:	4941      	ldr	r1, [pc, #260]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	e01c      	b.n	800a6ee <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d018      	beq.n	800a6ee <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6bc:	4a39      	ldr	r2, [pc, #228]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6d4:	069b      	lsls	r3, r3, #26
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	4932      	ldr	r1, [pc, #200]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	440b      	add	r3, r1
 800a6ec:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d019      	beq.n	800a72e <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	3b01      	subs	r3, #1
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a712:	049b      	lsls	r3, r3, #18
 800a714:	431a      	orrs	r2, r3
 800a716:	4923      	ldr	r1, [pc, #140]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	440b      	add	r3, r1
 800a72a:	605a      	str	r2, [r3, #4]
 800a72c:	e01c      	b.n	800a768 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d018      	beq.n	800a768 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a736:	4a1b      	ldr	r2, [pc, #108]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a74c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a74e:	069b      	lsls	r3, r3, #26
 800a750:	431a      	orrs	r2, r3
 800a752:	4914      	ldr	r1, [pc, #80]	@ (800a7a4 <HAL_OSPIM_Config+0x9cc>)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a768:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a774:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a8 <HAL_OSPIM_Config+0x9d0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a0b      	ldr	r2, [pc, #44]	@ (800a7a8 <HAL_OSPIM_Config+0x9d0>)
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a780:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d005      	beq.n	800a798 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <HAL_OSPIM_Config+0x9d4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a06      	ldr	r2, [pc, #24]	@ (800a7ac <HAL_OSPIM_Config+0x9d4>)
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a798:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3750      	adds	r7, #80	@ 0x50
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	5200b400 	.word	0x5200b400
 800a7a8:	52005000 	.word	0x52005000
 800a7ac:	5200a000 	.word	0x5200a000

0800a7b0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a7c0:	e01a      	b.n	800a7f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7c8:	d016      	beq.n	800a7f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ca:	f7f9 f843 	bl	8003854 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	69ba      	ldr	r2, [r7, #24]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10b      	bne.n	800a7f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7e6:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ec:	f043 0201 	orr.w	r2, r3, #1
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e00e      	b.n	800a816 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6a1a      	ldr	r2, [r3, #32]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4013      	ands	r3, r2
 800a802:	2b00      	cmp	r3, #0
 800a804:	bf14      	ite	ne
 800a806:	2301      	movne	r3, #1
 800a808:	2300      	moveq	r3, #0
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	461a      	mov	r2, r3
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	429a      	cmp	r2, r3
 800a812:	d1d6      	bne.n	800a7c2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	6039      	str	r1, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <OSPIM_GetConfig+0x26>
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d802      	bhi.n	800a846 <OSPIM_GetConfig+0x26>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
 800a84a:	e098      	b.n	800a97e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2200      	movs	r2, #0
 800a868:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d10b      	bne.n	800a888 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800a870:	4b46      	ldr	r3, [pc, #280]	@ (800a98c <OSPIM_GetConfig+0x16c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800a87c:	4b44      	ldr	r3, [pc, #272]	@ (800a990 <OSPIM_GetConfig+0x170>)
 800a87e:	613b      	str	r3, [r7, #16]
 800a880:	e002      	b.n	800a888 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800a882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a886:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e074      	b.n	800a978 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800a88e:	4a3f      	ldr	r2, [pc, #252]	@ (800a98c <OSPIM_GetConfig+0x16c>)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	4053      	eors	r3, r2
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d103      	bne.n	800a8ba <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00a      	beq.n	800a8da <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	4053      	eors	r3, r2
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4053      	eors	r3, r2
 800a8ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d103      	bne.n	800a8fa <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d018      	beq.n	800a936 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4053      	eors	r3, r2
 800a90a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d111      	bne.n	800a936 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	60da      	str	r2, [r3, #12]
 800a928:	e005      	b.n	800a936 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3301      	adds	r3, #1
 800a92e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d018      	beq.n	800a972 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	4053      	eors	r3, r2
 800a946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d111      	bne.n	800a972 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3301      	adds	r3, #1
 800a95c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	611a      	str	r2, [r3, #16]
 800a964:	e005      	b.n	800a972 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d987      	bls.n	800a88e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a980:	4618      	mov	r0, r3
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	5200b400 	.word	0x5200b400
 800a990:	04040222 	.word	0x04040222

0800a994 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a99c:	4b19      	ldr	r3, [pc, #100]	@ (800aa04 <HAL_PWREx_ConfigSupply+0x70>)
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d00a      	beq.n	800a9be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a9a8:	4b16      	ldr	r3, [pc, #88]	@ (800aa04 <HAL_PWREx_ConfigSupply+0x70>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d001      	beq.n	800a9ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e01f      	b.n	800a9fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e01d      	b.n	800a9fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a9be:	4b11      	ldr	r3, [pc, #68]	@ (800aa04 <HAL_PWREx_ConfigSupply+0x70>)
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f023 0207 	bic.w	r2, r3, #7
 800a9c6:	490f      	ldr	r1, [pc, #60]	@ (800aa04 <HAL_PWREx_ConfigSupply+0x70>)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a9ce:	f7f8 ff41 	bl	8003854 <HAL_GetTick>
 800a9d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9d4:	e009      	b.n	800a9ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a9d6:	f7f8 ff3d 	bl	8003854 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a9e4:	d901      	bls.n	800a9ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e007      	b.n	800a9fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9ea:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <HAL_PWREx_ConfigSupply+0x70>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9f6:	d1ee      	bne.n	800a9d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	58024800 	.word	0x58024800

0800aa08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08c      	sub	sp, #48	@ 0x30
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e3c8      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 8087 	beq.w	800ab36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa28:	4b88      	ldr	r3, [pc, #544]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa32:	4b86      	ldr	r3, [pc, #536]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa36:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	2b10      	cmp	r3, #16
 800aa3c:	d007      	beq.n	800aa4e <HAL_RCC_OscConfig+0x46>
 800aa3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa40:	2b18      	cmp	r3, #24
 800aa42:	d110      	bne.n	800aa66 <HAL_RCC_OscConfig+0x5e>
 800aa44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d10b      	bne.n	800aa66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa4e:	4b7f      	ldr	r3, [pc, #508]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d06c      	beq.n	800ab34 <HAL_RCC_OscConfig+0x12c>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d168      	bne.n	800ab34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e3a2      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa6e:	d106      	bne.n	800aa7e <HAL_RCC_OscConfig+0x76>
 800aa70:	4b76      	ldr	r3, [pc, #472]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a75      	ldr	r2, [pc, #468]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e02e      	b.n	800aadc <HAL_RCC_OscConfig+0xd4>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10c      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x98>
 800aa86:	4b71      	ldr	r3, [pc, #452]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a70      	ldr	r2, [pc, #448]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa90:	6013      	str	r3, [r2, #0]
 800aa92:	4b6e      	ldr	r3, [pc, #440]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a6d      	ldr	r2, [pc, #436]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aa98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	e01d      	b.n	800aadc <HAL_RCC_OscConfig+0xd4>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aaa8:	d10c      	bne.n	800aac4 <HAL_RCC_OscConfig+0xbc>
 800aaaa:	4b68      	ldr	r3, [pc, #416]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a67      	ldr	r2, [pc, #412]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4b65      	ldr	r3, [pc, #404]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a64      	ldr	r2, [pc, #400]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aabc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	e00b      	b.n	800aadc <HAL_RCC_OscConfig+0xd4>
 800aac4:	4b61      	ldr	r3, [pc, #388]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a60      	ldr	r2, [pc, #384]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aaca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	4b5e      	ldr	r3, [pc, #376]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a5d      	ldr	r2, [pc, #372]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800aad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d013      	beq.n	800ab0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aae4:	f7f8 feb6 	bl	8003854 <HAL_GetTick>
 800aae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aaec:	f7f8 feb2 	bl	8003854 <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b64      	cmp	r3, #100	@ 0x64
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e356      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aafe:	4b53      	ldr	r3, [pc, #332]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCC_OscConfig+0xe4>
 800ab0a:	e014      	b.n	800ab36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab0c:	f7f8 fea2 	bl	8003854 <HAL_GetTick>
 800ab10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab12:	e008      	b.n	800ab26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab14:	f7f8 fe9e 	bl	8003854 <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	2b64      	cmp	r3, #100	@ 0x64
 800ab20:	d901      	bls.n	800ab26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e342      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab26:	4b49      	ldr	r3, [pc, #292]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f0      	bne.n	800ab14 <HAL_RCC_OscConfig+0x10c>
 800ab32:	e000      	b.n	800ab36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 808c 	beq.w	800ac5c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab44:	4b41      	ldr	r3, [pc, #260]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab4e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <HAL_RCC_OscConfig+0x162>
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	2b18      	cmp	r3, #24
 800ab5e:	d137      	bne.n	800abd0 <HAL_RCC_OscConfig+0x1c8>
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d132      	bne.n	800abd0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab6a:	4b38      	ldr	r3, [pc, #224]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d005      	beq.n	800ab82 <HAL_RCC_OscConfig+0x17a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e314      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab82:	4b32      	ldr	r3, [pc, #200]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f023 0219 	bic.w	r2, r3, #25
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	492f      	ldr	r1, [pc, #188]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab94:	f7f8 fe5e 	bl	8003854 <HAL_GetTick>
 800ab98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab9a:	e008      	b.n	800abae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab9c:	f7f8 fe5a 	bl	8003854 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d901      	bls.n	800abae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e2fe      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abae:	4b27      	ldr	r3, [pc, #156]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0f0      	beq.n	800ab9c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abba:	4b24      	ldr	r3, [pc, #144]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	061b      	lsls	r3, r3, #24
 800abc8:	4920      	ldr	r1, [pc, #128]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abce:	e045      	b.n	800ac5c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d026      	beq.n	800ac26 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abd8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f023 0219 	bic.w	r2, r3, #25
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	4919      	ldr	r1, [pc, #100]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abea:	f7f8 fe33 	bl	8003854 <HAL_GetTick>
 800abee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abf0:	e008      	b.n	800ac04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abf2:	f7f8 fe2f 	bl	8003854 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e2d3      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac04:	4b11      	ldr	r3, [pc, #68]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0f0      	beq.n	800abf2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac10:	4b0e      	ldr	r3, [pc, #56]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	061b      	lsls	r3, r3, #24
 800ac1e:	490b      	ldr	r1, [pc, #44]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	604b      	str	r3, [r1, #4]
 800ac24:	e01a      	b.n	800ac5c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a08      	ldr	r2, [pc, #32]	@ (800ac4c <HAL_RCC_OscConfig+0x244>)
 800ac2c:	f023 0301 	bic.w	r3, r3, #1
 800ac30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac32:	f7f8 fe0f 	bl	8003854 <HAL_GetTick>
 800ac36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac38:	e00a      	b.n	800ac50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac3a:	f7f8 fe0b 	bl	8003854 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d903      	bls.n	800ac50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e2af      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
 800ac4c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac50:	4b96      	ldr	r3, [pc, #600]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1ee      	bne.n	800ac3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d06a      	beq.n	800ad3e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac68:	4b90      	ldr	r3, [pc, #576]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac70:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac72:	4b8e      	ldr	r3, [pc, #568]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ac74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac76:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d007      	beq.n	800ac8e <HAL_RCC_OscConfig+0x286>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b18      	cmp	r3, #24
 800ac82:	d11b      	bne.n	800acbc <HAL_RCC_OscConfig+0x2b4>
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d116      	bne.n	800acbc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac8e:	4b87      	ldr	r3, [pc, #540]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d005      	beq.n	800aca6 <HAL_RCC_OscConfig+0x29e>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	2b80      	cmp	r3, #128	@ 0x80
 800aca0:	d001      	beq.n	800aca6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e282      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aca6:	4b81      	ldr	r3, [pc, #516]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	061b      	lsls	r3, r3, #24
 800acb4:	497d      	ldr	r1, [pc, #500]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acba:	e040      	b.n	800ad3e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d023      	beq.n	800ad0c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800acc4:	4b79      	ldr	r3, [pc, #484]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a78      	ldr	r2, [pc, #480]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800acca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd0:	f7f8 fdc0 	bl	8003854 <HAL_GetTick>
 800acd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800acd8:	f7f8 fdbc 	bl	8003854 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e260      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acea:	4b70      	ldr	r3, [pc, #448]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f0      	beq.n	800acd8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acf6:	4b6d      	ldr	r3, [pc, #436]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	061b      	lsls	r3, r3, #24
 800ad04:	4969      	ldr	r1, [pc, #420]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60cb      	str	r3, [r1, #12]
 800ad0a:	e018      	b.n	800ad3e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad0c:	4b67      	ldr	r3, [pc, #412]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a66      	ldr	r2, [pc, #408]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad18:	f7f8 fd9c 	bl	8003854 <HAL_GetTick>
 800ad1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad1e:	e008      	b.n	800ad32 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad20:	f7f8 fd98 	bl	8003854 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d901      	bls.n	800ad32 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e23c      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad32:	4b5e      	ldr	r3, [pc, #376]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1f0      	bne.n	800ad20 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d036      	beq.n	800adb8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d019      	beq.n	800ad86 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad52:	4b56      	ldr	r3, [pc, #344]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad56:	4a55      	ldr	r2, [pc, #340]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad58:	f043 0301 	orr.w	r3, r3, #1
 800ad5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad5e:	f7f8 fd79 	bl	8003854 <HAL_GetTick>
 800ad62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad64:	e008      	b.n	800ad78 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad66:	f7f8 fd75 	bl	8003854 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d901      	bls.n	800ad78 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ad74:	2303      	movs	r3, #3
 800ad76:	e219      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad78:	4b4c      	ldr	r3, [pc, #304]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0f0      	beq.n	800ad66 <HAL_RCC_OscConfig+0x35e>
 800ad84:	e018      	b.n	800adb8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad86:	4b49      	ldr	r3, [pc, #292]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad8a:	4a48      	ldr	r2, [pc, #288]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad92:	f7f8 fd5f 	bl	8003854 <HAL_GetTick>
 800ad96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad98:	e008      	b.n	800adac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad9a:	f7f8 fd5b 	bl	8003854 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d901      	bls.n	800adac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e1ff      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adac:	4b3f      	ldr	r3, [pc, #252]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800adae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adb0:	f003 0302 	and.w	r3, r3, #2
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1f0      	bne.n	800ad9a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d036      	beq.n	800ae32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d019      	beq.n	800ae00 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800adcc:	4b37      	ldr	r3, [pc, #220]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a36      	ldr	r2, [pc, #216]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800add2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800add6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800add8:	f7f8 fd3c 	bl	8003854 <HAL_GetTick>
 800addc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adde:	e008      	b.n	800adf2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ade0:	f7f8 fd38 	bl	8003854 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	2b02      	cmp	r3, #2
 800adec:	d901      	bls.n	800adf2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e1dc      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adf2:	4b2e      	ldr	r3, [pc, #184]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0f0      	beq.n	800ade0 <HAL_RCC_OscConfig+0x3d8>
 800adfe:	e018      	b.n	800ae32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae00:	4b2a      	ldr	r3, [pc, #168]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a29      	ldr	r2, [pc, #164]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae0c:	f7f8 fd22 	bl	8003854 <HAL_GetTick>
 800ae10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae12:	e008      	b.n	800ae26 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae14:	f7f8 fd1e 	bl	8003854 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d901      	bls.n	800ae26 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e1c2      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae26:	4b21      	ldr	r3, [pc, #132]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1f0      	bne.n	800ae14 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0304 	and.w	r3, r3, #4
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 8086 	beq.w	800af4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae40:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb0 <HAL_RCC_OscConfig+0x4a8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a1a      	ldr	r2, [pc, #104]	@ (800aeb0 <HAL_RCC_OscConfig+0x4a8>)
 800ae46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae4c:	f7f8 fd02 	bl	8003854 <HAL_GetTick>
 800ae50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae54:	f7f8 fcfe 	bl	8003854 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b64      	cmp	r3, #100	@ 0x64
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e1a2      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae66:	4b12      	ldr	r3, [pc, #72]	@ (800aeb0 <HAL_RCC_OscConfig+0x4a8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0f0      	beq.n	800ae54 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d106      	bne.n	800ae88 <HAL_RCC_OscConfig+0x480>
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae7e:	4a0b      	ldr	r2, [pc, #44]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae86:	e032      	b.n	800aeee <HAL_RCC_OscConfig+0x4e6>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d111      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x4ac>
 800ae90:	4b06      	ldr	r3, [pc, #24]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae94:	4a05      	ldr	r2, [pc, #20]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae96:	f023 0301 	bic.w	r3, r3, #1
 800ae9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae9c:	4b03      	ldr	r3, [pc, #12]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aea0:	4a02      	ldr	r2, [pc, #8]	@ (800aeac <HAL_RCC_OscConfig+0x4a4>)
 800aea2:	f023 0304 	bic.w	r3, r3, #4
 800aea6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aea8:	e021      	b.n	800aeee <HAL_RCC_OscConfig+0x4e6>
 800aeaa:	bf00      	nop
 800aeac:	58024400 	.word	0x58024400
 800aeb0:	58024800 	.word	0x58024800
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	d10c      	bne.n	800aed6 <HAL_RCC_OscConfig+0x4ce>
 800aebc:	4b83      	ldr	r3, [pc, #524]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec0:	4a82      	ldr	r2, [pc, #520]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aec2:	f043 0304 	orr.w	r3, r3, #4
 800aec6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aec8:	4b80      	ldr	r3, [pc, #512]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aeca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aecc:	4a7f      	ldr	r2, [pc, #508]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aed4:	e00b      	b.n	800aeee <HAL_RCC_OscConfig+0x4e6>
 800aed6:	4b7d      	ldr	r3, [pc, #500]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeda:	4a7c      	ldr	r2, [pc, #496]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aedc:	f023 0301 	bic.w	r3, r3, #1
 800aee0:	6713      	str	r3, [r2, #112]	@ 0x70
 800aee2:	4b7a      	ldr	r3, [pc, #488]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee6:	4a79      	ldr	r2, [pc, #484]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aee8:	f023 0304 	bic.w	r3, r3, #4
 800aeec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d015      	beq.n	800af22 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef6:	f7f8 fcad 	bl	8003854 <HAL_GetTick>
 800aefa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aefc:	e00a      	b.n	800af14 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aefe:	f7f8 fca9 	bl	8003854 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d901      	bls.n	800af14 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e14b      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af14:	4b6d      	ldr	r3, [pc, #436]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0ee      	beq.n	800aefe <HAL_RCC_OscConfig+0x4f6>
 800af20:	e014      	b.n	800af4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af22:	f7f8 fc97 	bl	8003854 <HAL_GetTick>
 800af26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af28:	e00a      	b.n	800af40 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af2a:	f7f8 fc93 	bl	8003854 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af38:	4293      	cmp	r3, r2
 800af3a:	d901      	bls.n	800af40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e135      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af40:	4b62      	ldr	r3, [pc, #392]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1ee      	bne.n	800af2a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 812a 	beq.w	800b1aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af56:	4b5d      	ldr	r3, [pc, #372]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af5e:	2b18      	cmp	r3, #24
 800af60:	f000 80ba 	beq.w	800b0d8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af68:	2b02      	cmp	r3, #2
 800af6a:	f040 8095 	bne.w	800b098 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af6e:	4b57      	ldr	r3, [pc, #348]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a56      	ldr	r2, [pc, #344]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af7a:	f7f8 fc6b 	bl	8003854 <HAL_GetTick>
 800af7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af80:	e008      	b.n	800af94 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af82:	f7f8 fc67 	bl	8003854 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d901      	bls.n	800af94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e10b      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af94:	4b4d      	ldr	r3, [pc, #308]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1f0      	bne.n	800af82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800afa0:	4b4a      	ldr	r3, [pc, #296]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800afa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afa4:	4b4a      	ldr	r3, [pc, #296]	@ (800b0d0 <HAL_RCC_OscConfig+0x6c8>)
 800afa6:	4013      	ands	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800afb0:	0112      	lsls	r2, r2, #4
 800afb2:	430a      	orrs	r2, r1
 800afb4:	4945      	ldr	r1, [pc, #276]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	628b      	str	r3, [r1, #40]	@ 0x28
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afbe:	3b01      	subs	r3, #1
 800afc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc8:	3b01      	subs	r3, #1
 800afca:	025b      	lsls	r3, r3, #9
 800afcc:	b29b      	uxth	r3, r3
 800afce:	431a      	orrs	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	3b01      	subs	r3, #1
 800afd6:	041b      	lsls	r3, r3, #16
 800afd8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afdc:	431a      	orrs	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe2:	3b01      	subs	r3, #1
 800afe4:	061b      	lsls	r3, r3, #24
 800afe6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afea:	4938      	ldr	r1, [pc, #224]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800afec:	4313      	orrs	r3, r2
 800afee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aff0:	4b36      	ldr	r3, [pc, #216]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	4a35      	ldr	r2, [pc, #212]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800aff6:	f023 0301 	bic.w	r3, r3, #1
 800affa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800affc:	4b33      	ldr	r3, [pc, #204]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800affe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b000:	4b34      	ldr	r3, [pc, #208]	@ (800b0d4 <HAL_RCC_OscConfig+0x6cc>)
 800b002:	4013      	ands	r3, r2
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b008:	00d2      	lsls	r2, r2, #3
 800b00a:	4930      	ldr	r1, [pc, #192]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b010:	4b2e      	ldr	r3, [pc, #184]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	f023 020c 	bic.w	r2, r3, #12
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01c:	492b      	ldr	r1, [pc, #172]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b022:	4b2a      	ldr	r3, [pc, #168]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	f023 0202 	bic.w	r2, r3, #2
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b02e:	4927      	ldr	r1, [pc, #156]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b030:	4313      	orrs	r3, r2
 800b032:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b034:	4b25      	ldr	r3, [pc, #148]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	4a24      	ldr	r2, [pc, #144]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b03a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b03e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b040:	4b22      	ldr	r3, [pc, #136]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	4a21      	ldr	r2, [pc, #132]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b04a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b04c:	4b1f      	ldr	r3, [pc, #124]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b050:	4a1e      	ldr	r2, [pc, #120]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b052:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b058:	4b1c      	ldr	r3, [pc, #112]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b05e:	f043 0301 	orr.w	r3, r3, #1
 800b062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b064:	4b19      	ldr	r3, [pc, #100]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a18      	ldr	r2, [pc, #96]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b06a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b070:	f7f8 fbf0 	bl	8003854 <HAL_GetTick>
 800b074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b078:	f7f8 fbec 	bl	8003854 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e090      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b08a:	4b10      	ldr	r3, [pc, #64]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f0      	beq.n	800b078 <HAL_RCC_OscConfig+0x670>
 800b096:	e088      	b.n	800b1aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b098:	4b0c      	ldr	r3, [pc, #48]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a0b      	ldr	r2, [pc, #44]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b09e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a4:	f7f8 fbd6 	bl	8003854 <HAL_GetTick>
 800b0a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0aa:	e008      	b.n	800b0be <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0ac:	f7f8 fbd2 	bl	8003854 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d901      	bls.n	800b0be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e076      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0be:	4b03      	ldr	r3, [pc, #12]	@ (800b0cc <HAL_RCC_OscConfig+0x6c4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1f0      	bne.n	800b0ac <HAL_RCC_OscConfig+0x6a4>
 800b0ca:	e06e      	b.n	800b1aa <HAL_RCC_OscConfig+0x7a2>
 800b0cc:	58024400 	.word	0x58024400
 800b0d0:	fffffc0c 	.word	0xfffffc0c
 800b0d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b0d8:	4b36      	ldr	r3, [pc, #216]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b0de:	4b35      	ldr	r3, [pc, #212]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d031      	beq.n	800b150 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f003 0203 	and.w	r2, r3, #3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d12a      	bne.n	800b150 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	091b      	lsrs	r3, r3, #4
 800b0fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b106:	429a      	cmp	r2, r3
 800b108:	d122      	bne.n	800b150 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b116:	429a      	cmp	r2, r3
 800b118:	d11a      	bne.n	800b150 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	0a5b      	lsrs	r3, r3, #9
 800b11e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b128:	429a      	cmp	r2, r3
 800b12a:	d111      	bne.n	800b150 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	0c1b      	lsrs	r3, r3, #16
 800b130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d108      	bne.n	800b150 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	0e1b      	lsrs	r3, r3, #24
 800b142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b14a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d001      	beq.n	800b154 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e02b      	b.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b154:	4b17      	ldr	r3, [pc, #92]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b158:	08db      	lsrs	r3, r3, #3
 800b15a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b15e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	429a      	cmp	r2, r3
 800b168:	d01f      	beq.n	800b1aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b16a:	4b12      	ldr	r3, [pc, #72]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	4a11      	ldr	r2, [pc, #68]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b170:	f023 0301 	bic.w	r3, r3, #1
 800b174:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b176:	f7f8 fb6d 	bl	8003854 <HAL_GetTick>
 800b17a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b17c:	bf00      	nop
 800b17e:	f7f8 fb69 	bl	8003854 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	4293      	cmp	r3, r2
 800b188:	d0f9      	beq.n	800b17e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b18a:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b18c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b18e:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b8 <HAL_RCC_OscConfig+0x7b0>)
 800b190:	4013      	ands	r3, r2
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b196:	00d2      	lsls	r2, r2, #3
 800b198:	4906      	ldr	r1, [pc, #24]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b19e:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a2:	4a04      	ldr	r2, [pc, #16]	@ (800b1b4 <HAL_RCC_OscConfig+0x7ac>)
 800b1a4:	f043 0301 	orr.w	r3, r3, #1
 800b1a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3730      	adds	r7, #48	@ 0x30
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	ffff0007 	.word	0xffff0007

0800b1bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e19c      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1d0:	4b8a      	ldr	r3, [pc, #552]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d910      	bls.n	800b200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1de:	4b87      	ldr	r3, [pc, #540]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f023 020f 	bic.w	r2, r3, #15
 800b1e6:	4985      	ldr	r1, [pc, #532]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ee:	4b83      	ldr	r3, [pc, #524]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 030f 	and.w	r3, r3, #15
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d001      	beq.n	800b200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e184      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d010      	beq.n	800b22e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	4b7b      	ldr	r3, [pc, #492]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b218:	429a      	cmp	r2, r3
 800b21a:	d908      	bls.n	800b22e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b21c:	4b78      	ldr	r3, [pc, #480]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	4975      	ldr	r1, [pc, #468]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	2b00      	cmp	r3, #0
 800b238:	d010      	beq.n	800b25c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	695a      	ldr	r2, [r3, #20]
 800b23e:	4b70      	ldr	r3, [pc, #448]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b246:	429a      	cmp	r2, r3
 800b248:	d908      	bls.n	800b25c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b24a:	4b6d      	ldr	r3, [pc, #436]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	496a      	ldr	r1, [pc, #424]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b00      	cmp	r3, #0
 800b266:	d010      	beq.n	800b28a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699a      	ldr	r2, [r3, #24]
 800b26c:	4b64      	ldr	r3, [pc, #400]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b274:	429a      	cmp	r2, r3
 800b276:	d908      	bls.n	800b28a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b278:	4b61      	ldr	r3, [pc, #388]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	495e      	ldr	r1, [pc, #376]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b286:	4313      	orrs	r3, r2
 800b288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b00      	cmp	r3, #0
 800b294:	d010      	beq.n	800b2b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69da      	ldr	r2, [r3, #28]
 800b29a:	4b59      	ldr	r3, [pc, #356]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d908      	bls.n	800b2b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b2a6:	4b56      	ldr	r3, [pc, #344]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	4953      	ldr	r1, [pc, #332]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d010      	beq.n	800b2e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f003 030f 	and.w	r3, r3, #15
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d908      	bls.n	800b2e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2d4:	4b4a      	ldr	r3, [pc, #296]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	f023 020f 	bic.w	r2, r3, #15
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4947      	ldr	r1, [pc, #284]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d055      	beq.n	800b39e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b2f2:	4b43      	ldr	r3, [pc, #268]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	4940      	ldr	r1, [pc, #256]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b300:	4313      	orrs	r3, r2
 800b302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d107      	bne.n	800b31c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b30c:	4b3c      	ldr	r3, [pc, #240]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d121      	bne.n	800b35c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e0f6      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	2b03      	cmp	r3, #3
 800b322:	d107      	bne.n	800b334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b324:	4b36      	ldr	r3, [pc, #216]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d115      	bne.n	800b35c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e0ea      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d107      	bne.n	800b34c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b33c:	4b30      	ldr	r3, [pc, #192]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e0de      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b34c:	4b2c      	ldr	r3, [pc, #176]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e0d6      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b35c:	4b28      	ldr	r3, [pc, #160]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	f023 0207 	bic.w	r2, r3, #7
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	4925      	ldr	r1, [pc, #148]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36e:	f7f8 fa71 	bl	8003854 <HAL_GetTick>
 800b372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b374:	e00a      	b.n	800b38c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b376:	f7f8 fa6d 	bl	8003854 <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b384:	4293      	cmp	r3, r2
 800b386:	d901      	bls.n	800b38c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e0be      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b38c:	4b1c      	ldr	r3, [pc, #112]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d1eb      	bne.n	800b376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d010      	beq.n	800b3cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	4b14      	ldr	r3, [pc, #80]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	f003 030f 	and.w	r3, r3, #15
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d208      	bcs.n	800b3cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3ba:	4b11      	ldr	r3, [pc, #68]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	f023 020f 	bic.w	r2, r3, #15
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	490e      	ldr	r1, [pc, #56]	@ (800b400 <HAL_RCC_ClockConfig+0x244>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d214      	bcs.n	800b404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3da:	4b08      	ldr	r3, [pc, #32]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f023 020f 	bic.w	r2, r3, #15
 800b3e2:	4906      	ldr	r1, [pc, #24]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ea:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <HAL_RCC_ClockConfig+0x240>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d005      	beq.n	800b404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e086      	b.n	800b50a <HAL_RCC_ClockConfig+0x34e>
 800b3fc:	52002000 	.word	0x52002000
 800b400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d010      	beq.n	800b432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	4b3f      	ldr	r3, [pc, #252]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d208      	bcs.n	800b432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b420:	4b3c      	ldr	r3, [pc, #240]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	4939      	ldr	r1, [pc, #228]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d010      	beq.n	800b460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	695a      	ldr	r2, [r3, #20]
 800b442:	4b34      	ldr	r3, [pc, #208]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d208      	bcs.n	800b460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b44e:	4b31      	ldr	r3, [pc, #196]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	492e      	ldr	r1, [pc, #184]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d010      	beq.n	800b48e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	4b28      	ldr	r3, [pc, #160]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b478:	429a      	cmp	r2, r3
 800b47a:	d208      	bcs.n	800b48e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b47c:	4b25      	ldr	r3, [pc, #148]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	4922      	ldr	r1, [pc, #136]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d010      	beq.n	800b4bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69da      	ldr	r2, [r3, #28]
 800b49e:	4b1d      	ldr	r3, [pc, #116]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d208      	bcs.n	800b4bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	4917      	ldr	r1, [pc, #92]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b4bc:	f000 f834 	bl	800b528 <HAL_RCC_GetSysClockFreq>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	4b14      	ldr	r3, [pc, #80]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	0a1b      	lsrs	r3, r3, #8
 800b4c8:	f003 030f 	and.w	r3, r3, #15
 800b4cc:	4912      	ldr	r1, [pc, #72]	@ (800b518 <HAL_RCC_ClockConfig+0x35c>)
 800b4ce:	5ccb      	ldrb	r3, [r1, r3]
 800b4d0:	f003 031f 	and.w	r3, r3, #31
 800b4d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4da:	4b0e      	ldr	r3, [pc, #56]	@ (800b514 <HAL_RCC_ClockConfig+0x358>)
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f003 030f 	and.w	r3, r3, #15
 800b4e2:	4a0d      	ldr	r2, [pc, #52]	@ (800b518 <HAL_RCC_ClockConfig+0x35c>)
 800b4e4:	5cd3      	ldrb	r3, [r2, r3]
 800b4e6:	f003 031f 	and.w	r3, r3, #31
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b51c <HAL_RCC_ClockConfig+0x360>)
 800b4f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b520 <HAL_RCC_ClockConfig+0x364>)
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b524 <HAL_RCC_ClockConfig+0x368>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7f7 f962 	bl	80027c8 <HAL_InitTick>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	58024400 	.word	0x58024400
 800b518:	080179e8 	.word	0x080179e8
 800b51c:	24000020 	.word	0x24000020
 800b520:	2400001c 	.word	0x2400001c
 800b524:	24000024 	.word	0x24000024

0800b528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b528:	b480      	push	{r7}
 800b52a:	b089      	sub	sp, #36	@ 0x24
 800b52c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b52e:	4bb3      	ldr	r3, [pc, #716]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b536:	2b18      	cmp	r3, #24
 800b538:	f200 8155 	bhi.w	800b7e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b53c:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b5a9 	.word	0x0800b5a9
 800b548:	0800b7e7 	.word	0x0800b7e7
 800b54c:	0800b7e7 	.word	0x0800b7e7
 800b550:	0800b7e7 	.word	0x0800b7e7
 800b554:	0800b7e7 	.word	0x0800b7e7
 800b558:	0800b7e7 	.word	0x0800b7e7
 800b55c:	0800b7e7 	.word	0x0800b7e7
 800b560:	0800b7e7 	.word	0x0800b7e7
 800b564:	0800b5cf 	.word	0x0800b5cf
 800b568:	0800b7e7 	.word	0x0800b7e7
 800b56c:	0800b7e7 	.word	0x0800b7e7
 800b570:	0800b7e7 	.word	0x0800b7e7
 800b574:	0800b7e7 	.word	0x0800b7e7
 800b578:	0800b7e7 	.word	0x0800b7e7
 800b57c:	0800b7e7 	.word	0x0800b7e7
 800b580:	0800b7e7 	.word	0x0800b7e7
 800b584:	0800b5d5 	.word	0x0800b5d5
 800b588:	0800b7e7 	.word	0x0800b7e7
 800b58c:	0800b7e7 	.word	0x0800b7e7
 800b590:	0800b7e7 	.word	0x0800b7e7
 800b594:	0800b7e7 	.word	0x0800b7e7
 800b598:	0800b7e7 	.word	0x0800b7e7
 800b59c:	0800b7e7 	.word	0x0800b7e7
 800b5a0:	0800b7e7 	.word	0x0800b7e7
 800b5a4:	0800b5db 	.word	0x0800b5db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5a8:	4b94      	ldr	r3, [pc, #592]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d009      	beq.n	800b5c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5b4:	4b91      	ldr	r3, [pc, #580]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	08db      	lsrs	r3, r3, #3
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	4a90      	ldr	r2, [pc, #576]	@ (800b800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b5c6:	e111      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b5c8:	4b8d      	ldr	r3, [pc, #564]	@ (800b800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5ca:	61bb      	str	r3, [r7, #24]
      break;
 800b5cc:	e10e      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b5ce:	4b8d      	ldr	r3, [pc, #564]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5d0:	61bb      	str	r3, [r7, #24]
      break;
 800b5d2:	e10b      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b5d4:	4b8c      	ldr	r3, [pc, #560]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b5d6:	61bb      	str	r3, [r7, #24]
      break;
 800b5d8:	e108      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5da:	4b88      	ldr	r3, [pc, #544]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5e4:	4b85      	ldr	r3, [pc, #532]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	091b      	lsrs	r3, r3, #4
 800b5ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5f0:	4b82      	ldr	r3, [pc, #520]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5fa:	4b80      	ldr	r3, [pc, #512]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5fe:	08db      	lsrs	r3, r3, #3
 800b600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	fb02 f303 	mul.w	r3, r2, r3
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 80e1 	beq.w	800b7e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b02      	cmp	r3, #2
 800b622:	f000 8083 	beq.w	800b72c <HAL_RCC_GetSysClockFreq+0x204>
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	f200 80a1 	bhi.w	800b770 <HAL_RCC_GetSysClockFreq+0x248>
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <HAL_RCC_GetSysClockFreq+0x114>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d056      	beq.n	800b6e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b63a:	e099      	b.n	800b770 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b63c:	4b6f      	ldr	r3, [pc, #444]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0320 	and.w	r3, r3, #32
 800b644:	2b00      	cmp	r3, #0
 800b646:	d02d      	beq.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b648:	4b6c      	ldr	r3, [pc, #432]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	08db      	lsrs	r3, r3, #3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	4a6b      	ldr	r2, [pc, #428]	@ (800b800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	ee07 3a90 	vmov	s15, r3
 800b660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b672:	4b62      	ldr	r3, [pc, #392]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b682:	ed97 6a02 	vldr	s12, [r7, #8]
 800b686:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b80c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b6a2:	e087      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b810 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b6:	4b51      	ldr	r3, [pc, #324]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b80c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6e6:	e065      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fa:	4b40      	ldr	r3, [pc, #256]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b70e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b80c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b72a:	e043      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73e:	4b2f      	ldr	r3, [pc, #188]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b752:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b80c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b76e:	e021      	b.n	800b7b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b782:	4b1e      	ldr	r3, [pc, #120]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b792:	ed97 6a02 	vldr	s12, [r7, #8]
 800b796:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b80c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b7b4:	4b11      	ldr	r3, [pc, #68]	@ (800b7fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b8:	0a5b      	lsrs	r3, r3, #9
 800b7ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7be:	3301      	adds	r3, #1
 800b7c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	ee07 3a90 	vmov	s15, r3
 800b7c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d8:	ee17 3a90 	vmov	r3, s15
 800b7dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b7de:	e005      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61bb      	str	r3, [r7, #24]
      break;
 800b7e4:	e002      	b.n	800b7ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b7e6:	4b07      	ldr	r3, [pc, #28]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7e8:	61bb      	str	r3, [r7, #24]
      break;
 800b7ea:	bf00      	nop
  }

  return sysclockfreq;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3724      	adds	r7, #36	@ 0x24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	58024400 	.word	0x58024400
 800b800:	03d09000 	.word	0x03d09000
 800b804:	003d0900 	.word	0x003d0900
 800b808:	017d7840 	.word	0x017d7840
 800b80c:	46000000 	.word	0x46000000
 800b810:	4c742400 	.word	0x4c742400
 800b814:	4a742400 	.word	0x4a742400
 800b818:	4bbebc20 	.word	0x4bbebc20

0800b81c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b822:	f7ff fe81 	bl	800b528 <HAL_RCC_GetSysClockFreq>
 800b826:	4602      	mov	r2, r0
 800b828:	4b10      	ldr	r3, [pc, #64]	@ (800b86c <HAL_RCC_GetHCLKFreq+0x50>)
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	f003 030f 	and.w	r3, r3, #15
 800b832:	490f      	ldr	r1, [pc, #60]	@ (800b870 <HAL_RCC_GetHCLKFreq+0x54>)
 800b834:	5ccb      	ldrb	r3, [r1, r3]
 800b836:	f003 031f 	and.w	r3, r3, #31
 800b83a:	fa22 f303 	lsr.w	r3, r2, r3
 800b83e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b840:	4b0a      	ldr	r3, [pc, #40]	@ (800b86c <HAL_RCC_GetHCLKFreq+0x50>)
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	4a09      	ldr	r2, [pc, #36]	@ (800b870 <HAL_RCC_GetHCLKFreq+0x54>)
 800b84a:	5cd3      	ldrb	r3, [r2, r3]
 800b84c:	f003 031f 	and.w	r3, r3, #31
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	fa22 f303 	lsr.w	r3, r2, r3
 800b856:	4a07      	ldr	r2, [pc, #28]	@ (800b874 <HAL_RCC_GetHCLKFreq+0x58>)
 800b858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b85a:	4a07      	ldr	r2, [pc, #28]	@ (800b878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b860:	4b04      	ldr	r3, [pc, #16]	@ (800b874 <HAL_RCC_GetHCLKFreq+0x58>)
 800b862:	681b      	ldr	r3, [r3, #0]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	58024400 	.word	0x58024400
 800b870:	080179e8 	.word	0x080179e8
 800b874:	24000020 	.word	0x24000020
 800b878:	2400001c 	.word	0x2400001c

0800b87c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b880:	f7ff ffcc 	bl	800b81c <HAL_RCC_GetHCLKFreq>
 800b884:	4602      	mov	r2, r0
 800b886:	4b06      	ldr	r3, [pc, #24]	@ (800b8a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	4904      	ldr	r1, [pc, #16]	@ (800b8a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b892:	5ccb      	ldrb	r3, [r1, r3]
 800b894:	f003 031f 	and.w	r3, r3, #31
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	58024400 	.word	0x58024400
 800b8a4:	080179e8 	.word	0x080179e8

0800b8a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	223f      	movs	r2, #63	@ 0x3f
 800b8b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	f003 0207 	and.w	r2, r3, #7
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b8c4:	4b17      	ldr	r3, [pc, #92]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b8d0:	4b14      	ldr	r3, [pc, #80]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	f003 020f 	and.w	r2, r3, #15
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b8dc:	4b11      	ldr	r3, [pc, #68]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b900:	4b08      	ldr	r3, [pc, #32]	@ (800b924 <HAL_RCC_GetClockConfig+0x7c>)
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b90c:	4b06      	ldr	r3, [pc, #24]	@ (800b928 <HAL_RCC_GetClockConfig+0x80>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	601a      	str	r2, [r3, #0]
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	58024400 	.word	0x58024400
 800b928:	52002000 	.word	0x52002000

0800b92c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b930:	b0c6      	sub	sp, #280	@ 0x118
 800b932:	af00      	add	r7, sp, #0
 800b934:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b938:	2300      	movs	r3, #0
 800b93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b93e:	2300      	movs	r3, #0
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b950:	2500      	movs	r5, #0
 800b952:	ea54 0305 	orrs.w	r3, r4, r5
 800b956:	d049      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b95e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b962:	d02f      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b964:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b968:	d828      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b96a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b96e:	d01a      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b974:	d822      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b97a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b97e:	d007      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b980:	e01c      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b982:	4bab      	ldr	r3, [pc, #684]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	4aaa      	ldr	r2, [pc, #680]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b98e:	e01a      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b994:	3308      	adds	r3, #8
 800b996:	2102      	movs	r1, #2
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 f967 	bl	800cc6c <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00f      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9aa:	3328      	adds	r3, #40	@ 0x28
 800b9ac:	2102      	movs	r1, #2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 fa0e 	bl	800cdd0 <RCCEx_PLL3_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9ba:	e004      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9ce:	4b98      	ldr	r3, [pc, #608]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9dc:	4a94      	ldr	r2, [pc, #592]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9e2:	e003      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	ea58 0309 	orrs.w	r3, r8, r9
 800ba00:	d047      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba08:	2b04      	cmp	r3, #4
 800ba0a:	d82a      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba12:	bf00      	nop
 800ba14:	0800ba29 	.word	0x0800ba29
 800ba18:	0800ba37 	.word	0x0800ba37
 800ba1c:	0800ba4d 	.word	0x0800ba4d
 800ba20:	0800ba6b 	.word	0x0800ba6b
 800ba24:	0800ba6b 	.word	0x0800ba6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b81      	ldr	r3, [pc, #516]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	4a80      	ldr	r2, [pc, #512]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba34:	e01a      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 f914 	bl	800cc6c <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba4a:	e00f      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	3328      	adds	r3, #40	@ 0x28
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 f9bb 	bl	800cdd0 <RCCEx_PLL3_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba60:	e004      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba68:	e000      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba74:	4b6e      	ldr	r3, [pc, #440]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba78:	f023 0107 	bic.w	r1, r3, #7
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba82:	4a6b      	ldr	r2, [pc, #428]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba84:	430b      	orrs	r3, r1
 800ba86:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba88:	e003      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800ba9e:	f04f 0b00 	mov.w	fp, #0
 800baa2:	ea5a 030b 	orrs.w	r3, sl, fp
 800baa6:	d05b      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bab0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bab4:	d03b      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bab6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800baba:	d834      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800babc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bac0:	d037      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bac6:	d82e      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bacc:	d033      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bad2:	d828      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bad8:	d01a      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bade:	d822      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bae8:	d007      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800baea:	e01c      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4b50      	ldr	r3, [pc, #320]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf0:	4a4f      	ldr	r2, [pc, #316]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baf8:	e01e      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafe:	3308      	adds	r3, #8
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 f8b2 	bl	800cc6c <RCCEx_PLL2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb0e:	e013      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb14:	3328      	adds	r3, #40	@ 0x28
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 f959 	bl	800cdd0 <RCCEx_PLL3_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb24:	e008      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb2c:	e004      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10b      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb40:	4b3b      	ldr	r3, [pc, #236]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb44:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb50:	4a37      	ldr	r2, [pc, #220]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb52:	430b      	orrs	r3, r1
 800bb54:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb56:	e003      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bb6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb70:	2300      	movs	r3, #0
 800bb72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bb76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	d05d      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bb8c:	d03b      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb8e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bb92:	d834      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb98:	d037      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bb9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb9e:	d82e      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bba4:	d033      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bba6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bbaa:	d828      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbb0:	d01a      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bbb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbb6:	d822      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bbbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbc0:	d007      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bbc2:	e01c      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	4a19      	ldr	r2, [pc, #100]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbd0:	e01e      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f001 f846 	bl	800cc6c <RCCEx_PLL2_Config>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bbe6:	e013      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbec:	3328      	adds	r3, #40	@ 0x28
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 f8ed 	bl	800cdd0 <RCCEx_PLL3_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbfc:	e008      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc04:	e004      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10d      	bne.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc18:	4b05      	ldr	r3, [pc, #20]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc28:	4a01      	ldr	r2, [pc, #4]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc2e:	e005      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bc48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	d03a      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc62:	2b30      	cmp	r3, #48	@ 0x30
 800bc64:	d01f      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bc66:	2b30      	cmp	r3, #48	@ 0x30
 800bc68:	d819      	bhi.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d00c      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d815      	bhi.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d019      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc76:	2b10      	cmp	r3, #16
 800bc78:	d111      	bne.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc7a:	4baa      	ldr	r3, [pc, #680]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	4aa9      	ldr	r2, [pc, #676]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc86:	e011      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	2102      	movs	r1, #2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f000 ffeb 	bl	800cc6c <RCCEx_PLL2_Config>
 800bc96:	4603      	mov	r3, r0
 800bc98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc9c:	e006      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bca4:	e002      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bca6:	bf00      	nop
 800bca8:	e000      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bcaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bcb4:	4b9b      	ldr	r3, [pc, #620]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc2:	4a98      	ldr	r2, [pc, #608]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcc4:	430b      	orrs	r3, r1
 800bcc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcc8:	e003      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bcde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bce2:	2300      	movs	r3, #0
 800bce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bce8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bcec:	460b      	mov	r3, r1
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d051      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcfc:	d035      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bcfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd02:	d82e      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd08:	d031      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bd0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd0e:	d828      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd14:	d01a      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd1a:	d822      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bd20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd24:	d007      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bd26:	e01c      	b.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd28:	4b7e      	ldr	r3, [pc, #504]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2c:	4a7d      	ldr	r2, [pc, #500]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd34:	e01c      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 ff94 	bl	800cc6c <RCCEx_PLL2_Config>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd4a:	e011      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd50:	3328      	adds	r3, #40	@ 0x28
 800bd52:	2100      	movs	r1, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f83b 	bl	800cdd0 <RCCEx_PLL3_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd60:	e006      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd68:	e002      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd78:	4b6a      	ldr	r3, [pc, #424]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd86:	4a67      	ldr	r2, [pc, #412]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd8c:	e003      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bda2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bda6:	2300      	movs	r3, #0
 800bda8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bdac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d053      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdc0:	d033      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bdc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdc6:	d82c      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdcc:	d02f      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bdce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdd2:	d826      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdd8:	d02b      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bdda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdde:	d820      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bde0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bde4:	d012      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bde6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdea:	d81a      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d022      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bdf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdf4:	d115      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 ff34 	bl	800cc6c <RCCEx_PLL2_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be0a:	e015      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be10:	3328      	adds	r3, #40	@ 0x28
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f000 ffdb 	bl	800cdd0 <RCCEx_PLL3_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be20:	e00a      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be28:	e006      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be40:	4b38      	ldr	r3, [pc, #224]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be4e:	4a35      	ldr	r2, [pc, #212]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be50:	430b      	orrs	r3, r1
 800be52:	6513      	str	r3, [r2, #80]	@ 0x50
 800be54:	e003      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800be6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be6e:	2300      	movs	r3, #0
 800be70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800be78:	460b      	mov	r3, r1
 800be7a:	4313      	orrs	r3, r2
 800be7c:	d058      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be8a:	d033      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be90:	d82c      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be96:	d02f      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800be98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be9c:	d826      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bea2:	d02b      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bea8:	d820      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beae:	d012      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800beb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb4:	d81a      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d022      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800beba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bebe:	d115      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec4:	3308      	adds	r3, #8
 800bec6:	2101      	movs	r1, #1
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 fecf 	bl	800cc6c <RCCEx_PLL2_Config>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bed4:	e015      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beda:	3328      	adds	r3, #40	@ 0x28
 800bedc:	2101      	movs	r1, #1
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 ff76 	bl	800cdd0 <RCCEx_PLL3_Config>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800beea:	e00a      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef2:	e006      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bef4:	bf00      	nop
 800bef6:	e004      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bef8:	bf00      	nop
 800befa:	e002      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800befc:	bf00      	nop
 800befe:	e000      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10e      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf0a:	4b06      	ldr	r3, [pc, #24]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf1a:	4a02      	ldr	r2, [pc, #8]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf20:	e006      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bf22:	bf00      	nop
 800bf24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bf3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	d037      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf5a:	d00e      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf60:	d816      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d018      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bf66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf6a:	d111      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf6c:	4bc4      	ldr	r3, [pc, #784]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf70:	4ac3      	ldr	r2, [pc, #780]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf78:	e00f      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf7e:	3308      	adds	r3, #8
 800bf80:	2101      	movs	r1, #1
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fe72 	bl	800cc6c <RCCEx_PLL2_Config>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf8e:	e004      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf96:	e000      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bf98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bfa2:	4bb7      	ldr	r3, [pc, #732]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfa6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb0:	4ab3      	ldr	r2, [pc, #716]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfb2:	430b      	orrs	r3, r1
 800bfb4:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfb6:	e003      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bfcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bfd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	d039      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d81c      	bhi.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bfea:	a201      	add	r2, pc, #4	@ (adr r2, 800bff0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c02d 	.word	0x0800c02d
 800bff4:	0800c001 	.word	0x0800c001
 800bff8:	0800c00f 	.word	0x0800c00f
 800bffc:	0800c02d 	.word	0x0800c02d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c000:	4b9f      	ldr	r3, [pc, #636]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	4a9e      	ldr	r2, [pc, #632]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c00a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c00c:	e00f      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c012:	3308      	adds	r3, #8
 800c014:	2102      	movs	r1, #2
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fe28 	bl	800cc6c <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c022:	e004      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c02a:	e000      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c02e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c036:	4b92      	ldr	r3, [pc, #584]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c03a:	f023 0103 	bic.w	r1, r3, #3
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c044:	4a8e      	ldr	r2, [pc, #568]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c046:	430b      	orrs	r3, r1
 800c048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c04a:	e003      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c064:	2300      	movs	r3, #0
 800c066:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c06a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c06e:	460b      	mov	r3, r1
 800c070:	4313      	orrs	r3, r2
 800c072:	f000 8099 	beq.w	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c076:	4b83      	ldr	r3, [pc, #524]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a82      	ldr	r2, [pc, #520]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c07c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c082:	f7f7 fbe7 	bl	8003854 <HAL_GetTick>
 800c086:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c08a:	e00b      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c08c:	f7f7 fbe2 	bl	8003854 <HAL_GetTick>
 800c090:	4602      	mov	r2, r0
 800c092:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	2b64      	cmp	r3, #100	@ 0x64
 800c09a:	d903      	bls.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0a2:	e005      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0a4:	4b77      	ldr	r3, [pc, #476]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0ed      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d173      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c0b8:	4b71      	ldr	r3, [pc, #452]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0c4:	4053      	eors	r3, r2
 800c0c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d015      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0da:	4b69      	ldr	r3, [pc, #420]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0de:	4a68      	ldr	r2, [pc, #416]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0e6:	4b66      	ldr	r3, [pc, #408]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ea:	4a65      	ldr	r2, [pc, #404]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0f2:	4a63      	ldr	r2, [pc, #396]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c106:	d118      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c108:	f7f7 fba4 	bl	8003854 <HAL_GetTick>
 800c10c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c110:	e00d      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c112:	f7f7 fb9f 	bl	8003854 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c11c:	1ad2      	subs	r2, r2, r3
 800c11e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c122:	429a      	cmp	r2, r3
 800c124:	d903      	bls.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c12c:	e005      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c12e:	4b54      	ldr	r3, [pc, #336]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0eb      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c13a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d129      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c14e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c152:	d10e      	bne.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c154:	4b4a      	ldr	r3, [pc, #296]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c164:	091a      	lsrs	r2, r3, #4
 800c166:	4b48      	ldr	r3, [pc, #288]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c168:	4013      	ands	r3, r2
 800c16a:	4a45      	ldr	r2, [pc, #276]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c16c:	430b      	orrs	r3, r1
 800c16e:	6113      	str	r3, [r2, #16]
 800c170:	e005      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c172:	4b43      	ldr	r3, [pc, #268]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	4a42      	ldr	r2, [pc, #264]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c178:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c17c:	6113      	str	r3, [r2, #16]
 800c17e:	4b40      	ldr	r3, [pc, #256]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c180:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c18e:	4a3c      	ldr	r2, [pc, #240]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c190:	430b      	orrs	r3, r1
 800c192:	6713      	str	r3, [r2, #112]	@ 0x70
 800c194:	e008      	b.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c19a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c19e:	e003      	b.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f002 0301 	and.w	r3, r2, #1
 800c1b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c1be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	f000 808f 	beq.w	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1d0:	2b28      	cmp	r3, #40	@ 0x28
 800c1d2:	d871      	bhi.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1da:	bf00      	nop
 800c1dc:	0800c2c1 	.word	0x0800c2c1
 800c1e0:	0800c2b9 	.word	0x0800c2b9
 800c1e4:	0800c2b9 	.word	0x0800c2b9
 800c1e8:	0800c2b9 	.word	0x0800c2b9
 800c1ec:	0800c2b9 	.word	0x0800c2b9
 800c1f0:	0800c2b9 	.word	0x0800c2b9
 800c1f4:	0800c2b9 	.word	0x0800c2b9
 800c1f8:	0800c2b9 	.word	0x0800c2b9
 800c1fc:	0800c28d 	.word	0x0800c28d
 800c200:	0800c2b9 	.word	0x0800c2b9
 800c204:	0800c2b9 	.word	0x0800c2b9
 800c208:	0800c2b9 	.word	0x0800c2b9
 800c20c:	0800c2b9 	.word	0x0800c2b9
 800c210:	0800c2b9 	.word	0x0800c2b9
 800c214:	0800c2b9 	.word	0x0800c2b9
 800c218:	0800c2b9 	.word	0x0800c2b9
 800c21c:	0800c2a3 	.word	0x0800c2a3
 800c220:	0800c2b9 	.word	0x0800c2b9
 800c224:	0800c2b9 	.word	0x0800c2b9
 800c228:	0800c2b9 	.word	0x0800c2b9
 800c22c:	0800c2b9 	.word	0x0800c2b9
 800c230:	0800c2b9 	.word	0x0800c2b9
 800c234:	0800c2b9 	.word	0x0800c2b9
 800c238:	0800c2b9 	.word	0x0800c2b9
 800c23c:	0800c2c1 	.word	0x0800c2c1
 800c240:	0800c2b9 	.word	0x0800c2b9
 800c244:	0800c2b9 	.word	0x0800c2b9
 800c248:	0800c2b9 	.word	0x0800c2b9
 800c24c:	0800c2b9 	.word	0x0800c2b9
 800c250:	0800c2b9 	.word	0x0800c2b9
 800c254:	0800c2b9 	.word	0x0800c2b9
 800c258:	0800c2b9 	.word	0x0800c2b9
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2b9 	.word	0x0800c2b9
 800c264:	0800c2b9 	.word	0x0800c2b9
 800c268:	0800c2b9 	.word	0x0800c2b9
 800c26c:	0800c2b9 	.word	0x0800c2b9
 800c270:	0800c2b9 	.word	0x0800c2b9
 800c274:	0800c2b9 	.word	0x0800c2b9
 800c278:	0800c2b9 	.word	0x0800c2b9
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	58024400 	.word	0x58024400
 800c284:	58024800 	.word	0x58024800
 800c288:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c290:	3308      	adds	r3, #8
 800c292:	2101      	movs	r1, #1
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fce9 	bl	800cc6c <RCCEx_PLL2_Config>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2a0:	e00f      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a6:	3328      	adds	r3, #40	@ 0x28
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fd90 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2b6:	e004      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2be:	e000      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c2ca:	4bbf      	ldr	r3, [pc, #764]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2d8:	4abb      	ldr	r2, [pc, #748]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2de:	e003      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f002 0302 	and.w	r3, r2, #2
 800c2f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c302:	460b      	mov	r3, r1
 800c304:	4313      	orrs	r3, r2
 800c306:	d041      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d824      	bhi.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c365 	.word	0x0800c365
 800c31c:	0800c331 	.word	0x0800c331
 800c320:	0800c347 	.word	0x0800c347
 800c324:	0800c365 	.word	0x0800c365
 800c328:	0800c365 	.word	0x0800c365
 800c32c:	0800c365 	.word	0x0800c365
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c334:	3308      	adds	r3, #8
 800c336:	2101      	movs	r1, #1
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fc97 	bl	800cc6c <RCCEx_PLL2_Config>
 800c33e:	4603      	mov	r3, r0
 800c340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c344:	e00f      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34a:	3328      	adds	r3, #40	@ 0x28
 800c34c:	2101      	movs	r1, #1
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 fd3e 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c354:	4603      	mov	r3, r0
 800c356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c35a:	e004      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c362:	e000      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10a      	bne.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c36e:	4b96      	ldr	r3, [pc, #600]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c372:	f023 0107 	bic.w	r1, r3, #7
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37c:	4a92      	ldr	r2, [pc, #584]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c37e:	430b      	orrs	r3, r1
 800c380:	6553      	str	r3, [r2, #84]	@ 0x54
 800c382:	e003      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f002 0304 	and.w	r3, r2, #4
 800c398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	d044      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b4:	2b05      	cmp	r3, #5
 800c3b6:	d825      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c40d 	.word	0x0800c40d
 800c3c4:	0800c3d9 	.word	0x0800c3d9
 800c3c8:	0800c3ef 	.word	0x0800c3ef
 800c3cc:	0800c40d 	.word	0x0800c40d
 800c3d0:	0800c40d 	.word	0x0800c40d
 800c3d4:	0800c40d 	.word	0x0800c40d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3dc:	3308      	adds	r3, #8
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 fc43 	bl	800cc6c <RCCEx_PLL2_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3ec:	e00f      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	3328      	adds	r3, #40	@ 0x28
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fcea 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c402:	e004      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c40a:	e000      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c40c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c40e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10b      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c416:	4b6c      	ldr	r3, [pc, #432]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c41a:	f023 0107 	bic.w	r1, r3, #7
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c426:	4a68      	ldr	r2, [pc, #416]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c428:	430b      	orrs	r3, r1
 800c42a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c42c:	e003      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f002 0320 	and.w	r3, r2, #32
 800c442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c446:	2300      	movs	r3, #0
 800c448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c44c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c450:	460b      	mov	r3, r1
 800c452:	4313      	orrs	r3, r2
 800c454:	d055      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c45e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c462:	d033      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c468:	d82c      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46e:	d02f      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c474:	d826      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c47a:	d02b      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c47c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c480:	d820      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c486:	d012      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c48c:	d81a      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d022      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c496:	d115      	bne.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49c:	3308      	adds	r3, #8
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fbe3 	bl	800cc6c <RCCEx_PLL2_Config>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4ac:	e015      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b2:	3328      	adds	r3, #40	@ 0x28
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 fc8a 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4c2:	e00a      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4ca:	e006      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e004      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d0:	bf00      	nop
 800c4d2:	e002      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d4:	bf00      	nop
 800c4d6:	e000      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4e2:	4b39      	ldr	r3, [pc, #228]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4f2:	4a35      	ldr	r2, [pc, #212]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4f8:	e003      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c50e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c512:	2300      	movs	r3, #0
 800c514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c518:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c51c:	460b      	mov	r3, r1
 800c51e:	4313      	orrs	r3, r2
 800c520:	d058      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c52a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c52e:	d033      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c530:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c534:	d82c      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c53a:	d02f      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c53c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c540:	d826      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c546:	d02b      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c548:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c54c:	d820      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c54e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c552:	d012      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c558:	d81a      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d022      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c55e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c562:	d115      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c568:	3308      	adds	r3, #8
 800c56a:	2100      	movs	r1, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fb7d 	bl	800cc6c <RCCEx_PLL2_Config>
 800c572:	4603      	mov	r3, r0
 800c574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c578:	e015      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57e:	3328      	adds	r3, #40	@ 0x28
 800c580:	2102      	movs	r1, #2
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fc24 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c58e:	e00a      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c596:	e006      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c598:	bf00      	nop
 800c59a:	e004      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c59c:	bf00      	nop
 800c59e:	e002      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5a0:	bf00      	nop
 800c5a2:	e000      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10e      	bne.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c5ae:	4b06      	ldr	r3, [pc, #24]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5be:	4a02      	ldr	r2, [pc, #8]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5c0:	430b      	orrs	r3, r1
 800c5c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5c4:	e006      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c5c6:	bf00      	nop
 800c5c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c5e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	d055      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c5fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c600:	d033      	beq.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c602:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c606:	d82c      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c60c:	d02f      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c60e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c612:	d826      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c614:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c618:	d02b      	beq.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c61a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c61e:	d820      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c624:	d012      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c62a:	d81a      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d022      	beq.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c634:	d115      	bne.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63a:	3308      	adds	r3, #8
 800c63c:	2100      	movs	r1, #0
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fb14 	bl	800cc6c <RCCEx_PLL2_Config>
 800c644:	4603      	mov	r3, r0
 800c646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c64a:	e015      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c650:	3328      	adds	r3, #40	@ 0x28
 800c652:	2102      	movs	r1, #2
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fbbb 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c660:	e00a      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c668:	e006      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c66a:	bf00      	nop
 800c66c:	e004      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c66e:	bf00      	nop
 800c670:	e002      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c672:	bf00      	nop
 800c674:	e000      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c680:	4ba0      	ldr	r3, [pc, #640]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c684:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c68c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c690:	4a9c      	ldr	r2, [pc, #624]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c692:	430b      	orrs	r3, r1
 800c694:	6593      	str	r3, [r2, #88]	@ 0x58
 800c696:	e003      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c69c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f002 0308 	and.w	r3, r2, #8
 800c6ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c6b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	d01e      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6cc:	d10c      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d2:	3328      	adds	r3, #40	@ 0x28
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fb7a 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d002      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c6e8:	4b86      	ldr	r3, [pc, #536]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f8:	4a82      	ldr	r2, [pc, #520]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f002 0310 	and.w	r3, r2, #16
 800c70a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c70e:	2300      	movs	r3, #0
 800c710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c714:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c718:	460b      	mov	r3, r1
 800c71a:	4313      	orrs	r3, r2
 800c71c:	d01e      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c72a:	d10c      	bne.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c730:	3328      	adds	r3, #40	@ 0x28
 800c732:	2102      	movs	r1, #2
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fb4b 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c746:	4b6f      	ldr	r3, [pc, #444]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c74a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c756:	4a6b      	ldr	r2, [pc, #428]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c758:	430b      	orrs	r3, r1
 800c75a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c76a:	2300      	movs	r3, #0
 800c76c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c76e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d03e      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c784:	d022      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c78a:	d81b      	bhi.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c794:	d00b      	beq.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c796:	e015      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79c:	3308      	adds	r3, #8
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fa63 	bl	800cc6c <RCCEx_PLL2_Config>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7ac:	e00f      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b2:	3328      	adds	r3, #40	@ 0x28
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fb0a 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7c2:	e004      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ca:	e000      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10b      	bne.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7d6:	4b4b      	ldr	r3, [pc, #300]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7e6:	4a47      	ldr	r2, [pc, #284]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7ec:	e003      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c802:	673b      	str	r3, [r7, #112]	@ 0x70
 800c804:	2300      	movs	r3, #0
 800c806:	677b      	str	r3, [r7, #116]	@ 0x74
 800c808:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c80c:	460b      	mov	r3, r1
 800c80e:	4313      	orrs	r3, r2
 800c810:	d03b      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c81a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c81e:	d01f      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c824:	d818      	bhi.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c82a:	d003      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c82c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c830:	d007      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c832:	e011      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c834:	4b33      	ldr	r3, [pc, #204]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c838:	4a32      	ldr	r2, [pc, #200]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c83a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c83e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c840:	e00f      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c846:	3328      	adds	r3, #40	@ 0x28
 800c848:	2101      	movs	r1, #1
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 fac0 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c856:	e004      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c85e:	e000      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10b      	bne.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c86a:	4b26      	ldr	r3, [pc, #152]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c87a:	4a22      	ldr	r2, [pc, #136]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c880:	e003      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c896:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c898:	2300      	movs	r3, #0
 800c89a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c89c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	d034      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8b4:	d007      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c8b6:	e011      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8b8:	4b12      	ldr	r3, [pc, #72]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8bc:	4a11      	ldr	r2, [pc, #68]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8c4:	e00e      	b.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 f9cc 	bl	800cc6c <RCCEx_PLL2_Config>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8da:	e003      	b.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10d      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8fa:	4a02      	ldr	r2, [pc, #8]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c900:	e006      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c902:	bf00      	nop
 800c904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c90c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c91c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c91e:	2300      	movs	r3, #0
 800c920:	667b      	str	r3, [r7, #100]	@ 0x64
 800c922:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c926:	460b      	mov	r3, r1
 800c928:	4313      	orrs	r3, r2
 800c92a:	d00c      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c930:	3328      	adds	r3, #40	@ 0x28
 800c932:	2102      	movs	r1, #2
 800c934:	4618      	mov	r0, r3
 800c936:	f000 fa4b 	bl	800cdd0 <RCCEx_PLL3_Config>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c952:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c954:	2300      	movs	r3, #0
 800c956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c958:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c95c:	460b      	mov	r3, r1
 800c95e:	4313      	orrs	r3, r2
 800c960:	d036      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c96c:	d018      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c96e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c972:	d811      	bhi.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c978:	d014      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c97a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c97e:	d80b      	bhi.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d011      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c988:	d106      	bne.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c98a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98e:	4ab6      	ldr	r2, [pc, #728]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c996:	e008      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c99e:	e004      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a0:	bf00      	nop
 800c9a2:	e002      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a4:	bf00      	nop
 800c9a6:	e000      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c9b2:	4bad      	ldr	r3, [pc, #692]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9c0:	4aa9      	ldr	r2, [pc, #676]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c2:	430b      	orrs	r3, r1
 800c9c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9c6:	e003      	b.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c9dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9de:	2300      	movs	r3, #0
 800c9e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c9ec:	4b9e      	ldr	r3, [pc, #632]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9fa:	4a9b      	ldr	r2, [pc, #620]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ca00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca0e:	2300      	movs	r3, #0
 800ca10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ca16:	460b      	mov	r3, r1
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	d009      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ca1c:	4b92      	ldr	r3, [pc, #584]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca20:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca2a:	4a8f      	ldr	r2, [pc, #572]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ca3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca3e:	2300      	movs	r3, #0
 800ca40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ca46:	460b      	mov	r3, r1
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d00e      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca4c:	4b86      	ldr	r3, [pc, #536]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	4a85      	ldr	r2, [pc, #532]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca56:	6113      	str	r3, [r2, #16]
 800ca58:	4b83      	ldr	r3, [pc, #524]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca5a:	6919      	ldr	r1, [r3, #16]
 800ca5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ca64:	4a80      	ldr	r2, [pc, #512]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca66:	430b      	orrs	r3, r1
 800ca68:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ca6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ca76:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca78:	2300      	movs	r3, #0
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ca80:	460b      	mov	r3, r1
 800ca82:	4313      	orrs	r3, r2
 800ca84:	d009      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca86:	4b78      	ldr	r3, [pc, #480]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca94:	4a74      	ldr	r2, [pc, #464]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca96:	430b      	orrs	r3, r1
 800ca98:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ca9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800caa6:	633b      	str	r3, [r7, #48]	@ 0x30
 800caa8:	2300      	movs	r3, #0
 800caaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800caac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cab0:	460b      	mov	r3, r1
 800cab2:	4313      	orrs	r3, r2
 800cab4:	d00a      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cab6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cac6:	4a68      	ldr	r2, [pc, #416]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cac8:	430b      	orrs	r3, r1
 800caca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	2100      	movs	r1, #0
 800cad6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cade:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cae2:	460b      	mov	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d011      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caec:	3308      	adds	r3, #8
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 f8bb 	bl	800cc6c <RCCEx_PLL2_Config>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cafc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	2100      	movs	r1, #0
 800cb16:	6239      	str	r1, [r7, #32]
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb22:	460b      	mov	r3, r1
 800cb24:	4313      	orrs	r3, r2
 800cb26:	d011      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 f89b 	bl	800cc6c <RCCEx_PLL2_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	2100      	movs	r1, #0
 800cb56:	61b9      	str	r1, [r7, #24]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	61fb      	str	r3, [r7, #28]
 800cb5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb62:	460b      	mov	r3, r1
 800cb64:	4313      	orrs	r3, r2
 800cb66:	d011      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	2102      	movs	r1, #2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 f87b 	bl	800cc6c <RCCEx_PLL2_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d003      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	2100      	movs	r1, #0
 800cb96:	6139      	str	r1, [r7, #16]
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cba2:	460b      	mov	r3, r1
 800cba4:	4313      	orrs	r3, r2
 800cba6:	d011      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbac:	3328      	adds	r3, #40	@ 0x28
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f90d 	bl	800cdd0 <RCCEx_PLL3_Config>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cbbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	f003 0310 	and.w	r3, r3, #16
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	d011      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	3328      	adds	r3, #40	@ 0x28
 800cbee:	2101      	movs	r1, #1
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f8ed 	bl	800cdd0 <RCCEx_PLL3_Config>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cbfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	2100      	movs	r1, #0
 800cc16:	6039      	str	r1, [r7, #0]
 800cc18:	f003 0320 	and.w	r3, r3, #32
 800cc1c:	607b      	str	r3, [r7, #4]
 800cc1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc22:	460b      	mov	r3, r1
 800cc24:	4313      	orrs	r3, r2
 800cc26:	d011      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc2c:	3328      	adds	r3, #40	@ 0x28
 800cc2e:	2102      	movs	r1, #2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 f8cd 	bl	800cdd0 <RCCEx_PLL3_Config>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cc4c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e000      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cc60:	46bd      	mov	sp, r7
 800cc62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc66:	bf00      	nop
 800cc68:	58024400 	.word	0x58024400

0800cc6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc7a:	4b53      	ldr	r3, [pc, #332]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	2b03      	cmp	r3, #3
 800cc84:	d101      	bne.n	800cc8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	e099      	b.n	800cdbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc8a:	4b4f      	ldr	r3, [pc, #316]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a4e      	ldr	r2, [pc, #312]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cc90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc96:	f7f6 fddd 	bl	8003854 <HAL_GetTick>
 800cc9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc9c:	e008      	b.n	800ccb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc9e:	f7f6 fdd9 	bl	8003854 <HAL_GetTick>
 800cca2:	4602      	mov	r2, r0
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d901      	bls.n	800ccb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e086      	b.n	800cdbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccb0:	4b45      	ldr	r3, [pc, #276]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1f0      	bne.n	800cc9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccbc:	4b42      	ldr	r3, [pc, #264]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	031b      	lsls	r3, r3, #12
 800ccca:	493f      	ldr	r1, [pc, #252]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cccc:	4313      	orrs	r3, r2
 800ccce:	628b      	str	r3, [r1, #40]	@ 0x28
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	025b      	lsls	r3, r3, #9
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	431a      	orrs	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	041b      	lsls	r3, r3, #16
 800ccee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ccf2:	431a      	orrs	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	061b      	lsls	r3, r3, #24
 800ccfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cd00:	4931      	ldr	r1, [pc, #196]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd02:	4313      	orrs	r3, r2
 800cd04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd06:	4b30      	ldr	r3, [pc, #192]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	492d      	ldr	r1, [pc, #180]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd18:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1c:	f023 0220 	bic.w	r2, r3, #32
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	4928      	ldr	r1, [pc, #160]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd2a:	4b27      	ldr	r3, [pc, #156]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2e:	4a26      	ldr	r2, [pc, #152]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd30:	f023 0310 	bic.w	r3, r3, #16
 800cd34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd36:	4b24      	ldr	r3, [pc, #144]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd3a:	4b24      	ldr	r3, [pc, #144]	@ (800cdcc <RCCEx_PLL2_Config+0x160>)
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	69d2      	ldr	r2, [r2, #28]
 800cd42:	00d2      	lsls	r2, r2, #3
 800cd44:	4920      	ldr	r1, [pc, #128]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd46:	4313      	orrs	r3, r2
 800cd48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd4a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd4e:	4a1e      	ldr	r2, [pc, #120]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd50:	f043 0310 	orr.w	r3, r3, #16
 800cd54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d106      	bne.n	800cd6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd5c:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd60:	4a19      	ldr	r2, [pc, #100]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cd68:	e00f      	b.n	800cd8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d106      	bne.n	800cd7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd70:	4b15      	ldr	r3, [pc, #84]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd74:	4a14      	ldr	r2, [pc, #80]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cd7c:	e005      	b.n	800cd8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd7e:	4b12      	ldr	r3, [pc, #72]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd82:	4a11      	ldr	r2, [pc, #68]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cd88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd96:	f7f6 fd5d 	bl	8003854 <HAL_GetTick>
 800cd9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd9c:	e008      	b.n	800cdb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd9e:	f7f6 fd59 	bl	8003854 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e006      	b.n	800cdbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdb0:	4b05      	ldr	r3, [pc, #20]	@ (800cdc8 <RCCEx_PLL2_Config+0x15c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0f0      	beq.n	800cd9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	58024400 	.word	0x58024400
 800cdcc:	ffff0007 	.word	0xffff0007

0800cdd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdde:	4b53      	ldr	r3, [pc, #332]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde2:	f003 0303 	and.w	r3, r3, #3
 800cde6:	2b03      	cmp	r3, #3
 800cde8:	d101      	bne.n	800cdee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e099      	b.n	800cf22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdee:	4b4f      	ldr	r3, [pc, #316]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a4e      	ldr	r2, [pc, #312]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cdf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cdf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdfa:	f7f6 fd2b 	bl	8003854 <HAL_GetTick>
 800cdfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce00:	e008      	b.n	800ce14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce02:	f7f6 fd27 	bl	8003854 <HAL_GetTick>
 800ce06:	4602      	mov	r2, r0
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d901      	bls.n	800ce14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e086      	b.n	800cf22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce14:	4b45      	ldr	r3, [pc, #276]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1f0      	bne.n	800ce02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce20:	4b42      	ldr	r3, [pc, #264]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	051b      	lsls	r3, r3, #20
 800ce2e:	493f      	ldr	r1, [pc, #252]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce30:	4313      	orrs	r3, r2
 800ce32:	628b      	str	r3, [r1, #40]	@ 0x28
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	025b      	lsls	r3, r3, #9
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	431a      	orrs	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	041b      	lsls	r3, r3, #16
 800ce52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	061b      	lsls	r3, r3, #24
 800ce60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ce64:	4931      	ldr	r1, [pc, #196]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce66:	4313      	orrs	r3, r2
 800ce68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce6a:	4b30      	ldr	r3, [pc, #192]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	492d      	ldr	r1, [pc, #180]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce7c:	4b2b      	ldr	r3, [pc, #172]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	699b      	ldr	r3, [r3, #24]
 800ce88:	4928      	ldr	r1, [pc, #160]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce8e:	4b27      	ldr	r3, [pc, #156]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce92:	4a26      	ldr	r2, [pc, #152]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce9a:	4b24      	ldr	r3, [pc, #144]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ce9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce9e:	4b24      	ldr	r3, [pc, #144]	@ (800cf30 <RCCEx_PLL3_Config+0x160>)
 800cea0:	4013      	ands	r3, r2
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	69d2      	ldr	r2, [r2, #28]
 800cea6:	00d2      	lsls	r2, r2, #3
 800cea8:	4920      	ldr	r1, [pc, #128]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ceae:	4b1f      	ldr	r3, [pc, #124]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	4a1e      	ldr	r2, [pc, #120]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ceb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ceb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d106      	bne.n	800cece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cec0:	4b1a      	ldr	r3, [pc, #104]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec4:	4a19      	ldr	r2, [pc, #100]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ceca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cecc:	e00f      	b.n	800ceee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d106      	bne.n	800cee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ced4:	4b15      	ldr	r3, [pc, #84]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ced6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced8:	4a14      	ldr	r2, [pc, #80]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800ceda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cee0:	e005      	b.n	800ceee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cee2:	4b12      	ldr	r3, [pc, #72]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee6:	4a11      	ldr	r2, [pc, #68]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ceec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ceee:	4b0f      	ldr	r3, [pc, #60]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a0e      	ldr	r2, [pc, #56]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cefa:	f7f6 fcab 	bl	8003854 <HAL_GetTick>
 800cefe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf00:	e008      	b.n	800cf14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf02:	f7f6 fca7 	bl	8003854 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d901      	bls.n	800cf14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e006      	b.n	800cf22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf14:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <RCCEx_PLL3_Config+0x15c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0f0      	beq.n	800cf02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	58024400 	.word	0x58024400
 800cf30:	ffff0007 	.word	0xffff0007

0800cf34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e10f      	b.n	800d166 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a87      	ldr	r2, [pc, #540]	@ (800d170 <HAL_SPI_Init+0x23c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00f      	beq.n	800cf76 <HAL_SPI_Init+0x42>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a86      	ldr	r2, [pc, #536]	@ (800d174 <HAL_SPI_Init+0x240>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d00a      	beq.n	800cf76 <HAL_SPI_Init+0x42>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a84      	ldr	r2, [pc, #528]	@ (800d178 <HAL_SPI_Init+0x244>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d005      	beq.n	800cf76 <HAL_SPI_Init+0x42>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	2b0f      	cmp	r3, #15
 800cf70:	d901      	bls.n	800cf76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e0f7      	b.n	800d166 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fdc6 	bl	800db08 <SPI_GetPacketSize>
 800cf7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a7b      	ldr	r2, [pc, #492]	@ (800d170 <HAL_SPI_Init+0x23c>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d00c      	beq.n	800cfa2 <HAL_SPI_Init+0x6e>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a79      	ldr	r2, [pc, #484]	@ (800d174 <HAL_SPI_Init+0x240>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d007      	beq.n	800cfa2 <HAL_SPI_Init+0x6e>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a78      	ldr	r2, [pc, #480]	@ (800d178 <HAL_SPI_Init+0x244>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d002      	beq.n	800cfa2 <HAL_SPI_Init+0x6e>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b08      	cmp	r3, #8
 800cfa0:	d811      	bhi.n	800cfc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cfa6:	4a72      	ldr	r2, [pc, #456]	@ (800d170 <HAL_SPI_Init+0x23c>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d009      	beq.n	800cfc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a70      	ldr	r2, [pc, #448]	@ (800d174 <HAL_SPI_Init+0x240>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d004      	beq.n	800cfc0 <HAL_SPI_Init+0x8c>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a6f      	ldr	r2, [pc, #444]	@ (800d178 <HAL_SPI_Init+0x244>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d104      	bne.n	800cfca <HAL_SPI_Init+0x96>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b10      	cmp	r3, #16
 800cfc4:	d901      	bls.n	800cfca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e0cd      	b.n	800d166 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7f5 fa8c 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f022 0201 	bic.w	r2, r2, #1
 800cffa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d006:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d010:	d119      	bne.n	800d046 <HAL_SPI_Init+0x112>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d01a:	d103      	bne.n	800d024 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10c      	bne.n	800d046 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d034:	d107      	bne.n	800d046 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00f      	beq.n	800d072 <HAL_SPI_Init+0x13e>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	2b06      	cmp	r3, #6
 800d058:	d90b      	bls.n	800d072 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	e007      	b.n	800d082 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d080:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	69da      	ldr	r2, [r3, #28]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d08a:	431a      	orrs	r2, r3
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d094:	ea42 0103 	orr.w	r1, r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0e2:	ea42 0103 	orr.w	r1, r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d113      	bne.n	800d122 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d10c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d120:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f022 0201 	bic.w	r2, r2, #1
 800d130:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	430a      	orrs	r2, r1
 800d152:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	40013000 	.word	0x40013000
 800d174:	40003800 	.word	0x40003800
 800d178:	40003c00 	.word	0x40003c00

0800d17c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b01      	cmp	r3, #1
 800d194:	d001      	beq.n	800d19a <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800d196:	2302      	movs	r3, #2
 800d198:	e19c      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <HAL_SPI_TransmitReceive_DMA+0x30>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <HAL_SPI_TransmitReceive_DMA+0x30>
 800d1a6:	887b      	ldrh	r3, [r7, #2]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e191      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d101      	bne.n	800d1be <HAL_SPI_TransmitReceive_DMA+0x42>
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e18a      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2205      	movs	r2, #5
 800d1ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	887a      	ldrh	r2, [r7, #2]
 800d1e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	887a      	ldrh	r2, [r7, #2]
 800d1e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	887a      	ldrh	r2, [r7, #2]
 800d1f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	887a      	ldrh	r2, [r7, #2]
 800d1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68da      	ldr	r2, [r3, #12]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d21c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689a      	ldr	r2, [r3, #8]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d22c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	2b0f      	cmp	r3, #15
 800d234:	d90b      	bls.n	800d24e <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d23a:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800d23c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d240:	d121      	bne.n	800d286 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d246:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800d248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d24c:	d11b      	bne.n	800d286 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800d252:	2b07      	cmp	r3, #7
 800d254:	d91d      	bls.n	800d292 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d25a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800d25c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d260:	d005      	beq.n	800d26e <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d266:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d26c:	d10b      	bne.n	800d286 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d272:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800d274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d278:	d00b      	beq.n	800d292 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d27e:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d284:	d005      	beq.n	800d292 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e120      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	2b07      	cmp	r3, #7
 800d298:	d840      	bhi.n	800d31c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2a4:	d109      	bne.n	800d2ba <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	105b      	asrs	r3, r3, #1
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2c4:	d109      	bne.n	800d2da <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	3303      	adds	r3, #3
 800d2d0:	109b      	asrs	r3, r3, #2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2e4:	d109      	bne.n	800d2fa <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	105b      	asrs	r3, r3, #1
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d304:	d12e      	bne.n	800d364 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3303      	adds	r3, #3
 800d310:	109b      	asrs	r3, r3, #2
 800d312:	b29a      	uxth	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d31a:	e023      	b.n	800d364 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	2b0f      	cmp	r3, #15
 800d322:	d81f      	bhi.n	800d364 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d32e:	d109      	bne.n	800d344 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d336:	b29b      	uxth	r3, r3
 800d338:	3301      	adds	r3, #1
 800d33a:	105b      	asrs	r3, r3, #1
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d34e:	d109      	bne.n	800d364 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d356:	b29b      	uxth	r3, r3
 800d358:	3301      	adds	r3, #1
 800d35a:	105b      	asrs	r3, r3, #1
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d368:	4a5c      	ldr	r2, [pc, #368]	@ (800d4dc <HAL_SPI_TransmitReceive_DMA+0x360>)
 800d36a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d370:	4a5b      	ldr	r2, [pc, #364]	@ (800d4e0 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800d372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d378:	4a5a      	ldr	r2, [pc, #360]	@ (800d4e4 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800d37a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d380:	2200      	movs	r2, #0
 800d382:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3330      	adds	r3, #48	@ 0x30
 800d38e:	4619      	mov	r1, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d394:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d39c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d39e:	f7f7 f921 	bl	80045e4 <HAL_DMA_Start_IT>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d011      	beq.n	800d3cc <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ae:	f043 0210 	orr.w	r2, r3, #16
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e083      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689a      	ldr	r2, [r3, #8]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d3da:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3f8:	4a3a      	ldr	r2, [pc, #232]	@ (800d4e4 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800d3fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d404:	4619      	mov	r1, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3320      	adds	r3, #32
 800d40c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d414:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d416:	f7f7 f8e5 	bl	80045e4 <HAL_DMA_Start_IT>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d016      	beq.n	800d44e <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d424:	4618      	mov	r0, r3
 800d426:	f7f7 fb47 	bl	8004ab8 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d430:	f043 0210 	orr.w	r2, r3, #16
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2201      	movs	r2, #1
 800d43e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e042      	b.n	800d4d4 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d458:	d108      	bne.n	800d46c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6859      	ldr	r1, [r3, #4]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	4b20      	ldr	r3, [pc, #128]	@ (800d4e8 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800d466:	400b      	ands	r3, r1
 800d468:	6053      	str	r3, [r2, #4]
 800d46a:	e009      	b.n	800d480 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e8 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800d474:	4013      	ands	r3, r2
 800d476:	8879      	ldrh	r1, [r7, #2]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	430b      	orrs	r3, r1
 800d47e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d48e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	691a      	ldr	r2, [r3, #16]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800d49e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f042 0201 	orr.w	r2, r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d4b8:	d107      	bne.n	800d4ca <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4c8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	0800d933 	.word	0x0800d933
 800d4e0:	0800d8ed 	.word	0x0800d8ed
 800d4e4:	0800d94f 	.word	0x0800d94f
 800d4e8:	ffff0000 	.word	0xffff0000

0800d4ec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	@ 0x28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d504:	6a3a      	ldr	r2, [r7, #32]
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	4013      	ands	r3, r2
 800d50a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d514:	2300      	movs	r3, #0
 800d516:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d51e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3330      	adds	r3, #48	@ 0x30
 800d526:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d010      	beq.n	800d554 <HAL_SPI_IRQHandler+0x68>
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	f003 0308 	and.w	r3, r3, #8
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	699a      	ldr	r2, [r3, #24]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d54a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f9c3 	bl	800d8d8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800d552:	e192      	b.n	800d87a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d113      	bne.n	800d586 <HAL_SPI_IRQHandler+0x9a>
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	f003 0320 	and.w	r3, r3, #32
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10e      	bne.n	800d586 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	4798      	blx	r3
    handled = 1UL;
 800d582:	2301      	movs	r3, #1
 800d584:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10f      	bne.n	800d5b0 <HAL_SPI_IRQHandler+0xc4>
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00a      	beq.n	800d5b0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d105      	bne.n	800d5b0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	4798      	blx	r3
    handled = 1UL;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0320 	and.w	r3, r3, #32
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10f      	bne.n	800d5da <HAL_SPI_IRQHandler+0xee>
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00a      	beq.n	800d5da <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d105      	bne.n	800d5da <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	4798      	blx	r3
    handled = 1UL;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f040 8147 	bne.w	800d870 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 808b 	beq.w	800d704 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	699a      	ldr	r2, [r3, #24]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f042 0208 	orr.w	r2, r2, #8
 800d5fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	699a      	ldr	r2, [r3, #24]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f042 0210 	orr.w	r2, r2, #16
 800d60c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	699a      	ldr	r2, [r3, #24]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d61c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	691a      	ldr	r2, [r3, #16]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f022 0208 	bic.w	r2, r2, #8
 800d62c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d13d      	bne.n	800d6b8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800d63c:	e036      	b.n	800d6ac <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	2b0f      	cmp	r3, #15
 800d644:	d90b      	bls.n	800d65e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d64e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d650:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d656:	1d1a      	adds	r2, r3, #4
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	665a      	str	r2, [r3, #100]	@ 0x64
 800d65c:	e01d      	b.n	800d69a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	2b07      	cmp	r3, #7
 800d664:	d90b      	bls.n	800d67e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	8812      	ldrh	r2, [r2, #0]
 800d66e:	b292      	uxth	r2, r2
 800d670:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d676:	1c9a      	adds	r2, r3, #2
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	665a      	str	r2, [r3, #100]	@ 0x64
 800d67c:	e00d      	b.n	800d69a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d68a:	7812      	ldrb	r2, [r2, #0]
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1c2      	bne.n	800d63e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f985 	bl	800d9c8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f8f7 	bl	800d8c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d6d6:	e0d0      	b.n	800d87a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d6d8:	7cfb      	ldrb	r3, [r7, #19]
 800d6da:	2b05      	cmp	r3, #5
 800d6dc:	d103      	bne.n	800d6e6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7f4 f86a 	bl	80017b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d6e4:	e0c6      	b.n	800d874 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d6e6:	7cfb      	ldrb	r3, [r7, #19]
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d103      	bne.n	800d6f4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f8d5 	bl	800d89c <HAL_SPI_RxCpltCallback>
    return;
 800d6f2:	e0bf      	b.n	800d874 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d6f4:	7cfb      	ldrb	r3, [r7, #19]
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	f040 80bc 	bne.w	800d874 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f8c3 	bl	800d888 <HAL_SPI_TxCpltCallback>
    return;
 800d702:	e0b7      	b.n	800d874 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f000 80b5 	beq.w	800d87a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00f      	beq.n	800d73a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d720:	f043 0204 	orr.w	r2, r3, #4
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	699a      	ldr	r2, [r3, #24]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d738:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00f      	beq.n	800d764 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d74a:	f043 0201 	orr.w	r2, r3, #1
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	699a      	ldr	r2, [r3, #24]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d762:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00f      	beq.n	800d78e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d774:	f043 0208 	orr.w	r2, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	699a      	ldr	r2, [r3, #24]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d78c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	f003 0320 	and.w	r3, r3, #32
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00f      	beq.n	800d7b8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d79e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f042 0220 	orr.w	r2, r2, #32
 800d7b6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d05a      	beq.n	800d878 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f022 0201 	bic.w	r2, r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6919      	ldr	r1, [r3, #16]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	4b28      	ldr	r3, [pc, #160]	@ (800d880 <HAL_SPI_IRQHandler+0x394>)
 800d7de:	400b      	ands	r3, r1
 800d7e0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d7e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d7ec:	d138      	bne.n	800d860 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	689a      	ldr	r2, [r3, #8]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d7fc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d802:	2b00      	cmp	r3, #0
 800d804:	d013      	beq.n	800d82e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d80a:	4a1e      	ldr	r2, [pc, #120]	@ (800d884 <HAL_SPI_IRQHandler+0x398>)
 800d80c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d812:	4618      	mov	r0, r3
 800d814:	f7f7 fc6e 	bl	80050f4 <HAL_DMA_Abort_IT>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d007      	beq.n	800d82e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d824:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d832:	2b00      	cmp	r3, #0
 800d834:	d020      	beq.n	800d878 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d83a:	4a12      	ldr	r2, [pc, #72]	@ (800d884 <HAL_SPI_IRQHandler+0x398>)
 800d83c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d842:	4618      	mov	r0, r3
 800d844:	f7f7 fc56 	bl	80050f4 <HAL_DMA_Abort_IT>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d014      	beq.n	800d878 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d854:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d85e:	e00b      	b.n	800d878 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f82b 	bl	800d8c4 <HAL_SPI_ErrorCallback>
    return;
 800d86e:	e003      	b.n	800d878 <HAL_SPI_IRQHandler+0x38c>
    return;
 800d870:	bf00      	nop
 800d872:	e002      	b.n	800d87a <HAL_SPI_IRQHandler+0x38e>
    return;
 800d874:	bf00      	nop
 800d876:	e000      	b.n	800d87a <HAL_SPI_IRQHandler+0x38e>
    return;
 800d878:	bf00      	nop
  }
}
 800d87a:	3728      	adds	r7, #40	@ 0x28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	fffffc94 	.word	0xfffffc94
 800d884:	0800d995 	.word	0x0800d995

0800d888 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b07      	cmp	r3, #7
 800d904:	d011      	beq.n	800d92a <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d90a:	69db      	ldr	r3, [r3, #28]
 800d90c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d910:	d103      	bne.n	800d91a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f7f3 ff50 	bl	80017b8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d918:	e007      	b.n	800d92a <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	691a      	ldr	r2, [r3, #16]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f042 0208 	orr.w	r2, r2, #8
 800d928:	611a      	str	r2, [r3, #16]
}
 800d92a:	bf00      	nop
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d93e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7ff ffb5 	bl	800d8b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7f8 fd47 	bl	80063f0 <HAL_DMA_GetError>
 800d962:	4603      	mov	r3, r0
 800d964:	2b02      	cmp	r3, #2
 800d966:	d011      	beq.n	800d98c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f000 f82d 	bl	800d9c8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d974:	f043 0210 	orr.w	r2, r3, #16
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff ff9c 	bl	800d8c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800d98c:	bf00      	nop
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f7ff ff82 	bl	800d8c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9c0:	bf00      	nop
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f042 0208 	orr.w	r2, r2, #8
 800d9e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f042 0210 	orr.w	r2, r2, #16
 800d9f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f022 0201 	bic.w	r2, r2, #1
 800da06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6919      	ldr	r1, [r3, #16]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	4b3c      	ldr	r3, [pc, #240]	@ (800db04 <SPI_CloseTransfer+0x13c>)
 800da14:	400b      	ands	r3, r1
 800da16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800da26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b04      	cmp	r3, #4
 800da32:	d014      	beq.n	800da5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f003 0320 	and.w	r3, r3, #32
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00f      	beq.n	800da5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f042 0220 	orr.w	r2, r2, #32
 800da5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b03      	cmp	r3, #3
 800da68:	d014      	beq.n	800da94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00f      	beq.n	800da94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da7a:	f043 0204 	orr.w	r2, r3, #4
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	699a      	ldr	r2, [r3, #24]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00f      	beq.n	800dabe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800daa4:	f043 0201 	orr.w	r2, r3, #1
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	699a      	ldr	r2, [r3, #24]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dabc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00f      	beq.n	800dae8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dace:	f043 0208 	orr.w	r2, r3, #8
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	699a      	ldr	r2, [r3, #24]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dae6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800daf8:	bf00      	nop
 800dafa:	3714      	adds	r7, #20
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	fffffc90 	.word	0xfffffc90

0800db08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db14:	095b      	lsrs	r3, r3, #5
 800db16:	3301      	adds	r3, #1
 800db18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	3307      	adds	r3, #7
 800db26:	08db      	lsrs	r3, r3, #3
 800db28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
}
 800db32:	4618      	mov	r0, r3
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e049      	b.n	800dbe4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7f5 fb03 	bl	8003170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2202      	movs	r2, #2
 800db6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	3304      	adds	r3, #4
 800db7a:	4619      	mov	r1, r3
 800db7c:	4610      	mov	r0, r2
 800db7e:	f001 f907 	bl	800ed90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d001      	beq.n	800dc04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e056      	b.n	800dcb2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2202      	movs	r2, #2
 800dc08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a2b      	ldr	r2, [pc, #172]	@ (800dcc0 <HAL_TIM_Base_Start+0xd4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d02c      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc1e:	d027      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a27      	ldr	r2, [pc, #156]	@ (800dcc4 <HAL_TIM_Base_Start+0xd8>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d022      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a26      	ldr	r2, [pc, #152]	@ (800dcc8 <HAL_TIM_Base_Start+0xdc>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d01d      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a24      	ldr	r2, [pc, #144]	@ (800dccc <HAL_TIM_Base_Start+0xe0>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d018      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a23      	ldr	r2, [pc, #140]	@ (800dcd0 <HAL_TIM_Base_Start+0xe4>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d013      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a21      	ldr	r2, [pc, #132]	@ (800dcd4 <HAL_TIM_Base_Start+0xe8>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d00e      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a20      	ldr	r2, [pc, #128]	@ (800dcd8 <HAL_TIM_Base_Start+0xec>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d009      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a1e      	ldr	r2, [pc, #120]	@ (800dcdc <HAL_TIM_Base_Start+0xf0>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d004      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a1d      	ldr	r2, [pc, #116]	@ (800dce0 <HAL_TIM_Base_Start+0xf4>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d115      	bne.n	800dc9c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	689a      	ldr	r2, [r3, #8]
 800dc76:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <HAL_TIM_Base_Start+0xf8>)
 800dc78:	4013      	ands	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b06      	cmp	r3, #6
 800dc80:	d015      	beq.n	800dcae <HAL_TIM_Base_Start+0xc2>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc88:	d011      	beq.n	800dcae <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f042 0201 	orr.w	r2, r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc9a:	e008      	b.n	800dcae <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f042 0201 	orr.w	r2, r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	e000      	b.n	800dcb0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	40010000 	.word	0x40010000
 800dcc4:	40000400 	.word	0x40000400
 800dcc8:	40000800 	.word	0x40000800
 800dccc:	40000c00 	.word	0x40000c00
 800dcd0:	40010400 	.word	0x40010400
 800dcd4:	40001800 	.word	0x40001800
 800dcd8:	40014000 	.word	0x40014000
 800dcdc:	4000e000 	.word	0x4000e000
 800dce0:	4000e400 	.word	0x4000e400
 800dce4:	00010007 	.word	0x00010007

0800dce8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6a1a      	ldr	r2, [r3, #32]
 800dcf6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10f      	bne.n	800dd20 <HAL_TIM_Base_Stop+0x38>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6a1a      	ldr	r2, [r3, #32]
 800dd06:	f240 4344 	movw	r3, #1092	@ 0x444
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d107      	bne.n	800dd20 <HAL_TIM_Base_Stop+0x38>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0201 	bic.w	r2, r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
	...

0800dd38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d001      	beq.n	800dd50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e05e      	b.n	800de0e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2202      	movs	r2, #2
 800dd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68da      	ldr	r2, [r3, #12]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f042 0201 	orr.w	r2, r2, #1
 800dd66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a2b      	ldr	r2, [pc, #172]	@ (800de1c <HAL_TIM_Base_Start_IT+0xe4>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d02c      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd7a:	d027      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a27      	ldr	r2, [pc, #156]	@ (800de20 <HAL_TIM_Base_Start_IT+0xe8>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d022      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a26      	ldr	r2, [pc, #152]	@ (800de24 <HAL_TIM_Base_Start_IT+0xec>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d01d      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a24      	ldr	r2, [pc, #144]	@ (800de28 <HAL_TIM_Base_Start_IT+0xf0>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d018      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a23      	ldr	r2, [pc, #140]	@ (800de2c <HAL_TIM_Base_Start_IT+0xf4>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d013      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a21      	ldr	r2, [pc, #132]	@ (800de30 <HAL_TIM_Base_Start_IT+0xf8>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d00e      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a20      	ldr	r2, [pc, #128]	@ (800de34 <HAL_TIM_Base_Start_IT+0xfc>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d009      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a1e      	ldr	r2, [pc, #120]	@ (800de38 <HAL_TIM_Base_Start_IT+0x100>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d004      	beq.n	800ddcc <HAL_TIM_Base_Start_IT+0x94>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a1d      	ldr	r2, [pc, #116]	@ (800de3c <HAL_TIM_Base_Start_IT+0x104>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d115      	bne.n	800ddf8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	689a      	ldr	r2, [r3, #8]
 800ddd2:	4b1b      	ldr	r3, [pc, #108]	@ (800de40 <HAL_TIM_Base_Start_IT+0x108>)
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b06      	cmp	r3, #6
 800dddc:	d015      	beq.n	800de0a <HAL_TIM_Base_Start_IT+0xd2>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dde4:	d011      	beq.n	800de0a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f042 0201 	orr.w	r2, r2, #1
 800ddf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddf6:	e008      	b.n	800de0a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f042 0201 	orr.w	r2, r2, #1
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	e000      	b.n	800de0c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	40010000 	.word	0x40010000
 800de20:	40000400 	.word	0x40000400
 800de24:	40000800 	.word	0x40000800
 800de28:	40000c00 	.word	0x40000c00
 800de2c:	40010400 	.word	0x40010400
 800de30:	40001800 	.word	0x40001800
 800de34:	40014000 	.word	0x40014000
 800de38:	4000e000 	.word	0x4000e000
 800de3c:	4000e400 	.word	0x4000e400
 800de40:	00010007 	.word	0x00010007

0800de44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e049      	b.n	800deea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f841 	bl	800def2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f000 ff84 	bl	800ed90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
	...

0800df08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b086      	sub	sp, #24
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d109      	bne.n	800df34 <HAL_TIM_PWM_Start_DMA+0x2c>
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b02      	cmp	r3, #2
 800df2a:	bf0c      	ite	eq
 800df2c:	2301      	moveq	r3, #1
 800df2e:	2300      	movne	r3, #0
 800df30:	b2db      	uxtb	r3, r3
 800df32:	e03c      	b.n	800dfae <HAL_TIM_PWM_Start_DMA+0xa6>
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b04      	cmp	r3, #4
 800df38:	d109      	bne.n	800df4e <HAL_TIM_PWM_Start_DMA+0x46>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800df40:	b2db      	uxtb	r3, r3
 800df42:	2b02      	cmp	r3, #2
 800df44:	bf0c      	ite	eq
 800df46:	2301      	moveq	r3, #1
 800df48:	2300      	movne	r3, #0
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	e02f      	b.n	800dfae <HAL_TIM_PWM_Start_DMA+0xa6>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	2b08      	cmp	r3, #8
 800df52:	d109      	bne.n	800df68 <HAL_TIM_PWM_Start_DMA+0x60>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	bf0c      	ite	eq
 800df60:	2301      	moveq	r3, #1
 800df62:	2300      	movne	r3, #0
 800df64:	b2db      	uxtb	r3, r3
 800df66:	e022      	b.n	800dfae <HAL_TIM_PWM_Start_DMA+0xa6>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b0c      	cmp	r3, #12
 800df6c:	d109      	bne.n	800df82 <HAL_TIM_PWM_Start_DMA+0x7a>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b02      	cmp	r3, #2
 800df78:	bf0c      	ite	eq
 800df7a:	2301      	moveq	r3, #1
 800df7c:	2300      	movne	r3, #0
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	e015      	b.n	800dfae <HAL_TIM_PWM_Start_DMA+0xa6>
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b10      	cmp	r3, #16
 800df86:	d109      	bne.n	800df9c <HAL_TIM_PWM_Start_DMA+0x94>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b02      	cmp	r3, #2
 800df92:	bf0c      	ite	eq
 800df94:	2301      	moveq	r3, #1
 800df96:	2300      	movne	r3, #0
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	e008      	b.n	800dfae <HAL_TIM_PWM_Start_DMA+0xa6>
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b02      	cmp	r3, #2
 800dfa6:	bf0c      	ite	eq
 800dfa8:	2301      	moveq	r3, #1
 800dfaa:	2300      	movne	r3, #0
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	e1ba      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	bf0c      	ite	eq
 800dfc8:	2301      	moveq	r3, #1
 800dfca:	2300      	movne	r3, #0
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	e03c      	b.n	800e04a <HAL_TIM_PWM_Start_DMA+0x142>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b04      	cmp	r3, #4
 800dfd4:	d109      	bne.n	800dfea <HAL_TIM_PWM_Start_DMA+0xe2>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	bf0c      	ite	eq
 800dfe2:	2301      	moveq	r3, #1
 800dfe4:	2300      	movne	r3, #0
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	e02f      	b.n	800e04a <HAL_TIM_PWM_Start_DMA+0x142>
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b08      	cmp	r3, #8
 800dfee:	d109      	bne.n	800e004 <HAL_TIM_PWM_Start_DMA+0xfc>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	bf0c      	ite	eq
 800dffc:	2301      	moveq	r3, #1
 800dffe:	2300      	movne	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	e022      	b.n	800e04a <HAL_TIM_PWM_Start_DMA+0x142>
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2b0c      	cmp	r3, #12
 800e008:	d109      	bne.n	800e01e <HAL_TIM_PWM_Start_DMA+0x116>
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b01      	cmp	r3, #1
 800e014:	bf0c      	ite	eq
 800e016:	2301      	moveq	r3, #1
 800e018:	2300      	movne	r3, #0
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	e015      	b.n	800e04a <HAL_TIM_PWM_Start_DMA+0x142>
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	2b10      	cmp	r3, #16
 800e022:	d109      	bne.n	800e038 <HAL_TIM_PWM_Start_DMA+0x130>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	bf0c      	ite	eq
 800e030:	2301      	moveq	r3, #1
 800e032:	2300      	movne	r3, #0
 800e034:	b2db      	uxtb	r3, r3
 800e036:	e008      	b.n	800e04a <HAL_TIM_PWM_Start_DMA+0x142>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b01      	cmp	r3, #1
 800e042:	bf0c      	ite	eq
 800e044:	2301      	moveq	r3, #1
 800e046:	2300      	movne	r3, #0
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d034      	beq.n	800e0b8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <HAL_TIM_PWM_Start_DMA+0x152>
 800e054:	887b      	ldrh	r3, [r7, #2]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e166      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <HAL_TIM_PWM_Start_DMA+0x166>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2202      	movs	r2, #2
 800e068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e06c:	e026      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b04      	cmp	r3, #4
 800e072:	d104      	bne.n	800e07e <HAL_TIM_PWM_Start_DMA+0x176>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2202      	movs	r2, #2
 800e078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e07c:	e01e      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	2b08      	cmp	r3, #8
 800e082:	d104      	bne.n	800e08e <HAL_TIM_PWM_Start_DMA+0x186>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2202      	movs	r2, #2
 800e088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e08c:	e016      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2b0c      	cmp	r3, #12
 800e092:	d104      	bne.n	800e09e <HAL_TIM_PWM_Start_DMA+0x196>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2202      	movs	r2, #2
 800e098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e09c:	e00e      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b10      	cmp	r3, #16
 800e0a2:	d104      	bne.n	800e0ae <HAL_TIM_PWM_Start_DMA+0x1a6>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0ac:	e006      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2202      	movs	r2, #2
 800e0b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e0b6:	e001      	b.n	800e0bc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e137      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2b0c      	cmp	r3, #12
 800e0c0:	f200 80ae 	bhi.w	800e220 <HAL_TIM_PWM_Start_DMA+0x318>
 800e0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e0cc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800e0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ca:	bf00      	nop
 800e0cc:	0800e101 	.word	0x0800e101
 800e0d0:	0800e221 	.word	0x0800e221
 800e0d4:	0800e221 	.word	0x0800e221
 800e0d8:	0800e221 	.word	0x0800e221
 800e0dc:	0800e149 	.word	0x0800e149
 800e0e0:	0800e221 	.word	0x0800e221
 800e0e4:	0800e221 	.word	0x0800e221
 800e0e8:	0800e221 	.word	0x0800e221
 800e0ec:	0800e191 	.word	0x0800e191
 800e0f0:	0800e221 	.word	0x0800e221
 800e0f4:	0800e221 	.word	0x0800e221
 800e0f8:	0800e221 	.word	0x0800e221
 800e0fc:	0800e1d9 	.word	0x0800e1d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e104:	4a8b      	ldr	r2, [pc, #556]	@ (800e334 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e106:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10c:	4a8a      	ldr	r2, [pc, #552]	@ (800e338 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e10e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e114:	4a89      	ldr	r2, [pc, #548]	@ (800e33c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e116:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3334      	adds	r3, #52	@ 0x34
 800e124:	461a      	mov	r2, r3
 800e126:	887b      	ldrh	r3, [r7, #2]
 800e128:	f7f6 fa5c 	bl	80045e4 <HAL_DMA_Start_IT>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e0fa      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68da      	ldr	r2, [r3, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e144:	60da      	str	r2, [r3, #12]
      break;
 800e146:	e06e      	b.n	800e226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14c:	4a79      	ldr	r2, [pc, #484]	@ (800e334 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e14e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	4a78      	ldr	r2, [pc, #480]	@ (800e338 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	4a77      	ldr	r2, [pc, #476]	@ (800e33c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e15e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800e164:	6879      	ldr	r1, [r7, #4]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3338      	adds	r3, #56	@ 0x38
 800e16c:	461a      	mov	r2, r3
 800e16e:	887b      	ldrh	r3, [r7, #2]
 800e170:	f7f6 fa38 	bl	80045e4 <HAL_DMA_Start_IT>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e0d6      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68da      	ldr	r2, [r3, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e18c:	60da      	str	r2, [r3, #12]
      break;
 800e18e:	e04a      	b.n	800e226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e194:	4a67      	ldr	r2, [pc, #412]	@ (800e334 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e196:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19c:	4a66      	ldr	r2, [pc, #408]	@ (800e338 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e19e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a4:	4a65      	ldr	r2, [pc, #404]	@ (800e33c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e1a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	333c      	adds	r3, #60	@ 0x3c
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	887b      	ldrh	r3, [r7, #2]
 800e1b8:	f7f6 fa14 	bl	80045e4 <HAL_DMA_Start_IT>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e0b2      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	68da      	ldr	r2, [r3, #12]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1d4:	60da      	str	r2, [r3, #12]
      break;
 800e1d6:	e026      	b.n	800e226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1dc:	4a55      	ldr	r2, [pc, #340]	@ (800e334 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e1de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e4:	4a54      	ldr	r2, [pc, #336]	@ (800e338 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e1e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ec:	4a53      	ldr	r2, [pc, #332]	@ (800e33c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e1ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3340      	adds	r3, #64	@ 0x40
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	887b      	ldrh	r3, [r7, #2]
 800e200:	f7f6 f9f0 	bl	80045e4 <HAL_DMA_Start_IT>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	e08e      	b.n	800e32c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68da      	ldr	r2, [r3, #12]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e21c:	60da      	str	r2, [r3, #12]
      break;
 800e21e:	e002      	b.n	800e226 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	75fb      	strb	r3, [r7, #23]
      break;
 800e224:	bf00      	nop
  }

  if (status == HAL_OK)
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d17e      	bne.n	800e32a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2201      	movs	r2, #1
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	4618      	mov	r0, r3
 800e236:	f001 f9cb 	bl	800f5d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a40      	ldr	r2, [pc, #256]	@ (800e340 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d013      	beq.n	800e26c <HAL_TIM_PWM_Start_DMA+0x364>
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a3e      	ldr	r2, [pc, #248]	@ (800e344 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d00e      	beq.n	800e26c <HAL_TIM_PWM_Start_DMA+0x364>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a3d      	ldr	r2, [pc, #244]	@ (800e348 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d009      	beq.n	800e26c <HAL_TIM_PWM_Start_DMA+0x364>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a3b      	ldr	r2, [pc, #236]	@ (800e34c <HAL_TIM_PWM_Start_DMA+0x444>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d004      	beq.n	800e26c <HAL_TIM_PWM_Start_DMA+0x364>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a3a      	ldr	r2, [pc, #232]	@ (800e350 <HAL_TIM_PWM_Start_DMA+0x448>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d101      	bne.n	800e270 <HAL_TIM_PWM_Start_DMA+0x368>
 800e26c:	2301      	movs	r3, #1
 800e26e:	e000      	b.n	800e272 <HAL_TIM_PWM_Start_DMA+0x36a>
 800e270:	2300      	movs	r3, #0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d007      	beq.n	800e286 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a2d      	ldr	r2, [pc, #180]	@ (800e340 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d02c      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e298:	d027      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a2d      	ldr	r2, [pc, #180]	@ (800e354 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d022      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800e358 <HAL_TIM_PWM_Start_DMA+0x450>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d01d      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800e35c <HAL_TIM_PWM_Start_DMA+0x454>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d018      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a21      	ldr	r2, [pc, #132]	@ (800e344 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d013      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a26      	ldr	r2, [pc, #152]	@ (800e360 <HAL_TIM_PWM_Start_DMA+0x458>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d00e      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e348 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d009      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a22      	ldr	r2, [pc, #136]	@ (800e364 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d004      	beq.n	800e2ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a20      	ldr	r2, [pc, #128]	@ (800e368 <HAL_TIM_PWM_Start_DMA+0x460>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d115      	bne.n	800e316 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	689a      	ldr	r2, [r3, #8]
 800e2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e36c <HAL_TIM_PWM_Start_DMA+0x464>)
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	2b06      	cmp	r3, #6
 800e2fa:	d015      	beq.n	800e328 <HAL_TIM_PWM_Start_DMA+0x420>
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e302:	d011      	beq.n	800e328 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0201 	orr.w	r2, r2, #1
 800e312:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e314:	e008      	b.n	800e328 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f042 0201 	orr.w	r2, r2, #1
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e000      	b.n	800e32a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e328:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0800ec7f 	.word	0x0800ec7f
 800e338:	0800ed27 	.word	0x0800ed27
 800e33c:	0800ebed 	.word	0x0800ebed
 800e340:	40010000 	.word	0x40010000
 800e344:	40010400 	.word	0x40010400
 800e348:	40014000 	.word	0x40014000
 800e34c:	40014400 	.word	0x40014400
 800e350:	40014800 	.word	0x40014800
 800e354:	40000400 	.word	0x40000400
 800e358:	40000800 	.word	0x40000800
 800e35c:	40000c00 	.word	0x40000c00
 800e360:	40001800 	.word	0x40001800
 800e364:	4000e000 	.word	0x4000e000
 800e368:	4000e400 	.word	0x4000e400
 800e36c:	00010007 	.word	0x00010007

0800e370 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	2b0c      	cmp	r3, #12
 800e382:	d855      	bhi.n	800e430 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800e384:	a201      	add	r2, pc, #4	@ (adr r2, 800e38c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800e386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e38a:	bf00      	nop
 800e38c:	0800e3c1 	.word	0x0800e3c1
 800e390:	0800e431 	.word	0x0800e431
 800e394:	0800e431 	.word	0x0800e431
 800e398:	0800e431 	.word	0x0800e431
 800e39c:	0800e3dd 	.word	0x0800e3dd
 800e3a0:	0800e431 	.word	0x0800e431
 800e3a4:	0800e431 	.word	0x0800e431
 800e3a8:	0800e431 	.word	0x0800e431
 800e3ac:	0800e3f9 	.word	0x0800e3f9
 800e3b0:	0800e431 	.word	0x0800e431
 800e3b4:	0800e431 	.word	0x0800e431
 800e3b8:	0800e431 	.word	0x0800e431
 800e3bc:	0800e415 	.word	0x0800e415
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68da      	ldr	r2, [r3, #12]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e3ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7f6 fe8d 	bl	80050f4 <HAL_DMA_Abort_IT>
      break;
 800e3da:	e02c      	b.n	800e436 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68da      	ldr	r2, [r3, #12]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f6 fe7f 	bl	80050f4 <HAL_DMA_Abort_IT>
      break;
 800e3f6:	e01e      	b.n	800e436 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e406:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7f6 fe71 	bl	80050f4 <HAL_DMA_Abort_IT>
      break;
 800e412:	e010      	b.n	800e436 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68da      	ldr	r2, [r3, #12]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e422:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e428:	4618      	mov	r0, r3
 800e42a:	f7f6 fe63 	bl	80050f4 <HAL_DMA_Abort_IT>
      break;
 800e42e:	e002      	b.n	800e436 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	73fb      	strb	r3, [r7, #15]
      break;
 800e434:	bf00      	nop
  }

  if (status == HAL_OK)
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f040 8081 	bne.w	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2200      	movs	r2, #0
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	4618      	mov	r0, r3
 800e448:	f001 f8c2 	bl	800f5d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a3e      	ldr	r2, [pc, #248]	@ (800e54c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d013      	beq.n	800e47e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a3d      	ldr	r2, [pc, #244]	@ (800e550 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d00e      	beq.n	800e47e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a3b      	ldr	r2, [pc, #236]	@ (800e554 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d009      	beq.n	800e47e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a3a      	ldr	r2, [pc, #232]	@ (800e558 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d004      	beq.n	800e47e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a38      	ldr	r2, [pc, #224]	@ (800e55c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d101      	bne.n	800e482 <HAL_TIM_PWM_Stop_DMA+0x112>
 800e47e:	2301      	movs	r3, #1
 800e480:	e000      	b.n	800e484 <HAL_TIM_PWM_Stop_DMA+0x114>
 800e482:	2300      	movs	r3, #0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d017      	beq.n	800e4b8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6a1a      	ldr	r2, [r3, #32]
 800e48e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e492:	4013      	ands	r3, r2
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10f      	bne.n	800e4b8 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6a1a      	ldr	r2, [r3, #32]
 800e49e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d107      	bne.n	800e4b8 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e4b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6a1a      	ldr	r2, [r3, #32]
 800e4be:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10f      	bne.n	800e4e8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6a1a      	ldr	r2, [r3, #32]
 800e4ce:	f240 4344 	movw	r3, #1092	@ 0x444
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d107      	bne.n	800e4e8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f022 0201 	bic.w	r2, r2, #1
 800e4e6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d104      	bne.n	800e4f8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4f6:	e023      	b.n	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d104      	bne.n	800e508 <HAL_TIM_PWM_Stop_DMA+0x198>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e506:	e01b      	b.n	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2b08      	cmp	r3, #8
 800e50c:	d104      	bne.n	800e518 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2201      	movs	r2, #1
 800e512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e516:	e013      	b.n	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b0c      	cmp	r3, #12
 800e51c:	d104      	bne.n	800e528 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e526:	e00b      	b.n	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	2b10      	cmp	r3, #16
 800e52c:	d104      	bne.n	800e538 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e536:	e003      	b.n	800e540 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800e540:	7bfb      	ldrb	r3, [r7, #15]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	40010000 	.word	0x40010000
 800e550:	40010400 	.word	0x40010400
 800e554:	40014000 	.word	0x40014000
 800e558:	40014400 	.word	0x40014400
 800e55c:	40014800 	.word	0x40014800

0800e560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	f003 0302 	and.w	r3, r3, #2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d020      	beq.n	800e5c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f003 0302 	and.w	r3, r3, #2
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d01b      	beq.n	800e5c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f06f 0202 	mvn.w	r2, #2
 800e594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	f003 0303 	and.w	r3, r3, #3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 faf6 	bl	800eb9c <HAL_TIM_IC_CaptureCallback>
 800e5b0:	e005      	b.n	800e5be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fae8 	bl	800eb88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7f4 fa2b 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f003 0304 	and.w	r3, r3, #4
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d020      	beq.n	800e610 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f003 0304 	and.w	r3, r3, #4
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d01b      	beq.n	800e610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f06f 0204 	mvn.w	r2, #4
 800e5e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2202      	movs	r2, #2
 800e5e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	699b      	ldr	r3, [r3, #24]
 800e5ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fad0 	bl	800eb9c <HAL_TIM_IC_CaptureCallback>
 800e5fc:	e005      	b.n	800e60a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 fac2 	bl	800eb88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7f4 fa05 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	f003 0308 	and.w	r3, r3, #8
 800e616:	2b00      	cmp	r3, #0
 800e618:	d020      	beq.n	800e65c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b00      	cmp	r3, #0
 800e622:	d01b      	beq.n	800e65c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f06f 0208 	mvn.w	r2, #8
 800e62c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2204      	movs	r2, #4
 800e632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	f003 0303 	and.w	r3, r3, #3
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 faaa 	bl	800eb9c <HAL_TIM_IC_CaptureCallback>
 800e648:	e005      	b.n	800e656 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa9c 	bl	800eb88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7f4 f9df 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	f003 0310 	and.w	r3, r3, #16
 800e662:	2b00      	cmp	r3, #0
 800e664:	d020      	beq.n	800e6a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f003 0310 	and.w	r3, r3, #16
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d01b      	beq.n	800e6a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f06f 0210 	mvn.w	r2, #16
 800e678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2208      	movs	r2, #8
 800e67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d003      	beq.n	800e696 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fa84 	bl	800eb9c <HAL_TIM_IC_CaptureCallback>
 800e694:	e005      	b.n	800e6a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fa76 	bl	800eb88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7f4 f9b9 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00c      	beq.n	800e6cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f06f 0201 	mvn.w	r2, #1
 800e6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7f3 fcde 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d104      	bne.n	800e6e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00c      	beq.n	800e6fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d007      	beq.n	800e6fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 f837 	bl	800f768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00c      	beq.n	800e71e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d007      	beq.n	800e71e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f001 f82f 	bl	800f77c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00c      	beq.n	800e742 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d007      	beq.n	800e742 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fa41 	bl	800ebc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	f003 0320 	and.w	r3, r3, #32
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00c      	beq.n	800e766 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f003 0320 	and.w	r3, r3, #32
 800e752:	2b00      	cmp	r3, #0
 800e754:	d007      	beq.n	800e766 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f06f 0220 	mvn.w	r2, #32
 800e75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fff7 	bl	800f754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e766:	bf00      	nop
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e786:	2b01      	cmp	r3, #1
 800e788:	d101      	bne.n	800e78e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e78a:	2302      	movs	r3, #2
 800e78c:	e0ff      	b.n	800e98e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b14      	cmp	r3, #20
 800e79a:	f200 80f0 	bhi.w	800e97e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e79e:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7f9 	.word	0x0800e7f9
 800e7a8:	0800e97f 	.word	0x0800e97f
 800e7ac:	0800e97f 	.word	0x0800e97f
 800e7b0:	0800e97f 	.word	0x0800e97f
 800e7b4:	0800e839 	.word	0x0800e839
 800e7b8:	0800e97f 	.word	0x0800e97f
 800e7bc:	0800e97f 	.word	0x0800e97f
 800e7c0:	0800e97f 	.word	0x0800e97f
 800e7c4:	0800e87b 	.word	0x0800e87b
 800e7c8:	0800e97f 	.word	0x0800e97f
 800e7cc:	0800e97f 	.word	0x0800e97f
 800e7d0:	0800e97f 	.word	0x0800e97f
 800e7d4:	0800e8bb 	.word	0x0800e8bb
 800e7d8:	0800e97f 	.word	0x0800e97f
 800e7dc:	0800e97f 	.word	0x0800e97f
 800e7e0:	0800e97f 	.word	0x0800e97f
 800e7e4:	0800e8fd 	.word	0x0800e8fd
 800e7e8:	0800e97f 	.word	0x0800e97f
 800e7ec:	0800e97f 	.word	0x0800e97f
 800e7f0:	0800e97f 	.word	0x0800e97f
 800e7f4:	0800e93d 	.word	0x0800e93d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68b9      	ldr	r1, [r7, #8]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fb72 	bl	800eee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	699a      	ldr	r2, [r3, #24]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f042 0208 	orr.w	r2, r2, #8
 800e812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699a      	ldr	r2, [r3, #24]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f022 0204 	bic.w	r2, r2, #4
 800e822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6999      	ldr	r1, [r3, #24]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	691a      	ldr	r2, [r3, #16]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	430a      	orrs	r2, r1
 800e834:	619a      	str	r2, [r3, #24]
      break;
 800e836:	e0a5      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fbe2 	bl	800f008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	699a      	ldr	r2, [r3, #24]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6999      	ldr	r1, [r3, #24]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	021a      	lsls	r2, r3, #8
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	430a      	orrs	r2, r1
 800e876:	619a      	str	r2, [r3, #24]
      break;
 800e878:	e084      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	4618      	mov	r0, r3
 800e882:	f000 fc4b 	bl	800f11c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	69da      	ldr	r2, [r3, #28]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f042 0208 	orr.w	r2, r2, #8
 800e894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	69da      	ldr	r2, [r3, #28]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f022 0204 	bic.w	r2, r2, #4
 800e8a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69d9      	ldr	r1, [r3, #28]
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	691a      	ldr	r2, [r3, #16]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	61da      	str	r2, [r3, #28]
      break;
 800e8b8:	e064      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 fcb3 	bl	800f22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	69da      	ldr	r2, [r3, #28]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	69da      	ldr	r2, [r3, #28]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69d9      	ldr	r1, [r3, #28]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	021a      	lsls	r2, r3, #8
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	430a      	orrs	r2, r1
 800e8f8:	61da      	str	r2, [r3, #28]
      break;
 800e8fa:	e043      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68b9      	ldr	r1, [r7, #8]
 800e902:	4618      	mov	r0, r3
 800e904:	f000 fcfc 	bl	800f300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f042 0208 	orr.w	r2, r2, #8
 800e916:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f022 0204 	bic.w	r2, r2, #4
 800e926:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	691a      	ldr	r2, [r3, #16]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	430a      	orrs	r2, r1
 800e938:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e93a:	e023      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 fd40 	bl	800f3c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e956:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e966:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	021a      	lsls	r2, r3, #8
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	430a      	orrs	r2, r1
 800e97a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e97c:	e002      	b.n	800e984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	75fb      	strb	r3, [r7, #23]
      break;
 800e982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop

0800e998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d101      	bne.n	800e9b4 <HAL_TIM_ConfigClockSource+0x1c>
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	e0dc      	b.n	800eb6e <HAL_TIM_ConfigClockSource+0x1d6>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	4b6a      	ldr	r3, [pc, #424]	@ (800eb78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a64      	ldr	r2, [pc, #400]	@ (800eb7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	f000 80a9 	beq.w	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9f0:	4a62      	ldr	r2, [pc, #392]	@ (800eb7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	f200 80ae 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9f8:	4a61      	ldr	r2, [pc, #388]	@ (800eb80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	f000 80a1 	beq.w	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea00:	4a5f      	ldr	r2, [pc, #380]	@ (800eb80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	f200 80a6 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea08:	4a5e      	ldr	r2, [pc, #376]	@ (800eb84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	f000 8099 	beq.w	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea10:	4a5c      	ldr	r2, [pc, #368]	@ (800eb84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	f200 809e 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea1c:	f000 8091 	beq.w	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea24:	f200 8096 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea2c:	f000 8089 	beq.w	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea34:	f200 808e 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea3c:	d03e      	beq.n	800eabc <HAL_TIM_ConfigClockSource+0x124>
 800ea3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea42:	f200 8087 	bhi.w	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea4a:	f000 8086 	beq.w	800eb5a <HAL_TIM_ConfigClockSource+0x1c2>
 800ea4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea52:	d87f      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea54:	2b70      	cmp	r3, #112	@ 0x70
 800ea56:	d01a      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0xf6>
 800ea58:	2b70      	cmp	r3, #112	@ 0x70
 800ea5a:	d87b      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea5c:	2b60      	cmp	r3, #96	@ 0x60
 800ea5e:	d050      	beq.n	800eb02 <HAL_TIM_ConfigClockSource+0x16a>
 800ea60:	2b60      	cmp	r3, #96	@ 0x60
 800ea62:	d877      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea64:	2b50      	cmp	r3, #80	@ 0x50
 800ea66:	d03c      	beq.n	800eae2 <HAL_TIM_ConfigClockSource+0x14a>
 800ea68:	2b50      	cmp	r3, #80	@ 0x50
 800ea6a:	d873      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea6c:	2b40      	cmp	r3, #64	@ 0x40
 800ea6e:	d058      	beq.n	800eb22 <HAL_TIM_ConfigClockSource+0x18a>
 800ea70:	2b40      	cmp	r3, #64	@ 0x40
 800ea72:	d86f      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea74:	2b30      	cmp	r3, #48	@ 0x30
 800ea76:	d064      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea78:	2b30      	cmp	r3, #48	@ 0x30
 800ea7a:	d86b      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea7c:	2b20      	cmp	r3, #32
 800ea7e:	d060      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	d867      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d05c      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea88:	2b10      	cmp	r3, #16
 800ea8a:	d05a      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea8c:	e062      	b.n	800eb54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea9e:	f000 fd77 	bl	800f590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	609a      	str	r2, [r3, #8]
      break;
 800eaba:	e04f      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eacc:	f000 fd60 	bl	800f590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	689a      	ldr	r2, [r3, #8]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eade:	609a      	str	r2, [r3, #8]
      break;
 800eae0:	e03c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eaee:	461a      	mov	r2, r3
 800eaf0:	f000 fcd0 	bl	800f494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2150      	movs	r1, #80	@ 0x50
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 fd2a 	bl	800f554 <TIM_ITRx_SetConfig>
      break;
 800eb00:	e02c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f000 fcef 	bl	800f4f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2160      	movs	r1, #96	@ 0x60
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 fd1a 	bl	800f554 <TIM_ITRx_SetConfig>
      break;
 800eb20:	e01c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb2e:	461a      	mov	r2, r3
 800eb30:	f000 fcb0 	bl	800f494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2140      	movs	r1, #64	@ 0x40
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fd0a 	bl	800f554 <TIM_ITRx_SetConfig>
      break;
 800eb40:	e00c      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f000 fd01 	bl	800f554 <TIM_ITRx_SetConfig>
      break;
 800eb52:	e003      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	73fb      	strb	r3, [r7, #15]
      break;
 800eb58:	e000      	b.n	800eb5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800eb5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	ffceff88 	.word	0xffceff88
 800eb7c:	00100040 	.word	0x00100040
 800eb80:	00100030 	.word	0x00100030
 800eb84:	00100020 	.word	0x00100020

0800eb88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebf8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d107      	bne.n	800ec14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2201      	movs	r2, #1
 800ec08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ec12:	e02a      	b.n	800ec6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d107      	bne.n	800ec2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2202      	movs	r2, #2
 800ec22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ec2c:	e01d      	b.n	800ec6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d107      	bne.n	800ec48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2204      	movs	r2, #4
 800ec3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec46:	e010      	b.n	800ec6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d107      	bne.n	800ec62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2208      	movs	r2, #8
 800ec56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ec60:	e003      	b.n	800ec6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f7ff ffb4 	bl	800ebd8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	771a      	strb	r2, [r3, #28]
}
 800ec76:	bf00      	nop
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d10b      	bne.n	800ecae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	69db      	ldr	r3, [r3, #28]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d136      	bne.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ecac:	e031      	b.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d10b      	bne.n	800ecd0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2202      	movs	r2, #2
 800ecbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d125      	bne.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ecce:	e020      	b.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d10b      	bne.n	800ecf2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2204      	movs	r2, #4
 800ecde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	69db      	ldr	r3, [r3, #28]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d114      	bne.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ecf0:	e00f      	b.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d10a      	bne.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2208      	movs	r2, #8
 800ed00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	69db      	ldr	r3, [r3, #28]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d103      	bne.n	800ed12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7f3 fe7e 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	771a      	strb	r2, [r3, #28]
}
 800ed1e:	bf00      	nop
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d103      	bne.n	800ed46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2201      	movs	r2, #1
 800ed42:	771a      	strb	r2, [r3, #28]
 800ed44:	e019      	b.n	800ed7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d103      	bne.n	800ed58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2202      	movs	r2, #2
 800ed54:	771a      	strb	r2, [r3, #28]
 800ed56:	e010      	b.n	800ed7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d103      	bne.n	800ed6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2204      	movs	r2, #4
 800ed66:	771a      	strb	r2, [r3, #28]
 800ed68:	e007      	b.n	800ed7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d102      	bne.n	800ed7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2208      	movs	r2, #8
 800ed78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff ff18 	bl	800ebb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	771a      	strb	r2, [r3, #28]
}
 800ed86:	bf00      	nop
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a47      	ldr	r2, [pc, #284]	@ (800eec0 <TIM_Base_SetConfig+0x130>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d013      	beq.n	800edd0 <TIM_Base_SetConfig+0x40>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edae:	d00f      	beq.n	800edd0 <TIM_Base_SetConfig+0x40>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a44      	ldr	r2, [pc, #272]	@ (800eec4 <TIM_Base_SetConfig+0x134>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d00b      	beq.n	800edd0 <TIM_Base_SetConfig+0x40>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a43      	ldr	r2, [pc, #268]	@ (800eec8 <TIM_Base_SetConfig+0x138>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d007      	beq.n	800edd0 <TIM_Base_SetConfig+0x40>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a42      	ldr	r2, [pc, #264]	@ (800eecc <TIM_Base_SetConfig+0x13c>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d003      	beq.n	800edd0 <TIM_Base_SetConfig+0x40>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a41      	ldr	r2, [pc, #260]	@ (800eed0 <TIM_Base_SetConfig+0x140>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d108      	bne.n	800ede2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	4313      	orrs	r3, r2
 800ede0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4a36      	ldr	r2, [pc, #216]	@ (800eec0 <TIM_Base_SetConfig+0x130>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d027      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edf0:	d023      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4a33      	ldr	r2, [pc, #204]	@ (800eec4 <TIM_Base_SetConfig+0x134>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d01f      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4a32      	ldr	r2, [pc, #200]	@ (800eec8 <TIM_Base_SetConfig+0x138>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d01b      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a31      	ldr	r2, [pc, #196]	@ (800eecc <TIM_Base_SetConfig+0x13c>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d017      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a30      	ldr	r2, [pc, #192]	@ (800eed0 <TIM_Base_SetConfig+0x140>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d013      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4a2f      	ldr	r2, [pc, #188]	@ (800eed4 <TIM_Base_SetConfig+0x144>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d00f      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a2e      	ldr	r2, [pc, #184]	@ (800eed8 <TIM_Base_SetConfig+0x148>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d00b      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a2d      	ldr	r2, [pc, #180]	@ (800eedc <TIM_Base_SetConfig+0x14c>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d007      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a2c      	ldr	r2, [pc, #176]	@ (800eee0 <TIM_Base_SetConfig+0x150>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d003      	beq.n	800ee3a <TIM_Base_SetConfig+0xaa>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a2b      	ldr	r2, [pc, #172]	@ (800eee4 <TIM_Base_SetConfig+0x154>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d108      	bne.n	800ee4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	695b      	ldr	r3, [r3, #20]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	689a      	ldr	r2, [r3, #8]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a14      	ldr	r2, [pc, #80]	@ (800eec0 <TIM_Base_SetConfig+0x130>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d00f      	beq.n	800ee92 <TIM_Base_SetConfig+0x102>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a16      	ldr	r2, [pc, #88]	@ (800eed0 <TIM_Base_SetConfig+0x140>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d00b      	beq.n	800ee92 <TIM_Base_SetConfig+0x102>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a15      	ldr	r2, [pc, #84]	@ (800eed4 <TIM_Base_SetConfig+0x144>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d007      	beq.n	800ee92 <TIM_Base_SetConfig+0x102>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a14      	ldr	r2, [pc, #80]	@ (800eed8 <TIM_Base_SetConfig+0x148>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d003      	beq.n	800ee92 <TIM_Base_SetConfig+0x102>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4a13      	ldr	r2, [pc, #76]	@ (800eedc <TIM_Base_SetConfig+0x14c>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d103      	bne.n	800ee9a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	691a      	ldr	r2, [r3, #16]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f043 0204 	orr.w	r2, r3, #4
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	601a      	str	r2, [r3, #0]
}
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	40010000 	.word	0x40010000
 800eec4:	40000400 	.word	0x40000400
 800eec8:	40000800 	.word	0x40000800
 800eecc:	40000c00 	.word	0x40000c00
 800eed0:	40010400 	.word	0x40010400
 800eed4:	40014000 	.word	0x40014000
 800eed8:	40014400 	.word	0x40014400
 800eedc:	40014800 	.word	0x40014800
 800eee0:	4000e000 	.word	0x4000e000
 800eee4:	4000e400 	.word	0x4000e400

0800eee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b087      	sub	sp, #28
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a1b      	ldr	r3, [r3, #32]
 800eefc:	f023 0201 	bic.w	r2, r3, #1
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	4b37      	ldr	r3, [pc, #220]	@ (800eff0 <TIM_OC1_SetConfig+0x108>)
 800ef14:	4013      	ands	r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f023 0303 	bic.w	r3, r3, #3
 800ef1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	4313      	orrs	r3, r2
 800ef28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f023 0302 	bic.w	r3, r3, #2
 800ef30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a2d      	ldr	r2, [pc, #180]	@ (800eff4 <TIM_OC1_SetConfig+0x10c>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d00f      	beq.n	800ef64 <TIM_OC1_SetConfig+0x7c>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4a2c      	ldr	r2, [pc, #176]	@ (800eff8 <TIM_OC1_SetConfig+0x110>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d00b      	beq.n	800ef64 <TIM_OC1_SetConfig+0x7c>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4a2b      	ldr	r2, [pc, #172]	@ (800effc <TIM_OC1_SetConfig+0x114>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d007      	beq.n	800ef64 <TIM_OC1_SetConfig+0x7c>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4a2a      	ldr	r2, [pc, #168]	@ (800f000 <TIM_OC1_SetConfig+0x118>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d003      	beq.n	800ef64 <TIM_OC1_SetConfig+0x7c>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4a29      	ldr	r2, [pc, #164]	@ (800f004 <TIM_OC1_SetConfig+0x11c>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d10c      	bne.n	800ef7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	f023 0308 	bic.w	r3, r3, #8
 800ef6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	697a      	ldr	r2, [r7, #20]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f023 0304 	bic.w	r3, r3, #4
 800ef7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a1c      	ldr	r2, [pc, #112]	@ (800eff4 <TIM_OC1_SetConfig+0x10c>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d00f      	beq.n	800efa6 <TIM_OC1_SetConfig+0xbe>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a1b      	ldr	r2, [pc, #108]	@ (800eff8 <TIM_OC1_SetConfig+0x110>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00b      	beq.n	800efa6 <TIM_OC1_SetConfig+0xbe>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a1a      	ldr	r2, [pc, #104]	@ (800effc <TIM_OC1_SetConfig+0x114>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d007      	beq.n	800efa6 <TIM_OC1_SetConfig+0xbe>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a19      	ldr	r2, [pc, #100]	@ (800f000 <TIM_OC1_SetConfig+0x118>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d003      	beq.n	800efa6 <TIM_OC1_SetConfig+0xbe>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a18      	ldr	r2, [pc, #96]	@ (800f004 <TIM_OC1_SetConfig+0x11c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d111      	bne.n	800efca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800efb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	695b      	ldr	r3, [r3, #20]
 800efba:	693a      	ldr	r2, [r7, #16]
 800efbc:	4313      	orrs	r3, r2
 800efbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	685a      	ldr	r2, [r3, #4]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	621a      	str	r2, [r3, #32]
}
 800efe4:	bf00      	nop
 800efe6:	371c      	adds	r7, #28
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	fffeff8f 	.word	0xfffeff8f
 800eff4:	40010000 	.word	0x40010000
 800eff8:	40010400 	.word	0x40010400
 800effc:	40014000 	.word	0x40014000
 800f000:	40014400 	.word	0x40014400
 800f004:	40014800 	.word	0x40014800

0800f008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	f023 0210 	bic.w	r2, r3, #16
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	4b34      	ldr	r3, [pc, #208]	@ (800f104 <TIM_OC2_SetConfig+0xfc>)
 800f034:	4013      	ands	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	4313      	orrs	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f023 0320 	bic.w	r3, r3, #32
 800f052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	011b      	lsls	r3, r3, #4
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a29      	ldr	r2, [pc, #164]	@ (800f108 <TIM_OC2_SetConfig+0x100>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d003      	beq.n	800f070 <TIM_OC2_SetConfig+0x68>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a28      	ldr	r2, [pc, #160]	@ (800f10c <TIM_OC2_SetConfig+0x104>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d10d      	bne.n	800f08c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	011b      	lsls	r3, r3, #4
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	4313      	orrs	r3, r2
 800f082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f08a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a1e      	ldr	r2, [pc, #120]	@ (800f108 <TIM_OC2_SetConfig+0x100>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d00f      	beq.n	800f0b4 <TIM_OC2_SetConfig+0xac>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a1d      	ldr	r2, [pc, #116]	@ (800f10c <TIM_OC2_SetConfig+0x104>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d00b      	beq.n	800f0b4 <TIM_OC2_SetConfig+0xac>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a1c      	ldr	r2, [pc, #112]	@ (800f110 <TIM_OC2_SetConfig+0x108>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d007      	beq.n	800f0b4 <TIM_OC2_SetConfig+0xac>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a1b      	ldr	r2, [pc, #108]	@ (800f114 <TIM_OC2_SetConfig+0x10c>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d003      	beq.n	800f0b4 <TIM_OC2_SetConfig+0xac>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a1a      	ldr	r2, [pc, #104]	@ (800f118 <TIM_OC2_SetConfig+0x110>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d113      	bne.n	800f0dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	695b      	ldr	r3, [r3, #20]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	699b      	ldr	r3, [r3, #24]
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	621a      	str	r2, [r3, #32]
}
 800f0f6:	bf00      	nop
 800f0f8:	371c      	adds	r7, #28
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	feff8fff 	.word	0xfeff8fff
 800f108:	40010000 	.word	0x40010000
 800f10c:	40010400 	.word	0x40010400
 800f110:	40014000 	.word	0x40014000
 800f114:	40014400 	.word	0x40014400
 800f118:	40014800 	.word	0x40014800

0800f11c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b087      	sub	sp, #28
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6a1b      	ldr	r3, [r3, #32]
 800f12a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	4b33      	ldr	r3, [pc, #204]	@ (800f214 <TIM_OC3_SetConfig+0xf8>)
 800f148:	4013      	ands	r3, r2
 800f14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	021b      	lsls	r3, r3, #8
 800f16c:	697a      	ldr	r2, [r7, #20]
 800f16e:	4313      	orrs	r3, r2
 800f170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4a28      	ldr	r2, [pc, #160]	@ (800f218 <TIM_OC3_SetConfig+0xfc>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d003      	beq.n	800f182 <TIM_OC3_SetConfig+0x66>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4a27      	ldr	r2, [pc, #156]	@ (800f21c <TIM_OC3_SetConfig+0x100>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d10d      	bne.n	800f19e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	021b      	lsls	r3, r3, #8
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	4313      	orrs	r3, r2
 800f194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f218 <TIM_OC3_SetConfig+0xfc>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d00f      	beq.n	800f1c6 <TIM_OC3_SetConfig+0xaa>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800f21c <TIM_OC3_SetConfig+0x100>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00b      	beq.n	800f1c6 <TIM_OC3_SetConfig+0xaa>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f220 <TIM_OC3_SetConfig+0x104>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d007      	beq.n	800f1c6 <TIM_OC3_SetConfig+0xaa>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a1a      	ldr	r2, [pc, #104]	@ (800f224 <TIM_OC3_SetConfig+0x108>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d003      	beq.n	800f1c6 <TIM_OC3_SetConfig+0xaa>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a19      	ldr	r2, [pc, #100]	@ (800f228 <TIM_OC3_SetConfig+0x10c>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d113      	bne.n	800f1ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	011b      	lsls	r3, r3, #4
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	011b      	lsls	r3, r3, #4
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	693a      	ldr	r2, [r7, #16]
 800f1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	697a      	ldr	r2, [r7, #20]
 800f206:	621a      	str	r2, [r3, #32]
}
 800f208:	bf00      	nop
 800f20a:	371c      	adds	r7, #28
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	fffeff8f 	.word	0xfffeff8f
 800f218:	40010000 	.word	0x40010000
 800f21c:	40010400 	.word	0x40010400
 800f220:	40014000 	.word	0x40014000
 800f224:	40014400 	.word	0x40014400
 800f228:	40014800 	.word	0x40014800

0800f22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b087      	sub	sp, #28
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a1b      	ldr	r3, [r3, #32]
 800f240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4b24      	ldr	r3, [pc, #144]	@ (800f2e8 <TIM_OC4_SetConfig+0xbc>)
 800f258:	4013      	ands	r3, r2
 800f25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	4313      	orrs	r3, r2
 800f26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	031b      	lsls	r3, r3, #12
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	4313      	orrs	r3, r2
 800f282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a19      	ldr	r2, [pc, #100]	@ (800f2ec <TIM_OC4_SetConfig+0xc0>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d00f      	beq.n	800f2ac <TIM_OC4_SetConfig+0x80>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a18      	ldr	r2, [pc, #96]	@ (800f2f0 <TIM_OC4_SetConfig+0xc4>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00b      	beq.n	800f2ac <TIM_OC4_SetConfig+0x80>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a17      	ldr	r2, [pc, #92]	@ (800f2f4 <TIM_OC4_SetConfig+0xc8>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d007      	beq.n	800f2ac <TIM_OC4_SetConfig+0x80>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a16      	ldr	r2, [pc, #88]	@ (800f2f8 <TIM_OC4_SetConfig+0xcc>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d003      	beq.n	800f2ac <TIM_OC4_SetConfig+0x80>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a15      	ldr	r2, [pc, #84]	@ (800f2fc <TIM_OC4_SetConfig+0xd0>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d109      	bne.n	800f2c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f2b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	019b      	lsls	r3, r3, #6
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	621a      	str	r2, [r3, #32]
}
 800f2da:	bf00      	nop
 800f2dc:	371c      	adds	r7, #28
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	feff8fff 	.word	0xfeff8fff
 800f2ec:	40010000 	.word	0x40010000
 800f2f0:	40010400 	.word	0x40010400
 800f2f4:	40014000 	.word	0x40014000
 800f2f8:	40014400 	.word	0x40014400
 800f2fc:	40014800 	.word	0x40014800

0800f300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f300:	b480      	push	{r7}
 800f302:	b087      	sub	sp, #28
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a1b      	ldr	r3, [r3, #32]
 800f30e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	4b21      	ldr	r3, [pc, #132]	@ (800f3b0 <TIM_OC5_SetConfig+0xb0>)
 800f32c:	4013      	ands	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	4313      	orrs	r3, r2
 800f338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	041b      	lsls	r3, r3, #16
 800f348:	693a      	ldr	r2, [r7, #16]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a18      	ldr	r2, [pc, #96]	@ (800f3b4 <TIM_OC5_SetConfig+0xb4>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d00f      	beq.n	800f376 <TIM_OC5_SetConfig+0x76>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a17      	ldr	r2, [pc, #92]	@ (800f3b8 <TIM_OC5_SetConfig+0xb8>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d00b      	beq.n	800f376 <TIM_OC5_SetConfig+0x76>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a16      	ldr	r2, [pc, #88]	@ (800f3bc <TIM_OC5_SetConfig+0xbc>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d007      	beq.n	800f376 <TIM_OC5_SetConfig+0x76>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a15      	ldr	r2, [pc, #84]	@ (800f3c0 <TIM_OC5_SetConfig+0xc0>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d003      	beq.n	800f376 <TIM_OC5_SetConfig+0x76>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a14      	ldr	r2, [pc, #80]	@ (800f3c4 <TIM_OC5_SetConfig+0xc4>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d109      	bne.n	800f38a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f37c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	695b      	ldr	r3, [r3, #20]
 800f382:	021b      	lsls	r3, r3, #8
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	4313      	orrs	r3, r2
 800f388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	693a      	ldr	r2, [r7, #16]
 800f3a2:	621a      	str	r2, [r3, #32]
}
 800f3a4:	bf00      	nop
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr
 800f3b0:	fffeff8f 	.word	0xfffeff8f
 800f3b4:	40010000 	.word	0x40010000
 800f3b8:	40010400 	.word	0x40010400
 800f3bc:	40014000 	.word	0x40014000
 800f3c0:	40014400 	.word	0x40014400
 800f3c4:	40014800 	.word	0x40014800

0800f3c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a1b      	ldr	r3, [r3, #32]
 800f3dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	4b22      	ldr	r3, [pc, #136]	@ (800f47c <TIM_OC6_SetConfig+0xb4>)
 800f3f4:	4013      	ands	r3, r2
 800f3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	021b      	lsls	r3, r3, #8
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4313      	orrs	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f40a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	051b      	lsls	r3, r3, #20
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	4313      	orrs	r3, r2
 800f416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a19      	ldr	r2, [pc, #100]	@ (800f480 <TIM_OC6_SetConfig+0xb8>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d00f      	beq.n	800f440 <TIM_OC6_SetConfig+0x78>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a18      	ldr	r2, [pc, #96]	@ (800f484 <TIM_OC6_SetConfig+0xbc>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d00b      	beq.n	800f440 <TIM_OC6_SetConfig+0x78>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a17      	ldr	r2, [pc, #92]	@ (800f488 <TIM_OC6_SetConfig+0xc0>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d007      	beq.n	800f440 <TIM_OC6_SetConfig+0x78>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a16      	ldr	r2, [pc, #88]	@ (800f48c <TIM_OC6_SetConfig+0xc4>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d003      	beq.n	800f440 <TIM_OC6_SetConfig+0x78>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a15      	ldr	r2, [pc, #84]	@ (800f490 <TIM_OC6_SetConfig+0xc8>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d109      	bne.n	800f454 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	695b      	ldr	r3, [r3, #20]
 800f44c:	029b      	lsls	r3, r3, #10
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	4313      	orrs	r3, r2
 800f452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	697a      	ldr	r2, [r7, #20]
 800f458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	621a      	str	r2, [r3, #32]
}
 800f46e:	bf00      	nop
 800f470:	371c      	adds	r7, #28
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	feff8fff 	.word	0xfeff8fff
 800f480:	40010000 	.word	0x40010000
 800f484:	40010400 	.word	0x40010400
 800f488:	40014000 	.word	0x40014000
 800f48c:	40014400 	.word	0x40014400
 800f490:	40014800 	.word	0x40014800

0800f494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f494:	b480      	push	{r7}
 800f496:	b087      	sub	sp, #28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6a1b      	ldr	r3, [r3, #32]
 800f4a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	f023 0201 	bic.w	r2, r3, #1
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	011b      	lsls	r3, r3, #4
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	f023 030a 	bic.w	r3, r3, #10
 800f4d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	621a      	str	r2, [r3, #32]
}
 800f4e6:	bf00      	nop
 800f4e8:	371c      	adds	r7, #28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b087      	sub	sp, #28
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	60f8      	str	r0, [r7, #12]
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6a1b      	ldr	r3, [r3, #32]
 800f508:	f023 0210 	bic.w	r2, r3, #16
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f51c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	031b      	lsls	r3, r3, #12
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	4313      	orrs	r3, r2
 800f526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f52e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	011b      	lsls	r3, r3, #4
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	4313      	orrs	r3, r2
 800f538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	693a      	ldr	r2, [r7, #16]
 800f53e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	697a      	ldr	r2, [r7, #20]
 800f544:	621a      	str	r2, [r3, #32]
}
 800f546:	bf00      	nop
 800f548:	371c      	adds	r7, #28
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
	...

0800f554 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	4b09      	ldr	r3, [pc, #36]	@ (800f58c <TIM_ITRx_SetConfig+0x38>)
 800f568:	4013      	ands	r3, r2
 800f56a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4313      	orrs	r3, r2
 800f572:	f043 0307 	orr.w	r3, r3, #7
 800f576:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	609a      	str	r2, [r3, #8]
}
 800f57e:	bf00      	nop
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	ffcfff8f 	.word	0xffcfff8f

0800f590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f590:	b480      	push	{r7}
 800f592:	b087      	sub	sp, #28
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	021a      	lsls	r2, r3, #8
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	697a      	ldr	r2, [r7, #20]
 800f5c2:	609a      	str	r2, [r3, #8]
}
 800f5c4:	bf00      	nop
 800f5c6:	371c      	adds	r7, #28
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	f003 031f 	and.w	r3, r3, #31
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6a1a      	ldr	r2, [r3, #32]
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	43db      	mvns	r3, r3
 800f5f2:	401a      	ands	r2, r3
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6a1a      	ldr	r2, [r3, #32]
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f003 031f 	and.w	r3, r3, #31
 800f602:	6879      	ldr	r1, [r7, #4]
 800f604:	fa01 f303 	lsl.w	r3, r1, r3
 800f608:	431a      	orrs	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	621a      	str	r2, [r3, #32]
}
 800f60e:	bf00      	nop
 800f610:	371c      	adds	r7, #28
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
	...

0800f61c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d101      	bne.n	800f634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f630:	2302      	movs	r3, #2
 800f632:	e077      	b.n	800f724 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2202      	movs	r2, #2
 800f640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a35      	ldr	r2, [pc, #212]	@ (800f730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d004      	beq.n	800f668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a34      	ldr	r2, [pc, #208]	@ (800f734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d108      	bne.n	800f67a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f66e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	4313      	orrs	r3, r2
 800f68a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a25      	ldr	r2, [pc, #148]	@ (800f730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d02c      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6a6:	d027      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a22      	ldr	r2, [pc, #136]	@ (800f738 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d022      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a21      	ldr	r2, [pc, #132]	@ (800f73c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d01d      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a1f      	ldr	r2, [pc, #124]	@ (800f740 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d018      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a1a      	ldr	r2, [pc, #104]	@ (800f734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d013      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a1b      	ldr	r2, [pc, #108]	@ (800f744 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d00e      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a1a      	ldr	r2, [pc, #104]	@ (800f748 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d009      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a18      	ldr	r2, [pc, #96]	@ (800f74c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d004      	beq.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a17      	ldr	r2, [pc, #92]	@ (800f750 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d10c      	bne.n	800f712 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	4313      	orrs	r3, r2
 800f708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2201      	movs	r2, #1
 800f716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	40010000 	.word	0x40010000
 800f734:	40010400 	.word	0x40010400
 800f738:	40000400 	.word	0x40000400
 800f73c:	40000800 	.word	0x40000800
 800f740:	40000c00 	.word	0x40000c00
 800f744:	40001800 	.word	0x40001800
 800f748:	40014000 	.word	0x40014000
 800f74c:	4000e000 	.word	0x4000e000
 800f750:	4000e400 	.word	0x4000e400

0800f754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f75c:	bf00      	nop
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6819      	ldr	r1, [r3, #0]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	fb03 f203 	mul.w	r2, r3, r3
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	4413      	add	r3, r2
 800f7ac:	43db      	mvns	r3, r3
 800f7ae:	ea01 0203 	and.w	r2, r1, r3
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	fb03 f303 	mul.w	r3, r3, r3
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	fb01 f303 	mul.w	r3, r1, r3
 800f7be:	431a      	orrs	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	601a      	str	r2, [r3, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	43db      	mvns	r3, r3
 800f7e4:	401a      	ands	r2, r3
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	fb01 f303 	mul.w	r3, r1, r3
 800f7ee:	431a      	orrs	r2, r3
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	605a      	str	r2, [r3, #4]
}
 800f7f4:	bf00      	nop
 800f7f6:	3714      	adds	r7, #20
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f800:	b480      	push	{r7}
 800f802:	b085      	sub	sp, #20
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6899      	ldr	r1, [r3, #8]
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	fb03 f203 	mul.w	r2, r3, r3
 800f816:	4613      	mov	r3, r2
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	4413      	add	r3, r2
 800f81c:	43db      	mvns	r3, r3
 800f81e:	ea01 0203 	and.w	r2, r1, r3
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	fb03 f303 	mul.w	r3, r3, r3
 800f828:	6879      	ldr	r1, [r7, #4]
 800f82a:	fb01 f303 	mul.w	r3, r1, r3
 800f82e:	431a      	orrs	r2, r3
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	609a      	str	r2, [r3, #8]
}
 800f834:	bf00      	nop
 800f836:	3714      	adds	r7, #20
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr

0800f840 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f840:	b480      	push	{r7}
 800f842:	b085      	sub	sp, #20
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	68d9      	ldr	r1, [r3, #12]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	fb03 f203 	mul.w	r2, r3, r3
 800f856:	4613      	mov	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	4413      	add	r3, r2
 800f85c:	43db      	mvns	r3, r3
 800f85e:	ea01 0203 	and.w	r2, r1, r3
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	fb03 f303 	mul.w	r3, r3, r3
 800f868:	6879      	ldr	r1, [r7, #4]
 800f86a:	fb01 f303 	mul.w	r3, r1, r3
 800f86e:	431a      	orrs	r2, r3
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	60da      	str	r2, [r3, #12]
}
 800f874:	bf00      	nop
 800f876:	3714      	adds	r7, #20
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6a19      	ldr	r1, [r3, #32]
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	fb03 f303 	mul.w	r3, r3, r3
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	fb02 f303 	mul.w	r3, r2, r3
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	fb03 f202 	mul.w	r2, r3, r2
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	011b      	lsls	r3, r3, #4
 800f8a6:	1a9b      	subs	r3, r3, r2
 800f8a8:	43db      	mvns	r3, r3
 800f8aa:	ea01 0203 	and.w	r2, r1, r3
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	fb03 f303 	mul.w	r3, r3, r3
 800f8b4:	68b9      	ldr	r1, [r7, #8]
 800f8b6:	fb01 f303 	mul.w	r3, r1, r3
 800f8ba:	68b9      	ldr	r1, [r7, #8]
 800f8bc:	fb01 f303 	mul.w	r3, r1, r3
 800f8c0:	6879      	ldr	r1, [r7, #4]
 800f8c2:	fb01 f303 	mul.w	r3, r1, r3
 800f8c6:	431a      	orrs	r2, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800f8cc:	bf00      	nop
 800f8ce:	3714      	adds	r7, #20
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	0a1b      	lsrs	r3, r3, #8
 800f8ec:	68ba      	ldr	r2, [r7, #8]
 800f8ee:	0a12      	lsrs	r2, r2, #8
 800f8f0:	fb02 f303 	mul.w	r3, r2, r3
 800f8f4:	68ba      	ldr	r2, [r7, #8]
 800f8f6:	0a12      	lsrs	r2, r2, #8
 800f8f8:	fb02 f303 	mul.w	r3, r2, r3
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	0a12      	lsrs	r2, r2, #8
 800f900:	fb03 f202 	mul.w	r2, r3, r2
 800f904:	4613      	mov	r3, r2
 800f906:	011b      	lsls	r3, r3, #4
 800f908:	1a9b      	subs	r3, r3, r2
 800f90a:	43db      	mvns	r3, r3
 800f90c:	ea01 0203 	and.w	r2, r1, r3
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	0a1b      	lsrs	r3, r3, #8
 800f914:	68b9      	ldr	r1, [r7, #8]
 800f916:	0a09      	lsrs	r1, r1, #8
 800f918:	fb01 f303 	mul.w	r3, r1, r3
 800f91c:	68b9      	ldr	r1, [r7, #8]
 800f91e:	0a09      	lsrs	r1, r1, #8
 800f920:	fb01 f303 	mul.w	r3, r1, r3
 800f924:	68b9      	ldr	r1, [r7, #8]
 800f926:	0a09      	lsrs	r1, r1, #8
 800f928:	fb01 f303 	mul.w	r3, r1, r3
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	fb01 f303 	mul.w	r3, r1, r3
 800f932:	431a      	orrs	r2, r3
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800f938:	bf00      	nop
 800f93a:	3714      	adds	r7, #20
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	fa93 f3a3 	rbit	r3, r3
 800f95a:	60fb      	str	r3, [r7, #12]
  return result;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <LL_GPIO_Init+0x26>
    return 32U;
 800f966:	2320      	movs	r3, #32
 800f968:	e003      	b.n	800f972 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	fab3 f383 	clz	r3, r3
 800f970:	b2db      	uxtb	r3, r3
 800f972:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f974:	e048      	b.n	800fa08 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	2101      	movs	r1, #1
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	fa01 f303 	lsl.w	r3, r1, r3
 800f982:	4013      	ands	r3, r2
 800f984:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d03a      	beq.n	800fa02 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d003      	beq.n	800f99c <LL_GPIO_Init+0x58>
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	2b02      	cmp	r3, #2
 800f99a:	d10e      	bne.n	800f9ba <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	69b9      	ldr	r1, [r7, #24]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff ff2b 	bl	800f800 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff ff0b 	bl	800f7d0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	69b9      	ldr	r1, [r7, #24]
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff ff3c 	bl	800f840 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d111      	bne.n	800f9f4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	2bff      	cmp	r3, #255	@ 0xff
 800f9d4:	d807      	bhi.n	800f9e6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	69b9      	ldr	r1, [r7, #24]
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff ff4e 	bl	800f880 <LL_GPIO_SetAFPin_0_7>
 800f9e4:	e006      	b.n	800f9f4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	69b9      	ldr	r1, [r7, #24]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff ff72 	bl	800f8d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	69b9      	ldr	r1, [r7, #24]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff fec7 	bl	800f790 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	3301      	adds	r3, #1
 800fa06:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1af      	bne.n	800f976 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3720      	adds	r7, #32
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800fa20:	b480      	push	{r7}
 800fa22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800fa24:	4b07      	ldr	r3, [pc, #28]	@ (800fa44 <LL_RCC_HSE_IsReady+0x24>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa30:	d101      	bne.n	800fa36 <LL_RCC_HSE_IsReady+0x16>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e000      	b.n	800fa38 <LL_RCC_HSE_IsReady+0x18>
 800fa36:	2300      	movs	r3, #0
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	58024400 	.word	0x58024400

0800fa48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800fa4c:	4b06      	ldr	r3, [pc, #24]	@ (800fa68 <LL_RCC_HSI_IsReady+0x20>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f003 0304 	and.w	r3, r3, #4
 800fa54:	2b04      	cmp	r3, #4
 800fa56:	d101      	bne.n	800fa5c <LL_RCC_HSI_IsReady+0x14>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e000      	b.n	800fa5e <LL_RCC_HSI_IsReady+0x16>
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	58024400 	.word	0x58024400

0800fa6c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800fa70:	4b04      	ldr	r3, [pc, #16]	@ (800fa84 <LL_RCC_HSI_GetDivider+0x18>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f003 0318 	and.w	r3, r3, #24
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	58024400 	.word	0x58024400

0800fa88 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800fa8c:	4b07      	ldr	r3, [pc, #28]	@ (800faac <LL_RCC_CSI_IsReady+0x24>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa98:	d101      	bne.n	800fa9e <LL_RCC_CSI_IsReady+0x16>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e000      	b.n	800faa0 <LL_RCC_CSI_IsReady+0x18>
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	58024400 	.word	0x58024400

0800fab0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800fab4:	4b06      	ldr	r3, [pc, #24]	@ (800fad0 <LL_RCC_LSE_IsReady+0x20>)
 800fab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fab8:	f003 0302 	and.w	r3, r3, #2
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	d101      	bne.n	800fac4 <LL_RCC_LSE_IsReady+0x14>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e000      	b.n	800fac6 <LL_RCC_LSE_IsReady+0x16>
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	58024400 	.word	0x58024400

0800fad4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800fad4:	b480      	push	{r7}
 800fad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800fad8:	4b04      	ldr	r3, [pc, #16]	@ (800faec <LL_RCC_GetSysClkSource+0x18>)
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	58024400 	.word	0x58024400

0800faf0 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800faf0:	b480      	push	{r7}
 800faf2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800faf4:	4b04      	ldr	r3, [pc, #16]	@ (800fb08 <LL_RCC_GetSysPrescaler+0x18>)
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	58024400 	.word	0x58024400

0800fb0c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800fb10:	4b04      	ldr	r3, [pc, #16]	@ (800fb24 <LL_RCC_GetAHBPrescaler+0x18>)
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	58024400 	.word	0x58024400

0800fb28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800fb2c:	4b04      	ldr	r3, [pc, #16]	@ (800fb40 <LL_RCC_GetAPB1Prescaler+0x18>)
 800fb2e:	69db      	ldr	r3, [r3, #28]
 800fb30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	58024400 	.word	0x58024400

0800fb44 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800fb44:	b480      	push	{r7}
 800fb46:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800fb48:	4b04      	ldr	r3, [pc, #16]	@ (800fb5c <LL_RCC_GetAPB2Prescaler+0x18>)
 800fb4a:	69db      	ldr	r3, [r3, #28]
 800fb4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	58024400 	.word	0x58024400

0800fb60 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fba8 <LL_RCC_GetClockSource+0x48>)
 800fb6e:	4413      	add	r3, r2
 800fb70:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	0e19      	lsrs	r1, r3, #24
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	0a1b      	lsrs	r3, r3, #8
 800fb7e:	f003 031f 	and.w	r3, r3, #31
 800fb82:	fa01 f303 	lsl.w	r3, r1, r3
 800fb86:	401a      	ands	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	0a1b      	lsrs	r3, r3, #8
 800fb8c:	f003 031f 	and.w	r3, r3, #31
 800fb90:	fa22 f303 	lsr.w	r3, r2, r3
 800fb94:	041a      	lsls	r2, r3, #16
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4313      	orrs	r3, r2
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3714      	adds	r7, #20
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	5802444c 	.word	0x5802444c

0800fbac <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7ff ffd3 	bl	800fb60 <LL_RCC_GetClockSource>
 800fbba:	4603      	mov	r3, r0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800fbc8:	4b04      	ldr	r3, [pc, #16]	@ (800fbdc <LL_RCC_PLL_GetSource+0x18>)
 800fbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbcc:	f003 0303 	and.w	r3, r3, #3
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	58024400 	.word	0x58024400

0800fbe0 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800fbe4:	4b07      	ldr	r3, [pc, #28]	@ (800fc04 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800fbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbf0:	d101      	bne.n	800fbf6 <LL_RCC_PLL1P_IsEnabled+0x16>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e000      	b.n	800fbf8 <LL_RCC_PLL1P_IsEnabled+0x18>
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	58024400 	.word	0x58024400

0800fc08 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800fc0c:	4b07      	ldr	r3, [pc, #28]	@ (800fc2c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800fc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc18:	d101      	bne.n	800fc1e <LL_RCC_PLL1Q_IsEnabled+0x16>
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e000      	b.n	800fc20 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800fc1e:	2300      	movs	r3, #0
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	58024400 	.word	0x58024400

0800fc30 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800fc30:	b480      	push	{r7}
 800fc32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800fc34:	4b07      	ldr	r3, [pc, #28]	@ (800fc54 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800fc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fc3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fc40:	d101      	bne.n	800fc46 <LL_RCC_PLL1R_IsEnabled+0x16>
 800fc42:	2301      	movs	r3, #1
 800fc44:	e000      	b.n	800fc48 <LL_RCC_PLL1R_IsEnabled+0x18>
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	58024400 	.word	0x58024400

0800fc58 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800fc5c:	4b06      	ldr	r3, [pc, #24]	@ (800fc78 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800fc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc60:	f003 0301 	and.w	r3, r3, #1
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d101      	bne.n	800fc6c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e000      	b.n	800fc6e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr
 800fc78:	58024400 	.word	0x58024400

0800fc7c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800fc80:	4b04      	ldr	r3, [pc, #16]	@ (800fc94 <LL_RCC_PLL1_GetN+0x18>)
 800fc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc88:	3301      	adds	r3, #1
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	58024400 	.word	0x58024400

0800fc98 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800fc9c:	4b04      	ldr	r3, [pc, #16]	@ (800fcb0 <LL_RCC_PLL1_GetM+0x18>)
 800fc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca0:	091b      	lsrs	r3, r3, #4
 800fca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr
 800fcb0:	58024400 	.word	0x58024400

0800fcb4 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800fcb8:	4b05      	ldr	r3, [pc, #20]	@ (800fcd0 <LL_RCC_PLL1_GetP+0x1c>)
 800fcba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcbc:	0a5b      	lsrs	r3, r3, #9
 800fcbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcc2:	3301      	adds	r3, #1
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	58024400 	.word	0x58024400

0800fcd4 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800fcd8:	4b05      	ldr	r3, [pc, #20]	@ (800fcf0 <LL_RCC_PLL1_GetQ+0x1c>)
 800fcda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcdc:	0c1b      	lsrs	r3, r3, #16
 800fcde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fce2:	3301      	adds	r3, #1
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	58024400 	.word	0x58024400

0800fcf4 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800fcf8:	4b05      	ldr	r3, [pc, #20]	@ (800fd10 <LL_RCC_PLL1_GetR+0x1c>)
 800fcfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcfc:	0e1b      	lsrs	r3, r3, #24
 800fcfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd02:	3301      	adds	r3, #1
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	58024400 	.word	0x58024400

0800fd14 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800fd18:	4b04      	ldr	r3, [pc, #16]	@ (800fd2c <LL_RCC_PLL1_GetFRACN+0x18>)
 800fd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd1c:	08db      	lsrs	r3, r3, #3
 800fd1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	58024400 	.word	0x58024400

0800fd30 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800fd30:	b480      	push	{r7}
 800fd32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800fd34:	4b07      	ldr	r3, [pc, #28]	@ (800fd54 <LL_RCC_PLL2_IsReady+0x24>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd40:	d101      	bne.n	800fd46 <LL_RCC_PLL2_IsReady+0x16>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <LL_RCC_PLL2_IsReady+0x18>
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	58024400 	.word	0x58024400

0800fd58 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800fd5c:	4b07      	ldr	r3, [pc, #28]	@ (800fd7c <LL_RCC_PLL2P_IsEnabled+0x24>)
 800fd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fd64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fd68:	d101      	bne.n	800fd6e <LL_RCC_PLL2P_IsEnabled+0x16>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e000      	b.n	800fd70 <LL_RCC_PLL2P_IsEnabled+0x18>
 800fd6e:	2300      	movs	r3, #0
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	58024400 	.word	0x58024400

0800fd80 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800fd80:	b480      	push	{r7}
 800fd82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800fd84:	4b07      	ldr	r3, [pc, #28]	@ (800fda4 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800fd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fd8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd90:	d101      	bne.n	800fd96 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	58024400 	.word	0x58024400

0800fda8 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800fdac:	4b07      	ldr	r3, [pc, #28]	@ (800fdcc <LL_RCC_PLL2R_IsEnabled+0x24>)
 800fdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fdb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fdb8:	d101      	bne.n	800fdbe <LL_RCC_PLL2R_IsEnabled+0x16>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <LL_RCC_PLL2R_IsEnabled+0x18>
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	58024400 	.word	0x58024400

0800fdd0 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800fdd4:	4b06      	ldr	r3, [pc, #24]	@ (800fdf0 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800fdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd8:	f003 0310 	and.w	r3, r3, #16
 800fddc:	2b10      	cmp	r3, #16
 800fdde:	d101      	bne.n	800fde4 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800fde0:	2301      	movs	r3, #1
 800fde2:	e000      	b.n	800fde6 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	58024400 	.word	0x58024400

0800fdf4 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800fdf8:	4b04      	ldr	r3, [pc, #16]	@ (800fe0c <LL_RCC_PLL2_GetN+0x18>)
 800fdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe00:	3301      	adds	r3, #1
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	58024400 	.word	0x58024400

0800fe10 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800fe10:	b480      	push	{r7}
 800fe12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800fe14:	4b04      	ldr	r3, [pc, #16]	@ (800fe28 <LL_RCC_PLL2_GetM+0x18>)
 800fe16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe18:	0b1b      	lsrs	r3, r3, #12
 800fe1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	58024400 	.word	0x58024400

0800fe2c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800fe30:	4b05      	ldr	r3, [pc, #20]	@ (800fe48 <LL_RCC_PLL2_GetP+0x1c>)
 800fe32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe34:	0a5b      	lsrs	r3, r3, #9
 800fe36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3a:	3301      	adds	r3, #1
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	58024400 	.word	0x58024400

0800fe4c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800fe50:	4b05      	ldr	r3, [pc, #20]	@ (800fe68 <LL_RCC_PLL2_GetQ+0x1c>)
 800fe52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe54:	0c1b      	lsrs	r3, r3, #16
 800fe56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe5a:	3301      	adds	r3, #1
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	58024400 	.word	0x58024400

0800fe6c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800fe70:	4b05      	ldr	r3, [pc, #20]	@ (800fe88 <LL_RCC_PLL2_GetR+0x1c>)
 800fe72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe74:	0e1b      	lsrs	r3, r3, #24
 800fe76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe7a:	3301      	adds	r3, #1
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	58024400 	.word	0x58024400

0800fe8c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800fe90:	4b04      	ldr	r3, [pc, #16]	@ (800fea4 <LL_RCC_PLL2_GetFRACN+0x18>)
 800fe92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe94:	08db      	lsrs	r3, r3, #3
 800fe96:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr
 800fea4:	58024400 	.word	0x58024400

0800fea8 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800fea8:	b480      	push	{r7}
 800feaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800feac:	4b07      	ldr	r3, [pc, #28]	@ (800fecc <LL_RCC_PLL3_IsReady+0x24>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800feb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800feb8:	d101      	bne.n	800febe <LL_RCC_PLL3_IsReady+0x16>
 800feba:	2301      	movs	r3, #1
 800febc:	e000      	b.n	800fec0 <LL_RCC_PLL3_IsReady+0x18>
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	58024400 	.word	0x58024400

0800fed0 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800fed4:	4b07      	ldr	r3, [pc, #28]	@ (800fef4 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800fed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fedc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fee0:	d101      	bne.n	800fee6 <LL_RCC_PLL3P_IsEnabled+0x16>
 800fee2:	2301      	movs	r3, #1
 800fee4:	e000      	b.n	800fee8 <LL_RCC_PLL3P_IsEnabled+0x18>
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	58024400 	.word	0x58024400

0800fef8 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800fefc:	4b07      	ldr	r3, [pc, #28]	@ (800ff1c <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800fefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff08:	d101      	bne.n	800ff0e <LL_RCC_PLL3Q_IsEnabled+0x16>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e000      	b.n	800ff10 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	58024400 	.word	0x58024400

0800ff20 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800ff20:	b480      	push	{r7}
 800ff22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800ff24:	4b07      	ldr	r3, [pc, #28]	@ (800ff44 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800ff26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ff2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff30:	d101      	bne.n	800ff36 <LL_RCC_PLL3R_IsEnabled+0x16>
 800ff32:	2301      	movs	r3, #1
 800ff34:	e000      	b.n	800ff38 <LL_RCC_PLL3R_IsEnabled+0x18>
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	58024400 	.word	0x58024400

0800ff48 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800ff4c:	4b07      	ldr	r3, [pc, #28]	@ (800ff6c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800ff4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff58:	d101      	bne.n	800ff5e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e000      	b.n	800ff60 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	58024400 	.word	0x58024400

0800ff70 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800ff70:	b480      	push	{r7}
 800ff72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800ff74:	4b04      	ldr	r3, [pc, #16]	@ (800ff88 <LL_RCC_PLL3_GetN+0x18>)
 800ff76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff7c:	3301      	adds	r3, #1
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	58024400 	.word	0x58024400

0800ff8c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800ff90:	4b04      	ldr	r3, [pc, #16]	@ (800ffa4 <LL_RCC_PLL3_GetM+0x18>)
 800ff92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff94:	0d1b      	lsrs	r3, r3, #20
 800ff96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	58024400 	.word	0x58024400

0800ffa8 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800ffac:	4b05      	ldr	r3, [pc, #20]	@ (800ffc4 <LL_RCC_PLL3_GetP+0x1c>)
 800ffae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffb0:	0a5b      	lsrs	r3, r3, #9
 800ffb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffb6:	3301      	adds	r3, #1
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	58024400 	.word	0x58024400

0800ffc8 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800ffcc:	4b05      	ldr	r3, [pc, #20]	@ (800ffe4 <LL_RCC_PLL3_GetQ+0x1c>)
 800ffce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffd0:	0c1b      	lsrs	r3, r3, #16
 800ffd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffd6:	3301      	adds	r3, #1
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	58024400 	.word	0x58024400

0800ffe8 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800ffec:	4b05      	ldr	r3, [pc, #20]	@ (8010004 <LL_RCC_PLL3_GetR+0x1c>)
 800ffee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fff0:	0e1b      	lsrs	r3, r3, #24
 800fff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fff6:	3301      	adds	r3, #1
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	58024400 	.word	0x58024400

08010008 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 801000c:	4b04      	ldr	r3, [pc, #16]	@ (8010020 <LL_RCC_PLL3_GetFRACN+0x18>)
 801000e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010010:	08db      	lsrs	r3, r3, #3
 8010012:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8010016:	4618      	mov	r0, r3
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	58024400 	.word	0x58024400

08010024 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b08a      	sub	sp, #40	@ 0x28
 8010028:	af02      	add	r7, sp, #8
 801002a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 801002c:	2300      	movs	r3, #0
 801002e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8010030:	2300      	movs	r3, #0
 8010032:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8010034:	f7ff fdc6 	bl	800fbc4 <LL_RCC_PLL_GetSource>
 8010038:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	2b02      	cmp	r3, #2
 801003e:	d01f      	beq.n	8010080 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d824      	bhi.n	8010090 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d003      	beq.n	8010054 <LL_RCC_GetPLL1ClockFreq+0x30>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d00e      	beq.n	8010070 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8010052:	e01d      	b.n	8010090 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8010054:	f7ff fcf8 	bl	800fa48 <LL_RCC_HSI_IsReady>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d01a      	beq.n	8010094 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 801005e:	f7ff fd05 	bl	800fa6c <LL_RCC_HSI_GetDivider>
 8010062:	4603      	mov	r3, r0
 8010064:	08db      	lsrs	r3, r3, #3
 8010066:	4a38      	ldr	r2, [pc, #224]	@ (8010148 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8010068:	fa22 f303 	lsr.w	r3, r2, r3
 801006c:	61fb      	str	r3, [r7, #28]
      break;
 801006e:	e011      	b.n	8010094 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8010070:	f7ff fd0a 	bl	800fa88 <LL_RCC_CSI_IsReady>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00e      	beq.n	8010098 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 801007a:	4b34      	ldr	r3, [pc, #208]	@ (801014c <LL_RCC_GetPLL1ClockFreq+0x128>)
 801007c:	61fb      	str	r3, [r7, #28]
      break;
 801007e:	e00b      	b.n	8010098 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8010080:	f7ff fcce 	bl	800fa20 <LL_RCC_HSE_IsReady>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d008      	beq.n	801009c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 801008a:	4b31      	ldr	r3, [pc, #196]	@ (8010150 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 801008c:	61fb      	str	r3, [r7, #28]
      break;
 801008e:	e005      	b.n	801009c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8010090:	bf00      	nop
 8010092:	e004      	b.n	801009e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8010094:	bf00      	nop
 8010096:	e002      	b.n	801009e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8010098:	bf00      	nop
 801009a:	e000      	b.n	801009e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 801009c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 80100b0:	f7ff fdf2 	bl	800fc98 <LL_RCC_PLL1_GetM>
 80100b4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 80100b6:	f7ff fde1 	bl	800fc7c <LL_RCC_PLL1_GetN>
 80100ba:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 80100bc:	f7ff fdcc 	bl	800fc58 <LL_RCC_PLL1FRACN_IsEnabled>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d002      	beq.n	80100cc <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80100c6:	f7ff fe25 	bl	800fd14 <LL_RCC_PLL1_GetFRACN>
 80100ca:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d035      	beq.n	801013e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80100d2:	f7ff fd85 	bl	800fbe0 <LL_RCC_PLL1P_IsEnabled>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00c      	beq.n	80100f6 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80100dc:	f7ff fdea 	bl	800fcb4 <LL_RCC_PLL1_GetP>
 80100e0:	4603      	mov	r3, r0
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	6939      	ldr	r1, [r7, #16]
 80100ea:	69f8      	ldr	r0, [r7, #28]
 80100ec:	f000 f964 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 80100f0:	4602      	mov	r2, r0
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80100f6:	f7ff fd87 	bl	800fc08 <LL_RCC_PLL1Q_IsEnabled>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00c      	beq.n	801011a <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8010100:	f7ff fde8 	bl	800fcd4 <LL_RCC_PLL1_GetQ>
 8010104:	4603      	mov	r3, r0
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	6939      	ldr	r1, [r7, #16]
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	f000 f952 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010114:	4602      	mov	r2, r0
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 801011a:	f7ff fd89 	bl	800fc30 <LL_RCC_PLL1R_IsEnabled>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00c      	beq.n	801013e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8010124:	f7ff fde6 	bl	800fcf4 <LL_RCC_PLL1_GetR>
 8010128:	4603      	mov	r3, r0
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	6939      	ldr	r1, [r7, #16]
 8010132:	69f8      	ldr	r0, [r7, #28]
 8010134:	f000 f940 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010138:	4602      	mov	r2, r0
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	609a      	str	r2, [r3, #8]
    }
  }
}
 801013e:	bf00      	nop
 8010140:	3720      	adds	r7, #32
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	03d09000 	.word	0x03d09000
 801014c:	003d0900 	.word	0x003d0900
 8010150:	017d7840 	.word	0x017d7840

08010154 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08a      	sub	sp, #40	@ 0x28
 8010158:	af02      	add	r7, sp, #8
 801015a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 801015c:	2300      	movs	r3, #0
 801015e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8010160:	2300      	movs	r3, #0
 8010162:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8010164:	f7ff fd2e 	bl	800fbc4 <LL_RCC_PLL_GetSource>
 8010168:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2b02      	cmp	r3, #2
 801016e:	d01f      	beq.n	80101b0 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2b02      	cmp	r3, #2
 8010174:	d824      	bhi.n	80101c0 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d003      	beq.n	8010184 <LL_RCC_GetPLL2ClockFreq+0x30>
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d00e      	beq.n	80101a0 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8010182:	e01d      	b.n	80101c0 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8010184:	f7ff fc60 	bl	800fa48 <LL_RCC_HSI_IsReady>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d01a      	beq.n	80101c4 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 801018e:	f7ff fc6d 	bl	800fa6c <LL_RCC_HSI_GetDivider>
 8010192:	4603      	mov	r3, r0
 8010194:	08db      	lsrs	r3, r3, #3
 8010196:	4a38      	ldr	r2, [pc, #224]	@ (8010278 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8010198:	fa22 f303 	lsr.w	r3, r2, r3
 801019c:	61fb      	str	r3, [r7, #28]
      break;
 801019e:	e011      	b.n	80101c4 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80101a0:	f7ff fc72 	bl	800fa88 <LL_RCC_CSI_IsReady>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00e      	beq.n	80101c8 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80101aa:	4b34      	ldr	r3, [pc, #208]	@ (801027c <LL_RCC_GetPLL2ClockFreq+0x128>)
 80101ac:	61fb      	str	r3, [r7, #28]
      break;
 80101ae:	e00b      	b.n	80101c8 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80101b0:	f7ff fc36 	bl	800fa20 <LL_RCC_HSE_IsReady>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d008      	beq.n	80101cc <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80101ba:	4b31      	ldr	r3, [pc, #196]	@ (8010280 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 80101bc:	61fb      	str	r3, [r7, #28]
      break;
 80101be:	e005      	b.n	80101cc <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80101c0:	bf00      	nop
 80101c2:	e004      	b.n	80101ce <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80101c4:	bf00      	nop
 80101c6:	e002      	b.n	80101ce <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80101c8:	bf00      	nop
 80101ca:	e000      	b.n	80101ce <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80101cc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 80101e0:	f7ff fe16 	bl	800fe10 <LL_RCC_PLL2_GetM>
 80101e4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 80101e6:	f7ff fe05 	bl	800fdf4 <LL_RCC_PLL2_GetN>
 80101ea:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80101ec:	f7ff fdf0 	bl	800fdd0 <LL_RCC_PLL2FRACN_IsEnabled>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 80101f6:	f7ff fe49 	bl	800fe8c <LL_RCC_PLL2_GetFRACN>
 80101fa:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d035      	beq.n	801026e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8010202:	f7ff fda9 	bl	800fd58 <LL_RCC_PLL2P_IsEnabled>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00c      	beq.n	8010226 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 801020c:	f7ff fe0e 	bl	800fe2c <LL_RCC_PLL2_GetP>
 8010210:	4603      	mov	r3, r0
 8010212:	9300      	str	r3, [sp, #0]
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	6939      	ldr	r1, [r7, #16]
 801021a:	69f8      	ldr	r0, [r7, #28]
 801021c:	f000 f8cc 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010220:	4602      	mov	r2, r0
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8010226:	f7ff fdab 	bl	800fd80 <LL_RCC_PLL2Q_IsEnabled>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00c      	beq.n	801024a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8010230:	f7ff fe0c 	bl	800fe4c <LL_RCC_PLL2_GetQ>
 8010234:	4603      	mov	r3, r0
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	6939      	ldr	r1, [r7, #16]
 801023e:	69f8      	ldr	r0, [r7, #28]
 8010240:	f000 f8ba 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010244:	4602      	mov	r2, r0
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 801024a:	f7ff fdad 	bl	800fda8 <LL_RCC_PLL2R_IsEnabled>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00c      	beq.n	801026e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8010254:	f7ff fe0a 	bl	800fe6c <LL_RCC_PLL2_GetR>
 8010258:	4603      	mov	r3, r0
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	6939      	ldr	r1, [r7, #16]
 8010262:	69f8      	ldr	r0, [r7, #28]
 8010264:	f000 f8a8 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010268:	4602      	mov	r2, r0
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	609a      	str	r2, [r3, #8]
    }
  }
}
 801026e:	bf00      	nop
 8010270:	3720      	adds	r7, #32
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	03d09000 	.word	0x03d09000
 801027c:	003d0900 	.word	0x003d0900
 8010280:	017d7840 	.word	0x017d7840

08010284 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b08a      	sub	sp, #40	@ 0x28
 8010288:	af02      	add	r7, sp, #8
 801028a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 801028c:	2300      	movs	r3, #0
 801028e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8010290:	2300      	movs	r3, #0
 8010292:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8010294:	f7ff fc96 	bl	800fbc4 <LL_RCC_PLL_GetSource>
 8010298:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	2b02      	cmp	r3, #2
 801029e:	d01f      	beq.n	80102e0 <LL_RCC_GetPLL3ClockFreq+0x5c>
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d824      	bhi.n	80102f0 <LL_RCC_GetPLL3ClockFreq+0x6c>
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d003      	beq.n	80102b4 <LL_RCC_GetPLL3ClockFreq+0x30>
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d00e      	beq.n	80102d0 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80102b2:	e01d      	b.n	80102f0 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80102b4:	f7ff fbc8 	bl	800fa48 <LL_RCC_HSI_IsReady>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d01a      	beq.n	80102f4 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80102be:	f7ff fbd5 	bl	800fa6c <LL_RCC_HSI_GetDivider>
 80102c2:	4603      	mov	r3, r0
 80102c4:	08db      	lsrs	r3, r3, #3
 80102c6:	4a39      	ldr	r2, [pc, #228]	@ (80103ac <LL_RCC_GetPLL3ClockFreq+0x128>)
 80102c8:	fa22 f303 	lsr.w	r3, r2, r3
 80102cc:	61fb      	str	r3, [r7, #28]
      break;
 80102ce:	e011      	b.n	80102f4 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80102d0:	f7ff fbda 	bl	800fa88 <LL_RCC_CSI_IsReady>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00e      	beq.n	80102f8 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80102da:	4b35      	ldr	r3, [pc, #212]	@ (80103b0 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 80102dc:	61fb      	str	r3, [r7, #28]
      break;
 80102de:	e00b      	b.n	80102f8 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80102e0:	f7ff fb9e 	bl	800fa20 <LL_RCC_HSE_IsReady>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d008      	beq.n	80102fc <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80102ea:	4b32      	ldr	r3, [pc, #200]	@ (80103b4 <LL_RCC_GetPLL3ClockFreq+0x130>)
 80102ec:	61fb      	str	r3, [r7, #28]
      break;
 80102ee:	e005      	b.n	80102fc <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80102f0:	bf00      	nop
 80102f2:	e004      	b.n	80102fe <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80102f4:	bf00      	nop
 80102f6:	e002      	b.n	80102fe <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80102f8:	bf00      	nop
 80102fa:	e000      	b.n	80102fe <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80102fc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8010310:	f7ff fe3c 	bl	800ff8c <LL_RCC_PLL3_GetM>
 8010314:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8010316:	f7ff fe2b 	bl	800ff70 <LL_RCC_PLL3_GetN>
 801031a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 801031c:	f7ff fe14 	bl	800ff48 <LL_RCC_PLL3FRACN_IsEnabled>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d002      	beq.n	801032c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8010326:	f7ff fe6f 	bl	8010008 <LL_RCC_PLL3_GetFRACN>
 801032a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d038      	beq.n	80103a4 <LL_RCC_GetPLL3ClockFreq+0x120>
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d035      	beq.n	80103a4 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8010338:	f7ff fdca 	bl	800fed0 <LL_RCC_PLL3P_IsEnabled>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00c      	beq.n	801035c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8010342:	f7ff fe31 	bl	800ffa8 <LL_RCC_PLL3_GetP>
 8010346:	4603      	mov	r3, r0
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	6939      	ldr	r1, [r7, #16]
 8010350:	69f8      	ldr	r0, [r7, #28]
 8010352:	f000 f831 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 8010356:	4602      	mov	r2, r0
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 801035c:	f7ff fdcc 	bl	800fef8 <LL_RCC_PLL3Q_IsEnabled>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00c      	beq.n	8010380 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8010366:	f7ff fe2f 	bl	800ffc8 <LL_RCC_PLL3_GetQ>
 801036a:	4603      	mov	r3, r0
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	6939      	ldr	r1, [r7, #16]
 8010374:	69f8      	ldr	r0, [r7, #28]
 8010376:	f000 f81f 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 801037a:	4602      	mov	r2, r0
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8010380:	f7ff fdce 	bl	800ff20 <LL_RCC_PLL3R_IsEnabled>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00c      	beq.n	80103a4 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 801038a:	f7ff fe2d 	bl	800ffe8 <LL_RCC_PLL3_GetR>
 801038e:	4603      	mov	r3, r0
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	6939      	ldr	r1, [r7, #16]
 8010398:	69f8      	ldr	r0, [r7, #28]
 801039a:	f000 f80d 	bl	80103b8 <LL_RCC_CalcPLLClockFreq>
 801039e:	4602      	mov	r2, r0
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	609a      	str	r2, [r3, #8]
    }
  }
}
 80103a4:	bf00      	nop
 80103a6:	3720      	adds	r7, #32
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	03d09000 	.word	0x03d09000
 80103b0:	003d0900 	.word	0x003d0900
 80103b4:	017d7840 	.word	0x017d7840

080103b8 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	ee07 3a90 	vmov	s15, r3
 80103cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	ee07 3a90 	vmov	s15, r3
 80103d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	ee07 3a90 	vmov	s15, r3
 80103e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	ee07 3a90 	vmov	s15, r3
 80103ee:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80103f2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8010434 <LL_RCC_CalcPLLClockFreq+0x7c>
 80103f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010402:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8010406:	6a3b      	ldr	r3, [r7, #32]
 8010408:	ee07 3a90 	vmov	s15, r3
 801040c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010410:	edd7 6a05 	vldr	s13, [r7, #20]
 8010414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010418:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 801041c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010424:	ee17 3a90 	vmov	r3, s15
}
 8010428:	4618      	mov	r0, r3
 801042a:	371c      	adds	r7, #28
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	46000000 	.word	0x46000000

08010438 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8010440:	2300      	movs	r3, #0
 8010442:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff fbb1 	bl	800fbac <LL_RCC_GetUSARTClockSource>
 801044a:	4603      	mov	r3, r0
 801044c:	4a62      	ldr	r2, [pc, #392]	@ (80105d8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 801044e:	4293      	cmp	r3, r2
 8010450:	f000 80a9 	beq.w	80105a6 <LL_RCC_GetUSARTClockFreq+0x16e>
 8010454:	4a60      	ldr	r2, [pc, #384]	@ (80105d8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8010456:	4293      	cmp	r3, r2
 8010458:	f200 80ae 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 801045c:	4a5f      	ldr	r2, [pc, #380]	@ (80105dc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 801045e:	4293      	cmp	r3, r2
 8010460:	f000 80a1 	beq.w	80105a6 <LL_RCC_GetUSARTClockFreq+0x16e>
 8010464:	4a5d      	ldr	r2, [pc, #372]	@ (80105dc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8010466:	4293      	cmp	r3, r2
 8010468:	f200 80a6 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 801046c:	4a5c      	ldr	r2, [pc, #368]	@ (80105e0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 801046e:	4293      	cmp	r3, r2
 8010470:	f000 8091 	beq.w	8010596 <LL_RCC_GetUSARTClockFreq+0x15e>
 8010474:	4a5a      	ldr	r2, [pc, #360]	@ (80105e0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8010476:	4293      	cmp	r3, r2
 8010478:	f200 809e 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 801047c:	4a59      	ldr	r2, [pc, #356]	@ (80105e4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 801047e:	4293      	cmp	r3, r2
 8010480:	f000 8089 	beq.w	8010596 <LL_RCC_GetUSARTClockFreq+0x15e>
 8010484:	4a57      	ldr	r2, [pc, #348]	@ (80105e4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8010486:	4293      	cmp	r3, r2
 8010488:	f200 8096 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 801048c:	4a56      	ldr	r2, [pc, #344]	@ (80105e8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d073      	beq.n	801057a <LL_RCC_GetUSARTClockFreq+0x142>
 8010492:	4a55      	ldr	r2, [pc, #340]	@ (80105e8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8010494:	4293      	cmp	r3, r2
 8010496:	f200 808f 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 801049a:	4a54      	ldr	r2, [pc, #336]	@ (80105ec <LL_RCC_GetUSARTClockFreq+0x1b4>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d06c      	beq.n	801057a <LL_RCC_GetUSARTClockFreq+0x142>
 80104a0:	4a52      	ldr	r2, [pc, #328]	@ (80105ec <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	f200 8088 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 80104a8:	4a51      	ldr	r2, [pc, #324]	@ (80105f0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d058      	beq.n	8010560 <LL_RCC_GetUSARTClockFreq+0x128>
 80104ae:	4a50      	ldr	r2, [pc, #320]	@ (80105f0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	f200 8081 	bhi.w	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 80104b6:	4a4f      	ldr	r2, [pc, #316]	@ (80105f4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d051      	beq.n	8010560 <LL_RCC_GetUSARTClockFreq+0x128>
 80104bc:	4a4d      	ldr	r2, [pc, #308]	@ (80105f4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d87a      	bhi.n	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 80104c2:	4a4d      	ldr	r2, [pc, #308]	@ (80105f8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d03e      	beq.n	8010546 <LL_RCC_GetUSARTClockFreq+0x10e>
 80104c8:	4a4b      	ldr	r2, [pc, #300]	@ (80105f8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d874      	bhi.n	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 80104ce:	4a4b      	ldr	r2, [pc, #300]	@ (80105fc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d038      	beq.n	8010546 <LL_RCC_GetUSARTClockFreq+0x10e>
 80104d4:	4a49      	ldr	r2, [pc, #292]	@ (80105fc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d86e      	bhi.n	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
 80104da:	4a49      	ldr	r2, [pc, #292]	@ (8010600 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d01a      	beq.n	8010516 <LL_RCC_GetUSARTClockFreq+0xde>
 80104e0:	4a48      	ldr	r2, [pc, #288]	@ (8010604 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d168      	bne.n	80105b8 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80104e6:	f000 f895 	bl	8010614 <RCC_GetSystemClockFreq>
 80104ea:	4604      	mov	r4, r0
 80104ec:	f7ff fb00 	bl	800faf0 <LL_RCC_GetSysPrescaler>
 80104f0:	4603      	mov	r3, r0
 80104f2:	0a1b      	lsrs	r3, r3, #8
 80104f4:	f003 030f 	and.w	r3, r3, #15
 80104f8:	4a43      	ldr	r2, [pc, #268]	@ (8010608 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80104fa:	5cd3      	ldrb	r3, [r2, r3]
 80104fc:	f003 031f 	and.w	r3, r3, #31
 8010500:	fa24 f303 	lsr.w	r3, r4, r3
 8010504:	4618      	mov	r0, r3
 8010506:	f000 f8e7 	bl	80106d8 <RCC_GetHCLKClockFreq>
 801050a:	4603      	mov	r3, r0
 801050c:	4618      	mov	r0, r3
 801050e:	f000 f911 	bl	8010734 <RCC_GetPCLK2ClockFreq>
 8010512:	6178      	str	r0, [r7, #20]
      break;
 8010514:	e05b      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8010516:	f000 f87d 	bl	8010614 <RCC_GetSystemClockFreq>
 801051a:	4604      	mov	r4, r0
 801051c:	f7ff fae8 	bl	800faf0 <LL_RCC_GetSysPrescaler>
 8010520:	4603      	mov	r3, r0
 8010522:	0a1b      	lsrs	r3, r3, #8
 8010524:	f003 030f 	and.w	r3, r3, #15
 8010528:	4a37      	ldr	r2, [pc, #220]	@ (8010608 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 801052a:	5cd3      	ldrb	r3, [r2, r3]
 801052c:	f003 031f 	and.w	r3, r3, #31
 8010530:	fa24 f303 	lsr.w	r3, r4, r3
 8010534:	4618      	mov	r0, r3
 8010536:	f000 f8cf 	bl	80106d8 <RCC_GetHCLKClockFreq>
 801053a:	4603      	mov	r3, r0
 801053c:	4618      	mov	r0, r3
 801053e:	f000 f8e1 	bl	8010704 <RCC_GetPCLK1ClockFreq>
 8010542:	6178      	str	r0, [r7, #20]
      break;
 8010544:	e043      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8010546:	f7ff fbf3 	bl	800fd30 <LL_RCC_PLL2_IsReady>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d035      	beq.n	80105bc <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff fdfd 	bl	8010154 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	617b      	str	r3, [r7, #20]
      }
      break;
 801055e:	e02d      	b.n	80105bc <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8010560:	f7ff fca2 	bl	800fea8 <LL_RCC_PLL3_IsReady>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d02a      	beq.n	80105c0 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 801056a:	f107 0308 	add.w	r3, r7, #8
 801056e:	4618      	mov	r0, r3
 8010570:	f7ff fe88 	bl	8010284 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	617b      	str	r3, [r7, #20]
      }
      break;
 8010578:	e022      	b.n	80105c0 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 801057a:	f7ff fa65 	bl	800fa48 <LL_RCC_HSI_IsReady>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d01f      	beq.n	80105c4 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8010584:	f7ff fa72 	bl	800fa6c <LL_RCC_HSI_GetDivider>
 8010588:	4603      	mov	r3, r0
 801058a:	08db      	lsrs	r3, r3, #3
 801058c:	4a1f      	ldr	r2, [pc, #124]	@ (801060c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 801058e:	fa22 f303 	lsr.w	r3, r2, r3
 8010592:	617b      	str	r3, [r7, #20]
      }
      break;
 8010594:	e016      	b.n	80105c4 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8010596:	f7ff fa77 	bl	800fa88 <LL_RCC_CSI_IsReady>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d013      	beq.n	80105c8 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80105a0:	4b1b      	ldr	r3, [pc, #108]	@ (8010610 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80105a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80105a4:	e010      	b.n	80105c8 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80105a6:	f7ff fa83 	bl	800fab0 <LL_RCC_LSE_IsReady>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00d      	beq.n	80105cc <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80105b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105b4:	617b      	str	r3, [r7, #20]
      }
      break;
 80105b6:	e009      	b.n	80105cc <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 80105b8:	bf00      	nop
 80105ba:	e008      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80105bc:	bf00      	nop
 80105be:	e006      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80105c0:	bf00      	nop
 80105c2:	e004      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80105c4:	bf00      	nop
 80105c6:	e002      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80105c8:	bf00      	nop
 80105ca:	e000      	b.n	80105ce <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80105cc:	bf00      	nop
  }

  return usart_frequency;
 80105ce:	697b      	ldr	r3, [r7, #20]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	371c      	adds	r7, #28
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd90      	pop	{r4, r7, pc}
 80105d8:	07050308 	.word	0x07050308
 80105dc:	07050008 	.word	0x07050008
 80105e0:	07040308 	.word	0x07040308
 80105e4:	07040008 	.word	0x07040008
 80105e8:	07030308 	.word	0x07030308
 80105ec:	07030008 	.word	0x07030008
 80105f0:	07020308 	.word	0x07020308
 80105f4:	07020008 	.word	0x07020008
 80105f8:	07010308 	.word	0x07010308
 80105fc:	07010008 	.word	0x07010008
 8010600:	07000008 	.word	0x07000008
 8010604:	07000308 	.word	0x07000308
 8010608:	08017a18 	.word	0x08017a18
 801060c:	03d09000 	.word	0x03d09000
 8010610:	003d0900 	.word	0x003d0900

08010614 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 801061a:	2300      	movs	r3, #0
 801061c:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 801061e:	f7ff fa59 	bl	800fad4 <LL_RCC_GetSysClkSource>
 8010622:	4603      	mov	r3, r0
 8010624:	2b18      	cmp	r3, #24
 8010626:	d84b      	bhi.n	80106c0 <RCC_GetSystemClockFreq+0xac>
 8010628:	a201      	add	r2, pc, #4	@ (adr r2, 8010630 <RCC_GetSystemClockFreq+0x1c>)
 801062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062e:	bf00      	nop
 8010630:	08010695 	.word	0x08010695
 8010634:	080106c1 	.word	0x080106c1
 8010638:	080106c1 	.word	0x080106c1
 801063c:	080106c1 	.word	0x080106c1
 8010640:	080106c1 	.word	0x080106c1
 8010644:	080106c1 	.word	0x080106c1
 8010648:	080106c1 	.word	0x080106c1
 801064c:	080106c1 	.word	0x080106c1
 8010650:	080106a7 	.word	0x080106a7
 8010654:	080106c1 	.word	0x080106c1
 8010658:	080106c1 	.word	0x080106c1
 801065c:	080106c1 	.word	0x080106c1
 8010660:	080106c1 	.word	0x080106c1
 8010664:	080106c1 	.word	0x080106c1
 8010668:	080106c1 	.word	0x080106c1
 801066c:	080106c1 	.word	0x080106c1
 8010670:	080106ad 	.word	0x080106ad
 8010674:	080106c1 	.word	0x080106c1
 8010678:	080106c1 	.word	0x080106c1
 801067c:	080106c1 	.word	0x080106c1
 8010680:	080106c1 	.word	0x080106c1
 8010684:	080106c1 	.word	0x080106c1
 8010688:	080106c1 	.word	0x080106c1
 801068c:	080106c1 	.word	0x080106c1
 8010690:	080106b3 	.word	0x080106b3
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8010694:	f7ff f9ea 	bl	800fa6c <LL_RCC_HSI_GetDivider>
 8010698:	4603      	mov	r3, r0
 801069a:	08db      	lsrs	r3, r3, #3
 801069c:	4a0b      	ldr	r2, [pc, #44]	@ (80106cc <RCC_GetSystemClockFreq+0xb8>)
 801069e:	fa22 f303 	lsr.w	r3, r2, r3
 80106a2:	60fb      	str	r3, [r7, #12]
      break;
 80106a4:	e00d      	b.n	80106c2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80106a6:	4b0a      	ldr	r3, [pc, #40]	@ (80106d0 <RCC_GetSystemClockFreq+0xbc>)
 80106a8:	60fb      	str	r3, [r7, #12]
      break;
 80106aa:	e00a      	b.n	80106c2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80106ac:	4b09      	ldr	r3, [pc, #36]	@ (80106d4 <RCC_GetSystemClockFreq+0xc0>)
 80106ae:	60fb      	str	r3, [r7, #12]
      break;
 80106b0:	e007      	b.n	80106c2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80106b2:	463b      	mov	r3, r7
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff fcb5 	bl	8010024 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	60fb      	str	r3, [r7, #12]
      break;
 80106be:	e000      	b.n	80106c2 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80106c0:	bf00      	nop
  }

  return frequency;
 80106c2:	68fb      	ldr	r3, [r7, #12]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	03d09000 	.word	0x03d09000
 80106d0:	003d0900 	.word	0x003d0900
 80106d4:	017d7840 	.word	0x017d7840

080106d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80106e0:	f7ff fa14 	bl	800fb0c <LL_RCC_GetAHBPrescaler>
 80106e4:	4603      	mov	r3, r0
 80106e6:	f003 030f 	and.w	r3, r3, #15
 80106ea:	4a05      	ldr	r2, [pc, #20]	@ (8010700 <RCC_GetHCLKClockFreq+0x28>)
 80106ec:	5cd3      	ldrb	r3, [r2, r3]
 80106ee:	f003 031f 	and.w	r3, r3, #31
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	08017a18 	.word	0x08017a18

08010704 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 801070c:	f7ff fa0c 	bl	800fb28 <LL_RCC_GetAPB1Prescaler>
 8010710:	4603      	mov	r3, r0
 8010712:	091b      	lsrs	r3, r3, #4
 8010714:	f003 0307 	and.w	r3, r3, #7
 8010718:	4a05      	ldr	r2, [pc, #20]	@ (8010730 <RCC_GetPCLK1ClockFreq+0x2c>)
 801071a:	5cd3      	ldrb	r3, [r2, r3]
 801071c:	f003 031f 	and.w	r3, r3, #31
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	08017a18 	.word	0x08017a18

08010734 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 801073c:	f7ff fa02 	bl	800fb44 <LL_RCC_GetAPB2Prescaler>
 8010740:	4603      	mov	r3, r0
 8010742:	0a1b      	lsrs	r3, r3, #8
 8010744:	f003 0307 	and.w	r3, r3, #7
 8010748:	4a05      	ldr	r2, [pc, #20]	@ (8010760 <RCC_GetPCLK2ClockFreq+0x2c>)
 801074a:	5cd3      	ldrb	r3, [r2, r3]
 801074c:	f003 031f 	and.w	r3, r3, #31
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	08017a18 	.word	0x08017a18

08010764 <LL_TIM_SetPrescaler>:
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010774:	bf00      	nop
 8010776:	370c      	adds	r7, #12
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <LL_TIM_SetAutoReload>:
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010790:	bf00      	nop
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <LL_TIM_SetRepetitionCounter>:
{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80107ac:	bf00      	nop
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <LL_TIM_OC_SetCompareCH1>:
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	683a      	ldr	r2, [r7, #0]
 80107c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80107c8:	bf00      	nop
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <LL_TIM_OC_SetCompareCH2>:
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <LL_TIM_OC_SetCompareCH3>:
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <LL_TIM_OC_SetCompareCH4>:
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	683a      	ldr	r2, [r7, #0]
 801081a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801081c:	bf00      	nop
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <LL_TIM_OC_SetCompareCH5>:
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	683a      	ldr	r2, [r7, #0]
 801083a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 801083c:	bf00      	nop
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <LL_TIM_OC_SetCompareCH6>:
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	683a      	ldr	r2, [r7, #0]
 8010856:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	695b      	ldr	r3, [r3, #20]
 8010870:	f043 0201 	orr.w	r2, r3, #1
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	615a      	str	r2, [r3, #20]
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4a41      	ldr	r2, [pc, #260]	@ (801099c <LL_TIM_Init+0x118>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d013      	beq.n	80108c4 <LL_TIM_Init+0x40>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108a2:	d00f      	beq.n	80108c4 <LL_TIM_Init+0x40>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4a3e      	ldr	r2, [pc, #248]	@ (80109a0 <LL_TIM_Init+0x11c>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d00b      	beq.n	80108c4 <LL_TIM_Init+0x40>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4a3d      	ldr	r2, [pc, #244]	@ (80109a4 <LL_TIM_Init+0x120>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d007      	beq.n	80108c4 <LL_TIM_Init+0x40>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4a3c      	ldr	r2, [pc, #240]	@ (80109a8 <LL_TIM_Init+0x124>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d003      	beq.n	80108c4 <LL_TIM_Init+0x40>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a3b      	ldr	r2, [pc, #236]	@ (80109ac <LL_TIM_Init+0x128>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d106      	bne.n	80108d2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4a31      	ldr	r2, [pc, #196]	@ (801099c <LL_TIM_Init+0x118>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d027      	beq.n	801092a <LL_TIM_Init+0xa6>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108e0:	d023      	beq.n	801092a <LL_TIM_Init+0xa6>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a2e      	ldr	r2, [pc, #184]	@ (80109a0 <LL_TIM_Init+0x11c>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d01f      	beq.n	801092a <LL_TIM_Init+0xa6>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4a2d      	ldr	r2, [pc, #180]	@ (80109a4 <LL_TIM_Init+0x120>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d01b      	beq.n	801092a <LL_TIM_Init+0xa6>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a2c      	ldr	r2, [pc, #176]	@ (80109a8 <LL_TIM_Init+0x124>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d017      	beq.n	801092a <LL_TIM_Init+0xa6>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4a2b      	ldr	r2, [pc, #172]	@ (80109ac <LL_TIM_Init+0x128>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d013      	beq.n	801092a <LL_TIM_Init+0xa6>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a2a      	ldr	r2, [pc, #168]	@ (80109b0 <LL_TIM_Init+0x12c>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d00f      	beq.n	801092a <LL_TIM_Init+0xa6>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a29      	ldr	r2, [pc, #164]	@ (80109b4 <LL_TIM_Init+0x130>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d00b      	beq.n	801092a <LL_TIM_Init+0xa6>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a28      	ldr	r2, [pc, #160]	@ (80109b8 <LL_TIM_Init+0x134>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d007      	beq.n	801092a <LL_TIM_Init+0xa6>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a27      	ldr	r2, [pc, #156]	@ (80109bc <LL_TIM_Init+0x138>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d003      	beq.n	801092a <LL_TIM_Init+0xa6>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a26      	ldr	r2, [pc, #152]	@ (80109c0 <LL_TIM_Init+0x13c>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d106      	bne.n	8010938 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	4313      	orrs	r3, r2
 8010936:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7ff ff1b 	bl	8010780 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	4619      	mov	r1, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7ff ff07 	bl	8010764 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4a10      	ldr	r2, [pc, #64]	@ (801099c <LL_TIM_Init+0x118>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d00f      	beq.n	801097e <LL_TIM_Init+0xfa>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4a12      	ldr	r2, [pc, #72]	@ (80109ac <LL_TIM_Init+0x128>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d00b      	beq.n	801097e <LL_TIM_Init+0xfa>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4a11      	ldr	r2, [pc, #68]	@ (80109b0 <LL_TIM_Init+0x12c>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d007      	beq.n	801097e <LL_TIM_Init+0xfa>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4a10      	ldr	r2, [pc, #64]	@ (80109b4 <LL_TIM_Init+0x130>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d003      	beq.n	801097e <LL_TIM_Init+0xfa>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4a0f      	ldr	r2, [pc, #60]	@ (80109b8 <LL_TIM_Init+0x134>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d105      	bne.n	801098a <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff ff09 	bl	801079c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ff6a 	bl	8010864 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	40010000 	.word	0x40010000
 80109a0:	40000400 	.word	0x40000400
 80109a4:	40000800 	.word	0x40000800
 80109a8:	40000c00 	.word	0x40000c00
 80109ac:	40010400 	.word	0x40010400
 80109b0:	40014000 	.word	0x40014000
 80109b4:	40014400 	.word	0x40014400
 80109b8:	40014800 	.word	0x40014800
 80109bc:	4000e000 	.word	0x4000e000
 80109c0:	4000e400 	.word	0x4000e400

080109c4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b086      	sub	sp, #24
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109da:	d045      	beq.n	8010a68 <LL_TIM_OC_Init+0xa4>
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109e2:	d848      	bhi.n	8010a76 <LL_TIM_OC_Init+0xb2>
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109ea:	d036      	beq.n	8010a5a <LL_TIM_OC_Init+0x96>
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109f2:	d840      	bhi.n	8010a76 <LL_TIM_OC_Init+0xb2>
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109fa:	d027      	beq.n	8010a4c <LL_TIM_OC_Init+0x88>
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a02:	d838      	bhi.n	8010a76 <LL_TIM_OC_Init+0xb2>
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a0a:	d018      	beq.n	8010a3e <LL_TIM_OC_Init+0x7a>
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a12:	d830      	bhi.n	8010a76 <LL_TIM_OC_Init+0xb2>
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d003      	beq.n	8010a22 <LL_TIM_OC_Init+0x5e>
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	2b10      	cmp	r3, #16
 8010a1e:	d007      	beq.n	8010a30 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8010a20:	e029      	b.n	8010a76 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8010a22:	6879      	ldr	r1, [r7, #4]
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 f82d 	bl	8010a84 <OC1Config>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8010a2e:	e023      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8010a30:	6879      	ldr	r1, [r7, #4]
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f000 f8a6 	bl	8010b84 <OC2Config>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8010a3c:	e01c      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8010a3e:	6879      	ldr	r1, [r7, #4]
 8010a40:	68f8      	ldr	r0, [r7, #12]
 8010a42:	f000 f923 	bl	8010c8c <OC3Config>
 8010a46:	4603      	mov	r3, r0
 8010a48:	75fb      	strb	r3, [r7, #23]
      break;
 8010a4a:	e015      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8010a4c:	6879      	ldr	r1, [r7, #4]
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f000 f9a0 	bl	8010d94 <OC4Config>
 8010a54:	4603      	mov	r3, r0
 8010a56:	75fb      	strb	r3, [r7, #23]
      break;
 8010a58:	e00e      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f000 fa05 	bl	8010e6c <OC5Config>
 8010a62:	4603      	mov	r3, r0
 8010a64:	75fb      	strb	r3, [r7, #23]
      break;
 8010a66:	e007      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f000 fa62 	bl	8010f34 <OC6Config>
 8010a70:	4603      	mov	r3, r0
 8010a72:	75fb      	strb	r3, [r7, #23]
      break;
 8010a74:	e000      	b.n	8010a78 <LL_TIM_OC_Init+0xb4>
      break;
 8010a76:	bf00      	nop
  }

  return result;
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6a1b      	ldr	r3, [r3, #32]
 8010a92:	f023 0201 	bic.w	r2, r3, #1
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a1b      	ldr	r3, [r3, #32]
 8010a9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f023 0303 	bic.w	r3, r3, #3
 8010ab2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b6c <OC1Config+0xe8>)
 8010ab8:	4013      	ands	r3, r2
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	6812      	ldr	r2, [r2, #0]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	f023 0202 	bic.w	r2, r3, #2
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f023 0201 	bic.w	r2, r3, #1
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4a23      	ldr	r2, [pc, #140]	@ (8010b70 <OC1Config+0xec>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d00f      	beq.n	8010b06 <OC1Config+0x82>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4a22      	ldr	r2, [pc, #136]	@ (8010b74 <OC1Config+0xf0>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d00b      	beq.n	8010b06 <OC1Config+0x82>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4a21      	ldr	r2, [pc, #132]	@ (8010b78 <OC1Config+0xf4>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d007      	beq.n	8010b06 <OC1Config+0x82>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4a20      	ldr	r2, [pc, #128]	@ (8010b7c <OC1Config+0xf8>)
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d003      	beq.n	8010b06 <OC1Config+0x82>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4a1f      	ldr	r2, [pc, #124]	@ (8010b80 <OC1Config+0xfc>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d11e      	bne.n	8010b44 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f023 0208 	bic.w	r2, r3, #8
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	695b      	ldr	r3, [r3, #20]
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	4313      	orrs	r3, r2
 8010b14:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f023 0204 	bic.w	r2, r3, #4
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4313      	orrs	r3, r2
 8010b24:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	4313      	orrs	r3, r2
 8010b32:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	69db      	ldr	r3, [r3, #28]
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4313      	orrs	r3, r2
 8010b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	693a      	ldr	r2, [r7, #16]
 8010b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	4619      	mov	r1, r3
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fe2e 	bl	80107b8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	697a      	ldr	r2, [r7, #20]
 8010b60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	fffeff8f 	.word	0xfffeff8f
 8010b70:	40010000 	.word	0x40010000
 8010b74:	40010400 	.word	0x40010400
 8010b78:	40014000 	.word	0x40014000
 8010b7c:	40014400 	.word	0x40014400
 8010b80:	40014800 	.word	0x40014800

08010b84 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a1b      	ldr	r3, [r3, #32]
 8010b92:	f023 0210 	bic.w	r2, r3, #16
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6a1b      	ldr	r3, [r3, #32]
 8010b9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8010c74 <OC2Config+0xf0>)
 8010bb8:	4013      	ands	r3, r2
 8010bba:	683a      	ldr	r2, [r7, #0]
 8010bbc:	6812      	ldr	r2, [r2, #0]
 8010bbe:	0212      	lsls	r2, r2, #8
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	f023 0220 	bic.w	r2, r3, #32
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	011b      	lsls	r3, r3, #4
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	f023 0210 	bic.w	r2, r3, #16
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	011b      	lsls	r3, r3, #4
 8010be0:	4313      	orrs	r3, r2
 8010be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4a24      	ldr	r2, [pc, #144]	@ (8010c78 <OC2Config+0xf4>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d00f      	beq.n	8010c0c <OC2Config+0x88>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	4a23      	ldr	r2, [pc, #140]	@ (8010c7c <OC2Config+0xf8>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d00b      	beq.n	8010c0c <OC2Config+0x88>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	4a22      	ldr	r2, [pc, #136]	@ (8010c80 <OC2Config+0xfc>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d007      	beq.n	8010c0c <OC2Config+0x88>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4a21      	ldr	r2, [pc, #132]	@ (8010c84 <OC2Config+0x100>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d003      	beq.n	8010c0c <OC2Config+0x88>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4a20      	ldr	r2, [pc, #128]	@ (8010c88 <OC2Config+0x104>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d11f      	bne.n	8010c4c <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	019b      	lsls	r3, r3, #6
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	689b      	ldr	r3, [r3, #8]
 8010c26:	019b      	lsls	r3, r3, #6
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	693a      	ldr	r2, [r7, #16]
 8010c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff fdb8 	bl	80107d4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	697a      	ldr	r2, [r7, #20]
 8010c68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	feff8fff 	.word	0xfeff8fff
 8010c78:	40010000 	.word	0x40010000
 8010c7c:	40010400 	.word	0x40010400
 8010c80:	40014000 	.word	0x40014000
 8010c84:	40014400 	.word	0x40014400
 8010c88:	40014800 	.word	0x40014800

08010c8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a1b      	ldr	r3, [r3, #32]
 8010c9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	69db      	ldr	r3, [r3, #28]
 8010cb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f023 0303 	bic.w	r3, r3, #3
 8010cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8010d7c <OC3Config+0xf0>)
 8010cc0:	4013      	ands	r3, r2
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	6812      	ldr	r2, [r2, #0]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	021b      	lsls	r3, r3, #8
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	021b      	lsls	r3, r3, #8
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a24      	ldr	r2, [pc, #144]	@ (8010d80 <OC3Config+0xf4>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d00f      	beq.n	8010d12 <OC3Config+0x86>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4a23      	ldr	r2, [pc, #140]	@ (8010d84 <OC3Config+0xf8>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d00b      	beq.n	8010d12 <OC3Config+0x86>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4a22      	ldr	r2, [pc, #136]	@ (8010d88 <OC3Config+0xfc>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d007      	beq.n	8010d12 <OC3Config+0x86>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4a21      	ldr	r2, [pc, #132]	@ (8010d8c <OC3Config+0x100>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d003      	beq.n	8010d12 <OC3Config+0x86>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4a20      	ldr	r2, [pc, #128]	@ (8010d90 <OC3Config+0x104>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d11f      	bne.n	8010d52 <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	695b      	ldr	r3, [r3, #20]
 8010d1c:	029b      	lsls	r3, r3, #10
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	029b      	lsls	r3, r3, #10
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	699b      	ldr	r3, [r3, #24]
 8010d3c:	011b      	lsls	r3, r3, #4
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	69db      	ldr	r3, [r3, #28]
 8010d4c:	015b      	lsls	r3, r3, #5
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fd43 	bl	80107f0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	fffeff8f 	.word	0xfffeff8f
 8010d80:	40010000 	.word	0x40010000
 8010d84:	40010400 	.word	0x40010400
 8010d88:	40014000 	.word	0x40014000
 8010d8c:	40014400 	.word	0x40014400
 8010d90:	40014800 	.word	0x40014800

08010d94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6a1b      	ldr	r3, [r3, #32]
 8010da2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	69db      	ldr	r3, [r3, #28]
 8010dba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	4b23      	ldr	r3, [pc, #140]	@ (8010e54 <OC4Config+0xc0>)
 8010dc8:	4013      	ands	r3, r2
 8010dca:	683a      	ldr	r2, [r7, #0]
 8010dcc:	6812      	ldr	r2, [r2, #0]
 8010dce:	0212      	lsls	r2, r2, #8
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	031b      	lsls	r3, r3, #12
 8010de0:	4313      	orrs	r3, r2
 8010de2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	031b      	lsls	r3, r3, #12
 8010df0:	4313      	orrs	r3, r2
 8010df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4a18      	ldr	r2, [pc, #96]	@ (8010e58 <OC4Config+0xc4>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d00f      	beq.n	8010e1c <OC4Config+0x88>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a17      	ldr	r2, [pc, #92]	@ (8010e5c <OC4Config+0xc8>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d00b      	beq.n	8010e1c <OC4Config+0x88>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4a16      	ldr	r2, [pc, #88]	@ (8010e60 <OC4Config+0xcc>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d007      	beq.n	8010e1c <OC4Config+0x88>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a15      	ldr	r2, [pc, #84]	@ (8010e64 <OC4Config+0xd0>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d003      	beq.n	8010e1c <OC4Config+0x88>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4a14      	ldr	r2, [pc, #80]	@ (8010e68 <OC4Config+0xd4>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d107      	bne.n	8010e2c <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	699b      	ldr	r3, [r3, #24]
 8010e26:	019b      	lsls	r3, r3, #6
 8010e28:	4313      	orrs	r3, r2
 8010e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7ff fce4 	bl	801080c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	feff8fff 	.word	0xfeff8fff
 8010e58:	40010000 	.word	0x40010000
 8010e5c:	40010400 	.word	0x40010400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40014400 	.word	0x40014400
 8010e68:	40014800 	.word	0x40014800

08010e6c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a1b      	ldr	r3, [r3, #32]
 8010e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a1b      	ldr	r3, [r3, #32]
 8010e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e8c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8010e8e:	68ba      	ldr	r2, [r7, #8]
 8010e90:	4b22      	ldr	r3, [pc, #136]	@ (8010f1c <OC5Config+0xb0>)
 8010e92:	4013      	ands	r3, r2
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	6812      	ldr	r2, [r2, #0]
 8010e98:	4313      	orrs	r3, r2
 8010e9a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	041b      	lsls	r3, r3, #16
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	041b      	lsls	r3, r3, #16
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a18      	ldr	r2, [pc, #96]	@ (8010f20 <OC5Config+0xb4>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d00f      	beq.n	8010ee4 <OC5Config+0x78>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a17      	ldr	r2, [pc, #92]	@ (8010f24 <OC5Config+0xb8>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d00b      	beq.n	8010ee4 <OC5Config+0x78>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a16      	ldr	r2, [pc, #88]	@ (8010f28 <OC5Config+0xbc>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d007      	beq.n	8010ee4 <OC5Config+0x78>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a15      	ldr	r2, [pc, #84]	@ (8010f2c <OC5Config+0xc0>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d003      	beq.n	8010ee4 <OC5Config+0x78>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a14      	ldr	r2, [pc, #80]	@ (8010f30 <OC5Config+0xc4>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d109      	bne.n	8010ef8 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	021b      	lsls	r3, r3, #8
 8010ef2:	431a      	orrs	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	68ba      	ldr	r2, [r7, #8]
 8010efc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	4619      	mov	r1, r3
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7ff fc8f 	bl	8010828 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3710      	adds	r7, #16
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	fffeff8f 	.word	0xfffeff8f
 8010f20:	40010000 	.word	0x40010000
 8010f24:	40010400 	.word	0x40010400
 8010f28:	40014000 	.word	0x40014000
 8010f2c:	40014400 	.word	0x40014400
 8010f30:	40014800 	.word	0x40014800

08010f34 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6a1b      	ldr	r3, [r3, #32]
 8010f42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6a1b      	ldr	r3, [r3, #32]
 8010f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f54:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	4b22      	ldr	r3, [pc, #136]	@ (8010fe4 <OC6Config+0xb0>)
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	683a      	ldr	r2, [r7, #0]
 8010f5e:	6812      	ldr	r2, [r2, #0]
 8010f60:	0212      	lsls	r2, r2, #8
 8010f62:	4313      	orrs	r3, r2
 8010f64:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	051b      	lsls	r3, r3, #20
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	051b      	lsls	r3, r3, #20
 8010f82:	4313      	orrs	r3, r2
 8010f84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4a17      	ldr	r2, [pc, #92]	@ (8010fe8 <OC6Config+0xb4>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d00f      	beq.n	8010fae <OC6Config+0x7a>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	4a16      	ldr	r2, [pc, #88]	@ (8010fec <OC6Config+0xb8>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d00b      	beq.n	8010fae <OC6Config+0x7a>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4a15      	ldr	r2, [pc, #84]	@ (8010ff0 <OC6Config+0xbc>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d007      	beq.n	8010fae <OC6Config+0x7a>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	4a14      	ldr	r2, [pc, #80]	@ (8010ff4 <OC6Config+0xc0>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d003      	beq.n	8010fae <OC6Config+0x7a>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4a13      	ldr	r2, [pc, #76]	@ (8010ff8 <OC6Config+0xc4>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d109      	bne.n	8010fc2 <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	699b      	ldr	r3, [r3, #24]
 8010fba:	029b      	lsls	r3, r3, #10
 8010fbc:	431a      	orrs	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7ff fc3a 	bl	8010848 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010fda:	2300      	movs	r3, #0
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	feff8fff 	.word	0xfeff8fff
 8010fe8:	40010000 	.word	0x40010000
 8010fec:	40010400 	.word	0x40010400
 8010ff0:	40014000 	.word	0x40014000
 8010ff4:	40014400 	.word	0x40014400
 8010ff8:	40014800 	.word	0x40014800

08010ffc <LL_USART_IsEnabled>:
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	2b01      	cmp	r3, #1
 801100e:	d101      	bne.n	8011014 <LL_USART_IsEnabled+0x18>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <LL_USART_IsEnabled+0x1a>
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr

08011022 <LL_USART_SetPrescaler>:
{
 8011022:	b480      	push	{r7}
 8011024:	b083      	sub	sp, #12
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011030:	f023 030f 	bic.w	r3, r3, #15
 8011034:	683a      	ldr	r2, [r7, #0]
 8011036:	b292      	uxth	r2, r2
 8011038:	431a      	orrs	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801103e:	bf00      	nop
 8011040:	370c      	adds	r7, #12
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <LL_USART_SetStopBitsLength>:
{
 801104a:	b480      	push	{r7}
 801104c:	b083      	sub	sp, #12
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	431a      	orrs	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	605a      	str	r2, [r3, #4]
}
 8011064:	bf00      	nop
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <LL_USART_SetHWFlowCtrl>:
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	689b      	ldr	r3, [r3, #8]
 801107e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	431a      	orrs	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	609a      	str	r2, [r3, #8]
}
 801108a:	bf00      	nop
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
	...

08011098 <LL_USART_SetBaudRate>:
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
 80110a4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b0b      	cmp	r3, #11
 80110aa:	d83c      	bhi.n	8011126 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d039      	beq.n	8011126 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80110b8:	d122      	bne.n	8011100 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	461a      	mov	r2, r3
 80110c0:	4b1c      	ldr	r3, [pc, #112]	@ (8011134 <LL_USART_SetBaudRate+0x9c>)
 80110c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110c6:	68ba      	ldr	r2, [r7, #8]
 80110c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80110cc:	005a      	lsls	r2, r3, #1
 80110ce:	6a3b      	ldr	r3, [r7, #32]
 80110d0:	085b      	lsrs	r3, r3, #1
 80110d2:	441a      	add	r2, r3
 80110d4:	6a3b      	ldr	r3, [r7, #32]
 80110d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80110da:	b29b      	uxth	r3, r3
 80110dc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80110de:	697a      	ldr	r2, [r7, #20]
 80110e0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80110e4:	4013      	ands	r3, r2
 80110e6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	085b      	lsrs	r3, r3, #1
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	f003 0307 	and.w	r3, r3, #7
 80110f2:	693a      	ldr	r2, [r7, #16]
 80110f4:	4313      	orrs	r3, r2
 80110f6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	693a      	ldr	r2, [r7, #16]
 80110fc:	60da      	str	r2, [r3, #12]
}
 80110fe:	e012      	b.n	8011126 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	b2db      	uxtb	r3, r3
 8011104:	461a      	mov	r2, r3
 8011106:	4b0b      	ldr	r3, [pc, #44]	@ (8011134 <LL_USART_SetBaudRate+0x9c>)
 8011108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801110c:	68ba      	ldr	r2, [r7, #8]
 801110e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011112:	6a3b      	ldr	r3, [r7, #32]
 8011114:	085b      	lsrs	r3, r3, #1
 8011116:	441a      	add	r2, r3
 8011118:	6a3b      	ldr	r3, [r7, #32]
 801111a:	fbb2 f3f3 	udiv	r3, r2, r3
 801111e:	b29b      	uxth	r3, r3
 8011120:	461a      	mov	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	60da      	str	r2, [r3, #12]
}
 8011126:	bf00      	nop
 8011128:	371c      	adds	r7, #28
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	08017a28 	.word	0x08017a28

08011138 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af02      	add	r7, sp, #8
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8011146:	2300      	movs	r3, #0
 8011148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7ff ff56 	bl	8010ffc <LL_USART_IsEnabled>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	f040 8092 	bne.w	801127c <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	4b4a      	ldr	r3, [pc, #296]	@ (8011288 <LL_USART_Init+0x150>)
 801115e:	4013      	ands	r3, r2
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	6891      	ldr	r1, [r2, #8]
 8011164:	683a      	ldr	r2, [r7, #0]
 8011166:	6912      	ldr	r2, [r2, #16]
 8011168:	4311      	orrs	r1, r2
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	6952      	ldr	r2, [r2, #20]
 801116e:	4311      	orrs	r1, r2
 8011170:	683a      	ldr	r2, [r7, #0]
 8011172:	69d2      	ldr	r2, [r2, #28]
 8011174:	430a      	orrs	r2, r1
 8011176:	431a      	orrs	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	4619      	mov	r1, r3
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff ff61 	bl	801104a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	4619      	mov	r1, r3
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f7ff ff6e 	bl	8011070 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4a3d      	ldr	r2, [pc, #244]	@ (801128c <LL_USART_Init+0x154>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d104      	bne.n	80111a6 <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801119c:	483c      	ldr	r0, [pc, #240]	@ (8011290 <LL_USART_Init+0x158>)
 801119e:	f7ff f94b 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111a2:	60b8      	str	r0, [r7, #8]
 80111a4:	e04f      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4a3a      	ldr	r2, [pc, #232]	@ (8011294 <LL_USART_Init+0x15c>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d104      	bne.n	80111b8 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80111ae:	483a      	ldr	r0, [pc, #232]	@ (8011298 <LL_USART_Init+0x160>)
 80111b0:	f7ff f942 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111b4:	60b8      	str	r0, [r7, #8]
 80111b6:	e046      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a38      	ldr	r2, [pc, #224]	@ (801129c <LL_USART_Init+0x164>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d104      	bne.n	80111ca <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80111c0:	4835      	ldr	r0, [pc, #212]	@ (8011298 <LL_USART_Init+0x160>)
 80111c2:	f7ff f939 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111c6:	60b8      	str	r0, [r7, #8]
 80111c8:	e03d      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a34      	ldr	r2, [pc, #208]	@ (80112a0 <LL_USART_Init+0x168>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d104      	bne.n	80111dc <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80111d2:	4831      	ldr	r0, [pc, #196]	@ (8011298 <LL_USART_Init+0x160>)
 80111d4:	f7ff f930 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111d8:	60b8      	str	r0, [r7, #8]
 80111da:	e034      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4a31      	ldr	r2, [pc, #196]	@ (80112a4 <LL_USART_Init+0x16c>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d104      	bne.n	80111ee <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80111e4:	482c      	ldr	r0, [pc, #176]	@ (8011298 <LL_USART_Init+0x160>)
 80111e6:	f7ff f927 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111ea:	60b8      	str	r0, [r7, #8]
 80111ec:	e02b      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4a2d      	ldr	r2, [pc, #180]	@ (80112a8 <LL_USART_Init+0x170>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d104      	bne.n	8011200 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80111f6:	4826      	ldr	r0, [pc, #152]	@ (8011290 <LL_USART_Init+0x158>)
 80111f8:	f7ff f91e 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 80111fc:	60b8      	str	r0, [r7, #8]
 80111fe:	e022      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	4a2a      	ldr	r2, [pc, #168]	@ (80112ac <LL_USART_Init+0x174>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d104      	bne.n	8011212 <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011208:	4823      	ldr	r0, [pc, #140]	@ (8011298 <LL_USART_Init+0x160>)
 801120a:	f7ff f915 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 801120e:	60b8      	str	r0, [r7, #8]
 8011210:	e019      	b.n	8011246 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a26      	ldr	r2, [pc, #152]	@ (80112b0 <LL_USART_Init+0x178>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d104      	bne.n	8011224 <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 801121a:	481f      	ldr	r0, [pc, #124]	@ (8011298 <LL_USART_Init+0x160>)
 801121c:	f7ff f90c 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 8011220:	60b8      	str	r0, [r7, #8]
 8011222:	e010      	b.n	8011246 <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a23      	ldr	r2, [pc, #140]	@ (80112b4 <LL_USART_Init+0x17c>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d104      	bne.n	8011236 <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801122c:	4818      	ldr	r0, [pc, #96]	@ (8011290 <LL_USART_Init+0x158>)
 801122e:	f7ff f903 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 8011232:	60b8      	str	r0, [r7, #8]
 8011234:	e007      	b.n	8011246 <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4a1f      	ldr	r2, [pc, #124]	@ (80112b8 <LL_USART_Init+0x180>)
 801123a:	4293      	cmp	r3, r2
 801123c:	d103      	bne.n	8011246 <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801123e:	4814      	ldr	r0, [pc, #80]	@ (8011290 <LL_USART_Init+0x158>)
 8011240:	f7ff f8fa 	bl	8010438 <LL_RCC_GetUSARTClockFreq>
 8011244:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d011      	beq.n	8011270 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00d      	beq.n	8011270 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8011254:	2300      	movs	r3, #0
 8011256:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	460b      	mov	r3, r1
 8011268:	68b9      	ldr	r1, [r7, #8]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7ff ff14 	bl	8011098 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff fed3 	bl	8011022 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 801127c:	7bfb      	ldrb	r3, [r7, #15]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	efff69f3 	.word	0xefff69f3
 801128c:	40011000 	.word	0x40011000
 8011290:	07000308 	.word	0x07000308
 8011294:	40004400 	.word	0x40004400
 8011298:	07000008 	.word	0x07000008
 801129c:	40004800 	.word	0x40004800
 80112a0:	40004c00 	.word	0x40004c00
 80112a4:	40005000 	.word	0x40005000
 80112a8:	40011400 	.word	0x40011400
 80112ac:	40007800 	.word	0x40007800
 80112b0:	40007c00 	.word	0x40007c00
 80112b4:	40011800 	.word	0x40011800
 80112b8:	40011c00 	.word	0x40011c00

080112bc <__NVIC_SetPriority>:
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	4603      	mov	r3, r0
 80112c4:	6039      	str	r1, [r7, #0]
 80112c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80112c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	db0a      	blt.n	80112e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	490c      	ldr	r1, [pc, #48]	@ (8011308 <__NVIC_SetPriority+0x4c>)
 80112d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112da:	0112      	lsls	r2, r2, #4
 80112dc:	b2d2      	uxtb	r2, r2
 80112de:	440b      	add	r3, r1
 80112e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80112e4:	e00a      	b.n	80112fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	4908      	ldr	r1, [pc, #32]	@ (801130c <__NVIC_SetPriority+0x50>)
 80112ec:	88fb      	ldrh	r3, [r7, #6]
 80112ee:	f003 030f 	and.w	r3, r3, #15
 80112f2:	3b04      	subs	r3, #4
 80112f4:	0112      	lsls	r2, r2, #4
 80112f6:	b2d2      	uxtb	r2, r2
 80112f8:	440b      	add	r3, r1
 80112fa:	761a      	strb	r2, [r3, #24]
}
 80112fc:	bf00      	nop
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr
 8011308:	e000e100 	.word	0xe000e100
 801130c:	e000ed00 	.word	0xe000ed00

08011310 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011314:	4b05      	ldr	r3, [pc, #20]	@ (801132c <SysTick_Handler+0x1c>)
 8011316:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011318:	f002 f98c 	bl	8013634 <xTaskGetSchedulerState>
 801131c:	4603      	mov	r3, r0
 801131e:	2b01      	cmp	r3, #1
 8011320:	d001      	beq.n	8011326 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011322:	f003 f881 	bl	8014428 <xPortSysTickHandler>
  }
}
 8011326:	bf00      	nop
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	e000e010 	.word	0xe000e010

08011330 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011330:	b580      	push	{r7, lr}
 8011332:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011334:	2100      	movs	r1, #0
 8011336:	f06f 0004 	mvn.w	r0, #4
 801133a:	f7ff ffbf 	bl	80112bc <__NVIC_SetPriority>
#endif
}
 801133e:	bf00      	nop
 8011340:	bd80      	pop	{r7, pc}
	...

08011344 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801134a:	f3ef 8305 	mrs	r3, IPSR
 801134e:	603b      	str	r3, [r7, #0]
  return(result);
 8011350:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011352:	2b00      	cmp	r3, #0
 8011354:	d003      	beq.n	801135e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011356:	f06f 0305 	mvn.w	r3, #5
 801135a:	607b      	str	r3, [r7, #4]
 801135c:	e00c      	b.n	8011378 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801135e:	4b0a      	ldr	r3, [pc, #40]	@ (8011388 <osKernelInitialize+0x44>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d105      	bne.n	8011372 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011366:	4b08      	ldr	r3, [pc, #32]	@ (8011388 <osKernelInitialize+0x44>)
 8011368:	2201      	movs	r2, #1
 801136a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801136c:	2300      	movs	r3, #0
 801136e:	607b      	str	r3, [r7, #4]
 8011370:	e002      	b.n	8011378 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011378:	687b      	ldr	r3, [r7, #4]
}
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	24000e98 	.word	0x24000e98

0801138c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011392:	f3ef 8305 	mrs	r3, IPSR
 8011396:	603b      	str	r3, [r7, #0]
  return(result);
 8011398:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801139a:	2b00      	cmp	r3, #0
 801139c:	d003      	beq.n	80113a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 801139e:	f06f 0305 	mvn.w	r3, #5
 80113a2:	607b      	str	r3, [r7, #4]
 80113a4:	e010      	b.n	80113c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80113a6:	4b0b      	ldr	r3, [pc, #44]	@ (80113d4 <osKernelStart+0x48>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d109      	bne.n	80113c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80113ae:	f7ff ffbf 	bl	8011330 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80113b2:	4b08      	ldr	r3, [pc, #32]	@ (80113d4 <osKernelStart+0x48>)
 80113b4:	2202      	movs	r2, #2
 80113b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113b8:	f001 fcd8 	bl	8012d6c <vTaskStartScheduler>
      stat = osOK;
 80113bc:	2300      	movs	r3, #0
 80113be:	607b      	str	r3, [r7, #4]
 80113c0:	e002      	b.n	80113c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80113c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80113c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80113c8:	687b      	ldr	r3, [r7, #4]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	24000e98 	.word	0x24000e98

080113d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08e      	sub	sp, #56	@ 0x38
 80113dc:	af04      	add	r7, sp, #16
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80113e4:	2300      	movs	r3, #0
 80113e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113e8:	f3ef 8305 	mrs	r3, IPSR
 80113ec:	617b      	str	r3, [r7, #20]
  return(result);
 80113ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d17e      	bne.n	80114f2 <osThreadNew+0x11a>
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d07b      	beq.n	80114f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80113fa:	2380      	movs	r3, #128	@ 0x80
 80113fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80113fe:	2318      	movs	r3, #24
 8011400:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011402:	2300      	movs	r3, #0
 8011404:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8011406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801140a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d045      	beq.n	801149e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d002      	beq.n	8011420 <osThreadNew+0x48>
        name = attr->name;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	699b      	ldr	r3, [r3, #24]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d008      	beq.n	8011446 <osThreadNew+0x6e>
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	2b38      	cmp	r3, #56	@ 0x38
 8011438:	d805      	bhi.n	8011446 <osThreadNew+0x6e>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <osThreadNew+0x72>
        return (NULL);
 8011446:	2300      	movs	r3, #0
 8011448:	e054      	b.n	80114f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	695b      	ldr	r3, [r3, #20]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d003      	beq.n	801145a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	695b      	ldr	r3, [r3, #20]
 8011456:	089b      	lsrs	r3, r3, #2
 8011458:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00e      	beq.n	8011480 <osThreadNew+0xa8>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	2ba7      	cmp	r3, #167	@ 0xa7
 8011468:	d90a      	bls.n	8011480 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801146e:	2b00      	cmp	r3, #0
 8011470:	d006      	beq.n	8011480 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	695b      	ldr	r3, [r3, #20]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d002      	beq.n	8011480 <osThreadNew+0xa8>
        mem = 1;
 801147a:	2301      	movs	r3, #1
 801147c:	61bb      	str	r3, [r7, #24]
 801147e:	e010      	b.n	80114a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	689b      	ldr	r3, [r3, #8]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d10c      	bne.n	80114a2 <osThreadNew+0xca>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d108      	bne.n	80114a2 <osThreadNew+0xca>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d104      	bne.n	80114a2 <osThreadNew+0xca>
          mem = 0;
 8011498:	2300      	movs	r3, #0
 801149a:	61bb      	str	r3, [r7, #24]
 801149c:	e001      	b.n	80114a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d110      	bne.n	80114ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114b0:	9202      	str	r2, [sp, #8]
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	6a3a      	ldr	r2, [r7, #32]
 80114bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f001 f87c 	bl	80125bc <xTaskCreateStatic>
 80114c4:	4603      	mov	r3, r0
 80114c6:	613b      	str	r3, [r7, #16]
 80114c8:	e013      	b.n	80114f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d110      	bne.n	80114f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	f107 0310 	add.w	r3, r7, #16
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f001 f8ca 	bl	801267c <xTaskCreate>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d001      	beq.n	80114f2 <osThreadNew+0x11a>
            hTask = NULL;
 80114ee:	2300      	movs	r3, #0
 80114f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80114f2:	693b      	ldr	r3, [r7, #16]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3728      	adds	r7, #40	@ 0x28
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011508:	f3ef 8305 	mrs	r3, IPSR
 801150c:	60fb      	str	r3, [r7, #12]
  return(result);
 801150e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011510:	2b00      	cmp	r3, #0
 8011512:	d003      	beq.n	801151c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011514:	f06f 0305 	mvn.w	r3, #5
 8011518:	617b      	str	r3, [r7, #20]
 801151a:	e00b      	b.n	8011534 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d103      	bne.n	801152a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8011522:	f06f 0303 	mvn.w	r3, #3
 8011526:	617b      	str	r3, [r7, #20]
 8011528:	e004      	b.n	8011534 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801152a:	2300      	movs	r3, #0
 801152c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801152e:	6938      	ldr	r0, [r7, #16]
 8011530:	f001 fb14 	bl	8012b5c <vTaskSuspend>
  }

  return (stat);
 8011534:	697b      	ldr	r3, [r7, #20]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3718      	adds	r7, #24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 801153e:	b580      	push	{r7, lr}
 8011540:	b086      	sub	sp, #24
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801154a:	f3ef 8305 	mrs	r3, IPSR
 801154e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011550:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011552:	2b00      	cmp	r3, #0
 8011554:	d003      	beq.n	801155e <osThreadResume+0x20>
    stat = osErrorISR;
 8011556:	f06f 0305 	mvn.w	r3, #5
 801155a:	617b      	str	r3, [r7, #20]
 801155c:	e00b      	b.n	8011576 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d103      	bne.n	801156c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8011564:	f06f 0303 	mvn.w	r3, #3
 8011568:	617b      	str	r3, [r7, #20]
 801156a:	e004      	b.n	8011576 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8011570:	6938      	ldr	r0, [r7, #16]
 8011572:	f001 fb9b 	bl	8012cac <vTaskResume>
  }

  return (stat);
 8011576:	697b      	ldr	r3, [r7, #20]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801158c:	f3ef 8305 	mrs	r3, IPSR
 8011590:	60bb      	str	r3, [r7, #8]
  return(result);
 8011592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011598:	f06f 0305 	mvn.w	r3, #5
 801159c:	617b      	str	r3, [r7, #20]
 801159e:	e017      	b.n	80115d0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d103      	bne.n	80115ae <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80115a6:	f06f 0303 	mvn.w	r3, #3
 80115aa:	617b      	str	r3, [r7, #20]
 80115ac:	e010      	b.n	80115d0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80115ae:	6938      	ldr	r0, [r7, #16]
 80115b0:	f001 fa6c 	bl	8012a8c <eTaskGetState>
 80115b4:	4603      	mov	r3, r0
 80115b6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	2b04      	cmp	r3, #4
 80115bc:	d005      	beq.n	80115ca <osThreadTerminate+0x4a>
      stat = osOK;
 80115be:	2300      	movs	r3, #0
 80115c0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80115c2:	6938      	ldr	r0, [r7, #16]
 80115c4:	f001 f9b8 	bl	8012938 <vTaskDelete>
 80115c8:	e002      	b.n	80115d0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80115ca:	f06f 0302 	mvn.w	r3, #2
 80115ce:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80115d0:	697b      	ldr	r3, [r7, #20]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115e2:	f3ef 8305 	mrs	r3, IPSR
 80115e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80115e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d003      	beq.n	80115f6 <osDelay+0x1c>
    stat = osErrorISR;
 80115ee:	f06f 0305 	mvn.w	r3, #5
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	e007      	b.n	8011606 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d002      	beq.n	8011606 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f001 fa0d 	bl	8012a20 <vTaskDelay>
    }
  }

  return (stat);
 8011606:	68fb      	ldr	r3, [r7, #12]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	4a07      	ldr	r2, [pc, #28]	@ (801163c <vApplicationGetIdleTaskMemory+0x2c>)
 8011620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	4a06      	ldr	r2, [pc, #24]	@ (8011640 <vApplicationGetIdleTaskMemory+0x30>)
 8011626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2280      	movs	r2, #128	@ 0x80
 801162c:	601a      	str	r2, [r3, #0]
}
 801162e:	bf00      	nop
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop
 801163c:	24000e9c 	.word	0x24000e9c
 8011640:	24000f44 	.word	0x24000f44

08011644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	4a07      	ldr	r2, [pc, #28]	@ (8011670 <vApplicationGetTimerTaskMemory+0x2c>)
 8011654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	4a06      	ldr	r2, [pc, #24]	@ (8011674 <vApplicationGetTimerTaskMemory+0x30>)
 801165a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011662:	601a      	str	r2, [r3, #0]
}
 8011664:	bf00      	nop
 8011666:	3714      	adds	r7, #20
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr
 8011670:	24001144 	.word	0x24001144
 8011674:	240011ec 	.word	0x240011ec

08011678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f103 0208 	add.w	r2, r3, #8
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f103 0208 	add.w	r2, r3, #8
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f103 0208 	add.w	r2, r3, #8
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80116ac:	bf00      	nop
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116c6:	bf00      	nop
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116d2:	b480      	push	{r7}
 80116d4:	b085      	sub	sp, #20
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	689a      	ldr	r2, [r3, #8]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	683a      	ldr	r2, [r7, #0]
 80116f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	601a      	str	r2, [r3, #0]
}
 801170e:	bf00      	nop
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801171a:	b480      	push	{r7}
 801171c:	b085      	sub	sp, #20
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
 8011722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011730:	d103      	bne.n	801173a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	60fb      	str	r3, [r7, #12]
 8011738:	e00c      	b.n	8011754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3308      	adds	r3, #8
 801173e:	60fb      	str	r3, [r7, #12]
 8011740:	e002      	b.n	8011748 <vListInsert+0x2e>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	60fb      	str	r3, [r7, #12]
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	429a      	cmp	r2, r3
 8011752:	d2f6      	bcs.n	8011742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	685a      	ldr	r2, [r3, #4]
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	683a      	ldr	r2, [r7, #0]
 8011762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	1c5a      	adds	r2, r3, #1
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	601a      	str	r2, [r3, #0]
}
 8011780:	bf00      	nop
 8011782:	3714      	adds	r7, #20
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr

0801178c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	6892      	ldr	r2, [r2, #8]
 80117a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	6852      	ldr	r2, [r2, #4]
 80117ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d103      	bne.n	80117c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	689a      	ldr	r2, [r3, #8]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	1e5a      	subs	r2, r3, #1
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3714      	adds	r7, #20
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10b      	bne.n	801180c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011806:	bf00      	nop
 8011808:	bf00      	nop
 801180a:	e7fd      	b.n	8011808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801180c:	f002 fd7c 	bl	8014308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011818:	68f9      	ldr	r1, [r7, #12]
 801181a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801181c:	fb01 f303 	mul.w	r3, r1, r3
 8011820:	441a      	add	r2, r3
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2200      	movs	r2, #0
 801182a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801183c:	3b01      	subs	r3, #1
 801183e:	68f9      	ldr	r1, [r7, #12]
 8011840:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011842:	fb01 f303 	mul.w	r3, r1, r3
 8011846:	441a      	add	r2, r3
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	22ff      	movs	r2, #255	@ 0xff
 8011850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	22ff      	movs	r2, #255	@ 0xff
 8011858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d114      	bne.n	801188c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d01a      	beq.n	80118a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	3310      	adds	r3, #16
 801186e:	4618      	mov	r0, r3
 8011870:	f001 fd1a 	bl	80132a8 <xTaskRemoveFromEventList>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d012      	beq.n	80118a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801187a:	4b0d      	ldr	r3, [pc, #52]	@ (80118b0 <xQueueGenericReset+0xd0>)
 801187c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011880:	601a      	str	r2, [r3, #0]
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	f3bf 8f6f 	isb	sy
 801188a:	e009      	b.n	80118a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	3310      	adds	r3, #16
 8011890:	4618      	mov	r0, r3
 8011892:	f7ff fef1 	bl	8011678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	3324      	adds	r3, #36	@ 0x24
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff feec 	bl	8011678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80118a0:	f002 fd64 	bl	801436c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80118a4:	2301      	movs	r3, #1
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	e000ed04 	.word	0xe000ed04

080118b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b08e      	sub	sp, #56	@ 0x38
 80118b8:	af02      	add	r7, sp, #8
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d10b      	bne.n	80118e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80118c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118cc:	f383 8811 	msr	BASEPRI, r3
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80118da:	bf00      	nop
 80118dc:	bf00      	nop
 80118de:	e7fd      	b.n	80118dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10b      	bne.n	80118fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80118e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80118f8:	bf00      	nop
 80118fa:	bf00      	nop
 80118fc:	e7fd      	b.n	80118fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d002      	beq.n	801190a <xQueueGenericCreateStatic+0x56>
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d001      	beq.n	801190e <xQueueGenericCreateStatic+0x5a>
 801190a:	2301      	movs	r3, #1
 801190c:	e000      	b.n	8011910 <xQueueGenericCreateStatic+0x5c>
 801190e:	2300      	movs	r3, #0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10b      	bne.n	801192c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8011914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	623b      	str	r3, [r7, #32]
}
 8011926:	bf00      	nop
 8011928:	bf00      	nop
 801192a:	e7fd      	b.n	8011928 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d102      	bne.n	8011938 <xQueueGenericCreateStatic+0x84>
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <xQueueGenericCreateStatic+0x88>
 8011938:	2301      	movs	r3, #1
 801193a:	e000      	b.n	801193e <xQueueGenericCreateStatic+0x8a>
 801193c:	2300      	movs	r3, #0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d10b      	bne.n	801195a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8011942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011946:	f383 8811 	msr	BASEPRI, r3
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	61fb      	str	r3, [r7, #28]
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop
 8011958:	e7fd      	b.n	8011956 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801195a:	2350      	movs	r3, #80	@ 0x50
 801195c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2b50      	cmp	r3, #80	@ 0x50
 8011962:	d00b      	beq.n	801197c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8011964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	61bb      	str	r3, [r7, #24]
}
 8011976:	bf00      	nop
 8011978:	bf00      	nop
 801197a:	e7fd      	b.n	8011978 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801197c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00d      	beq.n	80119a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801198a:	2201      	movs	r2, #1
 801198c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011990:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	4613      	mov	r3, r2
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	68b9      	ldr	r1, [r7, #8]
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f000 f840 	bl	8011a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80119a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3730      	adds	r7, #48	@ 0x30
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b08a      	sub	sp, #40	@ 0x28
 80119b2:	af02      	add	r7, sp, #8
 80119b4:	60f8      	str	r0, [r7, #12]
 80119b6:	60b9      	str	r1, [r7, #8]
 80119b8:	4613      	mov	r3, r2
 80119ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d10b      	bne.n	80119da <xQueueGenericCreate+0x2c>
	__asm volatile
 80119c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119c6:	f383 8811 	msr	BASEPRI, r3
 80119ca:	f3bf 8f6f 	isb	sy
 80119ce:	f3bf 8f4f 	dsb	sy
 80119d2:	613b      	str	r3, [r7, #16]
}
 80119d4:	bf00      	nop
 80119d6:	bf00      	nop
 80119d8:	e7fd      	b.n	80119d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	fb02 f303 	mul.w	r3, r2, r3
 80119e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	3350      	adds	r3, #80	@ 0x50
 80119e8:	4618      	mov	r0, r3
 80119ea:	f002 fdaf 	bl	801454c <pvPortMalloc>
 80119ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d011      	beq.n	8011a1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	3350      	adds	r3, #80	@ 0x50
 80119fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a08:	79fa      	ldrb	r2, [r7, #7]
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	68b9      	ldr	r1, [r7, #8]
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f000 f805 	bl	8011a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3720      	adds	r7, #32
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
 8011a30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d103      	bne.n	8011a40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	69ba      	ldr	r2, [r7, #24]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	e002      	b.n	8011a46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	68ba      	ldr	r2, [r7, #8]
 8011a50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a52:	2101      	movs	r1, #1
 8011a54:	69b8      	ldr	r0, [r7, #24]
 8011a56:	f7ff fec3 	bl	80117e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	78fa      	ldrb	r2, [r7, #3]
 8011a5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011a62:	bf00      	nop
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b08e      	sub	sp, #56	@ 0x38
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10b      	bne.n	8011aa0 <xQueueGenericSend+0x34>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011a9a:	bf00      	nop
 8011a9c:	bf00      	nop
 8011a9e:	e7fd      	b.n	8011a9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d103      	bne.n	8011aae <xQueueGenericSend+0x42>
 8011aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d101      	bne.n	8011ab2 <xQueueGenericSend+0x46>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e000      	b.n	8011ab4 <xQueueGenericSend+0x48>
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10b      	bne.n	8011ad0 <xQueueGenericSend+0x64>
	__asm volatile
 8011ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011abc:	f383 8811 	msr	BASEPRI, r3
 8011ac0:	f3bf 8f6f 	isb	sy
 8011ac4:	f3bf 8f4f 	dsb	sy
 8011ac8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011aca:	bf00      	nop
 8011acc:	bf00      	nop
 8011ace:	e7fd      	b.n	8011acc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b02      	cmp	r3, #2
 8011ad4:	d103      	bne.n	8011ade <xQueueGenericSend+0x72>
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d101      	bne.n	8011ae2 <xQueueGenericSend+0x76>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e000      	b.n	8011ae4 <xQueueGenericSend+0x78>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10b      	bne.n	8011b00 <xQueueGenericSend+0x94>
	__asm volatile
 8011ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aec:	f383 8811 	msr	BASEPRI, r3
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	623b      	str	r3, [r7, #32]
}
 8011afa:	bf00      	nop
 8011afc:	bf00      	nop
 8011afe:	e7fd      	b.n	8011afc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b00:	f001 fd98 	bl	8013634 <xTaskGetSchedulerState>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d102      	bne.n	8011b10 <xQueueGenericSend+0xa4>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d101      	bne.n	8011b14 <xQueueGenericSend+0xa8>
 8011b10:	2301      	movs	r3, #1
 8011b12:	e000      	b.n	8011b16 <xQueueGenericSend+0xaa>
 8011b14:	2300      	movs	r3, #0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d10b      	bne.n	8011b32 <xQueueGenericSend+0xc6>
	__asm volatile
 8011b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1e:	f383 8811 	msr	BASEPRI, r3
 8011b22:	f3bf 8f6f 	isb	sy
 8011b26:	f3bf 8f4f 	dsb	sy
 8011b2a:	61fb      	str	r3, [r7, #28]
}
 8011b2c:	bf00      	nop
 8011b2e:	bf00      	nop
 8011b30:	e7fd      	b.n	8011b2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b32:	f002 fbe9 	bl	8014308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d302      	bcc.n	8011b48 <xQueueGenericSend+0xdc>
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d129      	bne.n	8011b9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b48:	683a      	ldr	r2, [r7, #0]
 8011b4a:	68b9      	ldr	r1, [r7, #8]
 8011b4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b4e:	f000 fbc7 	bl	80122e0 <prvCopyDataToQueue>
 8011b52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d010      	beq.n	8011b7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b5e:	3324      	adds	r3, #36	@ 0x24
 8011b60:	4618      	mov	r0, r3
 8011b62:	f001 fba1 	bl	80132a8 <xTaskRemoveFromEventList>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d013      	beq.n	8011b94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8011c6c <xQueueGenericSend+0x200>)
 8011b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	e00a      	b.n	8011b94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d007      	beq.n	8011b94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b84:	4b39      	ldr	r3, [pc, #228]	@ (8011c6c <xQueueGenericSend+0x200>)
 8011b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b8a:	601a      	str	r2, [r3, #0]
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b94:	f002 fbea 	bl	801436c <vPortExitCritical>
				return pdPASS;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	e063      	b.n	8011c64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d103      	bne.n	8011baa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ba2:	f002 fbe3 	bl	801436c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e05c      	b.n	8011c64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d106      	bne.n	8011bbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011bb0:	f107 0314 	add.w	r3, r7, #20
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f001 fbdb 	bl	8013370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011bbe:	f002 fbd5 	bl	801436c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011bc2:	f001 f943 	bl	8012e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011bc6:	f002 fb9f 	bl	8014308 <vPortEnterCritical>
 8011bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011bd0:	b25b      	sxtb	r3, r3
 8011bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011bd6:	d103      	bne.n	8011be0 <xQueueGenericSend+0x174>
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011be6:	b25b      	sxtb	r3, r3
 8011be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011bec:	d103      	bne.n	8011bf6 <xQueueGenericSend+0x18a>
 8011bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011bf6:	f002 fbb9 	bl	801436c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bfa:	1d3a      	adds	r2, r7, #4
 8011bfc:	f107 0314 	add.w	r3, r7, #20
 8011c00:	4611      	mov	r1, r2
 8011c02:	4618      	mov	r0, r3
 8011c04:	f001 fbca 	bl	801339c <xTaskCheckForTimeOut>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d124      	bne.n	8011c58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c10:	f000 fc5e 	bl	80124d0 <prvIsQueueFull>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d018      	beq.n	8011c4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1c:	3310      	adds	r3, #16
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	4611      	mov	r1, r2
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 faee 	bl	8013204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c2a:	f000 fbe9 	bl	8012400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c2e:	f001 f91b 	bl	8012e68 <xTaskResumeAll>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f47f af7c 	bne.w	8011b32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8011c6c <xQueueGenericSend+0x200>)
 8011c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c40:	601a      	str	r2, [r3, #0]
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	e772      	b.n	8011b32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c4e:	f000 fbd7 	bl	8012400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c52:	f001 f909 	bl	8012e68 <xTaskResumeAll>
 8011c56:	e76c      	b.n	8011b32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c5a:	f000 fbd1 	bl	8012400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c5e:	f001 f903 	bl	8012e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3738      	adds	r7, #56	@ 0x38
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	e000ed04 	.word	0xe000ed04

08011c70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b090      	sub	sp, #64	@ 0x40
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
 8011c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8011c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10b      	bne.n	8011ca0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8011c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c8c:	f383 8811 	msr	BASEPRI, r3
 8011c90:	f3bf 8f6f 	isb	sy
 8011c94:	f3bf 8f4f 	dsb	sy
 8011c98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011c9a:	bf00      	nop
 8011c9c:	bf00      	nop
 8011c9e:	e7fd      	b.n	8011c9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d103      	bne.n	8011cae <xQueueGenericSendFromISR+0x3e>
 8011ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d101      	bne.n	8011cb2 <xQueueGenericSendFromISR+0x42>
 8011cae:	2301      	movs	r3, #1
 8011cb0:	e000      	b.n	8011cb4 <xQueueGenericSendFromISR+0x44>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10b      	bne.n	8011cd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cbc:	f383 8811 	msr	BASEPRI, r3
 8011cc0:	f3bf 8f6f 	isb	sy
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011cca:	bf00      	nop
 8011ccc:	bf00      	nop
 8011cce:	e7fd      	b.n	8011ccc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d103      	bne.n	8011cde <xQueueGenericSendFromISR+0x6e>
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d101      	bne.n	8011ce2 <xQueueGenericSendFromISR+0x72>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e000      	b.n	8011ce4 <xQueueGenericSendFromISR+0x74>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10b      	bne.n	8011d00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	623b      	str	r3, [r7, #32]
}
 8011cfa:	bf00      	nop
 8011cfc:	bf00      	nop
 8011cfe:	e7fd      	b.n	8011cfc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d00:	f002 fbe2 	bl	80144c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d04:	f3ef 8211 	mrs	r2, BASEPRI
 8011d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	61fa      	str	r2, [r7, #28]
 8011d1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d302      	bcc.n	8011d32 <xQueueGenericSendFromISR+0xc2>
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d12f      	bne.n	8011d92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011d38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d42:	683a      	ldr	r2, [r7, #0]
 8011d44:	68b9      	ldr	r1, [r7, #8]
 8011d46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d48:	f000 faca 	bl	80122e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8011d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d54:	d112      	bne.n	8011d7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d016      	beq.n	8011d8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d60:	3324      	adds	r3, #36	@ 0x24
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 faa0 	bl	80132a8 <xTaskRemoveFromEventList>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00e      	beq.n	8011d8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00b      	beq.n	8011d8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2201      	movs	r2, #1
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	e007      	b.n	8011d8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011d80:	3301      	adds	r3, #1
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	b25a      	sxtb	r2, r3
 8011d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011d90:	e001      	b.n	8011d96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3740      	adds	r7, #64	@ 0x40
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b08e      	sub	sp, #56	@ 0x38
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10b      	bne.n	8011dd8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	623b      	str	r3, [r7, #32]
}
 8011dd2:	bf00      	nop
 8011dd4:	bf00      	nop
 8011dd6:	e7fd      	b.n	8011dd4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00b      	beq.n	8011df8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	61fb      	str	r3, [r7, #28]
}
 8011df2:	bf00      	nop
 8011df4:	bf00      	nop
 8011df6:	e7fd      	b.n	8011df4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d103      	bne.n	8011e08 <xQueueGiveFromISR+0x5c>
 8011e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d101      	bne.n	8011e0c <xQueueGiveFromISR+0x60>
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e000      	b.n	8011e0e <xQueueGiveFromISR+0x62>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10b      	bne.n	8011e2a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e16:	f383 8811 	msr	BASEPRI, r3
 8011e1a:	f3bf 8f6f 	isb	sy
 8011e1e:	f3bf 8f4f 	dsb	sy
 8011e22:	61bb      	str	r3, [r7, #24]
}
 8011e24:	bf00      	nop
 8011e26:	bf00      	nop
 8011e28:	e7fd      	b.n	8011e26 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e2a:	f002 fb4d 	bl	80144c8 <vPortValidateInterruptPriority>
	__asm volatile
 8011e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8011e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e36:	f383 8811 	msr	BASEPRI, r3
 8011e3a:	f3bf 8f6f 	isb	sy
 8011e3e:	f3bf 8f4f 	dsb	sy
 8011e42:	617a      	str	r2, [r7, #20]
 8011e44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011e46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d22b      	bcs.n	8011eb2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011e74:	d112      	bne.n	8011e9c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d016      	beq.n	8011eac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e80:	3324      	adds	r3, #36	@ 0x24
 8011e82:	4618      	mov	r0, r3
 8011e84:	f001 fa10 	bl	80132a8 <xTaskRemoveFromEventList>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00e      	beq.n	8011eac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d00b      	beq.n	8011eac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2201      	movs	r2, #1
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	e007      	b.n	8011eac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	b25a      	sxtb	r2, r3
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011eac:	2301      	movs	r3, #1
 8011eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eb0:	e001      	b.n	8011eb6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f383 8811 	msr	BASEPRI, r3
}
 8011ec0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3738      	adds	r7, #56	@ 0x38
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b08c      	sub	sp, #48	@ 0x30
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d10b      	bne.n	8011efe <xQueueReceive+0x32>
	__asm volatile
 8011ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eea:	f383 8811 	msr	BASEPRI, r3
 8011eee:	f3bf 8f6f 	isb	sy
 8011ef2:	f3bf 8f4f 	dsb	sy
 8011ef6:	623b      	str	r3, [r7, #32]
}
 8011ef8:	bf00      	nop
 8011efa:	bf00      	nop
 8011efc:	e7fd      	b.n	8011efa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d103      	bne.n	8011f0c <xQueueReceive+0x40>
 8011f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d101      	bne.n	8011f10 <xQueueReceive+0x44>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	e000      	b.n	8011f12 <xQueueReceive+0x46>
 8011f10:	2300      	movs	r3, #0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10b      	bne.n	8011f2e <xQueueReceive+0x62>
	__asm volatile
 8011f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f1a:	f383 8811 	msr	BASEPRI, r3
 8011f1e:	f3bf 8f6f 	isb	sy
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	61fb      	str	r3, [r7, #28]
}
 8011f28:	bf00      	nop
 8011f2a:	bf00      	nop
 8011f2c:	e7fd      	b.n	8011f2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f2e:	f001 fb81 	bl	8013634 <xTaskGetSchedulerState>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <xQueueReceive+0x72>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <xQueueReceive+0x76>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e000      	b.n	8011f44 <xQueueReceive+0x78>
 8011f42:	2300      	movs	r3, #0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10b      	bne.n	8011f60 <xQueueReceive+0x94>
	__asm volatile
 8011f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f4c:	f383 8811 	msr	BASEPRI, r3
 8011f50:	f3bf 8f6f 	isb	sy
 8011f54:	f3bf 8f4f 	dsb	sy
 8011f58:	61bb      	str	r3, [r7, #24]
}
 8011f5a:	bf00      	nop
 8011f5c:	bf00      	nop
 8011f5e:	e7fd      	b.n	8011f5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f60:	f002 f9d2 	bl	8014308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d01f      	beq.n	8011fb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f70:	68b9      	ldr	r1, [r7, #8]
 8011f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f74:	f000 fa1e 	bl	80123b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f7a:	1e5a      	subs	r2, r3, #1
 8011f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d00f      	beq.n	8011fa8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8a:	3310      	adds	r3, #16
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f001 f98b 	bl	80132a8 <xTaskRemoveFromEventList>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d007      	beq.n	8011fa8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f98:	4b3c      	ldr	r3, [pc, #240]	@ (801208c <xQueueReceive+0x1c0>)
 8011f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	f3bf 8f4f 	dsb	sy
 8011fa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011fa8:	f002 f9e0 	bl	801436c <vPortExitCritical>
				return pdPASS;
 8011fac:	2301      	movs	r3, #1
 8011fae:	e069      	b.n	8012084 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d103      	bne.n	8011fbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011fb6:	f002 f9d9 	bl	801436c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e062      	b.n	8012084 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d106      	bne.n	8011fd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011fc4:	f107 0310 	add.w	r3, r7, #16
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f001 f9d1 	bl	8013370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fd2:	f002 f9cb 	bl	801436c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011fd6:	f000 ff39 	bl	8012e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fda:	f002 f995 	bl	8014308 <vPortEnterCritical>
 8011fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011fe4:	b25b      	sxtb	r3, r3
 8011fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fea:	d103      	bne.n	8011ff4 <xQueueReceive+0x128>
 8011fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011ffa:	b25b      	sxtb	r3, r3
 8011ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012000:	d103      	bne.n	801200a <xQueueReceive+0x13e>
 8012002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012004:	2200      	movs	r2, #0
 8012006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801200a:	f002 f9af 	bl	801436c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801200e:	1d3a      	adds	r2, r7, #4
 8012010:	f107 0310 	add.w	r3, r7, #16
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f001 f9c0 	bl	801339c <xTaskCheckForTimeOut>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d123      	bne.n	801206a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012024:	f000 fa3e 	bl	80124a4 <prvIsQueueEmpty>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d017      	beq.n	801205e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012030:	3324      	adds	r3, #36	@ 0x24
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	4611      	mov	r1, r2
 8012036:	4618      	mov	r0, r3
 8012038:	f001 f8e4 	bl	8013204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801203c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801203e:	f000 f9df 	bl	8012400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012042:	f000 ff11 	bl	8012e68 <xTaskResumeAll>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d189      	bne.n	8011f60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801204c:	4b0f      	ldr	r3, [pc, #60]	@ (801208c <xQueueReceive+0x1c0>)
 801204e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012052:	601a      	str	r2, [r3, #0]
 8012054:	f3bf 8f4f 	dsb	sy
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	e780      	b.n	8011f60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801205e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012060:	f000 f9ce 	bl	8012400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012064:	f000 ff00 	bl	8012e68 <xTaskResumeAll>
 8012068:	e77a      	b.n	8011f60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801206a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801206c:	f000 f9c8 	bl	8012400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012070:	f000 fefa 	bl	8012e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012076:	f000 fa15 	bl	80124a4 <prvIsQueueEmpty>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	f43f af6f 	beq.w	8011f60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012082:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012084:	4618      	mov	r0, r3
 8012086:	3730      	adds	r7, #48	@ 0x30
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	e000ed04 	.word	0xe000ed04

08012090 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08e      	sub	sp, #56	@ 0x38
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801209a:	2300      	movs	r3, #0
 801209c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80120a2:	2300      	movs	r3, #0
 80120a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80120a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10b      	bne.n	80120c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80120ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b0:	f383 8811 	msr	BASEPRI, r3
 80120b4:	f3bf 8f6f 	isb	sy
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	623b      	str	r3, [r7, #32]
}
 80120be:	bf00      	nop
 80120c0:	bf00      	nop
 80120c2:	e7fd      	b.n	80120c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80120c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d00b      	beq.n	80120e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d0:	f383 8811 	msr	BASEPRI, r3
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	61fb      	str	r3, [r7, #28]
}
 80120de:	bf00      	nop
 80120e0:	bf00      	nop
 80120e2:	e7fd      	b.n	80120e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80120e4:	f001 faa6 	bl	8013634 <xTaskGetSchedulerState>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d102      	bne.n	80120f4 <xQueueSemaphoreTake+0x64>
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d101      	bne.n	80120f8 <xQueueSemaphoreTake+0x68>
 80120f4:	2301      	movs	r3, #1
 80120f6:	e000      	b.n	80120fa <xQueueSemaphoreTake+0x6a>
 80120f8:	2300      	movs	r3, #0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d10b      	bne.n	8012116 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80120fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012102:	f383 8811 	msr	BASEPRI, r3
 8012106:	f3bf 8f6f 	isb	sy
 801210a:	f3bf 8f4f 	dsb	sy
 801210e:	61bb      	str	r3, [r7, #24]
}
 8012110:	bf00      	nop
 8012112:	bf00      	nop
 8012114:	e7fd      	b.n	8012112 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012116:	f002 f8f7 	bl	8014308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801211c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801211e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012122:	2b00      	cmp	r3, #0
 8012124:	d024      	beq.n	8012170 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012128:	1e5a      	subs	r2, r3, #1
 801212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801212c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d104      	bne.n	8012140 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012136:	f001 fbf7 	bl	8013928 <pvTaskIncrementMutexHeldCount>
 801213a:	4602      	mov	r2, r0
 801213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801213e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00f      	beq.n	8012168 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801214a:	3310      	adds	r3, #16
 801214c:	4618      	mov	r0, r3
 801214e:	f001 f8ab 	bl	80132a8 <xTaskRemoveFromEventList>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d007      	beq.n	8012168 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012158:	4b54      	ldr	r3, [pc, #336]	@ (80122ac <xQueueSemaphoreTake+0x21c>)
 801215a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012168:	f002 f900 	bl	801436c <vPortExitCritical>
				return pdPASS;
 801216c:	2301      	movs	r3, #1
 801216e:	e098      	b.n	80122a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d112      	bne.n	801219c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00b      	beq.n	8012194 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	617b      	str	r3, [r7, #20]
}
 801218e:	bf00      	nop
 8012190:	bf00      	nop
 8012192:	e7fd      	b.n	8012190 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012194:	f002 f8ea 	bl	801436c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012198:	2300      	movs	r3, #0
 801219a:	e082      	b.n	80122a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121a2:	f107 030c 	add.w	r3, r7, #12
 80121a6:	4618      	mov	r0, r3
 80121a8:	f001 f8e2 	bl	8013370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121ac:	2301      	movs	r3, #1
 80121ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121b0:	f002 f8dc 	bl	801436c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121b4:	f000 fe4a 	bl	8012e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121b8:	f002 f8a6 	bl	8014308 <vPortEnterCritical>
 80121bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80121c2:	b25b      	sxtb	r3, r3
 80121c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121c8:	d103      	bne.n	80121d2 <xQueueSemaphoreTake+0x142>
 80121ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121cc:	2200      	movs	r2, #0
 80121ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80121d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80121d8:	b25b      	sxtb	r3, r3
 80121da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121de:	d103      	bne.n	80121e8 <xQueueSemaphoreTake+0x158>
 80121e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e2:	2200      	movs	r2, #0
 80121e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80121e8:	f002 f8c0 	bl	801436c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80121ec:	463a      	mov	r2, r7
 80121ee:	f107 030c 	add.w	r3, r7, #12
 80121f2:	4611      	mov	r1, r2
 80121f4:	4618      	mov	r0, r3
 80121f6:	f001 f8d1 	bl	801339c <xTaskCheckForTimeOut>
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d132      	bne.n	8012266 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012202:	f000 f94f 	bl	80124a4 <prvIsQueueEmpty>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d026      	beq.n	801225a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d109      	bne.n	8012228 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012214:	f002 f878 	bl	8014308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221a:	689b      	ldr	r3, [r3, #8]
 801221c:	4618      	mov	r0, r3
 801221e:	f001 fa27 	bl	8013670 <xTaskPriorityInherit>
 8012222:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012224:	f002 f8a2 	bl	801436c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222a:	3324      	adds	r3, #36	@ 0x24
 801222c:	683a      	ldr	r2, [r7, #0]
 801222e:	4611      	mov	r1, r2
 8012230:	4618      	mov	r0, r3
 8012232:	f000 ffe7 	bl	8013204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012238:	f000 f8e2 	bl	8012400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801223c:	f000 fe14 	bl	8012e68 <xTaskResumeAll>
 8012240:	4603      	mov	r3, r0
 8012242:	2b00      	cmp	r3, #0
 8012244:	f47f af67 	bne.w	8012116 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012248:	4b18      	ldr	r3, [pc, #96]	@ (80122ac <xQueueSemaphoreTake+0x21c>)
 801224a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801224e:	601a      	str	r2, [r3, #0]
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	e75d      	b.n	8012116 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801225a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801225c:	f000 f8d0 	bl	8012400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012260:	f000 fe02 	bl	8012e68 <xTaskResumeAll>
 8012264:	e757      	b.n	8012116 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012266:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012268:	f000 f8ca 	bl	8012400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801226c:	f000 fdfc 	bl	8012e68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012272:	f000 f917 	bl	80124a4 <prvIsQueueEmpty>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	f43f af4c 	beq.w	8012116 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00d      	beq.n	80122a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012284:	f002 f840 	bl	8014308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801228a:	f000 f811 	bl	80122b0 <prvGetDisinheritPriorityAfterTimeout>
 801228e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012296:	4618      	mov	r0, r3
 8012298:	f001 fac2 	bl	8013820 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801229c:	f002 f866 	bl	801436c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3738      	adds	r7, #56	@ 0x38
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	e000ed04 	.word	0xe000ed04

080122b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d006      	beq.n	80122ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80122ca:	60fb      	str	r3, [r7, #12]
 80122cc:	e001      	b.n	80122d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80122ce:	2300      	movs	r3, #0
 80122d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80122d2:	68fb      	ldr	r3, [r7, #12]
	}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b086      	sub	sp, #24
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80122ec:	2300      	movs	r3, #0
 80122ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d10d      	bne.n	801231a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d14d      	bne.n	80123a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	4618      	mov	r0, r3
 801230c:	f001 fa18 	bl	8013740 <xTaskPriorityDisinherit>
 8012310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2200      	movs	r2, #0
 8012316:	609a      	str	r2, [r3, #8]
 8012318:	e043      	b.n	80123a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d119      	bne.n	8012354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6858      	ldr	r0, [r3, #4]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012328:	461a      	mov	r2, r3
 801232a:	68b9      	ldr	r1, [r7, #8]
 801232c:	f003 fa19 	bl	8015762 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012338:	441a      	add	r2, r3
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	689b      	ldr	r3, [r3, #8]
 8012346:	429a      	cmp	r2, r3
 8012348:	d32b      	bcc.n	80123a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	605a      	str	r2, [r3, #4]
 8012352:	e026      	b.n	80123a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	68d8      	ldr	r0, [r3, #12]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801235c:	461a      	mov	r2, r3
 801235e:	68b9      	ldr	r1, [r7, #8]
 8012360:	f003 f9ff 	bl	8015762 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	68da      	ldr	r2, [r3, #12]
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801236c:	425b      	negs	r3, r3
 801236e:	441a      	add	r2, r3
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	68da      	ldr	r2, [r3, #12]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	d207      	bcs.n	8012390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	689a      	ldr	r2, [r3, #8]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012388:	425b      	negs	r3, r3
 801238a:	441a      	add	r2, r3
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b02      	cmp	r3, #2
 8012394:	d105      	bne.n	80123a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	3b01      	subs	r3, #1
 80123a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	1c5a      	adds	r2, r3, #1
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80123aa:	697b      	ldr	r3, [r7, #20]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d018      	beq.n	80123f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68da      	ldr	r2, [r3, #12]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123ce:	441a      	add	r2, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	68da      	ldr	r2, [r3, #12]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d303      	bcc.n	80123e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68d9      	ldr	r1, [r3, #12]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123f0:	461a      	mov	r2, r3
 80123f2:	6838      	ldr	r0, [r7, #0]
 80123f4:	f003 f9b5 	bl	8015762 <memcpy>
	}
}
 80123f8:	bf00      	nop
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012408:	f001 ff7e 	bl	8014308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012414:	e011      	b.n	801243a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801241a:	2b00      	cmp	r3, #0
 801241c:	d012      	beq.n	8012444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3324      	adds	r3, #36	@ 0x24
 8012422:	4618      	mov	r0, r3
 8012424:	f000 ff40 	bl	80132a8 <xTaskRemoveFromEventList>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d001      	beq.n	8012432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801242e:	f001 f819 	bl	8013464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012432:	7bfb      	ldrb	r3, [r7, #15]
 8012434:	3b01      	subs	r3, #1
 8012436:	b2db      	uxtb	r3, r3
 8012438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801243e:	2b00      	cmp	r3, #0
 8012440:	dce9      	bgt.n	8012416 <prvUnlockQueue+0x16>
 8012442:	e000      	b.n	8012446 <prvUnlockQueue+0x46>
					break;
 8012444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	22ff      	movs	r2, #255	@ 0xff
 801244a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801244e:	f001 ff8d 	bl	801436c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012452:	f001 ff59 	bl	8014308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801245c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801245e:	e011      	b.n	8012484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	691b      	ldr	r3, [r3, #16]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d012      	beq.n	801248e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3310      	adds	r3, #16
 801246c:	4618      	mov	r0, r3
 801246e:	f000 ff1b 	bl	80132a8 <xTaskRemoveFromEventList>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d001      	beq.n	801247c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012478:	f000 fff4 	bl	8013464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801247c:	7bbb      	ldrb	r3, [r7, #14]
 801247e:	3b01      	subs	r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012488:	2b00      	cmp	r3, #0
 801248a:	dce9      	bgt.n	8012460 <prvUnlockQueue+0x60>
 801248c:	e000      	b.n	8012490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801248e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	22ff      	movs	r2, #255	@ 0xff
 8012494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012498:	f001 ff68 	bl	801436c <vPortExitCritical>
}
 801249c:	bf00      	nop
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124ac:	f001 ff2c 	bl	8014308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d102      	bne.n	80124be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80124b8:	2301      	movs	r3, #1
 80124ba:	60fb      	str	r3, [r7, #12]
 80124bc:	e001      	b.n	80124c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80124be:	2300      	movs	r3, #0
 80124c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124c2:	f001 ff53 	bl	801436c <vPortExitCritical>

	return xReturn;
 80124c6:	68fb      	ldr	r3, [r7, #12]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124d8:	f001 ff16 	bl	8014308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d102      	bne.n	80124ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80124e8:	2301      	movs	r3, #1
 80124ea:	60fb      	str	r3, [r7, #12]
 80124ec:	e001      	b.n	80124f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80124ee:	2300      	movs	r3, #0
 80124f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124f2:	f001 ff3b 	bl	801436c <vPortExitCritical>

	return xReturn;
 80124f6:	68fb      	ldr	r3, [r7, #12]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]
 801250e:	e014      	b.n	801253a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012510:	4a0f      	ldr	r2, [pc, #60]	@ (8012550 <vQueueAddToRegistry+0x50>)
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10b      	bne.n	8012534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801251c:	490c      	ldr	r1, [pc, #48]	@ (8012550 <vQueueAddToRegistry+0x50>)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	683a      	ldr	r2, [r7, #0]
 8012522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012526:	4a0a      	ldr	r2, [pc, #40]	@ (8012550 <vQueueAddToRegistry+0x50>)
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	00db      	lsls	r3, r3, #3
 801252c:	4413      	add	r3, r2
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012532:	e006      	b.n	8012542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	3301      	adds	r3, #1
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2b07      	cmp	r3, #7
 801253e:	d9e7      	bls.n	8012510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012540:	bf00      	nop
 8012542:	bf00      	nop
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	240015ec 	.word	0x240015ec

08012554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012564:	f001 fed0 	bl	8014308 <vPortEnterCritical>
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801256e:	b25b      	sxtb	r3, r3
 8012570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012574:	d103      	bne.n	801257e <vQueueWaitForMessageRestricted+0x2a>
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2200      	movs	r2, #0
 801257a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012584:	b25b      	sxtb	r3, r3
 8012586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801258a:	d103      	bne.n	8012594 <vQueueWaitForMessageRestricted+0x40>
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	2200      	movs	r2, #0
 8012590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012594:	f001 feea 	bl	801436c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801259c:	2b00      	cmp	r3, #0
 801259e:	d106      	bne.n	80125ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	3324      	adds	r3, #36	@ 0x24
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	68b9      	ldr	r1, [r7, #8]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f000 fe51 	bl	8013250 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80125ae:	6978      	ldr	r0, [r7, #20]
 80125b0:	f7ff ff26 	bl	8012400 <prvUnlockQueue>
	}
 80125b4:	bf00      	nop
 80125b6:	3718      	adds	r7, #24
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08e      	sub	sp, #56	@ 0x38
 80125c0:	af04      	add	r7, sp, #16
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
 80125c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80125ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d10b      	bne.n	80125e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	623b      	str	r3, [r7, #32]
}
 80125e2:	bf00      	nop
 80125e4:	bf00      	nop
 80125e6:	e7fd      	b.n	80125e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80125e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10b      	bne.n	8012606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80125ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	61fb      	str	r3, [r7, #28]
}
 8012600:	bf00      	nop
 8012602:	bf00      	nop
 8012604:	e7fd      	b.n	8012602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012606:	23a8      	movs	r3, #168	@ 0xa8
 8012608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	2ba8      	cmp	r3, #168	@ 0xa8
 801260e:	d00b      	beq.n	8012628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8012610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	61bb      	str	r3, [r7, #24]
}
 8012622:	bf00      	nop
 8012624:	bf00      	nop
 8012626:	e7fd      	b.n	8012624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801262c:	2b00      	cmp	r3, #0
 801262e:	d01e      	beq.n	801266e <xTaskCreateStatic+0xb2>
 8012630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012632:	2b00      	cmp	r3, #0
 8012634:	d01b      	beq.n	801266e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801263e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012642:	2202      	movs	r2, #2
 8012644:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012648:	2300      	movs	r3, #0
 801264a:	9303      	str	r3, [sp, #12]
 801264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801264e:	9302      	str	r3, [sp, #8]
 8012650:	f107 0314 	add.w	r3, r7, #20
 8012654:	9301      	str	r3, [sp, #4]
 8012656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012658:	9300      	str	r3, [sp, #0]
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	68b9      	ldr	r1, [r7, #8]
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f000 f851 	bl	8012708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012668:	f000 f8f6 	bl	8012858 <prvAddNewTaskToReadyList>
 801266c:	e001      	b.n	8012672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012672:	697b      	ldr	r3, [r7, #20]
	}
 8012674:	4618      	mov	r0, r3
 8012676:	3728      	adds	r7, #40	@ 0x28
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801267c:	b580      	push	{r7, lr}
 801267e:	b08c      	sub	sp, #48	@ 0x30
 8012680:	af04      	add	r7, sp, #16
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	603b      	str	r3, [r7, #0]
 8012688:	4613      	mov	r3, r2
 801268a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801268c:	88fb      	ldrh	r3, [r7, #6]
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	4618      	mov	r0, r3
 8012692:	f001 ff5b 	bl	801454c <pvPortMalloc>
 8012696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00e      	beq.n	80126bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801269e:	20a8      	movs	r0, #168	@ 0xa8
 80126a0:	f001 ff54 	bl	801454c <pvPortMalloc>
 80126a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d003      	beq.n	80126b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	697a      	ldr	r2, [r7, #20]
 80126b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80126b2:	e005      	b.n	80126c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80126b4:	6978      	ldr	r0, [r7, #20]
 80126b6:	f002 f817 	bl	80146e8 <vPortFree>
 80126ba:	e001      	b.n	80126c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80126bc:	2300      	movs	r3, #0
 80126be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d017      	beq.n	80126f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80126c6:	69fb      	ldr	r3, [r7, #28]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80126ce:	88fa      	ldrh	r2, [r7, #6]
 80126d0:	2300      	movs	r3, #0
 80126d2:	9303      	str	r3, [sp, #12]
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	9302      	str	r3, [sp, #8]
 80126d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126da:	9301      	str	r3, [sp, #4]
 80126dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 f80f 	bl	8012708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126ea:	69f8      	ldr	r0, [r7, #28]
 80126ec:	f000 f8b4 	bl	8012858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80126f0:	2301      	movs	r3, #1
 80126f2:	61bb      	str	r3, [r7, #24]
 80126f4:	e002      	b.n	80126fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80126f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80126fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80126fc:	69bb      	ldr	r3, [r7, #24]
	}
 80126fe:	4618      	mov	r0, r3
 8012700:	3720      	adds	r7, #32
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
	...

08012708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b088      	sub	sp, #32
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012718:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	461a      	mov	r2, r3
 8012720:	21a5      	movs	r1, #165	@ 0xa5
 8012722:	f002 ff41 	bl	80155a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801272a:	6879      	ldr	r1, [r7, #4]
 801272c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012730:	440b      	add	r3, r1
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	f023 0307 	bic.w	r3, r3, #7
 801273e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	f003 0307 	and.w	r3, r3, #7
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00b      	beq.n	8012762 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801274a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801274e:	f383 8811 	msr	BASEPRI, r3
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	617b      	str	r3, [r7, #20]
}
 801275c:	bf00      	nop
 801275e:	bf00      	nop
 8012760:	e7fd      	b.n	801275e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d01f      	beq.n	80127a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012768:	2300      	movs	r3, #0
 801276a:	61fb      	str	r3, [r7, #28]
 801276c:	e012      	b.n	8012794 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	4413      	add	r3, r2
 8012774:	7819      	ldrb	r1, [r3, #0]
 8012776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	4413      	add	r3, r2
 801277c:	3334      	adds	r3, #52	@ 0x34
 801277e:	460a      	mov	r2, r1
 8012780:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	4413      	add	r3, r2
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d006      	beq.n	801279c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	3301      	adds	r3, #1
 8012792:	61fb      	str	r3, [r7, #28]
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	2b0f      	cmp	r3, #15
 8012798:	d9e9      	bls.n	801276e <prvInitialiseNewTask+0x66>
 801279a:	e000      	b.n	801279e <prvInitialiseNewTask+0x96>
			{
				break;
 801279c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a0:	2200      	movs	r2, #0
 80127a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80127a6:	e003      	b.n	80127b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80127a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127aa:	2200      	movs	r2, #0
 80127ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80127b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127b2:	2b37      	cmp	r3, #55	@ 0x37
 80127b4:	d901      	bls.n	80127ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80127b6:	2337      	movs	r3, #55	@ 0x37
 80127b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80127ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80127c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80127c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c8:	2200      	movs	r2, #0
 80127ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80127cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ce:	3304      	adds	r3, #4
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fe ff71 	bl	80116b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80127d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d8:	3318      	adds	r3, #24
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fe ff6c 	bl	80116b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80127e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80127ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80127f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80127f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f8:	2200      	movs	r2, #0
 80127fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012800:	2200      	movs	r2, #0
 8012802:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012808:	3354      	adds	r3, #84	@ 0x54
 801280a:	224c      	movs	r2, #76	@ 0x4c
 801280c:	2100      	movs	r1, #0
 801280e:	4618      	mov	r0, r3
 8012810:	f002 feca 	bl	80155a8 <memset>
 8012814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012816:	4a0d      	ldr	r2, [pc, #52]	@ (801284c <prvInitialiseNewTask+0x144>)
 8012818:	659a      	str	r2, [r3, #88]	@ 0x58
 801281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801281c:	4a0c      	ldr	r2, [pc, #48]	@ (8012850 <prvInitialiseNewTask+0x148>)
 801281e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012822:	4a0c      	ldr	r2, [pc, #48]	@ (8012854 <prvInitialiseNewTask+0x14c>)
 8012824:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012826:	683a      	ldr	r2, [r7, #0]
 8012828:	68f9      	ldr	r1, [r7, #12]
 801282a:	69b8      	ldr	r0, [r7, #24]
 801282c:	f001 fc3e 	bl	80140ac <pxPortInitialiseStack>
 8012830:	4602      	mov	r2, r0
 8012832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012842:	bf00      	nop
 8012844:	3720      	adds	r7, #32
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	24005880 	.word	0x24005880
 8012850:	240058e8 	.word	0x240058e8
 8012854:	24005950 	.word	0x24005950

08012858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012860:	f001 fd52 	bl	8014308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012864:	4b2d      	ldr	r3, [pc, #180]	@ (801291c <prvAddNewTaskToReadyList+0xc4>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	3301      	adds	r3, #1
 801286a:	4a2c      	ldr	r2, [pc, #176]	@ (801291c <prvAddNewTaskToReadyList+0xc4>)
 801286c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801286e:	4b2c      	ldr	r3, [pc, #176]	@ (8012920 <prvAddNewTaskToReadyList+0xc8>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d109      	bne.n	801288a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012876:	4a2a      	ldr	r2, [pc, #168]	@ (8012920 <prvAddNewTaskToReadyList+0xc8>)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801287c:	4b27      	ldr	r3, [pc, #156]	@ (801291c <prvAddNewTaskToReadyList+0xc4>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d110      	bne.n	80128a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012884:	f000 fe12 	bl	80134ac <prvInitialiseTaskLists>
 8012888:	e00d      	b.n	80128a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801288a:	4b26      	ldr	r3, [pc, #152]	@ (8012924 <prvAddNewTaskToReadyList+0xcc>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d109      	bne.n	80128a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012892:	4b23      	ldr	r3, [pc, #140]	@ (8012920 <prvAddNewTaskToReadyList+0xc8>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801289c:	429a      	cmp	r2, r3
 801289e:	d802      	bhi.n	80128a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80128a0:	4a1f      	ldr	r2, [pc, #124]	@ (8012920 <prvAddNewTaskToReadyList+0xc8>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80128a6:	4b20      	ldr	r3, [pc, #128]	@ (8012928 <prvAddNewTaskToReadyList+0xd0>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	3301      	adds	r3, #1
 80128ac:	4a1e      	ldr	r2, [pc, #120]	@ (8012928 <prvAddNewTaskToReadyList+0xd0>)
 80128ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80128b0:	4b1d      	ldr	r3, [pc, #116]	@ (8012928 <prvAddNewTaskToReadyList+0xd0>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128bc:	4b1b      	ldr	r3, [pc, #108]	@ (801292c <prvAddNewTaskToReadyList+0xd4>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d903      	bls.n	80128cc <prvAddNewTaskToReadyList+0x74>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c8:	4a18      	ldr	r2, [pc, #96]	@ (801292c <prvAddNewTaskToReadyList+0xd4>)
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128d0:	4613      	mov	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	4a15      	ldr	r2, [pc, #84]	@ (8012930 <prvAddNewTaskToReadyList+0xd8>)
 80128da:	441a      	add	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	3304      	adds	r3, #4
 80128e0:	4619      	mov	r1, r3
 80128e2:	4610      	mov	r0, r2
 80128e4:	f7fe fef5 	bl	80116d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80128e8:	f001 fd40 	bl	801436c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80128ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012924 <prvAddNewTaskToReadyList+0xcc>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d00e      	beq.n	8012912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80128f4:	4b0a      	ldr	r3, [pc, #40]	@ (8012920 <prvAddNewTaskToReadyList+0xc8>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128fe:	429a      	cmp	r2, r3
 8012900:	d207      	bcs.n	8012912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012902:	4b0c      	ldr	r3, [pc, #48]	@ (8012934 <prvAddNewTaskToReadyList+0xdc>)
 8012904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012912:	bf00      	nop
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	24001b00 	.word	0x24001b00
 8012920:	2400162c 	.word	0x2400162c
 8012924:	24001b0c 	.word	0x24001b0c
 8012928:	24001b1c 	.word	0x24001b1c
 801292c:	24001b08 	.word	0x24001b08
 8012930:	24001630 	.word	0x24001630
 8012934:	e000ed04 	.word	0xe000ed04

08012938 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012940:	f001 fce2 	bl	8014308 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d102      	bne.n	8012950 <vTaskDelete+0x18>
 801294a:	4b2d      	ldr	r3, [pc, #180]	@ (8012a00 <vTaskDelete+0xc8>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	e000      	b.n	8012952 <vTaskDelete+0x1a>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	3304      	adds	r3, #4
 8012958:	4618      	mov	r0, r3
 801295a:	f7fe ff17 	bl	801178c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012962:	2b00      	cmp	r3, #0
 8012964:	d004      	beq.n	8012970 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	3318      	adds	r3, #24
 801296a:	4618      	mov	r0, r3
 801296c:	f7fe ff0e 	bl	801178c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8012970:	4b24      	ldr	r3, [pc, #144]	@ (8012a04 <vTaskDelete+0xcc>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	3301      	adds	r3, #1
 8012976:	4a23      	ldr	r2, [pc, #140]	@ (8012a04 <vTaskDelete+0xcc>)
 8012978:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801297a:	4b21      	ldr	r3, [pc, #132]	@ (8012a00 <vTaskDelete+0xc8>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	429a      	cmp	r2, r3
 8012982:	d10b      	bne.n	801299c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	3304      	adds	r3, #4
 8012988:	4619      	mov	r1, r3
 801298a:	481f      	ldr	r0, [pc, #124]	@ (8012a08 <vTaskDelete+0xd0>)
 801298c:	f7fe fea1 	bl	80116d2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012990:	4b1e      	ldr	r3, [pc, #120]	@ (8012a0c <vTaskDelete+0xd4>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	4a1d      	ldr	r2, [pc, #116]	@ (8012a0c <vTaskDelete+0xd4>)
 8012998:	6013      	str	r3, [r2, #0]
 801299a:	e009      	b.n	80129b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801299c:	4b1c      	ldr	r3, [pc, #112]	@ (8012a10 <vTaskDelete+0xd8>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	3b01      	subs	r3, #1
 80129a2:	4a1b      	ldr	r2, [pc, #108]	@ (8012a10 <vTaskDelete+0xd8>)
 80129a4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 fdee 	bl	8013588 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80129ac:	f000 fe22 	bl	80135f4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80129b0:	f001 fcdc 	bl	801436c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80129b4:	4b17      	ldr	r3, [pc, #92]	@ (8012a14 <vTaskDelete+0xdc>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d01c      	beq.n	80129f6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80129bc:	4b10      	ldr	r3, [pc, #64]	@ (8012a00 <vTaskDelete+0xc8>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	68fa      	ldr	r2, [r7, #12]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d117      	bne.n	80129f6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80129c6:	4b14      	ldr	r3, [pc, #80]	@ (8012a18 <vTaskDelete+0xe0>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00b      	beq.n	80129e6 <vTaskDelete+0xae>
	__asm volatile
 80129ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	60bb      	str	r3, [r7, #8]
}
 80129e0:	bf00      	nop
 80129e2:	bf00      	nop
 80129e4:	e7fd      	b.n	80129e2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80129e6:	4b0d      	ldr	r3, [pc, #52]	@ (8012a1c <vTaskDelete+0xe4>)
 80129e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80129f6:	bf00      	nop
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	2400162c 	.word	0x2400162c
 8012a04:	24001b1c 	.word	0x24001b1c
 8012a08:	24001ad4 	.word	0x24001ad4
 8012a0c:	24001ae8 	.word	0x24001ae8
 8012a10:	24001b00 	.word	0x24001b00
 8012a14:	24001b0c 	.word	0x24001b0c
 8012a18:	24001b28 	.word	0x24001b28
 8012a1c:	e000ed04 	.word	0xe000ed04

08012a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d018      	beq.n	8012a64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012a32:	4b14      	ldr	r3, [pc, #80]	@ (8012a84 <vTaskDelay+0x64>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d00b      	beq.n	8012a52 <vTaskDelay+0x32>
	__asm volatile
 8012a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a3e:	f383 8811 	msr	BASEPRI, r3
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	f3bf 8f4f 	dsb	sy
 8012a4a:	60bb      	str	r3, [r7, #8]
}
 8012a4c:	bf00      	nop
 8012a4e:	bf00      	nop
 8012a50:	e7fd      	b.n	8012a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012a52:	f000 f9fb 	bl	8012e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012a56:	2100      	movs	r1, #0
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 ff79 	bl	8013950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012a5e:	f000 fa03 	bl	8012e68 <xTaskResumeAll>
 8012a62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d107      	bne.n	8012a7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012a6a:	4b07      	ldr	r3, [pc, #28]	@ (8012a88 <vTaskDelay+0x68>)
 8012a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	f3bf 8f4f 	dsb	sy
 8012a76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a7a:	bf00      	nop
 8012a7c:	3710      	adds	r7, #16
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	24001b28 	.word	0x24001b28
 8012a88:	e000ed04 	.word	0xe000ed04

08012a8c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b088      	sub	sp, #32
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10b      	bne.n	8012ab6 <eTaskGetState+0x2a>
	__asm volatile
 8012a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa2:	f383 8811 	msr	BASEPRI, r3
 8012aa6:	f3bf 8f6f 	isb	sy
 8012aaa:	f3bf 8f4f 	dsb	sy
 8012aae:	60bb      	str	r3, [r7, #8]
}
 8012ab0:	bf00      	nop
 8012ab2:	bf00      	nop
 8012ab4:	e7fd      	b.n	8012ab2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8012ab6:	4b24      	ldr	r3, [pc, #144]	@ (8012b48 <eTaskGetState+0xbc>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d102      	bne.n	8012ac6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	77fb      	strb	r3, [r7, #31]
 8012ac4:	e03a      	b.n	8012b3c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8012ac6:	f001 fc1f 	bl	8014308 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	695b      	ldr	r3, [r3, #20]
 8012ace:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8012b4c <eTaskGetState+0xc0>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8012ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8012b50 <eTaskGetState+0xc4>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012adc:	f001 fc46 	bl	801436c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012ae0:	697a      	ldr	r2, [r7, #20]
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d003      	beq.n	8012af0 <eTaskGetState+0x64>
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d102      	bne.n	8012af6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012af0:	2302      	movs	r3, #2
 8012af2:	77fb      	strb	r3, [r7, #31]
 8012af4:	e022      	b.n	8012b3c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	4a16      	ldr	r2, [pc, #88]	@ (8012b54 <eTaskGetState+0xc8>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d112      	bne.n	8012b24 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d10b      	bne.n	8012b1e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d102      	bne.n	8012b18 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8012b12:	2302      	movs	r3, #2
 8012b14:	77fb      	strb	r3, [r7, #31]
 8012b16:	e011      	b.n	8012b3c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	77fb      	strb	r3, [r7, #31]
 8012b1c:	e00e      	b.n	8012b3c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8012b1e:	2302      	movs	r3, #2
 8012b20:	77fb      	strb	r3, [r7, #31]
 8012b22:	e00b      	b.n	8012b3c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	4a0c      	ldr	r2, [pc, #48]	@ (8012b58 <eTaskGetState+0xcc>)
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	d002      	beq.n	8012b32 <eTaskGetState+0xa6>
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d102      	bne.n	8012b38 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8012b32:	2304      	movs	r3, #4
 8012b34:	77fb      	strb	r3, [r7, #31]
 8012b36:	e001      	b.n	8012b3c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8012b3c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3720      	adds	r7, #32
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	2400162c 	.word	0x2400162c
 8012b4c:	24001ab8 	.word	0x24001ab8
 8012b50:	24001abc 	.word	0x24001abc
 8012b54:	24001aec 	.word	0x24001aec
 8012b58:	24001ad4 	.word	0x24001ad4

08012b5c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012b64:	f001 fbd0 	bl	8014308 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d102      	bne.n	8012b74 <vTaskSuspend+0x18>
 8012b6e:	4b30      	ldr	r3, [pc, #192]	@ (8012c30 <vTaskSuspend+0xd4>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	e000      	b.n	8012b76 <vTaskSuspend+0x1a>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7fe fe05 	bl	801178c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d004      	beq.n	8012b94 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3318      	adds	r3, #24
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fe fdfc 	bl	801178c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	3304      	adds	r3, #4
 8012b98:	4619      	mov	r1, r3
 8012b9a:	4826      	ldr	r0, [pc, #152]	@ (8012c34 <vTaskSuspend+0xd8>)
 8012b9c:	f7fe fd99 	bl	80116d2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d103      	bne.n	8012bb4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012bb4:	f001 fbda 	bl	801436c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8012c38 <vTaskSuspend+0xdc>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d005      	beq.n	8012bcc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012bc0:	f001 fba2 	bl	8014308 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012bc4:	f000 fd16 	bl	80135f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012bc8:	f001 fbd0 	bl	801436c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012bcc:	4b18      	ldr	r3, [pc, #96]	@ (8012c30 <vTaskSuspend+0xd4>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d128      	bne.n	8012c28 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8012bd6:	4b18      	ldr	r3, [pc, #96]	@ (8012c38 <vTaskSuspend+0xdc>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d018      	beq.n	8012c10 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012bde:	4b17      	ldr	r3, [pc, #92]	@ (8012c3c <vTaskSuspend+0xe0>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d00b      	beq.n	8012bfe <vTaskSuspend+0xa2>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bea:	f383 8811 	msr	BASEPRI, r3
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	60bb      	str	r3, [r7, #8]
}
 8012bf8:	bf00      	nop
 8012bfa:	bf00      	nop
 8012bfc:	e7fd      	b.n	8012bfa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012bfe:	4b10      	ldr	r3, [pc, #64]	@ (8012c40 <vTaskSuspend+0xe4>)
 8012c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c04:	601a      	str	r2, [r3, #0]
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012c0e:	e00b      	b.n	8012c28 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012c10:	4b08      	ldr	r3, [pc, #32]	@ (8012c34 <vTaskSuspend+0xd8>)
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	4b0b      	ldr	r3, [pc, #44]	@ (8012c44 <vTaskSuspend+0xe8>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d103      	bne.n	8012c24 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8012c1c:	4b04      	ldr	r3, [pc, #16]	@ (8012c30 <vTaskSuspend+0xd4>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	601a      	str	r2, [r3, #0]
	}
 8012c22:	e001      	b.n	8012c28 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8012c24:	f000 fa88 	bl	8013138 <vTaskSwitchContext>
	}
 8012c28:	bf00      	nop
 8012c2a:	3710      	adds	r7, #16
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	2400162c 	.word	0x2400162c
 8012c34:	24001aec 	.word	0x24001aec
 8012c38:	24001b0c 	.word	0x24001b0c
 8012c3c:	24001b28 	.word	0x24001b28
 8012c40:	e000ed04 	.word	0xe000ed04
 8012c44:	24001b00 	.word	0x24001b00

08012c48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012c48:	b480      	push	{r7}
 8012c4a:	b087      	sub	sp, #28
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012c50:	2300      	movs	r3, #0
 8012c52:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d10b      	bne.n	8012c76 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8012c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c62:	f383 8811 	msr	BASEPRI, r3
 8012c66:	f3bf 8f6f 	isb	sy
 8012c6a:	f3bf 8f4f 	dsb	sy
 8012c6e:	60fb      	str	r3, [r7, #12]
}
 8012c70:	bf00      	nop
 8012c72:	bf00      	nop
 8012c74:	e7fd      	b.n	8012c72 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	695b      	ldr	r3, [r3, #20]
 8012c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8012ca4 <prvTaskIsTaskSuspended+0x5c>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d10a      	bne.n	8012c96 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c84:	4a08      	ldr	r2, [pc, #32]	@ (8012ca8 <prvTaskIsTaskSuspended+0x60>)
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d005      	beq.n	8012c96 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8012c92:	2301      	movs	r3, #1
 8012c94:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c96:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012c98:	4618      	mov	r0, r3
 8012c9a:	371c      	adds	r7, #28
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr
 8012ca4:	24001aec 	.word	0x24001aec
 8012ca8:	24001ac0 	.word	0x24001ac0

08012cac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d10b      	bne.n	8012cd6 <vTaskResume+0x2a>
	__asm volatile
 8012cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	60bb      	str	r3, [r7, #8]
}
 8012cd0:	bf00      	nop
 8012cd2:	bf00      	nop
 8012cd4:	e7fd      	b.n	8012cd2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012cd6:	4b21      	ldr	r3, [pc, #132]	@ (8012d5c <vTaskResume+0xb0>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d038      	beq.n	8012d52 <vTaskResume+0xa6>
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d035      	beq.n	8012d52 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8012ce6:	f001 fb0f 	bl	8014308 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f7ff ffac 	bl	8012c48 <prvTaskIsTaskSuspended>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d02b      	beq.n	8012d4e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fd46 	bl	801178c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d04:	4b16      	ldr	r3, [pc, #88]	@ (8012d60 <vTaskResume+0xb4>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d903      	bls.n	8012d14 <vTaskResume+0x68>
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d10:	4a13      	ldr	r2, [pc, #76]	@ (8012d60 <vTaskResume+0xb4>)
 8012d12:	6013      	str	r3, [r2, #0]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d18:	4613      	mov	r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	4413      	add	r3, r2
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	4a10      	ldr	r2, [pc, #64]	@ (8012d64 <vTaskResume+0xb8>)
 8012d22:	441a      	add	r2, r3
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	3304      	adds	r3, #4
 8012d28:	4619      	mov	r1, r3
 8012d2a:	4610      	mov	r0, r2
 8012d2c:	f7fe fcd1 	bl	80116d2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d34:	4b09      	ldr	r3, [pc, #36]	@ (8012d5c <vTaskResume+0xb0>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d307      	bcc.n	8012d4e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8012d68 <vTaskResume+0xbc>)
 8012d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	f3bf 8f4f 	dsb	sy
 8012d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012d4e:	f001 fb0d 	bl	801436c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d52:	bf00      	nop
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	2400162c 	.word	0x2400162c
 8012d60:	24001b08 	.word	0x24001b08
 8012d64:	24001630 	.word	0x24001630
 8012d68:	e000ed04 	.word	0xe000ed04

08012d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08a      	sub	sp, #40	@ 0x28
 8012d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012d7a:	463a      	mov	r2, r7
 8012d7c:	1d39      	adds	r1, r7, #4
 8012d7e:	f107 0308 	add.w	r3, r7, #8
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fe fc44 	bl	8011610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	68ba      	ldr	r2, [r7, #8]
 8012d8e:	9202      	str	r2, [sp, #8]
 8012d90:	9301      	str	r3, [sp, #4]
 8012d92:	2300      	movs	r3, #0
 8012d94:	9300      	str	r3, [sp, #0]
 8012d96:	2300      	movs	r3, #0
 8012d98:	460a      	mov	r2, r1
 8012d9a:	4924      	ldr	r1, [pc, #144]	@ (8012e2c <vTaskStartScheduler+0xc0>)
 8012d9c:	4824      	ldr	r0, [pc, #144]	@ (8012e30 <vTaskStartScheduler+0xc4>)
 8012d9e:	f7ff fc0d 	bl	80125bc <xTaskCreateStatic>
 8012da2:	4603      	mov	r3, r0
 8012da4:	4a23      	ldr	r2, [pc, #140]	@ (8012e34 <vTaskStartScheduler+0xc8>)
 8012da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012da8:	4b22      	ldr	r3, [pc, #136]	@ (8012e34 <vTaskStartScheduler+0xc8>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012db0:	2301      	movs	r3, #1
 8012db2:	617b      	str	r3, [r7, #20]
 8012db4:	e001      	b.n	8012dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d102      	bne.n	8012dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012dc0:	f000 fe1a 	bl	80139f8 <xTimerCreateTimerTask>
 8012dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d11b      	bne.n	8012e04 <vTaskStartScheduler+0x98>
	__asm volatile
 8012dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	613b      	str	r3, [r7, #16]
}
 8012dde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012de0:	4b15      	ldr	r3, [pc, #84]	@ (8012e38 <vTaskStartScheduler+0xcc>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3354      	adds	r3, #84	@ 0x54
 8012de6:	4a15      	ldr	r2, [pc, #84]	@ (8012e3c <vTaskStartScheduler+0xd0>)
 8012de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012dea:	4b15      	ldr	r3, [pc, #84]	@ (8012e40 <vTaskStartScheduler+0xd4>)
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012df2:	4b14      	ldr	r3, [pc, #80]	@ (8012e44 <vTaskStartScheduler+0xd8>)
 8012df4:	2201      	movs	r2, #1
 8012df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012df8:	4b13      	ldr	r3, [pc, #76]	@ (8012e48 <vTaskStartScheduler+0xdc>)
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012dfe:	f001 f9df 	bl	80141c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012e02:	e00f      	b.n	8012e24 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e0a:	d10b      	bne.n	8012e24 <vTaskStartScheduler+0xb8>
	__asm volatile
 8012e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	60fb      	str	r3, [r7, #12]
}
 8012e1e:	bf00      	nop
 8012e20:	bf00      	nop
 8012e22:	e7fd      	b.n	8012e20 <vTaskStartScheduler+0xb4>
}
 8012e24:	bf00      	nop
 8012e26:	3718      	adds	r7, #24
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	080178d4 	.word	0x080178d4
 8012e30:	0801347d 	.word	0x0801347d
 8012e34:	24001b24 	.word	0x24001b24
 8012e38:	2400162c 	.word	0x2400162c
 8012e3c:	2400003c 	.word	0x2400003c
 8012e40:	24001b20 	.word	0x24001b20
 8012e44:	24001b0c 	.word	0x24001b0c
 8012e48:	24001b04 	.word	0x24001b04

08012e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012e50:	4b04      	ldr	r3, [pc, #16]	@ (8012e64 <vTaskSuspendAll+0x18>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	4a03      	ldr	r2, [pc, #12]	@ (8012e64 <vTaskSuspendAll+0x18>)
 8012e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012e5a:	bf00      	nop
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr
 8012e64:	24001b28 	.word	0x24001b28

08012e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012e72:	2300      	movs	r3, #0
 8012e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012e76:	4b42      	ldr	r3, [pc, #264]	@ (8012f80 <xTaskResumeAll+0x118>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10b      	bne.n	8012e96 <xTaskResumeAll+0x2e>
	__asm volatile
 8012e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	603b      	str	r3, [r7, #0]
}
 8012e90:	bf00      	nop
 8012e92:	bf00      	nop
 8012e94:	e7fd      	b.n	8012e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012e96:	f001 fa37 	bl	8014308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012e9a:	4b39      	ldr	r3, [pc, #228]	@ (8012f80 <xTaskResumeAll+0x118>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3b01      	subs	r3, #1
 8012ea0:	4a37      	ldr	r2, [pc, #220]	@ (8012f80 <xTaskResumeAll+0x118>)
 8012ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ea4:	4b36      	ldr	r3, [pc, #216]	@ (8012f80 <xTaskResumeAll+0x118>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d162      	bne.n	8012f72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012eac:	4b35      	ldr	r3, [pc, #212]	@ (8012f84 <xTaskResumeAll+0x11c>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d05e      	beq.n	8012f72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012eb4:	e02f      	b.n	8012f16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012eb6:	4b34      	ldr	r3, [pc, #208]	@ (8012f88 <xTaskResumeAll+0x120>)
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	3318      	adds	r3, #24
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fe fc62 	bl	801178c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	3304      	adds	r3, #4
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fe fc5d 	bl	801178c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8012f8c <xTaskResumeAll+0x124>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d903      	bls.n	8012ee6 <xTaskResumeAll+0x7e>
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8012f8c <xTaskResumeAll+0x124>)
 8012ee4:	6013      	str	r3, [r2, #0]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eea:	4613      	mov	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4413      	add	r3, r2
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	4a27      	ldr	r2, [pc, #156]	@ (8012f90 <xTaskResumeAll+0x128>)
 8012ef4:	441a      	add	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	3304      	adds	r3, #4
 8012efa:	4619      	mov	r1, r3
 8012efc:	4610      	mov	r0, r2
 8012efe:	f7fe fbe8 	bl	80116d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f06:	4b23      	ldr	r3, [pc, #140]	@ (8012f94 <xTaskResumeAll+0x12c>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d302      	bcc.n	8012f16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012f10:	4b21      	ldr	r3, [pc, #132]	@ (8012f98 <xTaskResumeAll+0x130>)
 8012f12:	2201      	movs	r2, #1
 8012f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f16:	4b1c      	ldr	r3, [pc, #112]	@ (8012f88 <xTaskResumeAll+0x120>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1cb      	bne.n	8012eb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012f24:	f000 fb66 	bl	80135f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012f28:	4b1c      	ldr	r3, [pc, #112]	@ (8012f9c <xTaskResumeAll+0x134>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d010      	beq.n	8012f56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012f34:	f000 f846 	bl	8012fc4 <xTaskIncrementTick>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d002      	beq.n	8012f44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012f3e:	4b16      	ldr	r3, [pc, #88]	@ (8012f98 <xTaskResumeAll+0x130>)
 8012f40:	2201      	movs	r2, #1
 8012f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	3b01      	subs	r3, #1
 8012f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1f1      	bne.n	8012f34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8012f50:	4b12      	ldr	r3, [pc, #72]	@ (8012f9c <xTaskResumeAll+0x134>)
 8012f52:	2200      	movs	r2, #0
 8012f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012f56:	4b10      	ldr	r3, [pc, #64]	@ (8012f98 <xTaskResumeAll+0x130>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d009      	beq.n	8012f72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012f62:	4b0f      	ldr	r3, [pc, #60]	@ (8012fa0 <xTaskResumeAll+0x138>)
 8012f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f68:	601a      	str	r2, [r3, #0]
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012f72:	f001 f9fb 	bl	801436c <vPortExitCritical>

	return xAlreadyYielded;
 8012f76:	68bb      	ldr	r3, [r7, #8]
}
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3710      	adds	r7, #16
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	24001b28 	.word	0x24001b28
 8012f84:	24001b00 	.word	0x24001b00
 8012f88:	24001ac0 	.word	0x24001ac0
 8012f8c:	24001b08 	.word	0x24001b08
 8012f90:	24001630 	.word	0x24001630
 8012f94:	2400162c 	.word	0x2400162c
 8012f98:	24001b14 	.word	0x24001b14
 8012f9c:	24001b10 	.word	0x24001b10
 8012fa0:	e000ed04 	.word	0xe000ed04

08012fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012faa:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <xTaskGetTickCount+0x1c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012fb0:	687b      	ldr	r3, [r7, #4]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop
 8012fc0:	24001b04 	.word	0x24001b04

08012fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fce:	4b4f      	ldr	r3, [pc, #316]	@ (801310c <xTaskIncrementTick+0x148>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f040 8090 	bne.w	80130f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8013110 <xTaskIncrementTick+0x14c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8013110 <xTaskIncrementTick+0x14c>)
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d121      	bne.n	8013030 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012fec:	4b49      	ldr	r3, [pc, #292]	@ (8013114 <xTaskIncrementTick+0x150>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00b      	beq.n	801300e <xTaskIncrementTick+0x4a>
	__asm volatile
 8012ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ffa:	f383 8811 	msr	BASEPRI, r3
 8012ffe:	f3bf 8f6f 	isb	sy
 8013002:	f3bf 8f4f 	dsb	sy
 8013006:	603b      	str	r3, [r7, #0]
}
 8013008:	bf00      	nop
 801300a:	bf00      	nop
 801300c:	e7fd      	b.n	801300a <xTaskIncrementTick+0x46>
 801300e:	4b41      	ldr	r3, [pc, #260]	@ (8013114 <xTaskIncrementTick+0x150>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	4b40      	ldr	r3, [pc, #256]	@ (8013118 <xTaskIncrementTick+0x154>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4a3e      	ldr	r2, [pc, #248]	@ (8013114 <xTaskIncrementTick+0x150>)
 801301a:	6013      	str	r3, [r2, #0]
 801301c:	4a3e      	ldr	r2, [pc, #248]	@ (8013118 <xTaskIncrementTick+0x154>)
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6013      	str	r3, [r2, #0]
 8013022:	4b3e      	ldr	r3, [pc, #248]	@ (801311c <xTaskIncrementTick+0x158>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3301      	adds	r3, #1
 8013028:	4a3c      	ldr	r2, [pc, #240]	@ (801311c <xTaskIncrementTick+0x158>)
 801302a:	6013      	str	r3, [r2, #0]
 801302c:	f000 fae2 	bl	80135f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013030:	4b3b      	ldr	r3, [pc, #236]	@ (8013120 <xTaskIncrementTick+0x15c>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	429a      	cmp	r2, r3
 8013038:	d349      	bcc.n	80130ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801303a:	4b36      	ldr	r3, [pc, #216]	@ (8013114 <xTaskIncrementTick+0x150>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d104      	bne.n	801304e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013044:	4b36      	ldr	r3, [pc, #216]	@ (8013120 <xTaskIncrementTick+0x15c>)
 8013046:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801304a:	601a      	str	r2, [r3, #0]
					break;
 801304c:	e03f      	b.n	80130ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801304e:	4b31      	ldr	r3, [pc, #196]	@ (8013114 <xTaskIncrementTick+0x150>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801305e:	693a      	ldr	r2, [r7, #16]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	429a      	cmp	r2, r3
 8013064:	d203      	bcs.n	801306e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013066:	4a2e      	ldr	r2, [pc, #184]	@ (8013120 <xTaskIncrementTick+0x15c>)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801306c:	e02f      	b.n	80130ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	3304      	adds	r3, #4
 8013072:	4618      	mov	r0, r3
 8013074:	f7fe fb8a 	bl	801178c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801307c:	2b00      	cmp	r3, #0
 801307e:	d004      	beq.n	801308a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	3318      	adds	r3, #24
 8013084:	4618      	mov	r0, r3
 8013086:	f7fe fb81 	bl	801178c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801308e:	4b25      	ldr	r3, [pc, #148]	@ (8013124 <xTaskIncrementTick+0x160>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	429a      	cmp	r2, r3
 8013094:	d903      	bls.n	801309e <xTaskIncrementTick+0xda>
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801309a:	4a22      	ldr	r2, [pc, #136]	@ (8013124 <xTaskIncrementTick+0x160>)
 801309c:	6013      	str	r3, [r2, #0]
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130a2:	4613      	mov	r3, r2
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	4413      	add	r3, r2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	4a1f      	ldr	r2, [pc, #124]	@ (8013128 <xTaskIncrementTick+0x164>)
 80130ac:	441a      	add	r2, r3
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	3304      	adds	r3, #4
 80130b2:	4619      	mov	r1, r3
 80130b4:	4610      	mov	r0, r2
 80130b6:	f7fe fb0c 	bl	80116d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130be:	4b1b      	ldr	r3, [pc, #108]	@ (801312c <xTaskIncrementTick+0x168>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d3b8      	bcc.n	801303a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80130c8:	2301      	movs	r3, #1
 80130ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130cc:	e7b5      	b.n	801303a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80130ce:	4b17      	ldr	r3, [pc, #92]	@ (801312c <xTaskIncrementTick+0x168>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130d4:	4914      	ldr	r1, [pc, #80]	@ (8013128 <xTaskIncrementTick+0x164>)
 80130d6:	4613      	mov	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	4413      	add	r3, r2
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	440b      	add	r3, r1
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d901      	bls.n	80130ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80130e6:	2301      	movs	r3, #1
 80130e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80130ea:	4b11      	ldr	r3, [pc, #68]	@ (8013130 <xTaskIncrementTick+0x16c>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d007      	beq.n	8013102 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80130f2:	2301      	movs	r3, #1
 80130f4:	617b      	str	r3, [r7, #20]
 80130f6:	e004      	b.n	8013102 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80130f8:	4b0e      	ldr	r3, [pc, #56]	@ (8013134 <xTaskIncrementTick+0x170>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	3301      	adds	r3, #1
 80130fe:	4a0d      	ldr	r2, [pc, #52]	@ (8013134 <xTaskIncrementTick+0x170>)
 8013100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013102:	697b      	ldr	r3, [r7, #20]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3718      	adds	r7, #24
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	24001b28 	.word	0x24001b28
 8013110:	24001b04 	.word	0x24001b04
 8013114:	24001ab8 	.word	0x24001ab8
 8013118:	24001abc 	.word	0x24001abc
 801311c:	24001b18 	.word	0x24001b18
 8013120:	24001b20 	.word	0x24001b20
 8013124:	24001b08 	.word	0x24001b08
 8013128:	24001630 	.word	0x24001630
 801312c:	2400162c 	.word	0x2400162c
 8013130:	24001b14 	.word	0x24001b14
 8013134:	24001b10 	.word	0x24001b10

08013138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801313e:	4b2b      	ldr	r3, [pc, #172]	@ (80131ec <vTaskSwitchContext+0xb4>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d003      	beq.n	801314e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013146:	4b2a      	ldr	r3, [pc, #168]	@ (80131f0 <vTaskSwitchContext+0xb8>)
 8013148:	2201      	movs	r2, #1
 801314a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801314c:	e047      	b.n	80131de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801314e:	4b28      	ldr	r3, [pc, #160]	@ (80131f0 <vTaskSwitchContext+0xb8>)
 8013150:	2200      	movs	r2, #0
 8013152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013154:	4b27      	ldr	r3, [pc, #156]	@ (80131f4 <vTaskSwitchContext+0xbc>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	60fb      	str	r3, [r7, #12]
 801315a:	e011      	b.n	8013180 <vTaskSwitchContext+0x48>
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10b      	bne.n	801317a <vTaskSwitchContext+0x42>
	__asm volatile
 8013162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013166:	f383 8811 	msr	BASEPRI, r3
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	607b      	str	r3, [r7, #4]
}
 8013174:	bf00      	nop
 8013176:	bf00      	nop
 8013178:	e7fd      	b.n	8013176 <vTaskSwitchContext+0x3e>
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3b01      	subs	r3, #1
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	491d      	ldr	r1, [pc, #116]	@ (80131f8 <vTaskSwitchContext+0xc0>)
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	4613      	mov	r3, r2
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	440b      	add	r3, r1
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d0e3      	beq.n	801315c <vTaskSwitchContext+0x24>
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	4613      	mov	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	4a16      	ldr	r2, [pc, #88]	@ (80131f8 <vTaskSwitchContext+0xc0>)
 80131a0:	4413      	add	r3, r2
 80131a2:	60bb      	str	r3, [r7, #8]
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	685b      	ldr	r3, [r3, #4]
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	605a      	str	r2, [r3, #4]
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	685a      	ldr	r2, [r3, #4]
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	3308      	adds	r3, #8
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d104      	bne.n	80131c4 <vTaskSwitchContext+0x8c>
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	605a      	str	r2, [r3, #4]
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	4a0c      	ldr	r2, [pc, #48]	@ (80131fc <vTaskSwitchContext+0xc4>)
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	4a09      	ldr	r2, [pc, #36]	@ (80131f4 <vTaskSwitchContext+0xbc>)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80131d4:	4b09      	ldr	r3, [pc, #36]	@ (80131fc <vTaskSwitchContext+0xc4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	3354      	adds	r3, #84	@ 0x54
 80131da:	4a09      	ldr	r2, [pc, #36]	@ (8013200 <vTaskSwitchContext+0xc8>)
 80131dc:	6013      	str	r3, [r2, #0]
}
 80131de:	bf00      	nop
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	24001b28 	.word	0x24001b28
 80131f0:	24001b14 	.word	0x24001b14
 80131f4:	24001b08 	.word	0x24001b08
 80131f8:	24001630 	.word	0x24001630
 80131fc:	2400162c 	.word	0x2400162c
 8013200:	2400003c 	.word	0x2400003c

08013204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10b      	bne.n	801322c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013218:	f383 8811 	msr	BASEPRI, r3
 801321c:	f3bf 8f6f 	isb	sy
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	60fb      	str	r3, [r7, #12]
}
 8013226:	bf00      	nop
 8013228:	bf00      	nop
 801322a:	e7fd      	b.n	8013228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801322c:	4b07      	ldr	r3, [pc, #28]	@ (801324c <vTaskPlaceOnEventList+0x48>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	3318      	adds	r3, #24
 8013232:	4619      	mov	r1, r3
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7fe fa70 	bl	801171a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801323a:	2101      	movs	r1, #1
 801323c:	6838      	ldr	r0, [r7, #0]
 801323e:	f000 fb87 	bl	8013950 <prvAddCurrentTaskToDelayedList>
}
 8013242:	bf00      	nop
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	2400162c 	.word	0x2400162c

08013250 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013250:	b580      	push	{r7, lr}
 8013252:	b086      	sub	sp, #24
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d10b      	bne.n	801327a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8013262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013266:	f383 8811 	msr	BASEPRI, r3
 801326a:	f3bf 8f6f 	isb	sy
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	617b      	str	r3, [r7, #20]
}
 8013274:	bf00      	nop
 8013276:	bf00      	nop
 8013278:	e7fd      	b.n	8013276 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801327a:	4b0a      	ldr	r3, [pc, #40]	@ (80132a4 <vTaskPlaceOnEventListRestricted+0x54>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3318      	adds	r3, #24
 8013280:	4619      	mov	r1, r3
 8013282:	68f8      	ldr	r0, [r7, #12]
 8013284:	f7fe fa25 	bl	80116d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d002      	beq.n	8013294 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013292:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013294:	6879      	ldr	r1, [r7, #4]
 8013296:	68b8      	ldr	r0, [r7, #8]
 8013298:	f000 fb5a 	bl	8013950 <prvAddCurrentTaskToDelayedList>
	}
 801329c:	bf00      	nop
 801329e:	3718      	adds	r7, #24
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	2400162c 	.word	0x2400162c

080132a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d10b      	bne.n	80132d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80132be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132c2:	f383 8811 	msr	BASEPRI, r3
 80132c6:	f3bf 8f6f 	isb	sy
 80132ca:	f3bf 8f4f 	dsb	sy
 80132ce:	60fb      	str	r3, [r7, #12]
}
 80132d0:	bf00      	nop
 80132d2:	bf00      	nop
 80132d4:	e7fd      	b.n	80132d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	3318      	adds	r3, #24
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fe fa56 	bl	801178c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132e0:	4b1d      	ldr	r3, [pc, #116]	@ (8013358 <xTaskRemoveFromEventList+0xb0>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d11d      	bne.n	8013324 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	3304      	adds	r3, #4
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fe fa4d 	bl	801178c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132f6:	4b19      	ldr	r3, [pc, #100]	@ (801335c <xTaskRemoveFromEventList+0xb4>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d903      	bls.n	8013306 <xTaskRemoveFromEventList+0x5e>
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013302:	4a16      	ldr	r2, [pc, #88]	@ (801335c <xTaskRemoveFromEventList+0xb4>)
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801330a:	4613      	mov	r3, r2
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	4413      	add	r3, r2
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4a13      	ldr	r2, [pc, #76]	@ (8013360 <xTaskRemoveFromEventList+0xb8>)
 8013314:	441a      	add	r2, r3
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	3304      	adds	r3, #4
 801331a:	4619      	mov	r1, r3
 801331c:	4610      	mov	r0, r2
 801331e:	f7fe f9d8 	bl	80116d2 <vListInsertEnd>
 8013322:	e005      	b.n	8013330 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	3318      	adds	r3, #24
 8013328:	4619      	mov	r1, r3
 801332a:	480e      	ldr	r0, [pc, #56]	@ (8013364 <xTaskRemoveFromEventList+0xbc>)
 801332c:	f7fe f9d1 	bl	80116d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013334:	4b0c      	ldr	r3, [pc, #48]	@ (8013368 <xTaskRemoveFromEventList+0xc0>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801333a:	429a      	cmp	r2, r3
 801333c:	d905      	bls.n	801334a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801333e:	2301      	movs	r3, #1
 8013340:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013342:	4b0a      	ldr	r3, [pc, #40]	@ (801336c <xTaskRemoveFromEventList+0xc4>)
 8013344:	2201      	movs	r2, #1
 8013346:	601a      	str	r2, [r3, #0]
 8013348:	e001      	b.n	801334e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801334a:	2300      	movs	r3, #0
 801334c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801334e:	697b      	ldr	r3, [r7, #20]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3718      	adds	r7, #24
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	24001b28 	.word	0x24001b28
 801335c:	24001b08 	.word	0x24001b08
 8013360:	24001630 	.word	0x24001630
 8013364:	24001ac0 	.word	0x24001ac0
 8013368:	2400162c 	.word	0x2400162c
 801336c:	24001b14 	.word	0x24001b14

08013370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013378:	4b06      	ldr	r3, [pc, #24]	@ (8013394 <vTaskInternalSetTimeOutState+0x24>)
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013380:	4b05      	ldr	r3, [pc, #20]	@ (8013398 <vTaskInternalSetTimeOutState+0x28>)
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	605a      	str	r2, [r3, #4]
}
 8013388:	bf00      	nop
 801338a:	370c      	adds	r7, #12
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr
 8013394:	24001b18 	.word	0x24001b18
 8013398:	24001b04 	.word	0x24001b04

0801339c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b088      	sub	sp, #32
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10b      	bne.n	80133c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	613b      	str	r3, [r7, #16]
}
 80133be:	bf00      	nop
 80133c0:	bf00      	nop
 80133c2:	e7fd      	b.n	80133c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d10b      	bne.n	80133e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80133ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ce:	f383 8811 	msr	BASEPRI, r3
 80133d2:	f3bf 8f6f 	isb	sy
 80133d6:	f3bf 8f4f 	dsb	sy
 80133da:	60fb      	str	r3, [r7, #12]
}
 80133dc:	bf00      	nop
 80133de:	bf00      	nop
 80133e0:	e7fd      	b.n	80133de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80133e2:	f000 ff91 	bl	8014308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80133e6:	4b1d      	ldr	r3, [pc, #116]	@ (801345c <xTaskCheckForTimeOut+0xc0>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	69ba      	ldr	r2, [r7, #24]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133fe:	d102      	bne.n	8013406 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013400:	2300      	movs	r3, #0
 8013402:	61fb      	str	r3, [r7, #28]
 8013404:	e023      	b.n	801344e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	4b15      	ldr	r3, [pc, #84]	@ (8013460 <xTaskCheckForTimeOut+0xc4>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	429a      	cmp	r2, r3
 8013410:	d007      	beq.n	8013422 <xTaskCheckForTimeOut+0x86>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	69ba      	ldr	r2, [r7, #24]
 8013418:	429a      	cmp	r2, r3
 801341a:	d302      	bcc.n	8013422 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801341c:	2301      	movs	r3, #1
 801341e:	61fb      	str	r3, [r7, #28]
 8013420:	e015      	b.n	801344e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	697a      	ldr	r2, [r7, #20]
 8013428:	429a      	cmp	r2, r3
 801342a:	d20b      	bcs.n	8013444 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	1ad2      	subs	r2, r2, r3
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7ff ff99 	bl	8013370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801343e:	2300      	movs	r3, #0
 8013440:	61fb      	str	r3, [r7, #28]
 8013442:	e004      	b.n	801344e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2200      	movs	r2, #0
 8013448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801344a:	2301      	movs	r3, #1
 801344c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801344e:	f000 ff8d 	bl	801436c <vPortExitCritical>

	return xReturn;
 8013452:	69fb      	ldr	r3, [r7, #28]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3720      	adds	r7, #32
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	24001b04 	.word	0x24001b04
 8013460:	24001b18 	.word	0x24001b18

08013464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013464:	b480      	push	{r7}
 8013466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013468:	4b03      	ldr	r3, [pc, #12]	@ (8013478 <vTaskMissedYield+0x14>)
 801346a:	2201      	movs	r2, #1
 801346c:	601a      	str	r2, [r3, #0]
}
 801346e:	bf00      	nop
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr
 8013478:	24001b14 	.word	0x24001b14

0801347c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013484:	f000 f852 	bl	801352c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013488:	4b06      	ldr	r3, [pc, #24]	@ (80134a4 <prvIdleTask+0x28>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d9f9      	bls.n	8013484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013490:	4b05      	ldr	r3, [pc, #20]	@ (80134a8 <prvIdleTask+0x2c>)
 8013492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013496:	601a      	str	r2, [r3, #0]
 8013498:	f3bf 8f4f 	dsb	sy
 801349c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80134a0:	e7f0      	b.n	8013484 <prvIdleTask+0x8>
 80134a2:	bf00      	nop
 80134a4:	24001630 	.word	0x24001630
 80134a8:	e000ed04 	.word	0xe000ed04

080134ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80134b2:	2300      	movs	r3, #0
 80134b4:	607b      	str	r3, [r7, #4]
 80134b6:	e00c      	b.n	80134d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	4613      	mov	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4413      	add	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	4a12      	ldr	r2, [pc, #72]	@ (801350c <prvInitialiseTaskLists+0x60>)
 80134c4:	4413      	add	r3, r2
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7fe f8d6 	bl	8011678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	3301      	adds	r3, #1
 80134d0:	607b      	str	r3, [r7, #4]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b37      	cmp	r3, #55	@ 0x37
 80134d6:	d9ef      	bls.n	80134b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80134d8:	480d      	ldr	r0, [pc, #52]	@ (8013510 <prvInitialiseTaskLists+0x64>)
 80134da:	f7fe f8cd 	bl	8011678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80134de:	480d      	ldr	r0, [pc, #52]	@ (8013514 <prvInitialiseTaskLists+0x68>)
 80134e0:	f7fe f8ca 	bl	8011678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80134e4:	480c      	ldr	r0, [pc, #48]	@ (8013518 <prvInitialiseTaskLists+0x6c>)
 80134e6:	f7fe f8c7 	bl	8011678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80134ea:	480c      	ldr	r0, [pc, #48]	@ (801351c <prvInitialiseTaskLists+0x70>)
 80134ec:	f7fe f8c4 	bl	8011678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80134f0:	480b      	ldr	r0, [pc, #44]	@ (8013520 <prvInitialiseTaskLists+0x74>)
 80134f2:	f7fe f8c1 	bl	8011678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80134f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013524 <prvInitialiseTaskLists+0x78>)
 80134f8:	4a05      	ldr	r2, [pc, #20]	@ (8013510 <prvInitialiseTaskLists+0x64>)
 80134fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80134fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013528 <prvInitialiseTaskLists+0x7c>)
 80134fe:	4a05      	ldr	r2, [pc, #20]	@ (8013514 <prvInitialiseTaskLists+0x68>)
 8013500:	601a      	str	r2, [r3, #0]
}
 8013502:	bf00      	nop
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	24001630 	.word	0x24001630
 8013510:	24001a90 	.word	0x24001a90
 8013514:	24001aa4 	.word	0x24001aa4
 8013518:	24001ac0 	.word	0x24001ac0
 801351c:	24001ad4 	.word	0x24001ad4
 8013520:	24001aec 	.word	0x24001aec
 8013524:	24001ab8 	.word	0x24001ab8
 8013528:	24001abc 	.word	0x24001abc

0801352c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013532:	e019      	b.n	8013568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013534:	f000 fee8 	bl	8014308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013538:	4b10      	ldr	r3, [pc, #64]	@ (801357c <prvCheckTasksWaitingTermination+0x50>)
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	68db      	ldr	r3, [r3, #12]
 801353e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	3304      	adds	r3, #4
 8013544:	4618      	mov	r0, r3
 8013546:	f7fe f921 	bl	801178c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801354a:	4b0d      	ldr	r3, [pc, #52]	@ (8013580 <prvCheckTasksWaitingTermination+0x54>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3b01      	subs	r3, #1
 8013550:	4a0b      	ldr	r2, [pc, #44]	@ (8013580 <prvCheckTasksWaitingTermination+0x54>)
 8013552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013554:	4b0b      	ldr	r3, [pc, #44]	@ (8013584 <prvCheckTasksWaitingTermination+0x58>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	3b01      	subs	r3, #1
 801355a:	4a0a      	ldr	r2, [pc, #40]	@ (8013584 <prvCheckTasksWaitingTermination+0x58>)
 801355c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801355e:	f000 ff05 	bl	801436c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f000 f810 	bl	8013588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013568:	4b06      	ldr	r3, [pc, #24]	@ (8013584 <prvCheckTasksWaitingTermination+0x58>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d1e1      	bne.n	8013534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013570:	bf00      	nop
 8013572:	bf00      	nop
 8013574:	3708      	adds	r7, #8
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	24001ad4 	.word	0x24001ad4
 8013580:	24001b00 	.word	0x24001b00
 8013584:	24001ae8 	.word	0x24001ae8

08013588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3354      	adds	r3, #84	@ 0x54
 8013594:	4618      	mov	r0, r3
 8013596:	f002 f823 	bl	80155e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d108      	bne.n	80135b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135a8:	4618      	mov	r0, r3
 80135aa:	f001 f89d 	bl	80146e8 <vPortFree>
				vPortFree( pxTCB );
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f001 f89a 	bl	80146e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80135b4:	e019      	b.n	80135ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d103      	bne.n	80135c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f001 f891 	bl	80146e8 <vPortFree>
	}
 80135c6:	e010      	b.n	80135ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80135ce:	2b02      	cmp	r3, #2
 80135d0:	d00b      	beq.n	80135ea <prvDeleteTCB+0x62>
	__asm volatile
 80135d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	60fb      	str	r3, [r7, #12]
}
 80135e4:	bf00      	nop
 80135e6:	bf00      	nop
 80135e8:	e7fd      	b.n	80135e6 <prvDeleteTCB+0x5e>
	}
 80135ea:	bf00      	nop
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
	...

080135f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135fa:	4b0c      	ldr	r3, [pc, #48]	@ (801362c <prvResetNextTaskUnblockTime+0x38>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d104      	bne.n	801360e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013604:	4b0a      	ldr	r3, [pc, #40]	@ (8013630 <prvResetNextTaskUnblockTime+0x3c>)
 8013606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801360a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801360c:	e008      	b.n	8013620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801360e:	4b07      	ldr	r3, [pc, #28]	@ (801362c <prvResetNextTaskUnblockTime+0x38>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	68db      	ldr	r3, [r3, #12]
 8013616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	4a04      	ldr	r2, [pc, #16]	@ (8013630 <prvResetNextTaskUnblockTime+0x3c>)
 801361e:	6013      	str	r3, [r2, #0]
}
 8013620:	bf00      	nop
 8013622:	370c      	adds	r7, #12
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr
 801362c:	24001ab8 	.word	0x24001ab8
 8013630:	24001b20 	.word	0x24001b20

08013634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013634:	b480      	push	{r7}
 8013636:	b083      	sub	sp, #12
 8013638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801363a:	4b0b      	ldr	r3, [pc, #44]	@ (8013668 <xTaskGetSchedulerState+0x34>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d102      	bne.n	8013648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013642:	2301      	movs	r3, #1
 8013644:	607b      	str	r3, [r7, #4]
 8013646:	e008      	b.n	801365a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013648:	4b08      	ldr	r3, [pc, #32]	@ (801366c <xTaskGetSchedulerState+0x38>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013650:	2302      	movs	r3, #2
 8013652:	607b      	str	r3, [r7, #4]
 8013654:	e001      	b.n	801365a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013656:	2300      	movs	r3, #0
 8013658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801365a:	687b      	ldr	r3, [r7, #4]
	}
 801365c:	4618      	mov	r0, r3
 801365e:	370c      	adds	r7, #12
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr
 8013668:	24001b0c 	.word	0x24001b0c
 801366c:	24001b28 	.word	0x24001b28

08013670 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801367c:	2300      	movs	r3, #0
 801367e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d051      	beq.n	801372a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801368a:	4b2a      	ldr	r3, [pc, #168]	@ (8013734 <xTaskPriorityInherit+0xc4>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013690:	429a      	cmp	r2, r3
 8013692:	d241      	bcs.n	8013718 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	2b00      	cmp	r3, #0
 801369a:	db06      	blt.n	80136aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801369c:	4b25      	ldr	r3, [pc, #148]	@ (8013734 <xTaskPriorityInherit+0xc4>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	6959      	ldr	r1, [r3, #20]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136b2:	4613      	mov	r3, r2
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	4413      	add	r3, r2
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	4a1f      	ldr	r2, [pc, #124]	@ (8013738 <xTaskPriorityInherit+0xc8>)
 80136bc:	4413      	add	r3, r2
 80136be:	4299      	cmp	r1, r3
 80136c0:	d122      	bne.n	8013708 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	3304      	adds	r3, #4
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fe f860 	bl	801178c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80136cc:	4b19      	ldr	r3, [pc, #100]	@ (8013734 <xTaskPriorityInherit+0xc4>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136da:	4b18      	ldr	r3, [pc, #96]	@ (801373c <xTaskPriorityInherit+0xcc>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d903      	bls.n	80136ea <xTaskPriorityInherit+0x7a>
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136e6:	4a15      	ldr	r2, [pc, #84]	@ (801373c <xTaskPriorityInherit+0xcc>)
 80136e8:	6013      	str	r3, [r2, #0]
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136ee:	4613      	mov	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4a10      	ldr	r2, [pc, #64]	@ (8013738 <xTaskPriorityInherit+0xc8>)
 80136f8:	441a      	add	r2, r3
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	3304      	adds	r3, #4
 80136fe:	4619      	mov	r1, r3
 8013700:	4610      	mov	r0, r2
 8013702:	f7fd ffe6 	bl	80116d2 <vListInsertEnd>
 8013706:	e004      	b.n	8013712 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013708:	4b0a      	ldr	r3, [pc, #40]	@ (8013734 <xTaskPriorityInherit+0xc4>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013712:	2301      	movs	r3, #1
 8013714:	60fb      	str	r3, [r7, #12]
 8013716:	e008      	b.n	801372a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801371c:	4b05      	ldr	r3, [pc, #20]	@ (8013734 <xTaskPriorityInherit+0xc4>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013722:	429a      	cmp	r2, r3
 8013724:	d201      	bcs.n	801372a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013726:	2301      	movs	r3, #1
 8013728:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801372a:	68fb      	ldr	r3, [r7, #12]
	}
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	2400162c 	.word	0x2400162c
 8013738:	24001630 	.word	0x24001630
 801373c:	24001b08 	.word	0x24001b08

08013740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013740:	b580      	push	{r7, lr}
 8013742:	b086      	sub	sp, #24
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801374c:	2300      	movs	r3, #0
 801374e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d058      	beq.n	8013808 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013756:	4b2f      	ldr	r3, [pc, #188]	@ (8013814 <xTaskPriorityDisinherit+0xd4>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	693a      	ldr	r2, [r7, #16]
 801375c:	429a      	cmp	r2, r3
 801375e:	d00b      	beq.n	8013778 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	60fb      	str	r3, [r7, #12]
}
 8013772:	bf00      	nop
 8013774:	bf00      	nop
 8013776:	e7fd      	b.n	8013774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801377c:	2b00      	cmp	r3, #0
 801377e:	d10b      	bne.n	8013798 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8013780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013784:	f383 8811 	msr	BASEPRI, r3
 8013788:	f3bf 8f6f 	isb	sy
 801378c:	f3bf 8f4f 	dsb	sy
 8013790:	60bb      	str	r3, [r7, #8]
}
 8013792:	bf00      	nop
 8013794:	bf00      	nop
 8013796:	e7fd      	b.n	8013794 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801379c:	1e5a      	subs	r2, r3, #1
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d02c      	beq.n	8013808 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d128      	bne.n	8013808 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	3304      	adds	r3, #4
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fd ffe6 	bl	801178c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013818 <xTaskPriorityDisinherit+0xd8>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d903      	bls.n	80137e8 <xTaskPriorityDisinherit+0xa8>
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137e4:	4a0c      	ldr	r2, [pc, #48]	@ (8013818 <xTaskPriorityDisinherit+0xd8>)
 80137e6:	6013      	str	r3, [r2, #0]
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137ec:	4613      	mov	r3, r2
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	4413      	add	r3, r2
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	4a09      	ldr	r2, [pc, #36]	@ (801381c <xTaskPriorityDisinherit+0xdc>)
 80137f6:	441a      	add	r2, r3
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	3304      	adds	r3, #4
 80137fc:	4619      	mov	r1, r3
 80137fe:	4610      	mov	r0, r2
 8013800:	f7fd ff67 	bl	80116d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013804:	2301      	movs	r3, #1
 8013806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013808:	697b      	ldr	r3, [r7, #20]
	}
 801380a:	4618      	mov	r0, r3
 801380c:	3718      	adds	r7, #24
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	2400162c 	.word	0x2400162c
 8013818:	24001b08 	.word	0x24001b08
 801381c:	24001630 	.word	0x24001630

08013820 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013820:	b580      	push	{r7, lr}
 8013822:	b088      	sub	sp, #32
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801382e:	2301      	movs	r3, #1
 8013830:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d06c      	beq.n	8013912 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013838:	69bb      	ldr	r3, [r7, #24]
 801383a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10b      	bne.n	8013858 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8013840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	60fb      	str	r3, [r7, #12]
}
 8013852:	bf00      	nop
 8013854:	bf00      	nop
 8013856:	e7fd      	b.n	8013854 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013858:	69bb      	ldr	r3, [r7, #24]
 801385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801385c:	683a      	ldr	r2, [r7, #0]
 801385e:	429a      	cmp	r2, r3
 8013860:	d902      	bls.n	8013868 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	61fb      	str	r3, [r7, #28]
 8013866:	e002      	b.n	801386e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801386c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013872:	69fa      	ldr	r2, [r7, #28]
 8013874:	429a      	cmp	r2, r3
 8013876:	d04c      	beq.n	8013912 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801387c:	697a      	ldr	r2, [r7, #20]
 801387e:	429a      	cmp	r2, r3
 8013880:	d147      	bne.n	8013912 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013882:	4b26      	ldr	r3, [pc, #152]	@ (801391c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	69ba      	ldr	r2, [r7, #24]
 8013888:	429a      	cmp	r2, r3
 801388a:	d10b      	bne.n	80138a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	60bb      	str	r3, [r7, #8]
}
 801389e:	bf00      	nop
 80138a0:	bf00      	nop
 80138a2:	e7fd      	b.n	80138a0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	69fa      	ldr	r2, [r7, #28]
 80138ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	699b      	ldr	r3, [r3, #24]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	db04      	blt.n	80138c2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	6959      	ldr	r1, [r3, #20]
 80138c6:	693a      	ldr	r2, [r7, #16]
 80138c8:	4613      	mov	r3, r2
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	4413      	add	r3, r2
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4a13      	ldr	r2, [pc, #76]	@ (8013920 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80138d2:	4413      	add	r3, r2
 80138d4:	4299      	cmp	r1, r3
 80138d6:	d11c      	bne.n	8013912 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	3304      	adds	r3, #4
 80138dc:	4618      	mov	r0, r3
 80138de:	f7fd ff55 	bl	801178c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013924 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d903      	bls.n	80138f6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013924 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80138f4:	6013      	str	r3, [r2, #0]
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138fa:	4613      	mov	r3, r2
 80138fc:	009b      	lsls	r3, r3, #2
 80138fe:	4413      	add	r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4a07      	ldr	r2, [pc, #28]	@ (8013920 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013904:	441a      	add	r2, r3
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	3304      	adds	r3, #4
 801390a:	4619      	mov	r1, r3
 801390c:	4610      	mov	r0, r2
 801390e:	f7fd fee0 	bl	80116d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013912:	bf00      	nop
 8013914:	3720      	adds	r7, #32
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	2400162c 	.word	0x2400162c
 8013920:	24001630 	.word	0x24001630
 8013924:	24001b08 	.word	0x24001b08

08013928 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013928:	b480      	push	{r7}
 801392a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801392c:	4b07      	ldr	r3, [pc, #28]	@ (801394c <pvTaskIncrementMutexHeldCount+0x24>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d004      	beq.n	801393e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013934:	4b05      	ldr	r3, [pc, #20]	@ (801394c <pvTaskIncrementMutexHeldCount+0x24>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801393a:	3201      	adds	r2, #1
 801393c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801393e:	4b03      	ldr	r3, [pc, #12]	@ (801394c <pvTaskIncrementMutexHeldCount+0x24>)
 8013940:	681b      	ldr	r3, [r3, #0]
	}
 8013942:	4618      	mov	r0, r3
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr
 801394c:	2400162c 	.word	0x2400162c

08013950 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801395a:	4b21      	ldr	r3, [pc, #132]	@ (80139e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013960:	4b20      	ldr	r3, [pc, #128]	@ (80139e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	3304      	adds	r3, #4
 8013966:	4618      	mov	r0, r3
 8013968:	f7fd ff10 	bl	801178c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013972:	d10a      	bne.n	801398a <prvAddCurrentTaskToDelayedList+0x3a>
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d007      	beq.n	801398a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801397a:	4b1a      	ldr	r3, [pc, #104]	@ (80139e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	3304      	adds	r3, #4
 8013980:	4619      	mov	r1, r3
 8013982:	4819      	ldr	r0, [pc, #100]	@ (80139e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8013984:	f7fd fea5 	bl	80116d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013988:	e026      	b.n	80139d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801398a:	68fa      	ldr	r2, [r7, #12]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4413      	add	r3, r2
 8013990:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013992:	4b14      	ldr	r3, [pc, #80]	@ (80139e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68ba      	ldr	r2, [r7, #8]
 8013998:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801399a:	68ba      	ldr	r2, [r7, #8]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d209      	bcs.n	80139b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139a2:	4b12      	ldr	r3, [pc, #72]	@ (80139ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	4b0f      	ldr	r3, [pc, #60]	@ (80139e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3304      	adds	r3, #4
 80139ac:	4619      	mov	r1, r3
 80139ae:	4610      	mov	r0, r2
 80139b0:	f7fd feb3 	bl	801171a <vListInsert>
}
 80139b4:	e010      	b.n	80139d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139b6:	4b0e      	ldr	r3, [pc, #56]	@ (80139f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80139b8:	681a      	ldr	r2, [r3, #0]
 80139ba:	4b0a      	ldr	r3, [pc, #40]	@ (80139e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	3304      	adds	r3, #4
 80139c0:	4619      	mov	r1, r3
 80139c2:	4610      	mov	r0, r2
 80139c4:	f7fd fea9 	bl	801171a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80139c8:	4b0a      	ldr	r3, [pc, #40]	@ (80139f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	68ba      	ldr	r2, [r7, #8]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d202      	bcs.n	80139d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80139d2:	4a08      	ldr	r2, [pc, #32]	@ (80139f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	6013      	str	r3, [r2, #0]
}
 80139d8:	bf00      	nop
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	24001b04 	.word	0x24001b04
 80139e4:	2400162c 	.word	0x2400162c
 80139e8:	24001aec 	.word	0x24001aec
 80139ec:	24001abc 	.word	0x24001abc
 80139f0:	24001ab8 	.word	0x24001ab8
 80139f4:	24001b20 	.word	0x24001b20

080139f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b08a      	sub	sp, #40	@ 0x28
 80139fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80139fe:	2300      	movs	r3, #0
 8013a00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013a02:	f000 fb13 	bl	801402c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013a06:	4b1d      	ldr	r3, [pc, #116]	@ (8013a7c <xTimerCreateTimerTask+0x84>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d021      	beq.n	8013a52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013a12:	2300      	movs	r3, #0
 8013a14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013a16:	1d3a      	adds	r2, r7, #4
 8013a18:	f107 0108 	add.w	r1, r7, #8
 8013a1c:	f107 030c 	add.w	r3, r7, #12
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fd fe0f 	bl	8011644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013a26:	6879      	ldr	r1, [r7, #4]
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	68fa      	ldr	r2, [r7, #12]
 8013a2c:	9202      	str	r2, [sp, #8]
 8013a2e:	9301      	str	r3, [sp, #4]
 8013a30:	2302      	movs	r3, #2
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	2300      	movs	r3, #0
 8013a36:	460a      	mov	r2, r1
 8013a38:	4911      	ldr	r1, [pc, #68]	@ (8013a80 <xTimerCreateTimerTask+0x88>)
 8013a3a:	4812      	ldr	r0, [pc, #72]	@ (8013a84 <xTimerCreateTimerTask+0x8c>)
 8013a3c:	f7fe fdbe 	bl	80125bc <xTaskCreateStatic>
 8013a40:	4603      	mov	r3, r0
 8013a42:	4a11      	ldr	r2, [pc, #68]	@ (8013a88 <xTimerCreateTimerTask+0x90>)
 8013a44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013a46:	4b10      	ldr	r3, [pc, #64]	@ (8013a88 <xTimerCreateTimerTask+0x90>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d10b      	bne.n	8013a70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8013a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a5c:	f383 8811 	msr	BASEPRI, r3
 8013a60:	f3bf 8f6f 	isb	sy
 8013a64:	f3bf 8f4f 	dsb	sy
 8013a68:	613b      	str	r3, [r7, #16]
}
 8013a6a:	bf00      	nop
 8013a6c:	bf00      	nop
 8013a6e:	e7fd      	b.n	8013a6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013a70:	697b      	ldr	r3, [r7, #20]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3718      	adds	r7, #24
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	24001b5c 	.word	0x24001b5c
 8013a80:	080178dc 	.word	0x080178dc
 8013a84:	08013bc5 	.word	0x08013bc5
 8013a88:	24001b60 	.word	0x24001b60

08013a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b08a      	sub	sp, #40	@ 0x28
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10b      	bne.n	8013abc <xTimerGenericCommand+0x30>
	__asm volatile
 8013aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	623b      	str	r3, [r7, #32]
}
 8013ab6:	bf00      	nop
 8013ab8:	bf00      	nop
 8013aba:	e7fd      	b.n	8013ab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013abc:	4b19      	ldr	r3, [pc, #100]	@ (8013b24 <xTimerGenericCommand+0x98>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d02a      	beq.n	8013b1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	2b05      	cmp	r3, #5
 8013ad4:	dc18      	bgt.n	8013b08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013ad6:	f7ff fdad 	bl	8013634 <xTaskGetSchedulerState>
 8013ada:	4603      	mov	r3, r0
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d109      	bne.n	8013af4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013ae0:	4b10      	ldr	r3, [pc, #64]	@ (8013b24 <xTimerGenericCommand+0x98>)
 8013ae2:	6818      	ldr	r0, [r3, #0]
 8013ae4:	f107 0110 	add.w	r1, r7, #16
 8013ae8:	2300      	movs	r3, #0
 8013aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013aec:	f7fd ffbe 	bl	8011a6c <xQueueGenericSend>
 8013af0:	6278      	str	r0, [r7, #36]	@ 0x24
 8013af2:	e012      	b.n	8013b1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013af4:	4b0b      	ldr	r3, [pc, #44]	@ (8013b24 <xTimerGenericCommand+0x98>)
 8013af6:	6818      	ldr	r0, [r3, #0]
 8013af8:	f107 0110 	add.w	r1, r7, #16
 8013afc:	2300      	movs	r3, #0
 8013afe:	2200      	movs	r2, #0
 8013b00:	f7fd ffb4 	bl	8011a6c <xQueueGenericSend>
 8013b04:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b06:	e008      	b.n	8013b1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013b08:	4b06      	ldr	r3, [pc, #24]	@ (8013b24 <xTimerGenericCommand+0x98>)
 8013b0a:	6818      	ldr	r0, [r3, #0]
 8013b0c:	f107 0110 	add.w	r1, r7, #16
 8013b10:	2300      	movs	r3, #0
 8013b12:	683a      	ldr	r2, [r7, #0]
 8013b14:	f7fe f8ac 	bl	8011c70 <xQueueGenericSendFromISR>
 8013b18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3728      	adds	r7, #40	@ 0x28
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	24001b5c 	.word	0x24001b5c

08013b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b088      	sub	sp, #32
 8013b2c:	af02      	add	r7, sp, #8
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b32:	4b23      	ldr	r3, [pc, #140]	@ (8013bc0 <prvProcessExpiredTimer+0x98>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	3304      	adds	r3, #4
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fd fe23 	bl	801178c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b4c:	f003 0304 	and.w	r3, r3, #4
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d023      	beq.n	8013b9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	699a      	ldr	r2, [r3, #24]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	18d1      	adds	r1, r2, r3
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	683a      	ldr	r2, [r7, #0]
 8013b60:	6978      	ldr	r0, [r7, #20]
 8013b62:	f000 f8d5 	bl	8013d10 <prvInsertTimerInActiveList>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d020      	beq.n	8013bae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	2300      	movs	r3, #0
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	2100      	movs	r1, #0
 8013b76:	6978      	ldr	r0, [r7, #20]
 8013b78:	f7ff ff88 	bl	8013a8c <xTimerGenericCommand>
 8013b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d114      	bne.n	8013bae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8013b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b88:	f383 8811 	msr	BASEPRI, r3
 8013b8c:	f3bf 8f6f 	isb	sy
 8013b90:	f3bf 8f4f 	dsb	sy
 8013b94:	60fb      	str	r3, [r7, #12]
}
 8013b96:	bf00      	nop
 8013b98:	bf00      	nop
 8013b9a:	e7fd      	b.n	8013b98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ba2:	f023 0301 	bic.w	r3, r3, #1
 8013ba6:	b2da      	uxtb	r2, r3
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	6a1b      	ldr	r3, [r3, #32]
 8013bb2:	6978      	ldr	r0, [r7, #20]
 8013bb4:	4798      	blx	r3
}
 8013bb6:	bf00      	nop
 8013bb8:	3718      	adds	r7, #24
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	24001b54 	.word	0x24001b54

08013bc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013bcc:	f107 0308 	add.w	r3, r7, #8
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f000 f859 	bl	8013c88 <prvGetNextExpireTime>
 8013bd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	4619      	mov	r1, r3
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f000 f805 	bl	8013bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013be2:	f000 f8d7 	bl	8013d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013be6:	bf00      	nop
 8013be8:	e7f0      	b.n	8013bcc <prvTimerTask+0x8>
	...

08013bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013bf6:	f7ff f929 	bl	8012e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bfa:	f107 0308 	add.w	r3, r7, #8
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f000 f866 	bl	8013cd0 <prvSampleTimeNow>
 8013c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d130      	bne.n	8013c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d10a      	bne.n	8013c28 <prvProcessTimerOrBlockTask+0x3c>
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d806      	bhi.n	8013c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013c1a:	f7ff f925 	bl	8012e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013c1e:	68f9      	ldr	r1, [r7, #12]
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ff ff81 	bl	8013b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013c26:	e024      	b.n	8013c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d008      	beq.n	8013c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013c2e:	4b13      	ldr	r3, [pc, #76]	@ (8013c7c <prvProcessTimerOrBlockTask+0x90>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d101      	bne.n	8013c3c <prvProcessTimerOrBlockTask+0x50>
 8013c38:	2301      	movs	r3, #1
 8013c3a:	e000      	b.n	8013c3e <prvProcessTimerOrBlockTask+0x52>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013c40:	4b0f      	ldr	r3, [pc, #60]	@ (8013c80 <prvProcessTimerOrBlockTask+0x94>)
 8013c42:	6818      	ldr	r0, [r3, #0]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	1ad3      	subs	r3, r2, r3
 8013c4a:	683a      	ldr	r2, [r7, #0]
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	f7fe fc81 	bl	8012554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013c52:	f7ff f909 	bl	8012e68 <xTaskResumeAll>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013c5c:	4b09      	ldr	r3, [pc, #36]	@ (8013c84 <prvProcessTimerOrBlockTask+0x98>)
 8013c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c62:	601a      	str	r2, [r3, #0]
 8013c64:	f3bf 8f4f 	dsb	sy
 8013c68:	f3bf 8f6f 	isb	sy
}
 8013c6c:	e001      	b.n	8013c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013c6e:	f7ff f8fb 	bl	8012e68 <xTaskResumeAll>
}
 8013c72:	bf00      	nop
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	24001b58 	.word	0x24001b58
 8013c80:	24001b5c 	.word	0x24001b5c
 8013c84:	e000ed04 	.word	0xe000ed04

08013c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013c90:	4b0e      	ldr	r3, [pc, #56]	@ (8013ccc <prvGetNextExpireTime+0x44>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <prvGetNextExpireTime+0x16>
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	e000      	b.n	8013ca0 <prvGetNextExpireTime+0x18>
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d105      	bne.n	8013cb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013cac:	4b07      	ldr	r3, [pc, #28]	@ (8013ccc <prvGetNextExpireTime+0x44>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	60fb      	str	r3, [r7, #12]
 8013cb6:	e001      	b.n	8013cbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	24001b54 	.word	0x24001b54

08013cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013cd8:	f7ff f964 	bl	8012fa4 <xTaskGetTickCount>
 8013cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013cde:	4b0b      	ldr	r3, [pc, #44]	@ (8013d0c <prvSampleTimeNow+0x3c>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d205      	bcs.n	8013cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ce8:	f000 f93a 	bl	8013f60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2201      	movs	r2, #1
 8013cf0:	601a      	str	r2, [r3, #0]
 8013cf2:	e002      	b.n	8013cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013cfa:	4a04      	ldr	r2, [pc, #16]	@ (8013d0c <prvSampleTimeNow+0x3c>)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013d00:	68fb      	ldr	r3, [r7, #12]
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	24001b64 	.word	0x24001b64

08013d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	68ba      	ldr	r2, [r7, #8]
 8013d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d812      	bhi.n	8013d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	1ad2      	subs	r2, r2, r3
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	699b      	ldr	r3, [r3, #24]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d302      	bcc.n	8013d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013d44:	2301      	movs	r3, #1
 8013d46:	617b      	str	r3, [r7, #20]
 8013d48:	e01b      	b.n	8013d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013d4a:	4b10      	ldr	r3, [pc, #64]	@ (8013d8c <prvInsertTimerInActiveList+0x7c>)
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	3304      	adds	r3, #4
 8013d52:	4619      	mov	r1, r3
 8013d54:	4610      	mov	r0, r2
 8013d56:	f7fd fce0 	bl	801171a <vListInsert>
 8013d5a:	e012      	b.n	8013d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013d5c:	687a      	ldr	r2, [r7, #4]
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d206      	bcs.n	8013d72 <prvInsertTimerInActiveList+0x62>
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d302      	bcc.n	8013d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	617b      	str	r3, [r7, #20]
 8013d70:	e007      	b.n	8013d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d72:	4b07      	ldr	r3, [pc, #28]	@ (8013d90 <prvInsertTimerInActiveList+0x80>)
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	3304      	adds	r3, #4
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	f7fd fccc 	bl	801171a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013d82:	697b      	ldr	r3, [r7, #20]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3718      	adds	r7, #24
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	24001b58 	.word	0x24001b58
 8013d90:	24001b54 	.word	0x24001b54

08013d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b08e      	sub	sp, #56	@ 0x38
 8013d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d9a:	e0ce      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	da19      	bge.n	8013dd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013da2:	1d3b      	adds	r3, r7, #4
 8013da4:	3304      	adds	r3, #4
 8013da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d10b      	bne.n	8013dc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8013dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013db2:	f383 8811 	msr	BASEPRI, r3
 8013db6:	f3bf 8f6f 	isb	sy
 8013dba:	f3bf 8f4f 	dsb	sy
 8013dbe:	61fb      	str	r3, [r7, #28]
}
 8013dc0:	bf00      	nop
 8013dc2:	bf00      	nop
 8013dc4:	e7fd      	b.n	8013dc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013dcc:	6850      	ldr	r0, [r2, #4]
 8013dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013dd0:	6892      	ldr	r2, [r2, #8]
 8013dd2:	4611      	mov	r1, r2
 8013dd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	f2c0 80ae 	blt.w	8013f3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013de4:	695b      	ldr	r3, [r3, #20]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d004      	beq.n	8013df4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dec:	3304      	adds	r3, #4
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7fd fccc 	bl	801178c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013df4:	463b      	mov	r3, r7
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7ff ff6a 	bl	8013cd0 <prvSampleTimeNow>
 8013dfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b09      	cmp	r3, #9
 8013e02:	f200 8097 	bhi.w	8013f34 <prvProcessReceivedCommands+0x1a0>
 8013e06:	a201      	add	r2, pc, #4	@ (adr r2, 8013e0c <prvProcessReceivedCommands+0x78>)
 8013e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e0c:	08013e35 	.word	0x08013e35
 8013e10:	08013e35 	.word	0x08013e35
 8013e14:	08013e35 	.word	0x08013e35
 8013e18:	08013eab 	.word	0x08013eab
 8013e1c:	08013ebf 	.word	0x08013ebf
 8013e20:	08013f0b 	.word	0x08013f0b
 8013e24:	08013e35 	.word	0x08013e35
 8013e28:	08013e35 	.word	0x08013e35
 8013e2c:	08013eab 	.word	0x08013eab
 8013e30:	08013ebf 	.word	0x08013ebf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e3a:	f043 0301 	orr.w	r3, r3, #1
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	18d1      	adds	r1, r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e54:	f7ff ff5c 	bl	8013d10 <prvInsertTimerInActiveList>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d06c      	beq.n	8013f38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e6c:	f003 0304 	and.w	r3, r3, #4
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d061      	beq.n	8013f38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013e74:	68ba      	ldr	r2, [r7, #8]
 8013e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	441a      	add	r2, r3
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	2300      	movs	r3, #0
 8013e82:	2100      	movs	r1, #0
 8013e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e86:	f7ff fe01 	bl	8013a8c <xTimerGenericCommand>
 8013e8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013e8c:	6a3b      	ldr	r3, [r7, #32]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d152      	bne.n	8013f38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8013e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e96:	f383 8811 	msr	BASEPRI, r3
 8013e9a:	f3bf 8f6f 	isb	sy
 8013e9e:	f3bf 8f4f 	dsb	sy
 8013ea2:	61bb      	str	r3, [r7, #24]
}
 8013ea4:	bf00      	nop
 8013ea6:	bf00      	nop
 8013ea8:	e7fd      	b.n	8013ea6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013eb0:	f023 0301 	bic.w	r3, r3, #1
 8013eb4:	b2da      	uxtb	r2, r3
 8013eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013ebc:	e03d      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ec4:	f043 0301 	orr.w	r3, r3, #1
 8013ec8:	b2da      	uxtb	r2, r3
 8013eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ecc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013ed0:	68ba      	ldr	r2, [r7, #8]
 8013ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed8:	699b      	ldr	r3, [r3, #24]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d10b      	bne.n	8013ef6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8013ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee2:	f383 8811 	msr	BASEPRI, r3
 8013ee6:	f3bf 8f6f 	isb	sy
 8013eea:	f3bf 8f4f 	dsb	sy
 8013eee:	617b      	str	r3, [r7, #20]
}
 8013ef0:	bf00      	nop
 8013ef2:	bf00      	nop
 8013ef4:	e7fd      	b.n	8013ef2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ef8:	699a      	ldr	r2, [r3, #24]
 8013efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efc:	18d1      	adds	r1, r2, r3
 8013efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f04:	f7ff ff04 	bl	8013d10 <prvInsertTimerInActiveList>
					break;
 8013f08:	e017      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f10:	f003 0302 	and.w	r3, r3, #2
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d103      	bne.n	8013f20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f1a:	f000 fbe5 	bl	80146e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013f1e:	e00c      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f26:	f023 0301 	bic.w	r3, r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013f32:	e002      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8013f34:	bf00      	nop
 8013f36:	e000      	b.n	8013f3a <prvProcessReceivedCommands+0x1a6>
					break;
 8013f38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f3a:	4b08      	ldr	r3, [pc, #32]	@ (8013f5c <prvProcessReceivedCommands+0x1c8>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	1d39      	adds	r1, r7, #4
 8013f40:	2200      	movs	r2, #0
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fd ffc2 	bl	8011ecc <xQueueReceive>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f47f af26 	bne.w	8013d9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013f50:	bf00      	nop
 8013f52:	bf00      	nop
 8013f54:	3730      	adds	r7, #48	@ 0x30
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	24001b5c 	.word	0x24001b5c

08013f60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b088      	sub	sp, #32
 8013f64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013f66:	e049      	b.n	8013ffc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f68:	4b2e      	ldr	r3, [pc, #184]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f72:	4b2c      	ldr	r3, [pc, #176]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7fd fc03 	bl	801178c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6a1b      	ldr	r3, [r3, #32]
 8013f8a:	68f8      	ldr	r0, [r7, #12]
 8013f8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f94:	f003 0304 	and.w	r3, r3, #4
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d02f      	beq.n	8013ffc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	693a      	ldr	r2, [r7, #16]
 8013fa2:	4413      	add	r3, r2
 8013fa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013fa6:	68ba      	ldr	r2, [r7, #8]
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d90e      	bls.n	8013fcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	68fa      	ldr	r2, [r7, #12]
 8013fb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013fba:	4b1a      	ldr	r3, [pc, #104]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	3304      	adds	r3, #4
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	4610      	mov	r0, r2
 8013fc6:	f7fd fba8 	bl	801171a <vListInsert>
 8013fca:	e017      	b.n	8013ffc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013fcc:	2300      	movs	r3, #0
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	693a      	ldr	r2, [r7, #16]
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	f7ff fd58 	bl	8013a8c <xTimerGenericCommand>
 8013fdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d10b      	bne.n	8013ffc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8013fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe8:	f383 8811 	msr	BASEPRI, r3
 8013fec:	f3bf 8f6f 	isb	sy
 8013ff0:	f3bf 8f4f 	dsb	sy
 8013ff4:	603b      	str	r3, [r7, #0]
}
 8013ff6:	bf00      	nop
 8013ff8:	bf00      	nop
 8013ffa:	e7fd      	b.n	8013ff8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ffc:	4b09      	ldr	r3, [pc, #36]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1b0      	bne.n	8013f68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014006:	4b07      	ldr	r3, [pc, #28]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801400c:	4b06      	ldr	r3, [pc, #24]	@ (8014028 <prvSwitchTimerLists+0xc8>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	4a04      	ldr	r2, [pc, #16]	@ (8014024 <prvSwitchTimerLists+0xc4>)
 8014012:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014014:	4a04      	ldr	r2, [pc, #16]	@ (8014028 <prvSwitchTimerLists+0xc8>)
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	6013      	str	r3, [r2, #0]
}
 801401a:	bf00      	nop
 801401c:	3718      	adds	r7, #24
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	24001b54 	.word	0x24001b54
 8014028:	24001b58 	.word	0x24001b58

0801402c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014032:	f000 f969 	bl	8014308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014036:	4b15      	ldr	r3, [pc, #84]	@ (801408c <prvCheckForValidListAndQueue+0x60>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d120      	bne.n	8014080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801403e:	4814      	ldr	r0, [pc, #80]	@ (8014090 <prvCheckForValidListAndQueue+0x64>)
 8014040:	f7fd fb1a 	bl	8011678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014044:	4813      	ldr	r0, [pc, #76]	@ (8014094 <prvCheckForValidListAndQueue+0x68>)
 8014046:	f7fd fb17 	bl	8011678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801404a:	4b13      	ldr	r3, [pc, #76]	@ (8014098 <prvCheckForValidListAndQueue+0x6c>)
 801404c:	4a10      	ldr	r2, [pc, #64]	@ (8014090 <prvCheckForValidListAndQueue+0x64>)
 801404e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014050:	4b12      	ldr	r3, [pc, #72]	@ (801409c <prvCheckForValidListAndQueue+0x70>)
 8014052:	4a10      	ldr	r2, [pc, #64]	@ (8014094 <prvCheckForValidListAndQueue+0x68>)
 8014054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014056:	2300      	movs	r3, #0
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	4b11      	ldr	r3, [pc, #68]	@ (80140a0 <prvCheckForValidListAndQueue+0x74>)
 801405c:	4a11      	ldr	r2, [pc, #68]	@ (80140a4 <prvCheckForValidListAndQueue+0x78>)
 801405e:	2110      	movs	r1, #16
 8014060:	200a      	movs	r0, #10
 8014062:	f7fd fc27 	bl	80118b4 <xQueueGenericCreateStatic>
 8014066:	4603      	mov	r3, r0
 8014068:	4a08      	ldr	r2, [pc, #32]	@ (801408c <prvCheckForValidListAndQueue+0x60>)
 801406a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801406c:	4b07      	ldr	r3, [pc, #28]	@ (801408c <prvCheckForValidListAndQueue+0x60>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d005      	beq.n	8014080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014074:	4b05      	ldr	r3, [pc, #20]	@ (801408c <prvCheckForValidListAndQueue+0x60>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	490b      	ldr	r1, [pc, #44]	@ (80140a8 <prvCheckForValidListAndQueue+0x7c>)
 801407a:	4618      	mov	r0, r3
 801407c:	f7fe fa40 	bl	8012500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014080:	f000 f974 	bl	801436c <vPortExitCritical>
}
 8014084:	bf00      	nop
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	24001b5c 	.word	0x24001b5c
 8014090:	24001b2c 	.word	0x24001b2c
 8014094:	24001b40 	.word	0x24001b40
 8014098:	24001b54 	.word	0x24001b54
 801409c:	24001b58 	.word	0x24001b58
 80140a0:	24001c08 	.word	0x24001c08
 80140a4:	24001b68 	.word	0x24001b68
 80140a8:	080178e4 	.word	0x080178e4

080140ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80140ac:	b480      	push	{r7}
 80140ae:	b085      	sub	sp, #20
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	60f8      	str	r0, [r7, #12]
 80140b4:	60b9      	str	r1, [r7, #8]
 80140b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	3b04      	subs	r3, #4
 80140bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80140c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	3b04      	subs	r3, #4
 80140ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	f023 0201 	bic.w	r2, r3, #1
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	3b04      	subs	r3, #4
 80140da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80140dc:	4a0c      	ldr	r2, [pc, #48]	@ (8014110 <pxPortInitialiseStack+0x64>)
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	3b14      	subs	r3, #20
 80140e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	3b04      	subs	r3, #4
 80140f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f06f 0202 	mvn.w	r2, #2
 80140fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	3b20      	subs	r3, #32
 8014100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014102:	68fb      	ldr	r3, [r7, #12]
}
 8014104:	4618      	mov	r0, r3
 8014106:	3714      	adds	r7, #20
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr
 8014110:	08014115 	.word	0x08014115

08014114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801411a:	2300      	movs	r3, #0
 801411c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801411e:	4b13      	ldr	r3, [pc, #76]	@ (801416c <prvTaskExitError+0x58>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014126:	d00b      	beq.n	8014140 <prvTaskExitError+0x2c>
	__asm volatile
 8014128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801412c:	f383 8811 	msr	BASEPRI, r3
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	f3bf 8f4f 	dsb	sy
 8014138:	60fb      	str	r3, [r7, #12]
}
 801413a:	bf00      	nop
 801413c:	bf00      	nop
 801413e:	e7fd      	b.n	801413c <prvTaskExitError+0x28>
	__asm volatile
 8014140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014144:	f383 8811 	msr	BASEPRI, r3
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	f3bf 8f4f 	dsb	sy
 8014150:	60bb      	str	r3, [r7, #8]
}
 8014152:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014154:	bf00      	nop
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d0fc      	beq.n	8014156 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801415c:	bf00      	nop
 801415e:	bf00      	nop
 8014160:	3714      	adds	r7, #20
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	2400002c 	.word	0x2400002c

08014170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014170:	4b07      	ldr	r3, [pc, #28]	@ (8014190 <pxCurrentTCBConst2>)
 8014172:	6819      	ldr	r1, [r3, #0]
 8014174:	6808      	ldr	r0, [r1, #0]
 8014176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801417a:	f380 8809 	msr	PSP, r0
 801417e:	f3bf 8f6f 	isb	sy
 8014182:	f04f 0000 	mov.w	r0, #0
 8014186:	f380 8811 	msr	BASEPRI, r0
 801418a:	4770      	bx	lr
 801418c:	f3af 8000 	nop.w

08014190 <pxCurrentTCBConst2>:
 8014190:	2400162c 	.word	0x2400162c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop

08014198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014198:	4808      	ldr	r0, [pc, #32]	@ (80141bc <prvPortStartFirstTask+0x24>)
 801419a:	6800      	ldr	r0, [r0, #0]
 801419c:	6800      	ldr	r0, [r0, #0]
 801419e:	f380 8808 	msr	MSP, r0
 80141a2:	f04f 0000 	mov.w	r0, #0
 80141a6:	f380 8814 	msr	CONTROL, r0
 80141aa:	b662      	cpsie	i
 80141ac:	b661      	cpsie	f
 80141ae:	f3bf 8f4f 	dsb	sy
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	df00      	svc	0
 80141b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80141ba:	bf00      	nop
 80141bc:	e000ed08 	.word	0xe000ed08

080141c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80141c6:	4b47      	ldr	r3, [pc, #284]	@ (80142e4 <xPortStartScheduler+0x124>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a47      	ldr	r2, [pc, #284]	@ (80142e8 <xPortStartScheduler+0x128>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d10b      	bne.n	80141e8 <xPortStartScheduler+0x28>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	60fb      	str	r3, [r7, #12]
}
 80141e2:	bf00      	nop
 80141e4:	bf00      	nop
 80141e6:	e7fd      	b.n	80141e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80141e8:	4b3e      	ldr	r3, [pc, #248]	@ (80142e4 <xPortStartScheduler+0x124>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	4a3f      	ldr	r2, [pc, #252]	@ (80142ec <xPortStartScheduler+0x12c>)
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d10b      	bne.n	801420a <xPortStartScheduler+0x4a>
	__asm volatile
 80141f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141f6:	f383 8811 	msr	BASEPRI, r3
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	f3bf 8f4f 	dsb	sy
 8014202:	613b      	str	r3, [r7, #16]
}
 8014204:	bf00      	nop
 8014206:	bf00      	nop
 8014208:	e7fd      	b.n	8014206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801420a:	4b39      	ldr	r3, [pc, #228]	@ (80142f0 <xPortStartScheduler+0x130>)
 801420c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	22ff      	movs	r2, #255	@ 0xff
 801421a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	b2db      	uxtb	r3, r3
 8014222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014224:	78fb      	ldrb	r3, [r7, #3]
 8014226:	b2db      	uxtb	r3, r3
 8014228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801422c:	b2da      	uxtb	r2, r3
 801422e:	4b31      	ldr	r3, [pc, #196]	@ (80142f4 <xPortStartScheduler+0x134>)
 8014230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014232:	4b31      	ldr	r3, [pc, #196]	@ (80142f8 <xPortStartScheduler+0x138>)
 8014234:	2207      	movs	r2, #7
 8014236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014238:	e009      	b.n	801424e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801423a:	4b2f      	ldr	r3, [pc, #188]	@ (80142f8 <xPortStartScheduler+0x138>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	3b01      	subs	r3, #1
 8014240:	4a2d      	ldr	r2, [pc, #180]	@ (80142f8 <xPortStartScheduler+0x138>)
 8014242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	b2db      	uxtb	r3, r3
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	b2db      	uxtb	r3, r3
 801424c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801424e:	78fb      	ldrb	r3, [r7, #3]
 8014250:	b2db      	uxtb	r3, r3
 8014252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014256:	2b80      	cmp	r3, #128	@ 0x80
 8014258:	d0ef      	beq.n	801423a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801425a:	4b27      	ldr	r3, [pc, #156]	@ (80142f8 <xPortStartScheduler+0x138>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f1c3 0307 	rsb	r3, r3, #7
 8014262:	2b04      	cmp	r3, #4
 8014264:	d00b      	beq.n	801427e <xPortStartScheduler+0xbe>
	__asm volatile
 8014266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801426a:	f383 8811 	msr	BASEPRI, r3
 801426e:	f3bf 8f6f 	isb	sy
 8014272:	f3bf 8f4f 	dsb	sy
 8014276:	60bb      	str	r3, [r7, #8]
}
 8014278:	bf00      	nop
 801427a:	bf00      	nop
 801427c:	e7fd      	b.n	801427a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801427e:	4b1e      	ldr	r3, [pc, #120]	@ (80142f8 <xPortStartScheduler+0x138>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	4a1c      	ldr	r2, [pc, #112]	@ (80142f8 <xPortStartScheduler+0x138>)
 8014286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014288:	4b1b      	ldr	r3, [pc, #108]	@ (80142f8 <xPortStartScheduler+0x138>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014290:	4a19      	ldr	r2, [pc, #100]	@ (80142f8 <xPortStartScheduler+0x138>)
 8014292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	b2da      	uxtb	r2, r3
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801429c:	4b17      	ldr	r3, [pc, #92]	@ (80142fc <xPortStartScheduler+0x13c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a16      	ldr	r2, [pc, #88]	@ (80142fc <xPortStartScheduler+0x13c>)
 80142a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80142a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80142a8:	4b14      	ldr	r3, [pc, #80]	@ (80142fc <xPortStartScheduler+0x13c>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4a13      	ldr	r2, [pc, #76]	@ (80142fc <xPortStartScheduler+0x13c>)
 80142ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80142b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80142b4:	f000 f8da 	bl	801446c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80142b8:	4b11      	ldr	r3, [pc, #68]	@ (8014300 <xPortStartScheduler+0x140>)
 80142ba:	2200      	movs	r2, #0
 80142bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80142be:	f000 f8f9 	bl	80144b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80142c2:	4b10      	ldr	r3, [pc, #64]	@ (8014304 <xPortStartScheduler+0x144>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a0f      	ldr	r2, [pc, #60]	@ (8014304 <xPortStartScheduler+0x144>)
 80142c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80142cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80142ce:	f7ff ff63 	bl	8014198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80142d2:	f7fe ff31 	bl	8013138 <vTaskSwitchContext>
	prvTaskExitError();
 80142d6:	f7ff ff1d 	bl	8014114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80142da:	2300      	movs	r3, #0
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3718      	adds	r7, #24
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	e000ed00 	.word	0xe000ed00
 80142e8:	410fc271 	.word	0x410fc271
 80142ec:	410fc270 	.word	0x410fc270
 80142f0:	e000e400 	.word	0xe000e400
 80142f4:	24001c58 	.word	0x24001c58
 80142f8:	24001c5c 	.word	0x24001c5c
 80142fc:	e000ed20 	.word	0xe000ed20
 8014300:	2400002c 	.word	0x2400002c
 8014304:	e000ef34 	.word	0xe000ef34

08014308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	607b      	str	r3, [r7, #4]
}
 8014320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014322:	4b10      	ldr	r3, [pc, #64]	@ (8014364 <vPortEnterCritical+0x5c>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	3301      	adds	r3, #1
 8014328:	4a0e      	ldr	r2, [pc, #56]	@ (8014364 <vPortEnterCritical+0x5c>)
 801432a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801432c:	4b0d      	ldr	r3, [pc, #52]	@ (8014364 <vPortEnterCritical+0x5c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d110      	bne.n	8014356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014334:	4b0c      	ldr	r3, [pc, #48]	@ (8014368 <vPortEnterCritical+0x60>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	b2db      	uxtb	r3, r3
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00b      	beq.n	8014356 <vPortEnterCritical+0x4e>
	__asm volatile
 801433e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014342:	f383 8811 	msr	BASEPRI, r3
 8014346:	f3bf 8f6f 	isb	sy
 801434a:	f3bf 8f4f 	dsb	sy
 801434e:	603b      	str	r3, [r7, #0]
}
 8014350:	bf00      	nop
 8014352:	bf00      	nop
 8014354:	e7fd      	b.n	8014352 <vPortEnterCritical+0x4a>
	}
}
 8014356:	bf00      	nop
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	2400002c 	.word	0x2400002c
 8014368:	e000ed04 	.word	0xe000ed04

0801436c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014372:	4b12      	ldr	r3, [pc, #72]	@ (80143bc <vPortExitCritical+0x50>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10b      	bne.n	8014392 <vPortExitCritical+0x26>
	__asm volatile
 801437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801437e:	f383 8811 	msr	BASEPRI, r3
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	607b      	str	r3, [r7, #4]
}
 801438c:	bf00      	nop
 801438e:	bf00      	nop
 8014390:	e7fd      	b.n	801438e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014392:	4b0a      	ldr	r3, [pc, #40]	@ (80143bc <vPortExitCritical+0x50>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	3b01      	subs	r3, #1
 8014398:	4a08      	ldr	r2, [pc, #32]	@ (80143bc <vPortExitCritical+0x50>)
 801439a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801439c:	4b07      	ldr	r3, [pc, #28]	@ (80143bc <vPortExitCritical+0x50>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d105      	bne.n	80143b0 <vPortExitCritical+0x44>
 80143a4:	2300      	movs	r3, #0
 80143a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	f383 8811 	msr	BASEPRI, r3
}
 80143ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80143b0:	bf00      	nop
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr
 80143bc:	2400002c 	.word	0x2400002c

080143c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80143c0:	f3ef 8009 	mrs	r0, PSP
 80143c4:	f3bf 8f6f 	isb	sy
 80143c8:	4b15      	ldr	r3, [pc, #84]	@ (8014420 <pxCurrentTCBConst>)
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	f01e 0f10 	tst.w	lr, #16
 80143d0:	bf08      	it	eq
 80143d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80143d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143da:	6010      	str	r0, [r2, #0]
 80143dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80143e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80143e4:	f380 8811 	msr	BASEPRI, r0
 80143e8:	f3bf 8f4f 	dsb	sy
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	f7fe fea2 	bl	8013138 <vTaskSwitchContext>
 80143f4:	f04f 0000 	mov.w	r0, #0
 80143f8:	f380 8811 	msr	BASEPRI, r0
 80143fc:	bc09      	pop	{r0, r3}
 80143fe:	6819      	ldr	r1, [r3, #0]
 8014400:	6808      	ldr	r0, [r1, #0]
 8014402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014406:	f01e 0f10 	tst.w	lr, #16
 801440a:	bf08      	it	eq
 801440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014410:	f380 8809 	msr	PSP, r0
 8014414:	f3bf 8f6f 	isb	sy
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop
 801441c:	f3af 8000 	nop.w

08014420 <pxCurrentTCBConst>:
 8014420:	2400162c 	.word	0x2400162c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014424:	bf00      	nop
 8014426:	bf00      	nop

08014428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
	__asm volatile
 801442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014432:	f383 8811 	msr	BASEPRI, r3
 8014436:	f3bf 8f6f 	isb	sy
 801443a:	f3bf 8f4f 	dsb	sy
 801443e:	607b      	str	r3, [r7, #4]
}
 8014440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014442:	f7fe fdbf 	bl	8012fc4 <xTaskIncrementTick>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d003      	beq.n	8014454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801444c:	4b06      	ldr	r3, [pc, #24]	@ (8014468 <xPortSysTickHandler+0x40>)
 801444e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014452:	601a      	str	r2, [r3, #0]
 8014454:	2300      	movs	r3, #0
 8014456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	f383 8811 	msr	BASEPRI, r3
}
 801445e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014460:	bf00      	nop
 8014462:	3708      	adds	r7, #8
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}
 8014468:	e000ed04 	.word	0xe000ed04

0801446c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801446c:	b480      	push	{r7}
 801446e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014470:	4b0b      	ldr	r3, [pc, #44]	@ (80144a0 <vPortSetupTimerInterrupt+0x34>)
 8014472:	2200      	movs	r2, #0
 8014474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014476:	4b0b      	ldr	r3, [pc, #44]	@ (80144a4 <vPortSetupTimerInterrupt+0x38>)
 8014478:	2200      	movs	r2, #0
 801447a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801447c:	4b0a      	ldr	r3, [pc, #40]	@ (80144a8 <vPortSetupTimerInterrupt+0x3c>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4a0a      	ldr	r2, [pc, #40]	@ (80144ac <vPortSetupTimerInterrupt+0x40>)
 8014482:	fba2 2303 	umull	r2, r3, r2, r3
 8014486:	099b      	lsrs	r3, r3, #6
 8014488:	4a09      	ldr	r2, [pc, #36]	@ (80144b0 <vPortSetupTimerInterrupt+0x44>)
 801448a:	3b01      	subs	r3, #1
 801448c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801448e:	4b04      	ldr	r3, [pc, #16]	@ (80144a0 <vPortSetupTimerInterrupt+0x34>)
 8014490:	2207      	movs	r2, #7
 8014492:	601a      	str	r2, [r3, #0]
}
 8014494:	bf00      	nop
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop
 80144a0:	e000e010 	.word	0xe000e010
 80144a4:	e000e018 	.word	0xe000e018
 80144a8:	2400001c 	.word	0x2400001c
 80144ac:	10624dd3 	.word	0x10624dd3
 80144b0:	e000e014 	.word	0xe000e014

080144b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80144b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80144c4 <vPortEnableVFP+0x10>
 80144b8:	6801      	ldr	r1, [r0, #0]
 80144ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80144be:	6001      	str	r1, [r0, #0]
 80144c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80144c2:	bf00      	nop
 80144c4:	e000ed88 	.word	0xe000ed88

080144c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80144c8:	b480      	push	{r7}
 80144ca:	b085      	sub	sp, #20
 80144cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80144ce:	f3ef 8305 	mrs	r3, IPSR
 80144d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b0f      	cmp	r3, #15
 80144d8:	d915      	bls.n	8014506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80144da:	4a18      	ldr	r2, [pc, #96]	@ (801453c <vPortValidateInterruptPriority+0x74>)
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	4413      	add	r3, r2
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80144e4:	4b16      	ldr	r3, [pc, #88]	@ (8014540 <vPortValidateInterruptPriority+0x78>)
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	7afa      	ldrb	r2, [r7, #11]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d20b      	bcs.n	8014506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80144ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144f2:	f383 8811 	msr	BASEPRI, r3
 80144f6:	f3bf 8f6f 	isb	sy
 80144fa:	f3bf 8f4f 	dsb	sy
 80144fe:	607b      	str	r3, [r7, #4]
}
 8014500:	bf00      	nop
 8014502:	bf00      	nop
 8014504:	e7fd      	b.n	8014502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014506:	4b0f      	ldr	r3, [pc, #60]	@ (8014544 <vPortValidateInterruptPriority+0x7c>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801450e:	4b0e      	ldr	r3, [pc, #56]	@ (8014548 <vPortValidateInterruptPriority+0x80>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	429a      	cmp	r2, r3
 8014514:	d90b      	bls.n	801452e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801451a:	f383 8811 	msr	BASEPRI, r3
 801451e:	f3bf 8f6f 	isb	sy
 8014522:	f3bf 8f4f 	dsb	sy
 8014526:	603b      	str	r3, [r7, #0]
}
 8014528:	bf00      	nop
 801452a:	bf00      	nop
 801452c:	e7fd      	b.n	801452a <vPortValidateInterruptPriority+0x62>
	}
 801452e:	bf00      	nop
 8014530:	3714      	adds	r7, #20
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr
 801453a:	bf00      	nop
 801453c:	e000e3f0 	.word	0xe000e3f0
 8014540:	24001c58 	.word	0x24001c58
 8014544:	e000ed0c 	.word	0xe000ed0c
 8014548:	24001c5c 	.word	0x24001c5c

0801454c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b08a      	sub	sp, #40	@ 0x28
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014554:	2300      	movs	r3, #0
 8014556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014558:	f7fe fc78 	bl	8012e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801455c:	4b5c      	ldr	r3, [pc, #368]	@ (80146d0 <pvPortMalloc+0x184>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014564:	f000 f924 	bl	80147b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014568:	4b5a      	ldr	r3, [pc, #360]	@ (80146d4 <pvPortMalloc+0x188>)
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	4013      	ands	r3, r2
 8014570:	2b00      	cmp	r3, #0
 8014572:	f040 8095 	bne.w	80146a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d01e      	beq.n	80145ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801457c:	2208      	movs	r2, #8
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	4413      	add	r3, r2
 8014582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f003 0307 	and.w	r3, r3, #7
 801458a:	2b00      	cmp	r3, #0
 801458c:	d015      	beq.n	80145ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f023 0307 	bic.w	r3, r3, #7
 8014594:	3308      	adds	r3, #8
 8014596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f003 0307 	and.w	r3, r3, #7
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d00b      	beq.n	80145ba <pvPortMalloc+0x6e>
	__asm volatile
 80145a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	617b      	str	r3, [r7, #20]
}
 80145b4:	bf00      	nop
 80145b6:	bf00      	nop
 80145b8:	e7fd      	b.n	80145b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d06f      	beq.n	80146a0 <pvPortMalloc+0x154>
 80145c0:	4b45      	ldr	r3, [pc, #276]	@ (80146d8 <pvPortMalloc+0x18c>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d86a      	bhi.n	80146a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80145ca:	4b44      	ldr	r3, [pc, #272]	@ (80146dc <pvPortMalloc+0x190>)
 80145cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80145ce:	4b43      	ldr	r3, [pc, #268]	@ (80146dc <pvPortMalloc+0x190>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80145d4:	e004      	b.n	80145e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80145d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80145da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80145e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d903      	bls.n	80145f2 <pvPortMalloc+0xa6>
 80145ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d1f1      	bne.n	80145d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80145f2:	4b37      	ldr	r3, [pc, #220]	@ (80146d0 <pvPortMalloc+0x184>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d051      	beq.n	80146a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2208      	movs	r2, #8
 8014602:	4413      	add	r3, r2
 8014604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014610:	685a      	ldr	r2, [r3, #4]
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	1ad2      	subs	r2, r2, r3
 8014616:	2308      	movs	r3, #8
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	429a      	cmp	r2, r3
 801461c:	d920      	bls.n	8014660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	4413      	add	r3, r2
 8014624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	f003 0307 	and.w	r3, r3, #7
 801462c:	2b00      	cmp	r3, #0
 801462e:	d00b      	beq.n	8014648 <pvPortMalloc+0xfc>
	__asm volatile
 8014630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014634:	f383 8811 	msr	BASEPRI, r3
 8014638:	f3bf 8f6f 	isb	sy
 801463c:	f3bf 8f4f 	dsb	sy
 8014640:	613b      	str	r3, [r7, #16]
}
 8014642:	bf00      	nop
 8014644:	bf00      	nop
 8014646:	e7fd      	b.n	8014644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801464a:	685a      	ldr	r2, [r3, #4]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	1ad2      	subs	r2, r2, r3
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801465a:	69b8      	ldr	r0, [r7, #24]
 801465c:	f000 f90a 	bl	8014874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014660:	4b1d      	ldr	r3, [pc, #116]	@ (80146d8 <pvPortMalloc+0x18c>)
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	1ad3      	subs	r3, r2, r3
 801466a:	4a1b      	ldr	r2, [pc, #108]	@ (80146d8 <pvPortMalloc+0x18c>)
 801466c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801466e:	4b1a      	ldr	r3, [pc, #104]	@ (80146d8 <pvPortMalloc+0x18c>)
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	4b1b      	ldr	r3, [pc, #108]	@ (80146e0 <pvPortMalloc+0x194>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	429a      	cmp	r2, r3
 8014678:	d203      	bcs.n	8014682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801467a:	4b17      	ldr	r3, [pc, #92]	@ (80146d8 <pvPortMalloc+0x18c>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	4a18      	ldr	r2, [pc, #96]	@ (80146e0 <pvPortMalloc+0x194>)
 8014680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014684:	685a      	ldr	r2, [r3, #4]
 8014686:	4b13      	ldr	r3, [pc, #76]	@ (80146d4 <pvPortMalloc+0x188>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	431a      	orrs	r2, r3
 801468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014692:	2200      	movs	r2, #0
 8014694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014696:	4b13      	ldr	r3, [pc, #76]	@ (80146e4 <pvPortMalloc+0x198>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	3301      	adds	r3, #1
 801469c:	4a11      	ldr	r2, [pc, #68]	@ (80146e4 <pvPortMalloc+0x198>)
 801469e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146a0:	f7fe fbe2 	bl	8012e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80146a4:	69fb      	ldr	r3, [r7, #28]
 80146a6:	f003 0307 	and.w	r3, r3, #7
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00b      	beq.n	80146c6 <pvPortMalloc+0x17a>
	__asm volatile
 80146ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	60fb      	str	r3, [r7, #12]
}
 80146c0:	bf00      	nop
 80146c2:	bf00      	nop
 80146c4:	e7fd      	b.n	80146c2 <pvPortMalloc+0x176>
	return pvReturn;
 80146c6:	69fb      	ldr	r3, [r7, #28]
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3728      	adds	r7, #40	@ 0x28
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	24005868 	.word	0x24005868
 80146d4:	2400587c 	.word	0x2400587c
 80146d8:	2400586c 	.word	0x2400586c
 80146dc:	24005860 	.word	0x24005860
 80146e0:	24005870 	.word	0x24005870
 80146e4:	24005874 	.word	0x24005874

080146e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d04f      	beq.n	801479a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80146fa:	2308      	movs	r3, #8
 80146fc:	425b      	negs	r3, r3
 80146fe:	697a      	ldr	r2, [r7, #20]
 8014700:	4413      	add	r3, r2
 8014702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	4b25      	ldr	r3, [pc, #148]	@ (80147a4 <vPortFree+0xbc>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	4013      	ands	r3, r2
 8014712:	2b00      	cmp	r3, #0
 8014714:	d10b      	bne.n	801472e <vPortFree+0x46>
	__asm volatile
 8014716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801471a:	f383 8811 	msr	BASEPRI, r3
 801471e:	f3bf 8f6f 	isb	sy
 8014722:	f3bf 8f4f 	dsb	sy
 8014726:	60fb      	str	r3, [r7, #12]
}
 8014728:	bf00      	nop
 801472a:	bf00      	nop
 801472c:	e7fd      	b.n	801472a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00b      	beq.n	801474e <vPortFree+0x66>
	__asm volatile
 8014736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473a:	f383 8811 	msr	BASEPRI, r3
 801473e:	f3bf 8f6f 	isb	sy
 8014742:	f3bf 8f4f 	dsb	sy
 8014746:	60bb      	str	r3, [r7, #8]
}
 8014748:	bf00      	nop
 801474a:	bf00      	nop
 801474c:	e7fd      	b.n	801474a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	685a      	ldr	r2, [r3, #4]
 8014752:	4b14      	ldr	r3, [pc, #80]	@ (80147a4 <vPortFree+0xbc>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	4013      	ands	r3, r2
 8014758:	2b00      	cmp	r3, #0
 801475a:	d01e      	beq.n	801479a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d11a      	bne.n	801479a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	685a      	ldr	r2, [r3, #4]
 8014768:	4b0e      	ldr	r3, [pc, #56]	@ (80147a4 <vPortFree+0xbc>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	43db      	mvns	r3, r3
 801476e:	401a      	ands	r2, r3
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014774:	f7fe fb6a 	bl	8012e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	685a      	ldr	r2, [r3, #4]
 801477c:	4b0a      	ldr	r3, [pc, #40]	@ (80147a8 <vPortFree+0xc0>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4413      	add	r3, r2
 8014782:	4a09      	ldr	r2, [pc, #36]	@ (80147a8 <vPortFree+0xc0>)
 8014784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014786:	6938      	ldr	r0, [r7, #16]
 8014788:	f000 f874 	bl	8014874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801478c:	4b07      	ldr	r3, [pc, #28]	@ (80147ac <vPortFree+0xc4>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	3301      	adds	r3, #1
 8014792:	4a06      	ldr	r2, [pc, #24]	@ (80147ac <vPortFree+0xc4>)
 8014794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014796:	f7fe fb67 	bl	8012e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801479a:	bf00      	nop
 801479c:	3718      	adds	r7, #24
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	2400587c 	.word	0x2400587c
 80147a8:	2400586c 	.word	0x2400586c
 80147ac:	24005878 	.word	0x24005878

080147b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80147ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80147bc:	4b27      	ldr	r3, [pc, #156]	@ (801485c <prvHeapInit+0xac>)
 80147be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f003 0307 	and.w	r3, r3, #7
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00c      	beq.n	80147e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	3307      	adds	r3, #7
 80147ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	f023 0307 	bic.w	r3, r3, #7
 80147d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80147d8:	68ba      	ldr	r2, [r7, #8]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	1ad3      	subs	r3, r2, r3
 80147de:	4a1f      	ldr	r2, [pc, #124]	@ (801485c <prvHeapInit+0xac>)
 80147e0:	4413      	add	r3, r2
 80147e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80147e8:	4a1d      	ldr	r2, [pc, #116]	@ (8014860 <prvHeapInit+0xb0>)
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80147ee:	4b1c      	ldr	r3, [pc, #112]	@ (8014860 <prvHeapInit+0xb0>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	4413      	add	r3, r2
 80147fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80147fc:	2208      	movs	r2, #8
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	1a9b      	subs	r3, r3, r2
 8014802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f023 0307 	bic.w	r3, r3, #7
 801480a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	4a15      	ldr	r2, [pc, #84]	@ (8014864 <prvHeapInit+0xb4>)
 8014810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014812:	4b14      	ldr	r3, [pc, #80]	@ (8014864 <prvHeapInit+0xb4>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2200      	movs	r2, #0
 8014818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801481a:	4b12      	ldr	r3, [pc, #72]	@ (8014864 <prvHeapInit+0xb4>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	2200      	movs	r2, #0
 8014820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	68fa      	ldr	r2, [r7, #12]
 801482a:	1ad2      	subs	r2, r2, r3
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014830:	4b0c      	ldr	r3, [pc, #48]	@ (8014864 <prvHeapInit+0xb4>)
 8014832:	681a      	ldr	r2, [r3, #0]
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	4a0a      	ldr	r2, [pc, #40]	@ (8014868 <prvHeapInit+0xb8>)
 801483e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	4a09      	ldr	r2, [pc, #36]	@ (801486c <prvHeapInit+0xbc>)
 8014846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014848:	4b09      	ldr	r3, [pc, #36]	@ (8014870 <prvHeapInit+0xc0>)
 801484a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801484e:	601a      	str	r2, [r3, #0]
}
 8014850:	bf00      	nop
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	24001c60 	.word	0x24001c60
 8014860:	24005860 	.word	0x24005860
 8014864:	24005868 	.word	0x24005868
 8014868:	24005870 	.word	0x24005870
 801486c:	2400586c 	.word	0x2400586c
 8014870:	2400587c 	.word	0x2400587c

08014874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801487c:	4b28      	ldr	r3, [pc, #160]	@ (8014920 <prvInsertBlockIntoFreeList+0xac>)
 801487e:	60fb      	str	r3, [r7, #12]
 8014880:	e002      	b.n	8014888 <prvInsertBlockIntoFreeList+0x14>
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	60fb      	str	r3, [r7, #12]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	429a      	cmp	r2, r3
 8014890:	d8f7      	bhi.n	8014882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	68ba      	ldr	r2, [r7, #8]
 801489c:	4413      	add	r3, r2
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d108      	bne.n	80148b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	685a      	ldr	r2, [r3, #4]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	685b      	ldr	r3, [r3, #4]
 80148ac:	441a      	add	r2, r3
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	68ba      	ldr	r2, [r7, #8]
 80148c0:	441a      	add	r2, r3
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d118      	bne.n	80148fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	4b15      	ldr	r3, [pc, #84]	@ (8014924 <prvInsertBlockIntoFreeList+0xb0>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d00d      	beq.n	80148f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	685a      	ldr	r2, [r3, #4]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	441a      	add	r2, r3
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	601a      	str	r2, [r3, #0]
 80148f0:	e008      	b.n	8014904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80148f2:	4b0c      	ldr	r3, [pc, #48]	@ (8014924 <prvInsertBlockIntoFreeList+0xb0>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	601a      	str	r2, [r3, #0]
 80148fa:	e003      	b.n	8014904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	429a      	cmp	r2, r3
 801490a:	d002      	beq.n	8014912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014912:	bf00      	nop
 8014914:	3714      	adds	r7, #20
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	24005860 	.word	0x24005860
 8014924:	24005868 	.word	0x24005868

08014928 <__cvt>:
 8014928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801492a:	ed2d 8b02 	vpush	{d8}
 801492e:	eeb0 8b40 	vmov.f64	d8, d0
 8014932:	b085      	sub	sp, #20
 8014934:	4617      	mov	r7, r2
 8014936:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8014938:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801493a:	ee18 2a90 	vmov	r2, s17
 801493e:	f025 0520 	bic.w	r5, r5, #32
 8014942:	2a00      	cmp	r2, #0
 8014944:	bfb6      	itet	lt
 8014946:	222d      	movlt	r2, #45	@ 0x2d
 8014948:	2200      	movge	r2, #0
 801494a:	eeb1 8b40 	vneglt.f64	d8, d0
 801494e:	2d46      	cmp	r5, #70	@ 0x46
 8014950:	460c      	mov	r4, r1
 8014952:	701a      	strb	r2, [r3, #0]
 8014954:	d004      	beq.n	8014960 <__cvt+0x38>
 8014956:	2d45      	cmp	r5, #69	@ 0x45
 8014958:	d100      	bne.n	801495c <__cvt+0x34>
 801495a:	3401      	adds	r4, #1
 801495c:	2102      	movs	r1, #2
 801495e:	e000      	b.n	8014962 <__cvt+0x3a>
 8014960:	2103      	movs	r1, #3
 8014962:	ab03      	add	r3, sp, #12
 8014964:	9301      	str	r3, [sp, #4]
 8014966:	ab02      	add	r3, sp, #8
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	4622      	mov	r2, r4
 801496c:	4633      	mov	r3, r6
 801496e:	eeb0 0b48 	vmov.f64	d0, d8
 8014972:	f000 ff8d 	bl	8015890 <_dtoa_r>
 8014976:	2d47      	cmp	r5, #71	@ 0x47
 8014978:	d114      	bne.n	80149a4 <__cvt+0x7c>
 801497a:	07fb      	lsls	r3, r7, #31
 801497c:	d50a      	bpl.n	8014994 <__cvt+0x6c>
 801497e:	1902      	adds	r2, r0, r4
 8014980:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014988:	bf08      	it	eq
 801498a:	9203      	streq	r2, [sp, #12]
 801498c:	2130      	movs	r1, #48	@ 0x30
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	4293      	cmp	r3, r2
 8014992:	d319      	bcc.n	80149c8 <__cvt+0xa0>
 8014994:	9b03      	ldr	r3, [sp, #12]
 8014996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014998:	1a1b      	subs	r3, r3, r0
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	b005      	add	sp, #20
 801499e:	ecbd 8b02 	vpop	{d8}
 80149a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a4:	2d46      	cmp	r5, #70	@ 0x46
 80149a6:	eb00 0204 	add.w	r2, r0, r4
 80149aa:	d1e9      	bne.n	8014980 <__cvt+0x58>
 80149ac:	7803      	ldrb	r3, [r0, #0]
 80149ae:	2b30      	cmp	r3, #48	@ 0x30
 80149b0:	d107      	bne.n	80149c2 <__cvt+0x9a>
 80149b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80149b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ba:	bf1c      	itt	ne
 80149bc:	f1c4 0401 	rsbne	r4, r4, #1
 80149c0:	6034      	strne	r4, [r6, #0]
 80149c2:	6833      	ldr	r3, [r6, #0]
 80149c4:	441a      	add	r2, r3
 80149c6:	e7db      	b.n	8014980 <__cvt+0x58>
 80149c8:	1c5c      	adds	r4, r3, #1
 80149ca:	9403      	str	r4, [sp, #12]
 80149cc:	7019      	strb	r1, [r3, #0]
 80149ce:	e7de      	b.n	801498e <__cvt+0x66>

080149d0 <__exponent>:
 80149d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149d2:	2900      	cmp	r1, #0
 80149d4:	bfba      	itte	lt
 80149d6:	4249      	neglt	r1, r1
 80149d8:	232d      	movlt	r3, #45	@ 0x2d
 80149da:	232b      	movge	r3, #43	@ 0x2b
 80149dc:	2909      	cmp	r1, #9
 80149de:	7002      	strb	r2, [r0, #0]
 80149e0:	7043      	strb	r3, [r0, #1]
 80149e2:	dd29      	ble.n	8014a38 <__exponent+0x68>
 80149e4:	f10d 0307 	add.w	r3, sp, #7
 80149e8:	461d      	mov	r5, r3
 80149ea:	270a      	movs	r7, #10
 80149ec:	461a      	mov	r2, r3
 80149ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80149f2:	fb07 1416 	mls	r4, r7, r6, r1
 80149f6:	3430      	adds	r4, #48	@ 0x30
 80149f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80149fc:	460c      	mov	r4, r1
 80149fe:	2c63      	cmp	r4, #99	@ 0x63
 8014a00:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8014a04:	4631      	mov	r1, r6
 8014a06:	dcf1      	bgt.n	80149ec <__exponent+0x1c>
 8014a08:	3130      	adds	r1, #48	@ 0x30
 8014a0a:	1e94      	subs	r4, r2, #2
 8014a0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014a10:	1c41      	adds	r1, r0, #1
 8014a12:	4623      	mov	r3, r4
 8014a14:	42ab      	cmp	r3, r5
 8014a16:	d30a      	bcc.n	8014a2e <__exponent+0x5e>
 8014a18:	f10d 0309 	add.w	r3, sp, #9
 8014a1c:	1a9b      	subs	r3, r3, r2
 8014a1e:	42ac      	cmp	r4, r5
 8014a20:	bf88      	it	hi
 8014a22:	2300      	movhi	r3, #0
 8014a24:	3302      	adds	r3, #2
 8014a26:	4403      	add	r3, r0
 8014a28:	1a18      	subs	r0, r3, r0
 8014a2a:	b003      	add	sp, #12
 8014a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014a32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014a36:	e7ed      	b.n	8014a14 <__exponent+0x44>
 8014a38:	2330      	movs	r3, #48	@ 0x30
 8014a3a:	3130      	adds	r1, #48	@ 0x30
 8014a3c:	7083      	strb	r3, [r0, #2]
 8014a3e:	70c1      	strb	r1, [r0, #3]
 8014a40:	1d03      	adds	r3, r0, #4
 8014a42:	e7f1      	b.n	8014a28 <__exponent+0x58>
 8014a44:	0000      	movs	r0, r0
	...

08014a48 <_printf_float>:
 8014a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	b08d      	sub	sp, #52	@ 0x34
 8014a4e:	460c      	mov	r4, r1
 8014a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014a54:	4616      	mov	r6, r2
 8014a56:	461f      	mov	r7, r3
 8014a58:	4605      	mov	r5, r0
 8014a5a:	f000 fdad 	bl	80155b8 <_localeconv_r>
 8014a5e:	f8d0 b000 	ldr.w	fp, [r0]
 8014a62:	4658      	mov	r0, fp
 8014a64:	f7eb fca4 	bl	80003b0 <strlen>
 8014a68:	2300      	movs	r3, #0
 8014a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8014a70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014a74:	6822      	ldr	r2, [r4, #0]
 8014a76:	9005      	str	r0, [sp, #20]
 8014a78:	3307      	adds	r3, #7
 8014a7a:	f023 0307 	bic.w	r3, r3, #7
 8014a7e:	f103 0108 	add.w	r1, r3, #8
 8014a82:	f8c8 1000 	str.w	r1, [r8]
 8014a86:	ed93 0b00 	vldr	d0, [r3]
 8014a8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014ce8 <_printf_float+0x2a0>
 8014a8e:	eeb0 7bc0 	vabs.f64	d7, d0
 8014a92:	eeb4 7b46 	vcmp.f64	d7, d6
 8014a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8014a9e:	dd24      	ble.n	8014aea <_printf_float+0xa2>
 8014aa0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	d502      	bpl.n	8014ab0 <_printf_float+0x68>
 8014aaa:	232d      	movs	r3, #45	@ 0x2d
 8014aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014ab0:	498f      	ldr	r1, [pc, #572]	@ (8014cf0 <_printf_float+0x2a8>)
 8014ab2:	4b90      	ldr	r3, [pc, #576]	@ (8014cf4 <_printf_float+0x2ac>)
 8014ab4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014ab8:	bf8c      	ite	hi
 8014aba:	4688      	movhi	r8, r1
 8014abc:	4698      	movls	r8, r3
 8014abe:	f022 0204 	bic.w	r2, r2, #4
 8014ac2:	2303      	movs	r3, #3
 8014ac4:	6123      	str	r3, [r4, #16]
 8014ac6:	6022      	str	r2, [r4, #0]
 8014ac8:	f04f 0a00 	mov.w	sl, #0
 8014acc:	9700      	str	r7, [sp, #0]
 8014ace:	4633      	mov	r3, r6
 8014ad0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f000 f9d1 	bl	8014e7c <_printf_common>
 8014ada:	3001      	adds	r0, #1
 8014adc:	f040 8089 	bne.w	8014bf2 <_printf_float+0x1aa>
 8014ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ae4:	b00d      	add	sp, #52	@ 0x34
 8014ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aea:	eeb4 0b40 	vcmp.f64	d0, d0
 8014aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af2:	d709      	bvc.n	8014b08 <_printf_float+0xc0>
 8014af4:	ee10 3a90 	vmov	r3, s1
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	bfbc      	itt	lt
 8014afc:	232d      	movlt	r3, #45	@ 0x2d
 8014afe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014b02:	497d      	ldr	r1, [pc, #500]	@ (8014cf8 <_printf_float+0x2b0>)
 8014b04:	4b7d      	ldr	r3, [pc, #500]	@ (8014cfc <_printf_float+0x2b4>)
 8014b06:	e7d5      	b.n	8014ab4 <_printf_float+0x6c>
 8014b08:	6863      	ldr	r3, [r4, #4]
 8014b0a:	1c59      	adds	r1, r3, #1
 8014b0c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014b10:	d139      	bne.n	8014b86 <_printf_float+0x13e>
 8014b12:	2306      	movs	r3, #6
 8014b14:	6063      	str	r3, [r4, #4]
 8014b16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	6022      	str	r2, [r4, #0]
 8014b1e:	9303      	str	r3, [sp, #12]
 8014b20:	ab0a      	add	r3, sp, #40	@ 0x28
 8014b22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014b26:	ab09      	add	r3, sp, #36	@ 0x24
 8014b28:	9300      	str	r3, [sp, #0]
 8014b2a:	6861      	ldr	r1, [r4, #4]
 8014b2c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014b30:	4628      	mov	r0, r5
 8014b32:	f7ff fef9 	bl	8014928 <__cvt>
 8014b36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014b3c:	4680      	mov	r8, r0
 8014b3e:	d129      	bne.n	8014b94 <_printf_float+0x14c>
 8014b40:	1cc8      	adds	r0, r1, #3
 8014b42:	db02      	blt.n	8014b4a <_printf_float+0x102>
 8014b44:	6863      	ldr	r3, [r4, #4]
 8014b46:	4299      	cmp	r1, r3
 8014b48:	dd41      	ble.n	8014bce <_printf_float+0x186>
 8014b4a:	f1a9 0902 	sub.w	r9, r9, #2
 8014b4e:	fa5f f989 	uxtb.w	r9, r9
 8014b52:	3901      	subs	r1, #1
 8014b54:	464a      	mov	r2, r9
 8014b56:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014b5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014b5c:	f7ff ff38 	bl	80149d0 <__exponent>
 8014b60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b62:	1813      	adds	r3, r2, r0
 8014b64:	2a01      	cmp	r2, #1
 8014b66:	4682      	mov	sl, r0
 8014b68:	6123      	str	r3, [r4, #16]
 8014b6a:	dc02      	bgt.n	8014b72 <_printf_float+0x12a>
 8014b6c:	6822      	ldr	r2, [r4, #0]
 8014b6e:	07d2      	lsls	r2, r2, #31
 8014b70:	d501      	bpl.n	8014b76 <_printf_float+0x12e>
 8014b72:	3301      	adds	r3, #1
 8014b74:	6123      	str	r3, [r4, #16]
 8014b76:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d0a6      	beq.n	8014acc <_printf_float+0x84>
 8014b7e:	232d      	movs	r3, #45	@ 0x2d
 8014b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014b84:	e7a2      	b.n	8014acc <_printf_float+0x84>
 8014b86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014b8a:	d1c4      	bne.n	8014b16 <_printf_float+0xce>
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d1c2      	bne.n	8014b16 <_printf_float+0xce>
 8014b90:	2301      	movs	r3, #1
 8014b92:	e7bf      	b.n	8014b14 <_printf_float+0xcc>
 8014b94:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014b98:	d9db      	bls.n	8014b52 <_printf_float+0x10a>
 8014b9a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8014b9e:	d118      	bne.n	8014bd2 <_printf_float+0x18a>
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	6863      	ldr	r3, [r4, #4]
 8014ba4:	dd0b      	ble.n	8014bbe <_printf_float+0x176>
 8014ba6:	6121      	str	r1, [r4, #16]
 8014ba8:	b913      	cbnz	r3, 8014bb0 <_printf_float+0x168>
 8014baa:	6822      	ldr	r2, [r4, #0]
 8014bac:	07d0      	lsls	r0, r2, #31
 8014bae:	d502      	bpl.n	8014bb6 <_printf_float+0x16e>
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	440b      	add	r3, r1
 8014bb4:	6123      	str	r3, [r4, #16]
 8014bb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014bb8:	f04f 0a00 	mov.w	sl, #0
 8014bbc:	e7db      	b.n	8014b76 <_printf_float+0x12e>
 8014bbe:	b913      	cbnz	r3, 8014bc6 <_printf_float+0x17e>
 8014bc0:	6822      	ldr	r2, [r4, #0]
 8014bc2:	07d2      	lsls	r2, r2, #31
 8014bc4:	d501      	bpl.n	8014bca <_printf_float+0x182>
 8014bc6:	3302      	adds	r3, #2
 8014bc8:	e7f4      	b.n	8014bb4 <_printf_float+0x16c>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	e7f2      	b.n	8014bb4 <_printf_float+0x16c>
 8014bce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014bd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014bd4:	4299      	cmp	r1, r3
 8014bd6:	db05      	blt.n	8014be4 <_printf_float+0x19c>
 8014bd8:	6823      	ldr	r3, [r4, #0]
 8014bda:	6121      	str	r1, [r4, #16]
 8014bdc:	07d8      	lsls	r0, r3, #31
 8014bde:	d5ea      	bpl.n	8014bb6 <_printf_float+0x16e>
 8014be0:	1c4b      	adds	r3, r1, #1
 8014be2:	e7e7      	b.n	8014bb4 <_printf_float+0x16c>
 8014be4:	2900      	cmp	r1, #0
 8014be6:	bfd4      	ite	le
 8014be8:	f1c1 0202 	rsble	r2, r1, #2
 8014bec:	2201      	movgt	r2, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	e7e0      	b.n	8014bb4 <_printf_float+0x16c>
 8014bf2:	6823      	ldr	r3, [r4, #0]
 8014bf4:	055a      	lsls	r2, r3, #21
 8014bf6:	d407      	bmi.n	8014c08 <_printf_float+0x1c0>
 8014bf8:	6923      	ldr	r3, [r4, #16]
 8014bfa:	4642      	mov	r2, r8
 8014bfc:	4631      	mov	r1, r6
 8014bfe:	4628      	mov	r0, r5
 8014c00:	47b8      	blx	r7
 8014c02:	3001      	adds	r0, #1
 8014c04:	d12a      	bne.n	8014c5c <_printf_float+0x214>
 8014c06:	e76b      	b.n	8014ae0 <_printf_float+0x98>
 8014c08:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014c0c:	f240 80e0 	bls.w	8014dd0 <_printf_float+0x388>
 8014c10:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014c14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1c:	d133      	bne.n	8014c86 <_printf_float+0x23e>
 8014c1e:	4a38      	ldr	r2, [pc, #224]	@ (8014d00 <_printf_float+0x2b8>)
 8014c20:	2301      	movs	r3, #1
 8014c22:	4631      	mov	r1, r6
 8014c24:	4628      	mov	r0, r5
 8014c26:	47b8      	blx	r7
 8014c28:	3001      	adds	r0, #1
 8014c2a:	f43f af59 	beq.w	8014ae0 <_printf_float+0x98>
 8014c2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014c32:	4543      	cmp	r3, r8
 8014c34:	db02      	blt.n	8014c3c <_printf_float+0x1f4>
 8014c36:	6823      	ldr	r3, [r4, #0]
 8014c38:	07d8      	lsls	r0, r3, #31
 8014c3a:	d50f      	bpl.n	8014c5c <_printf_float+0x214>
 8014c3c:	9b05      	ldr	r3, [sp, #20]
 8014c3e:	465a      	mov	r2, fp
 8014c40:	4631      	mov	r1, r6
 8014c42:	4628      	mov	r0, r5
 8014c44:	47b8      	blx	r7
 8014c46:	3001      	adds	r0, #1
 8014c48:	f43f af4a 	beq.w	8014ae0 <_printf_float+0x98>
 8014c4c:	f04f 0900 	mov.w	r9, #0
 8014c50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014c54:	f104 0a1a 	add.w	sl, r4, #26
 8014c58:	45c8      	cmp	r8, r9
 8014c5a:	dc09      	bgt.n	8014c70 <_printf_float+0x228>
 8014c5c:	6823      	ldr	r3, [r4, #0]
 8014c5e:	079b      	lsls	r3, r3, #30
 8014c60:	f100 8107 	bmi.w	8014e72 <_printf_float+0x42a>
 8014c64:	68e0      	ldr	r0, [r4, #12]
 8014c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c68:	4298      	cmp	r0, r3
 8014c6a:	bfb8      	it	lt
 8014c6c:	4618      	movlt	r0, r3
 8014c6e:	e739      	b.n	8014ae4 <_printf_float+0x9c>
 8014c70:	2301      	movs	r3, #1
 8014c72:	4652      	mov	r2, sl
 8014c74:	4631      	mov	r1, r6
 8014c76:	4628      	mov	r0, r5
 8014c78:	47b8      	blx	r7
 8014c7a:	3001      	adds	r0, #1
 8014c7c:	f43f af30 	beq.w	8014ae0 <_printf_float+0x98>
 8014c80:	f109 0901 	add.w	r9, r9, #1
 8014c84:	e7e8      	b.n	8014c58 <_printf_float+0x210>
 8014c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	dc3b      	bgt.n	8014d04 <_printf_float+0x2bc>
 8014c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8014d00 <_printf_float+0x2b8>)
 8014c8e:	2301      	movs	r3, #1
 8014c90:	4631      	mov	r1, r6
 8014c92:	4628      	mov	r0, r5
 8014c94:	47b8      	blx	r7
 8014c96:	3001      	adds	r0, #1
 8014c98:	f43f af22 	beq.w	8014ae0 <_printf_float+0x98>
 8014c9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014ca0:	ea59 0303 	orrs.w	r3, r9, r3
 8014ca4:	d102      	bne.n	8014cac <_printf_float+0x264>
 8014ca6:	6823      	ldr	r3, [r4, #0]
 8014ca8:	07d9      	lsls	r1, r3, #31
 8014caa:	d5d7      	bpl.n	8014c5c <_printf_float+0x214>
 8014cac:	9b05      	ldr	r3, [sp, #20]
 8014cae:	465a      	mov	r2, fp
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	47b8      	blx	r7
 8014cb6:	3001      	adds	r0, #1
 8014cb8:	f43f af12 	beq.w	8014ae0 <_printf_float+0x98>
 8014cbc:	f04f 0a00 	mov.w	sl, #0
 8014cc0:	f104 0b1a 	add.w	fp, r4, #26
 8014cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cc6:	425b      	negs	r3, r3
 8014cc8:	4553      	cmp	r3, sl
 8014cca:	dc01      	bgt.n	8014cd0 <_printf_float+0x288>
 8014ccc:	464b      	mov	r3, r9
 8014cce:	e794      	b.n	8014bfa <_printf_float+0x1b2>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	465a      	mov	r2, fp
 8014cd4:	4631      	mov	r1, r6
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	47b8      	blx	r7
 8014cda:	3001      	adds	r0, #1
 8014cdc:	f43f af00 	beq.w	8014ae0 <_printf_float+0x98>
 8014ce0:	f10a 0a01 	add.w	sl, sl, #1
 8014ce4:	e7ee      	b.n	8014cc4 <_printf_float+0x27c>
 8014ce6:	bf00      	nop
 8014ce8:	ffffffff 	.word	0xffffffff
 8014cec:	7fefffff 	.word	0x7fefffff
 8014cf0:	08017a5c 	.word	0x08017a5c
 8014cf4:	08017a58 	.word	0x08017a58
 8014cf8:	08017a64 	.word	0x08017a64
 8014cfc:	08017a60 	.word	0x08017a60
 8014d00:	08017a68 	.word	0x08017a68
 8014d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014d06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014d0a:	4553      	cmp	r3, sl
 8014d0c:	bfa8      	it	ge
 8014d0e:	4653      	movge	r3, sl
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	4699      	mov	r9, r3
 8014d14:	dc37      	bgt.n	8014d86 <_printf_float+0x33e>
 8014d16:	2300      	movs	r3, #0
 8014d18:	9307      	str	r3, [sp, #28]
 8014d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d1e:	f104 021a 	add.w	r2, r4, #26
 8014d22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014d24:	9907      	ldr	r1, [sp, #28]
 8014d26:	9306      	str	r3, [sp, #24]
 8014d28:	eba3 0309 	sub.w	r3, r3, r9
 8014d2c:	428b      	cmp	r3, r1
 8014d2e:	dc31      	bgt.n	8014d94 <_printf_float+0x34c>
 8014d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d32:	459a      	cmp	sl, r3
 8014d34:	dc3b      	bgt.n	8014dae <_printf_float+0x366>
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	07da      	lsls	r2, r3, #31
 8014d3a:	d438      	bmi.n	8014dae <_printf_float+0x366>
 8014d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d3e:	ebaa 0903 	sub.w	r9, sl, r3
 8014d42:	9b06      	ldr	r3, [sp, #24]
 8014d44:	ebaa 0303 	sub.w	r3, sl, r3
 8014d48:	4599      	cmp	r9, r3
 8014d4a:	bfa8      	it	ge
 8014d4c:	4699      	movge	r9, r3
 8014d4e:	f1b9 0f00 	cmp.w	r9, #0
 8014d52:	dc34      	bgt.n	8014dbe <_printf_float+0x376>
 8014d54:	f04f 0800 	mov.w	r8, #0
 8014d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d5c:	f104 0b1a 	add.w	fp, r4, #26
 8014d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d62:	ebaa 0303 	sub.w	r3, sl, r3
 8014d66:	eba3 0309 	sub.w	r3, r3, r9
 8014d6a:	4543      	cmp	r3, r8
 8014d6c:	f77f af76 	ble.w	8014c5c <_printf_float+0x214>
 8014d70:	2301      	movs	r3, #1
 8014d72:	465a      	mov	r2, fp
 8014d74:	4631      	mov	r1, r6
 8014d76:	4628      	mov	r0, r5
 8014d78:	47b8      	blx	r7
 8014d7a:	3001      	adds	r0, #1
 8014d7c:	f43f aeb0 	beq.w	8014ae0 <_printf_float+0x98>
 8014d80:	f108 0801 	add.w	r8, r8, #1
 8014d84:	e7ec      	b.n	8014d60 <_printf_float+0x318>
 8014d86:	4642      	mov	r2, r8
 8014d88:	4631      	mov	r1, r6
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	47b8      	blx	r7
 8014d8e:	3001      	adds	r0, #1
 8014d90:	d1c1      	bne.n	8014d16 <_printf_float+0x2ce>
 8014d92:	e6a5      	b.n	8014ae0 <_printf_float+0x98>
 8014d94:	2301      	movs	r3, #1
 8014d96:	4631      	mov	r1, r6
 8014d98:	4628      	mov	r0, r5
 8014d9a:	9206      	str	r2, [sp, #24]
 8014d9c:	47b8      	blx	r7
 8014d9e:	3001      	adds	r0, #1
 8014da0:	f43f ae9e 	beq.w	8014ae0 <_printf_float+0x98>
 8014da4:	9b07      	ldr	r3, [sp, #28]
 8014da6:	9a06      	ldr	r2, [sp, #24]
 8014da8:	3301      	adds	r3, #1
 8014daa:	9307      	str	r3, [sp, #28]
 8014dac:	e7b9      	b.n	8014d22 <_printf_float+0x2da>
 8014dae:	9b05      	ldr	r3, [sp, #20]
 8014db0:	465a      	mov	r2, fp
 8014db2:	4631      	mov	r1, r6
 8014db4:	4628      	mov	r0, r5
 8014db6:	47b8      	blx	r7
 8014db8:	3001      	adds	r0, #1
 8014dba:	d1bf      	bne.n	8014d3c <_printf_float+0x2f4>
 8014dbc:	e690      	b.n	8014ae0 <_printf_float+0x98>
 8014dbe:	9a06      	ldr	r2, [sp, #24]
 8014dc0:	464b      	mov	r3, r9
 8014dc2:	4442      	add	r2, r8
 8014dc4:	4631      	mov	r1, r6
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	47b8      	blx	r7
 8014dca:	3001      	adds	r0, #1
 8014dcc:	d1c2      	bne.n	8014d54 <_printf_float+0x30c>
 8014dce:	e687      	b.n	8014ae0 <_printf_float+0x98>
 8014dd0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014dd4:	f1b9 0f01 	cmp.w	r9, #1
 8014dd8:	dc01      	bgt.n	8014dde <_printf_float+0x396>
 8014dda:	07db      	lsls	r3, r3, #31
 8014ddc:	d536      	bpl.n	8014e4c <_printf_float+0x404>
 8014dde:	2301      	movs	r3, #1
 8014de0:	4642      	mov	r2, r8
 8014de2:	4631      	mov	r1, r6
 8014de4:	4628      	mov	r0, r5
 8014de6:	47b8      	blx	r7
 8014de8:	3001      	adds	r0, #1
 8014dea:	f43f ae79 	beq.w	8014ae0 <_printf_float+0x98>
 8014dee:	9b05      	ldr	r3, [sp, #20]
 8014df0:	465a      	mov	r2, fp
 8014df2:	4631      	mov	r1, r6
 8014df4:	4628      	mov	r0, r5
 8014df6:	47b8      	blx	r7
 8014df8:	3001      	adds	r0, #1
 8014dfa:	f43f ae71 	beq.w	8014ae0 <_printf_float+0x98>
 8014dfe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014e02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e0a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8014e0e:	d018      	beq.n	8014e42 <_printf_float+0x3fa>
 8014e10:	464b      	mov	r3, r9
 8014e12:	f108 0201 	add.w	r2, r8, #1
 8014e16:	4631      	mov	r1, r6
 8014e18:	4628      	mov	r0, r5
 8014e1a:	47b8      	blx	r7
 8014e1c:	3001      	adds	r0, #1
 8014e1e:	d10c      	bne.n	8014e3a <_printf_float+0x3f2>
 8014e20:	e65e      	b.n	8014ae0 <_printf_float+0x98>
 8014e22:	2301      	movs	r3, #1
 8014e24:	465a      	mov	r2, fp
 8014e26:	4631      	mov	r1, r6
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b8      	blx	r7
 8014e2c:	3001      	adds	r0, #1
 8014e2e:	f43f ae57 	beq.w	8014ae0 <_printf_float+0x98>
 8014e32:	f108 0801 	add.w	r8, r8, #1
 8014e36:	45c8      	cmp	r8, r9
 8014e38:	dbf3      	blt.n	8014e22 <_printf_float+0x3da>
 8014e3a:	4653      	mov	r3, sl
 8014e3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014e40:	e6dc      	b.n	8014bfc <_printf_float+0x1b4>
 8014e42:	f04f 0800 	mov.w	r8, #0
 8014e46:	f104 0b1a 	add.w	fp, r4, #26
 8014e4a:	e7f4      	b.n	8014e36 <_printf_float+0x3ee>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	4642      	mov	r2, r8
 8014e50:	e7e1      	b.n	8014e16 <_printf_float+0x3ce>
 8014e52:	2301      	movs	r3, #1
 8014e54:	464a      	mov	r2, r9
 8014e56:	4631      	mov	r1, r6
 8014e58:	4628      	mov	r0, r5
 8014e5a:	47b8      	blx	r7
 8014e5c:	3001      	adds	r0, #1
 8014e5e:	f43f ae3f 	beq.w	8014ae0 <_printf_float+0x98>
 8014e62:	f108 0801 	add.w	r8, r8, #1
 8014e66:	68e3      	ldr	r3, [r4, #12]
 8014e68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014e6a:	1a5b      	subs	r3, r3, r1
 8014e6c:	4543      	cmp	r3, r8
 8014e6e:	dcf0      	bgt.n	8014e52 <_printf_float+0x40a>
 8014e70:	e6f8      	b.n	8014c64 <_printf_float+0x21c>
 8014e72:	f04f 0800 	mov.w	r8, #0
 8014e76:	f104 0919 	add.w	r9, r4, #25
 8014e7a:	e7f4      	b.n	8014e66 <_printf_float+0x41e>

08014e7c <_printf_common>:
 8014e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e80:	4616      	mov	r6, r2
 8014e82:	4698      	mov	r8, r3
 8014e84:	688a      	ldr	r2, [r1, #8]
 8014e86:	690b      	ldr	r3, [r1, #16]
 8014e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	bfb8      	it	lt
 8014e90:	4613      	movlt	r3, r2
 8014e92:	6033      	str	r3, [r6, #0]
 8014e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014e98:	4607      	mov	r7, r0
 8014e9a:	460c      	mov	r4, r1
 8014e9c:	b10a      	cbz	r2, 8014ea2 <_printf_common+0x26>
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	6033      	str	r3, [r6, #0]
 8014ea2:	6823      	ldr	r3, [r4, #0]
 8014ea4:	0699      	lsls	r1, r3, #26
 8014ea6:	bf42      	ittt	mi
 8014ea8:	6833      	ldrmi	r3, [r6, #0]
 8014eaa:	3302      	addmi	r3, #2
 8014eac:	6033      	strmi	r3, [r6, #0]
 8014eae:	6825      	ldr	r5, [r4, #0]
 8014eb0:	f015 0506 	ands.w	r5, r5, #6
 8014eb4:	d106      	bne.n	8014ec4 <_printf_common+0x48>
 8014eb6:	f104 0a19 	add.w	sl, r4, #25
 8014eba:	68e3      	ldr	r3, [r4, #12]
 8014ebc:	6832      	ldr	r2, [r6, #0]
 8014ebe:	1a9b      	subs	r3, r3, r2
 8014ec0:	42ab      	cmp	r3, r5
 8014ec2:	dc26      	bgt.n	8014f12 <_printf_common+0x96>
 8014ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014ec8:	6822      	ldr	r2, [r4, #0]
 8014eca:	3b00      	subs	r3, #0
 8014ecc:	bf18      	it	ne
 8014ece:	2301      	movne	r3, #1
 8014ed0:	0692      	lsls	r2, r2, #26
 8014ed2:	d42b      	bmi.n	8014f2c <_printf_common+0xb0>
 8014ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014ed8:	4641      	mov	r1, r8
 8014eda:	4638      	mov	r0, r7
 8014edc:	47c8      	blx	r9
 8014ede:	3001      	adds	r0, #1
 8014ee0:	d01e      	beq.n	8014f20 <_printf_common+0xa4>
 8014ee2:	6823      	ldr	r3, [r4, #0]
 8014ee4:	6922      	ldr	r2, [r4, #16]
 8014ee6:	f003 0306 	and.w	r3, r3, #6
 8014eea:	2b04      	cmp	r3, #4
 8014eec:	bf02      	ittt	eq
 8014eee:	68e5      	ldreq	r5, [r4, #12]
 8014ef0:	6833      	ldreq	r3, [r6, #0]
 8014ef2:	1aed      	subeq	r5, r5, r3
 8014ef4:	68a3      	ldr	r3, [r4, #8]
 8014ef6:	bf0c      	ite	eq
 8014ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014efc:	2500      	movne	r5, #0
 8014efe:	4293      	cmp	r3, r2
 8014f00:	bfc4      	itt	gt
 8014f02:	1a9b      	subgt	r3, r3, r2
 8014f04:	18ed      	addgt	r5, r5, r3
 8014f06:	2600      	movs	r6, #0
 8014f08:	341a      	adds	r4, #26
 8014f0a:	42b5      	cmp	r5, r6
 8014f0c:	d11a      	bne.n	8014f44 <_printf_common+0xc8>
 8014f0e:	2000      	movs	r0, #0
 8014f10:	e008      	b.n	8014f24 <_printf_common+0xa8>
 8014f12:	2301      	movs	r3, #1
 8014f14:	4652      	mov	r2, sl
 8014f16:	4641      	mov	r1, r8
 8014f18:	4638      	mov	r0, r7
 8014f1a:	47c8      	blx	r9
 8014f1c:	3001      	adds	r0, #1
 8014f1e:	d103      	bne.n	8014f28 <_printf_common+0xac>
 8014f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f28:	3501      	adds	r5, #1
 8014f2a:	e7c6      	b.n	8014eba <_printf_common+0x3e>
 8014f2c:	18e1      	adds	r1, r4, r3
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	2030      	movs	r0, #48	@ 0x30
 8014f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014f36:	4422      	add	r2, r4
 8014f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014f40:	3302      	adds	r3, #2
 8014f42:	e7c7      	b.n	8014ed4 <_printf_common+0x58>
 8014f44:	2301      	movs	r3, #1
 8014f46:	4622      	mov	r2, r4
 8014f48:	4641      	mov	r1, r8
 8014f4a:	4638      	mov	r0, r7
 8014f4c:	47c8      	blx	r9
 8014f4e:	3001      	adds	r0, #1
 8014f50:	d0e6      	beq.n	8014f20 <_printf_common+0xa4>
 8014f52:	3601      	adds	r6, #1
 8014f54:	e7d9      	b.n	8014f0a <_printf_common+0x8e>
	...

08014f58 <_printf_i>:
 8014f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f5c:	7e0f      	ldrb	r7, [r1, #24]
 8014f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014f60:	2f78      	cmp	r7, #120	@ 0x78
 8014f62:	4691      	mov	r9, r2
 8014f64:	4680      	mov	r8, r0
 8014f66:	460c      	mov	r4, r1
 8014f68:	469a      	mov	sl, r3
 8014f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014f6e:	d807      	bhi.n	8014f80 <_printf_i+0x28>
 8014f70:	2f62      	cmp	r7, #98	@ 0x62
 8014f72:	d80a      	bhi.n	8014f8a <_printf_i+0x32>
 8014f74:	2f00      	cmp	r7, #0
 8014f76:	f000 80d1 	beq.w	801511c <_printf_i+0x1c4>
 8014f7a:	2f58      	cmp	r7, #88	@ 0x58
 8014f7c:	f000 80b8 	beq.w	80150f0 <_printf_i+0x198>
 8014f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014f88:	e03a      	b.n	8015000 <_printf_i+0xa8>
 8014f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014f8e:	2b15      	cmp	r3, #21
 8014f90:	d8f6      	bhi.n	8014f80 <_printf_i+0x28>
 8014f92:	a101      	add	r1, pc, #4	@ (adr r1, 8014f98 <_printf_i+0x40>)
 8014f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f98:	08014ff1 	.word	0x08014ff1
 8014f9c:	08015005 	.word	0x08015005
 8014fa0:	08014f81 	.word	0x08014f81
 8014fa4:	08014f81 	.word	0x08014f81
 8014fa8:	08014f81 	.word	0x08014f81
 8014fac:	08014f81 	.word	0x08014f81
 8014fb0:	08015005 	.word	0x08015005
 8014fb4:	08014f81 	.word	0x08014f81
 8014fb8:	08014f81 	.word	0x08014f81
 8014fbc:	08014f81 	.word	0x08014f81
 8014fc0:	08014f81 	.word	0x08014f81
 8014fc4:	08015103 	.word	0x08015103
 8014fc8:	0801502f 	.word	0x0801502f
 8014fcc:	080150bd 	.word	0x080150bd
 8014fd0:	08014f81 	.word	0x08014f81
 8014fd4:	08014f81 	.word	0x08014f81
 8014fd8:	08015125 	.word	0x08015125
 8014fdc:	08014f81 	.word	0x08014f81
 8014fe0:	0801502f 	.word	0x0801502f
 8014fe4:	08014f81 	.word	0x08014f81
 8014fe8:	08014f81 	.word	0x08014f81
 8014fec:	080150c5 	.word	0x080150c5
 8014ff0:	6833      	ldr	r3, [r6, #0]
 8014ff2:	1d1a      	adds	r2, r3, #4
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	6032      	str	r2, [r6, #0]
 8014ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015000:	2301      	movs	r3, #1
 8015002:	e09c      	b.n	801513e <_printf_i+0x1e6>
 8015004:	6833      	ldr	r3, [r6, #0]
 8015006:	6820      	ldr	r0, [r4, #0]
 8015008:	1d19      	adds	r1, r3, #4
 801500a:	6031      	str	r1, [r6, #0]
 801500c:	0606      	lsls	r6, r0, #24
 801500e:	d501      	bpl.n	8015014 <_printf_i+0xbc>
 8015010:	681d      	ldr	r5, [r3, #0]
 8015012:	e003      	b.n	801501c <_printf_i+0xc4>
 8015014:	0645      	lsls	r5, r0, #25
 8015016:	d5fb      	bpl.n	8015010 <_printf_i+0xb8>
 8015018:	f9b3 5000 	ldrsh.w	r5, [r3]
 801501c:	2d00      	cmp	r5, #0
 801501e:	da03      	bge.n	8015028 <_printf_i+0xd0>
 8015020:	232d      	movs	r3, #45	@ 0x2d
 8015022:	426d      	negs	r5, r5
 8015024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015028:	4858      	ldr	r0, [pc, #352]	@ (801518c <_printf_i+0x234>)
 801502a:	230a      	movs	r3, #10
 801502c:	e011      	b.n	8015052 <_printf_i+0xfa>
 801502e:	6821      	ldr	r1, [r4, #0]
 8015030:	6833      	ldr	r3, [r6, #0]
 8015032:	0608      	lsls	r0, r1, #24
 8015034:	f853 5b04 	ldr.w	r5, [r3], #4
 8015038:	d402      	bmi.n	8015040 <_printf_i+0xe8>
 801503a:	0649      	lsls	r1, r1, #25
 801503c:	bf48      	it	mi
 801503e:	b2ad      	uxthmi	r5, r5
 8015040:	2f6f      	cmp	r7, #111	@ 0x6f
 8015042:	4852      	ldr	r0, [pc, #328]	@ (801518c <_printf_i+0x234>)
 8015044:	6033      	str	r3, [r6, #0]
 8015046:	bf14      	ite	ne
 8015048:	230a      	movne	r3, #10
 801504a:	2308      	moveq	r3, #8
 801504c:	2100      	movs	r1, #0
 801504e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015052:	6866      	ldr	r6, [r4, #4]
 8015054:	60a6      	str	r6, [r4, #8]
 8015056:	2e00      	cmp	r6, #0
 8015058:	db05      	blt.n	8015066 <_printf_i+0x10e>
 801505a:	6821      	ldr	r1, [r4, #0]
 801505c:	432e      	orrs	r6, r5
 801505e:	f021 0104 	bic.w	r1, r1, #4
 8015062:	6021      	str	r1, [r4, #0]
 8015064:	d04b      	beq.n	80150fe <_printf_i+0x1a6>
 8015066:	4616      	mov	r6, r2
 8015068:	fbb5 f1f3 	udiv	r1, r5, r3
 801506c:	fb03 5711 	mls	r7, r3, r1, r5
 8015070:	5dc7      	ldrb	r7, [r0, r7]
 8015072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015076:	462f      	mov	r7, r5
 8015078:	42bb      	cmp	r3, r7
 801507a:	460d      	mov	r5, r1
 801507c:	d9f4      	bls.n	8015068 <_printf_i+0x110>
 801507e:	2b08      	cmp	r3, #8
 8015080:	d10b      	bne.n	801509a <_printf_i+0x142>
 8015082:	6823      	ldr	r3, [r4, #0]
 8015084:	07df      	lsls	r7, r3, #31
 8015086:	d508      	bpl.n	801509a <_printf_i+0x142>
 8015088:	6923      	ldr	r3, [r4, #16]
 801508a:	6861      	ldr	r1, [r4, #4]
 801508c:	4299      	cmp	r1, r3
 801508e:	bfde      	ittt	le
 8015090:	2330      	movle	r3, #48	@ 0x30
 8015092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015096:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801509a:	1b92      	subs	r2, r2, r6
 801509c:	6122      	str	r2, [r4, #16]
 801509e:	f8cd a000 	str.w	sl, [sp]
 80150a2:	464b      	mov	r3, r9
 80150a4:	aa03      	add	r2, sp, #12
 80150a6:	4621      	mov	r1, r4
 80150a8:	4640      	mov	r0, r8
 80150aa:	f7ff fee7 	bl	8014e7c <_printf_common>
 80150ae:	3001      	adds	r0, #1
 80150b0:	d14a      	bne.n	8015148 <_printf_i+0x1f0>
 80150b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150b6:	b004      	add	sp, #16
 80150b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150bc:	6823      	ldr	r3, [r4, #0]
 80150be:	f043 0320 	orr.w	r3, r3, #32
 80150c2:	6023      	str	r3, [r4, #0]
 80150c4:	4832      	ldr	r0, [pc, #200]	@ (8015190 <_printf_i+0x238>)
 80150c6:	2778      	movs	r7, #120	@ 0x78
 80150c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80150cc:	6823      	ldr	r3, [r4, #0]
 80150ce:	6831      	ldr	r1, [r6, #0]
 80150d0:	061f      	lsls	r7, r3, #24
 80150d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80150d6:	d402      	bmi.n	80150de <_printf_i+0x186>
 80150d8:	065f      	lsls	r7, r3, #25
 80150da:	bf48      	it	mi
 80150dc:	b2ad      	uxthmi	r5, r5
 80150de:	6031      	str	r1, [r6, #0]
 80150e0:	07d9      	lsls	r1, r3, #31
 80150e2:	bf44      	itt	mi
 80150e4:	f043 0320 	orrmi.w	r3, r3, #32
 80150e8:	6023      	strmi	r3, [r4, #0]
 80150ea:	b11d      	cbz	r5, 80150f4 <_printf_i+0x19c>
 80150ec:	2310      	movs	r3, #16
 80150ee:	e7ad      	b.n	801504c <_printf_i+0xf4>
 80150f0:	4826      	ldr	r0, [pc, #152]	@ (801518c <_printf_i+0x234>)
 80150f2:	e7e9      	b.n	80150c8 <_printf_i+0x170>
 80150f4:	6823      	ldr	r3, [r4, #0]
 80150f6:	f023 0320 	bic.w	r3, r3, #32
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	e7f6      	b.n	80150ec <_printf_i+0x194>
 80150fe:	4616      	mov	r6, r2
 8015100:	e7bd      	b.n	801507e <_printf_i+0x126>
 8015102:	6833      	ldr	r3, [r6, #0]
 8015104:	6825      	ldr	r5, [r4, #0]
 8015106:	6961      	ldr	r1, [r4, #20]
 8015108:	1d18      	adds	r0, r3, #4
 801510a:	6030      	str	r0, [r6, #0]
 801510c:	062e      	lsls	r6, r5, #24
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	d501      	bpl.n	8015116 <_printf_i+0x1be>
 8015112:	6019      	str	r1, [r3, #0]
 8015114:	e002      	b.n	801511c <_printf_i+0x1c4>
 8015116:	0668      	lsls	r0, r5, #25
 8015118:	d5fb      	bpl.n	8015112 <_printf_i+0x1ba>
 801511a:	8019      	strh	r1, [r3, #0]
 801511c:	2300      	movs	r3, #0
 801511e:	6123      	str	r3, [r4, #16]
 8015120:	4616      	mov	r6, r2
 8015122:	e7bc      	b.n	801509e <_printf_i+0x146>
 8015124:	6833      	ldr	r3, [r6, #0]
 8015126:	1d1a      	adds	r2, r3, #4
 8015128:	6032      	str	r2, [r6, #0]
 801512a:	681e      	ldr	r6, [r3, #0]
 801512c:	6862      	ldr	r2, [r4, #4]
 801512e:	2100      	movs	r1, #0
 8015130:	4630      	mov	r0, r6
 8015132:	f7eb f8ed 	bl	8000310 <memchr>
 8015136:	b108      	cbz	r0, 801513c <_printf_i+0x1e4>
 8015138:	1b80      	subs	r0, r0, r6
 801513a:	6060      	str	r0, [r4, #4]
 801513c:	6863      	ldr	r3, [r4, #4]
 801513e:	6123      	str	r3, [r4, #16]
 8015140:	2300      	movs	r3, #0
 8015142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015146:	e7aa      	b.n	801509e <_printf_i+0x146>
 8015148:	6923      	ldr	r3, [r4, #16]
 801514a:	4632      	mov	r2, r6
 801514c:	4649      	mov	r1, r9
 801514e:	4640      	mov	r0, r8
 8015150:	47d0      	blx	sl
 8015152:	3001      	adds	r0, #1
 8015154:	d0ad      	beq.n	80150b2 <_printf_i+0x15a>
 8015156:	6823      	ldr	r3, [r4, #0]
 8015158:	079b      	lsls	r3, r3, #30
 801515a:	d413      	bmi.n	8015184 <_printf_i+0x22c>
 801515c:	68e0      	ldr	r0, [r4, #12]
 801515e:	9b03      	ldr	r3, [sp, #12]
 8015160:	4298      	cmp	r0, r3
 8015162:	bfb8      	it	lt
 8015164:	4618      	movlt	r0, r3
 8015166:	e7a6      	b.n	80150b6 <_printf_i+0x15e>
 8015168:	2301      	movs	r3, #1
 801516a:	4632      	mov	r2, r6
 801516c:	4649      	mov	r1, r9
 801516e:	4640      	mov	r0, r8
 8015170:	47d0      	blx	sl
 8015172:	3001      	adds	r0, #1
 8015174:	d09d      	beq.n	80150b2 <_printf_i+0x15a>
 8015176:	3501      	adds	r5, #1
 8015178:	68e3      	ldr	r3, [r4, #12]
 801517a:	9903      	ldr	r1, [sp, #12]
 801517c:	1a5b      	subs	r3, r3, r1
 801517e:	42ab      	cmp	r3, r5
 8015180:	dcf2      	bgt.n	8015168 <_printf_i+0x210>
 8015182:	e7eb      	b.n	801515c <_printf_i+0x204>
 8015184:	2500      	movs	r5, #0
 8015186:	f104 0619 	add.w	r6, r4, #25
 801518a:	e7f5      	b.n	8015178 <_printf_i+0x220>
 801518c:	08017a6a 	.word	0x08017a6a
 8015190:	08017a7b 	.word	0x08017a7b

08015194 <std>:
 8015194:	2300      	movs	r3, #0
 8015196:	b510      	push	{r4, lr}
 8015198:	4604      	mov	r4, r0
 801519a:	e9c0 3300 	strd	r3, r3, [r0]
 801519e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151a2:	6083      	str	r3, [r0, #8]
 80151a4:	8181      	strh	r1, [r0, #12]
 80151a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80151a8:	81c2      	strh	r2, [r0, #14]
 80151aa:	6183      	str	r3, [r0, #24]
 80151ac:	4619      	mov	r1, r3
 80151ae:	2208      	movs	r2, #8
 80151b0:	305c      	adds	r0, #92	@ 0x5c
 80151b2:	f000 f9f9 	bl	80155a8 <memset>
 80151b6:	4b0d      	ldr	r3, [pc, #52]	@ (80151ec <std+0x58>)
 80151b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80151ba:	4b0d      	ldr	r3, [pc, #52]	@ (80151f0 <std+0x5c>)
 80151bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80151be:	4b0d      	ldr	r3, [pc, #52]	@ (80151f4 <std+0x60>)
 80151c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80151c2:	4b0d      	ldr	r3, [pc, #52]	@ (80151f8 <std+0x64>)
 80151c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80151c6:	4b0d      	ldr	r3, [pc, #52]	@ (80151fc <std+0x68>)
 80151c8:	6224      	str	r4, [r4, #32]
 80151ca:	429c      	cmp	r4, r3
 80151cc:	d006      	beq.n	80151dc <std+0x48>
 80151ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80151d2:	4294      	cmp	r4, r2
 80151d4:	d002      	beq.n	80151dc <std+0x48>
 80151d6:	33d0      	adds	r3, #208	@ 0xd0
 80151d8:	429c      	cmp	r4, r3
 80151da:	d105      	bne.n	80151e8 <std+0x54>
 80151dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80151e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151e4:	f000 baba 	b.w	801575c <__retarget_lock_init_recursive>
 80151e8:	bd10      	pop	{r4, pc}
 80151ea:	bf00      	nop
 80151ec:	080153f9 	.word	0x080153f9
 80151f0:	0801541b 	.word	0x0801541b
 80151f4:	08015453 	.word	0x08015453
 80151f8:	08015477 	.word	0x08015477
 80151fc:	24005880 	.word	0x24005880

08015200 <stdio_exit_handler>:
 8015200:	4a02      	ldr	r2, [pc, #8]	@ (801520c <stdio_exit_handler+0xc>)
 8015202:	4903      	ldr	r1, [pc, #12]	@ (8015210 <stdio_exit_handler+0x10>)
 8015204:	4803      	ldr	r0, [pc, #12]	@ (8015214 <stdio_exit_handler+0x14>)
 8015206:	f000 b869 	b.w	80152dc <_fwalk_sglue>
 801520a:	bf00      	nop
 801520c:	24000030 	.word	0x24000030
 8015210:	08016fcd 	.word	0x08016fcd
 8015214:	24000040 	.word	0x24000040

08015218 <cleanup_stdio>:
 8015218:	6841      	ldr	r1, [r0, #4]
 801521a:	4b0c      	ldr	r3, [pc, #48]	@ (801524c <cleanup_stdio+0x34>)
 801521c:	4299      	cmp	r1, r3
 801521e:	b510      	push	{r4, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	d001      	beq.n	8015228 <cleanup_stdio+0x10>
 8015224:	f001 fed2 	bl	8016fcc <_fflush_r>
 8015228:	68a1      	ldr	r1, [r4, #8]
 801522a:	4b09      	ldr	r3, [pc, #36]	@ (8015250 <cleanup_stdio+0x38>)
 801522c:	4299      	cmp	r1, r3
 801522e:	d002      	beq.n	8015236 <cleanup_stdio+0x1e>
 8015230:	4620      	mov	r0, r4
 8015232:	f001 fecb 	bl	8016fcc <_fflush_r>
 8015236:	68e1      	ldr	r1, [r4, #12]
 8015238:	4b06      	ldr	r3, [pc, #24]	@ (8015254 <cleanup_stdio+0x3c>)
 801523a:	4299      	cmp	r1, r3
 801523c:	d004      	beq.n	8015248 <cleanup_stdio+0x30>
 801523e:	4620      	mov	r0, r4
 8015240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015244:	f001 bec2 	b.w	8016fcc <_fflush_r>
 8015248:	bd10      	pop	{r4, pc}
 801524a:	bf00      	nop
 801524c:	24005880 	.word	0x24005880
 8015250:	240058e8 	.word	0x240058e8
 8015254:	24005950 	.word	0x24005950

08015258 <global_stdio_init.part.0>:
 8015258:	b510      	push	{r4, lr}
 801525a:	4b0b      	ldr	r3, [pc, #44]	@ (8015288 <global_stdio_init.part.0+0x30>)
 801525c:	4c0b      	ldr	r4, [pc, #44]	@ (801528c <global_stdio_init.part.0+0x34>)
 801525e:	4a0c      	ldr	r2, [pc, #48]	@ (8015290 <global_stdio_init.part.0+0x38>)
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	4620      	mov	r0, r4
 8015264:	2200      	movs	r2, #0
 8015266:	2104      	movs	r1, #4
 8015268:	f7ff ff94 	bl	8015194 <std>
 801526c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015270:	2201      	movs	r2, #1
 8015272:	2109      	movs	r1, #9
 8015274:	f7ff ff8e 	bl	8015194 <std>
 8015278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801527c:	2202      	movs	r2, #2
 801527e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015282:	2112      	movs	r1, #18
 8015284:	f7ff bf86 	b.w	8015194 <std>
 8015288:	240059b8 	.word	0x240059b8
 801528c:	24005880 	.word	0x24005880
 8015290:	08015201 	.word	0x08015201

08015294 <__sfp_lock_acquire>:
 8015294:	4801      	ldr	r0, [pc, #4]	@ (801529c <__sfp_lock_acquire+0x8>)
 8015296:	f000 ba62 	b.w	801575e <__retarget_lock_acquire_recursive>
 801529a:	bf00      	nop
 801529c:	240059c1 	.word	0x240059c1

080152a0 <__sfp_lock_release>:
 80152a0:	4801      	ldr	r0, [pc, #4]	@ (80152a8 <__sfp_lock_release+0x8>)
 80152a2:	f000 ba5d 	b.w	8015760 <__retarget_lock_release_recursive>
 80152a6:	bf00      	nop
 80152a8:	240059c1 	.word	0x240059c1

080152ac <__sinit>:
 80152ac:	b510      	push	{r4, lr}
 80152ae:	4604      	mov	r4, r0
 80152b0:	f7ff fff0 	bl	8015294 <__sfp_lock_acquire>
 80152b4:	6a23      	ldr	r3, [r4, #32]
 80152b6:	b11b      	cbz	r3, 80152c0 <__sinit+0x14>
 80152b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152bc:	f7ff bff0 	b.w	80152a0 <__sfp_lock_release>
 80152c0:	4b04      	ldr	r3, [pc, #16]	@ (80152d4 <__sinit+0x28>)
 80152c2:	6223      	str	r3, [r4, #32]
 80152c4:	4b04      	ldr	r3, [pc, #16]	@ (80152d8 <__sinit+0x2c>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d1f5      	bne.n	80152b8 <__sinit+0xc>
 80152cc:	f7ff ffc4 	bl	8015258 <global_stdio_init.part.0>
 80152d0:	e7f2      	b.n	80152b8 <__sinit+0xc>
 80152d2:	bf00      	nop
 80152d4:	08015219 	.word	0x08015219
 80152d8:	240059b8 	.word	0x240059b8

080152dc <_fwalk_sglue>:
 80152dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152e0:	4607      	mov	r7, r0
 80152e2:	4688      	mov	r8, r1
 80152e4:	4614      	mov	r4, r2
 80152e6:	2600      	movs	r6, #0
 80152e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152ec:	f1b9 0901 	subs.w	r9, r9, #1
 80152f0:	d505      	bpl.n	80152fe <_fwalk_sglue+0x22>
 80152f2:	6824      	ldr	r4, [r4, #0]
 80152f4:	2c00      	cmp	r4, #0
 80152f6:	d1f7      	bne.n	80152e8 <_fwalk_sglue+0xc>
 80152f8:	4630      	mov	r0, r6
 80152fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152fe:	89ab      	ldrh	r3, [r5, #12]
 8015300:	2b01      	cmp	r3, #1
 8015302:	d907      	bls.n	8015314 <_fwalk_sglue+0x38>
 8015304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015308:	3301      	adds	r3, #1
 801530a:	d003      	beq.n	8015314 <_fwalk_sglue+0x38>
 801530c:	4629      	mov	r1, r5
 801530e:	4638      	mov	r0, r7
 8015310:	47c0      	blx	r8
 8015312:	4306      	orrs	r6, r0
 8015314:	3568      	adds	r5, #104	@ 0x68
 8015316:	e7e9      	b.n	80152ec <_fwalk_sglue+0x10>

08015318 <iprintf>:
 8015318:	b40f      	push	{r0, r1, r2, r3}
 801531a:	b507      	push	{r0, r1, r2, lr}
 801531c:	4906      	ldr	r1, [pc, #24]	@ (8015338 <iprintf+0x20>)
 801531e:	ab04      	add	r3, sp, #16
 8015320:	6808      	ldr	r0, [r1, #0]
 8015322:	f853 2b04 	ldr.w	r2, [r3], #4
 8015326:	6881      	ldr	r1, [r0, #8]
 8015328:	9301      	str	r3, [sp, #4]
 801532a:	f001 fcb3 	bl	8016c94 <_vfiprintf_r>
 801532e:	b003      	add	sp, #12
 8015330:	f85d eb04 	ldr.w	lr, [sp], #4
 8015334:	b004      	add	sp, #16
 8015336:	4770      	bx	lr
 8015338:	2400003c 	.word	0x2400003c

0801533c <_puts_r>:
 801533c:	6a03      	ldr	r3, [r0, #32]
 801533e:	b570      	push	{r4, r5, r6, lr}
 8015340:	6884      	ldr	r4, [r0, #8]
 8015342:	4605      	mov	r5, r0
 8015344:	460e      	mov	r6, r1
 8015346:	b90b      	cbnz	r3, 801534c <_puts_r+0x10>
 8015348:	f7ff ffb0 	bl	80152ac <__sinit>
 801534c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801534e:	07db      	lsls	r3, r3, #31
 8015350:	d405      	bmi.n	801535e <_puts_r+0x22>
 8015352:	89a3      	ldrh	r3, [r4, #12]
 8015354:	0598      	lsls	r0, r3, #22
 8015356:	d402      	bmi.n	801535e <_puts_r+0x22>
 8015358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801535a:	f000 fa00 	bl	801575e <__retarget_lock_acquire_recursive>
 801535e:	89a3      	ldrh	r3, [r4, #12]
 8015360:	0719      	lsls	r1, r3, #28
 8015362:	d502      	bpl.n	801536a <_puts_r+0x2e>
 8015364:	6923      	ldr	r3, [r4, #16]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d135      	bne.n	80153d6 <_puts_r+0x9a>
 801536a:	4621      	mov	r1, r4
 801536c:	4628      	mov	r0, r5
 801536e:	f000 f8c5 	bl	80154fc <__swsetup_r>
 8015372:	b380      	cbz	r0, 80153d6 <_puts_r+0x9a>
 8015374:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801537a:	07da      	lsls	r2, r3, #31
 801537c:	d405      	bmi.n	801538a <_puts_r+0x4e>
 801537e:	89a3      	ldrh	r3, [r4, #12]
 8015380:	059b      	lsls	r3, r3, #22
 8015382:	d402      	bmi.n	801538a <_puts_r+0x4e>
 8015384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015386:	f000 f9eb 	bl	8015760 <__retarget_lock_release_recursive>
 801538a:	4628      	mov	r0, r5
 801538c:	bd70      	pop	{r4, r5, r6, pc}
 801538e:	2b00      	cmp	r3, #0
 8015390:	da04      	bge.n	801539c <_puts_r+0x60>
 8015392:	69a2      	ldr	r2, [r4, #24]
 8015394:	429a      	cmp	r2, r3
 8015396:	dc17      	bgt.n	80153c8 <_puts_r+0x8c>
 8015398:	290a      	cmp	r1, #10
 801539a:	d015      	beq.n	80153c8 <_puts_r+0x8c>
 801539c:	6823      	ldr	r3, [r4, #0]
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	6022      	str	r2, [r4, #0]
 80153a2:	7019      	strb	r1, [r3, #0]
 80153a4:	68a3      	ldr	r3, [r4, #8]
 80153a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153aa:	3b01      	subs	r3, #1
 80153ac:	60a3      	str	r3, [r4, #8]
 80153ae:	2900      	cmp	r1, #0
 80153b0:	d1ed      	bne.n	801538e <_puts_r+0x52>
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	da11      	bge.n	80153da <_puts_r+0x9e>
 80153b6:	4622      	mov	r2, r4
 80153b8:	210a      	movs	r1, #10
 80153ba:	4628      	mov	r0, r5
 80153bc:	f000 f85f 	bl	801547e <__swbuf_r>
 80153c0:	3001      	adds	r0, #1
 80153c2:	d0d7      	beq.n	8015374 <_puts_r+0x38>
 80153c4:	250a      	movs	r5, #10
 80153c6:	e7d7      	b.n	8015378 <_puts_r+0x3c>
 80153c8:	4622      	mov	r2, r4
 80153ca:	4628      	mov	r0, r5
 80153cc:	f000 f857 	bl	801547e <__swbuf_r>
 80153d0:	3001      	adds	r0, #1
 80153d2:	d1e7      	bne.n	80153a4 <_puts_r+0x68>
 80153d4:	e7ce      	b.n	8015374 <_puts_r+0x38>
 80153d6:	3e01      	subs	r6, #1
 80153d8:	e7e4      	b.n	80153a4 <_puts_r+0x68>
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	1c5a      	adds	r2, r3, #1
 80153de:	6022      	str	r2, [r4, #0]
 80153e0:	220a      	movs	r2, #10
 80153e2:	701a      	strb	r2, [r3, #0]
 80153e4:	e7ee      	b.n	80153c4 <_puts_r+0x88>
	...

080153e8 <puts>:
 80153e8:	4b02      	ldr	r3, [pc, #8]	@ (80153f4 <puts+0xc>)
 80153ea:	4601      	mov	r1, r0
 80153ec:	6818      	ldr	r0, [r3, #0]
 80153ee:	f7ff bfa5 	b.w	801533c <_puts_r>
 80153f2:	bf00      	nop
 80153f4:	2400003c 	.word	0x2400003c

080153f8 <__sread>:
 80153f8:	b510      	push	{r4, lr}
 80153fa:	460c      	mov	r4, r1
 80153fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015400:	f000 f95e 	bl	80156c0 <_read_r>
 8015404:	2800      	cmp	r0, #0
 8015406:	bfab      	itete	ge
 8015408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801540a:	89a3      	ldrhlt	r3, [r4, #12]
 801540c:	181b      	addge	r3, r3, r0
 801540e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015412:	bfac      	ite	ge
 8015414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015416:	81a3      	strhlt	r3, [r4, #12]
 8015418:	bd10      	pop	{r4, pc}

0801541a <__swrite>:
 801541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801541e:	461f      	mov	r7, r3
 8015420:	898b      	ldrh	r3, [r1, #12]
 8015422:	05db      	lsls	r3, r3, #23
 8015424:	4605      	mov	r5, r0
 8015426:	460c      	mov	r4, r1
 8015428:	4616      	mov	r6, r2
 801542a:	d505      	bpl.n	8015438 <__swrite+0x1e>
 801542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015430:	2302      	movs	r3, #2
 8015432:	2200      	movs	r2, #0
 8015434:	f000 f932 	bl	801569c <_lseek_r>
 8015438:	89a3      	ldrh	r3, [r4, #12]
 801543a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801543e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015442:	81a3      	strh	r3, [r4, #12]
 8015444:	4632      	mov	r2, r6
 8015446:	463b      	mov	r3, r7
 8015448:	4628      	mov	r0, r5
 801544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801544e:	f000 b949 	b.w	80156e4 <_write_r>

08015452 <__sseek>:
 8015452:	b510      	push	{r4, lr}
 8015454:	460c      	mov	r4, r1
 8015456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801545a:	f000 f91f 	bl	801569c <_lseek_r>
 801545e:	1c43      	adds	r3, r0, #1
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	bf15      	itete	ne
 8015464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801546a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801546e:	81a3      	strheq	r3, [r4, #12]
 8015470:	bf18      	it	ne
 8015472:	81a3      	strhne	r3, [r4, #12]
 8015474:	bd10      	pop	{r4, pc}

08015476 <__sclose>:
 8015476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547a:	f000 b8a1 	b.w	80155c0 <_close_r>

0801547e <__swbuf_r>:
 801547e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015480:	460e      	mov	r6, r1
 8015482:	4614      	mov	r4, r2
 8015484:	4605      	mov	r5, r0
 8015486:	b118      	cbz	r0, 8015490 <__swbuf_r+0x12>
 8015488:	6a03      	ldr	r3, [r0, #32]
 801548a:	b90b      	cbnz	r3, 8015490 <__swbuf_r+0x12>
 801548c:	f7ff ff0e 	bl	80152ac <__sinit>
 8015490:	69a3      	ldr	r3, [r4, #24]
 8015492:	60a3      	str	r3, [r4, #8]
 8015494:	89a3      	ldrh	r3, [r4, #12]
 8015496:	071a      	lsls	r2, r3, #28
 8015498:	d501      	bpl.n	801549e <__swbuf_r+0x20>
 801549a:	6923      	ldr	r3, [r4, #16]
 801549c:	b943      	cbnz	r3, 80154b0 <__swbuf_r+0x32>
 801549e:	4621      	mov	r1, r4
 80154a0:	4628      	mov	r0, r5
 80154a2:	f000 f82b 	bl	80154fc <__swsetup_r>
 80154a6:	b118      	cbz	r0, 80154b0 <__swbuf_r+0x32>
 80154a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80154ac:	4638      	mov	r0, r7
 80154ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	6922      	ldr	r2, [r4, #16]
 80154b4:	1a98      	subs	r0, r3, r2
 80154b6:	6963      	ldr	r3, [r4, #20]
 80154b8:	b2f6      	uxtb	r6, r6
 80154ba:	4283      	cmp	r3, r0
 80154bc:	4637      	mov	r7, r6
 80154be:	dc05      	bgt.n	80154cc <__swbuf_r+0x4e>
 80154c0:	4621      	mov	r1, r4
 80154c2:	4628      	mov	r0, r5
 80154c4:	f001 fd82 	bl	8016fcc <_fflush_r>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d1ed      	bne.n	80154a8 <__swbuf_r+0x2a>
 80154cc:	68a3      	ldr	r3, [r4, #8]
 80154ce:	3b01      	subs	r3, #1
 80154d0:	60a3      	str	r3, [r4, #8]
 80154d2:	6823      	ldr	r3, [r4, #0]
 80154d4:	1c5a      	adds	r2, r3, #1
 80154d6:	6022      	str	r2, [r4, #0]
 80154d8:	701e      	strb	r6, [r3, #0]
 80154da:	6962      	ldr	r2, [r4, #20]
 80154dc:	1c43      	adds	r3, r0, #1
 80154de:	429a      	cmp	r2, r3
 80154e0:	d004      	beq.n	80154ec <__swbuf_r+0x6e>
 80154e2:	89a3      	ldrh	r3, [r4, #12]
 80154e4:	07db      	lsls	r3, r3, #31
 80154e6:	d5e1      	bpl.n	80154ac <__swbuf_r+0x2e>
 80154e8:	2e0a      	cmp	r6, #10
 80154ea:	d1df      	bne.n	80154ac <__swbuf_r+0x2e>
 80154ec:	4621      	mov	r1, r4
 80154ee:	4628      	mov	r0, r5
 80154f0:	f001 fd6c 	bl	8016fcc <_fflush_r>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d0d9      	beq.n	80154ac <__swbuf_r+0x2e>
 80154f8:	e7d6      	b.n	80154a8 <__swbuf_r+0x2a>
	...

080154fc <__swsetup_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4b29      	ldr	r3, [pc, #164]	@ (80155a4 <__swsetup_r+0xa8>)
 8015500:	4605      	mov	r5, r0
 8015502:	6818      	ldr	r0, [r3, #0]
 8015504:	460c      	mov	r4, r1
 8015506:	b118      	cbz	r0, 8015510 <__swsetup_r+0x14>
 8015508:	6a03      	ldr	r3, [r0, #32]
 801550a:	b90b      	cbnz	r3, 8015510 <__swsetup_r+0x14>
 801550c:	f7ff fece 	bl	80152ac <__sinit>
 8015510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015514:	0719      	lsls	r1, r3, #28
 8015516:	d422      	bmi.n	801555e <__swsetup_r+0x62>
 8015518:	06da      	lsls	r2, r3, #27
 801551a:	d407      	bmi.n	801552c <__swsetup_r+0x30>
 801551c:	2209      	movs	r2, #9
 801551e:	602a      	str	r2, [r5, #0]
 8015520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015524:	81a3      	strh	r3, [r4, #12]
 8015526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801552a:	e033      	b.n	8015594 <__swsetup_r+0x98>
 801552c:	0758      	lsls	r0, r3, #29
 801552e:	d512      	bpl.n	8015556 <__swsetup_r+0x5a>
 8015530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015532:	b141      	cbz	r1, 8015546 <__swsetup_r+0x4a>
 8015534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015538:	4299      	cmp	r1, r3
 801553a:	d002      	beq.n	8015542 <__swsetup_r+0x46>
 801553c:	4628      	mov	r0, r5
 801553e:	f000 ff05 	bl	801634c <_free_r>
 8015542:	2300      	movs	r3, #0
 8015544:	6363      	str	r3, [r4, #52]	@ 0x34
 8015546:	89a3      	ldrh	r3, [r4, #12]
 8015548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801554c:	81a3      	strh	r3, [r4, #12]
 801554e:	2300      	movs	r3, #0
 8015550:	6063      	str	r3, [r4, #4]
 8015552:	6923      	ldr	r3, [r4, #16]
 8015554:	6023      	str	r3, [r4, #0]
 8015556:	89a3      	ldrh	r3, [r4, #12]
 8015558:	f043 0308 	orr.w	r3, r3, #8
 801555c:	81a3      	strh	r3, [r4, #12]
 801555e:	6923      	ldr	r3, [r4, #16]
 8015560:	b94b      	cbnz	r3, 8015576 <__swsetup_r+0x7a>
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801556c:	d003      	beq.n	8015576 <__swsetup_r+0x7a>
 801556e:	4621      	mov	r1, r4
 8015570:	4628      	mov	r0, r5
 8015572:	f001 fd79 	bl	8017068 <__smakebuf_r>
 8015576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801557a:	f013 0201 	ands.w	r2, r3, #1
 801557e:	d00a      	beq.n	8015596 <__swsetup_r+0x9a>
 8015580:	2200      	movs	r2, #0
 8015582:	60a2      	str	r2, [r4, #8]
 8015584:	6962      	ldr	r2, [r4, #20]
 8015586:	4252      	negs	r2, r2
 8015588:	61a2      	str	r2, [r4, #24]
 801558a:	6922      	ldr	r2, [r4, #16]
 801558c:	b942      	cbnz	r2, 80155a0 <__swsetup_r+0xa4>
 801558e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015592:	d1c5      	bne.n	8015520 <__swsetup_r+0x24>
 8015594:	bd38      	pop	{r3, r4, r5, pc}
 8015596:	0799      	lsls	r1, r3, #30
 8015598:	bf58      	it	pl
 801559a:	6962      	ldrpl	r2, [r4, #20]
 801559c:	60a2      	str	r2, [r4, #8]
 801559e:	e7f4      	b.n	801558a <__swsetup_r+0x8e>
 80155a0:	2000      	movs	r0, #0
 80155a2:	e7f7      	b.n	8015594 <__swsetup_r+0x98>
 80155a4:	2400003c 	.word	0x2400003c

080155a8 <memset>:
 80155a8:	4402      	add	r2, r0
 80155aa:	4603      	mov	r3, r0
 80155ac:	4293      	cmp	r3, r2
 80155ae:	d100      	bne.n	80155b2 <memset+0xa>
 80155b0:	4770      	bx	lr
 80155b2:	f803 1b01 	strb.w	r1, [r3], #1
 80155b6:	e7f9      	b.n	80155ac <memset+0x4>

080155b8 <_localeconv_r>:
 80155b8:	4800      	ldr	r0, [pc, #0]	@ (80155bc <_localeconv_r+0x4>)
 80155ba:	4770      	bx	lr
 80155bc:	2400017c 	.word	0x2400017c

080155c0 <_close_r>:
 80155c0:	b538      	push	{r3, r4, r5, lr}
 80155c2:	4d06      	ldr	r5, [pc, #24]	@ (80155dc <_close_r+0x1c>)
 80155c4:	2300      	movs	r3, #0
 80155c6:	4604      	mov	r4, r0
 80155c8:	4608      	mov	r0, r1
 80155ca:	602b      	str	r3, [r5, #0]
 80155cc:	f7ed faa4 	bl	8002b18 <_close>
 80155d0:	1c43      	adds	r3, r0, #1
 80155d2:	d102      	bne.n	80155da <_close_r+0x1a>
 80155d4:	682b      	ldr	r3, [r5, #0]
 80155d6:	b103      	cbz	r3, 80155da <_close_r+0x1a>
 80155d8:	6023      	str	r3, [r4, #0]
 80155da:	bd38      	pop	{r3, r4, r5, pc}
 80155dc:	240059bc 	.word	0x240059bc

080155e0 <_reclaim_reent>:
 80155e0:	4b2d      	ldr	r3, [pc, #180]	@ (8015698 <_reclaim_reent+0xb8>)
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	4283      	cmp	r3, r0
 80155e6:	b570      	push	{r4, r5, r6, lr}
 80155e8:	4604      	mov	r4, r0
 80155ea:	d053      	beq.n	8015694 <_reclaim_reent+0xb4>
 80155ec:	69c3      	ldr	r3, [r0, #28]
 80155ee:	b31b      	cbz	r3, 8015638 <_reclaim_reent+0x58>
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	b163      	cbz	r3, 801560e <_reclaim_reent+0x2e>
 80155f4:	2500      	movs	r5, #0
 80155f6:	69e3      	ldr	r3, [r4, #28]
 80155f8:	68db      	ldr	r3, [r3, #12]
 80155fa:	5959      	ldr	r1, [r3, r5]
 80155fc:	b9b1      	cbnz	r1, 801562c <_reclaim_reent+0x4c>
 80155fe:	3504      	adds	r5, #4
 8015600:	2d80      	cmp	r5, #128	@ 0x80
 8015602:	d1f8      	bne.n	80155f6 <_reclaim_reent+0x16>
 8015604:	69e3      	ldr	r3, [r4, #28]
 8015606:	4620      	mov	r0, r4
 8015608:	68d9      	ldr	r1, [r3, #12]
 801560a:	f000 fe9f 	bl	801634c <_free_r>
 801560e:	69e3      	ldr	r3, [r4, #28]
 8015610:	6819      	ldr	r1, [r3, #0]
 8015612:	b111      	cbz	r1, 801561a <_reclaim_reent+0x3a>
 8015614:	4620      	mov	r0, r4
 8015616:	f000 fe99 	bl	801634c <_free_r>
 801561a:	69e3      	ldr	r3, [r4, #28]
 801561c:	689d      	ldr	r5, [r3, #8]
 801561e:	b15d      	cbz	r5, 8015638 <_reclaim_reent+0x58>
 8015620:	4629      	mov	r1, r5
 8015622:	4620      	mov	r0, r4
 8015624:	682d      	ldr	r5, [r5, #0]
 8015626:	f000 fe91 	bl	801634c <_free_r>
 801562a:	e7f8      	b.n	801561e <_reclaim_reent+0x3e>
 801562c:	680e      	ldr	r6, [r1, #0]
 801562e:	4620      	mov	r0, r4
 8015630:	f000 fe8c 	bl	801634c <_free_r>
 8015634:	4631      	mov	r1, r6
 8015636:	e7e1      	b.n	80155fc <_reclaim_reent+0x1c>
 8015638:	6961      	ldr	r1, [r4, #20]
 801563a:	b111      	cbz	r1, 8015642 <_reclaim_reent+0x62>
 801563c:	4620      	mov	r0, r4
 801563e:	f000 fe85 	bl	801634c <_free_r>
 8015642:	69e1      	ldr	r1, [r4, #28]
 8015644:	b111      	cbz	r1, 801564c <_reclaim_reent+0x6c>
 8015646:	4620      	mov	r0, r4
 8015648:	f000 fe80 	bl	801634c <_free_r>
 801564c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801564e:	b111      	cbz	r1, 8015656 <_reclaim_reent+0x76>
 8015650:	4620      	mov	r0, r4
 8015652:	f000 fe7b 	bl	801634c <_free_r>
 8015656:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015658:	b111      	cbz	r1, 8015660 <_reclaim_reent+0x80>
 801565a:	4620      	mov	r0, r4
 801565c:	f000 fe76 	bl	801634c <_free_r>
 8015660:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015662:	b111      	cbz	r1, 801566a <_reclaim_reent+0x8a>
 8015664:	4620      	mov	r0, r4
 8015666:	f000 fe71 	bl	801634c <_free_r>
 801566a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801566c:	b111      	cbz	r1, 8015674 <_reclaim_reent+0x94>
 801566e:	4620      	mov	r0, r4
 8015670:	f000 fe6c 	bl	801634c <_free_r>
 8015674:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015676:	b111      	cbz	r1, 801567e <_reclaim_reent+0x9e>
 8015678:	4620      	mov	r0, r4
 801567a:	f000 fe67 	bl	801634c <_free_r>
 801567e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015680:	b111      	cbz	r1, 8015688 <_reclaim_reent+0xa8>
 8015682:	4620      	mov	r0, r4
 8015684:	f000 fe62 	bl	801634c <_free_r>
 8015688:	6a23      	ldr	r3, [r4, #32]
 801568a:	b11b      	cbz	r3, 8015694 <_reclaim_reent+0xb4>
 801568c:	4620      	mov	r0, r4
 801568e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015692:	4718      	bx	r3
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	bf00      	nop
 8015698:	2400003c 	.word	0x2400003c

0801569c <_lseek_r>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	4d07      	ldr	r5, [pc, #28]	@ (80156bc <_lseek_r+0x20>)
 80156a0:	4604      	mov	r4, r0
 80156a2:	4608      	mov	r0, r1
 80156a4:	4611      	mov	r1, r2
 80156a6:	2200      	movs	r2, #0
 80156a8:	602a      	str	r2, [r5, #0]
 80156aa:	461a      	mov	r2, r3
 80156ac:	f7ed fa5b 	bl	8002b66 <_lseek>
 80156b0:	1c43      	adds	r3, r0, #1
 80156b2:	d102      	bne.n	80156ba <_lseek_r+0x1e>
 80156b4:	682b      	ldr	r3, [r5, #0]
 80156b6:	b103      	cbz	r3, 80156ba <_lseek_r+0x1e>
 80156b8:	6023      	str	r3, [r4, #0]
 80156ba:	bd38      	pop	{r3, r4, r5, pc}
 80156bc:	240059bc 	.word	0x240059bc

080156c0 <_read_r>:
 80156c0:	b538      	push	{r3, r4, r5, lr}
 80156c2:	4d07      	ldr	r5, [pc, #28]	@ (80156e0 <_read_r+0x20>)
 80156c4:	4604      	mov	r4, r0
 80156c6:	4608      	mov	r0, r1
 80156c8:	4611      	mov	r1, r2
 80156ca:	2200      	movs	r2, #0
 80156cc:	602a      	str	r2, [r5, #0]
 80156ce:	461a      	mov	r2, r3
 80156d0:	f7ed fa05 	bl	8002ade <_read>
 80156d4:	1c43      	adds	r3, r0, #1
 80156d6:	d102      	bne.n	80156de <_read_r+0x1e>
 80156d8:	682b      	ldr	r3, [r5, #0]
 80156da:	b103      	cbz	r3, 80156de <_read_r+0x1e>
 80156dc:	6023      	str	r3, [r4, #0]
 80156de:	bd38      	pop	{r3, r4, r5, pc}
 80156e0:	240059bc 	.word	0x240059bc

080156e4 <_write_r>:
 80156e4:	b538      	push	{r3, r4, r5, lr}
 80156e6:	4d07      	ldr	r5, [pc, #28]	@ (8015704 <_write_r+0x20>)
 80156e8:	4604      	mov	r4, r0
 80156ea:	4608      	mov	r0, r1
 80156ec:	4611      	mov	r1, r2
 80156ee:	2200      	movs	r2, #0
 80156f0:	602a      	str	r2, [r5, #0]
 80156f2:	461a      	mov	r2, r3
 80156f4:	f7ec faf4 	bl	8001ce0 <_write>
 80156f8:	1c43      	adds	r3, r0, #1
 80156fa:	d102      	bne.n	8015702 <_write_r+0x1e>
 80156fc:	682b      	ldr	r3, [r5, #0]
 80156fe:	b103      	cbz	r3, 8015702 <_write_r+0x1e>
 8015700:	6023      	str	r3, [r4, #0]
 8015702:	bd38      	pop	{r3, r4, r5, pc}
 8015704:	240059bc 	.word	0x240059bc

08015708 <__errno>:
 8015708:	4b01      	ldr	r3, [pc, #4]	@ (8015710 <__errno+0x8>)
 801570a:	6818      	ldr	r0, [r3, #0]
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop
 8015710:	2400003c 	.word	0x2400003c

08015714 <__libc_init_array>:
 8015714:	b570      	push	{r4, r5, r6, lr}
 8015716:	4d0d      	ldr	r5, [pc, #52]	@ (801574c <__libc_init_array+0x38>)
 8015718:	4c0d      	ldr	r4, [pc, #52]	@ (8015750 <__libc_init_array+0x3c>)
 801571a:	1b64      	subs	r4, r4, r5
 801571c:	10a4      	asrs	r4, r4, #2
 801571e:	2600      	movs	r6, #0
 8015720:	42a6      	cmp	r6, r4
 8015722:	d109      	bne.n	8015738 <__libc_init_array+0x24>
 8015724:	4d0b      	ldr	r5, [pc, #44]	@ (8015754 <__libc_init_array+0x40>)
 8015726:	4c0c      	ldr	r4, [pc, #48]	@ (8015758 <__libc_init_array+0x44>)
 8015728:	f001 ff38 	bl	801759c <_init>
 801572c:	1b64      	subs	r4, r4, r5
 801572e:	10a4      	asrs	r4, r4, #2
 8015730:	2600      	movs	r6, #0
 8015732:	42a6      	cmp	r6, r4
 8015734:	d105      	bne.n	8015742 <__libc_init_array+0x2e>
 8015736:	bd70      	pop	{r4, r5, r6, pc}
 8015738:	f855 3b04 	ldr.w	r3, [r5], #4
 801573c:	4798      	blx	r3
 801573e:	3601      	adds	r6, #1
 8015740:	e7ee      	b.n	8015720 <__libc_init_array+0xc>
 8015742:	f855 3b04 	ldr.w	r3, [r5], #4
 8015746:	4798      	blx	r3
 8015748:	3601      	adds	r6, #1
 801574a:	e7f2      	b.n	8015732 <__libc_init_array+0x1e>
 801574c:	08017e0c 	.word	0x08017e0c
 8015750:	08017e0c 	.word	0x08017e0c
 8015754:	08017e0c 	.word	0x08017e0c
 8015758:	08017e10 	.word	0x08017e10

0801575c <__retarget_lock_init_recursive>:
 801575c:	4770      	bx	lr

0801575e <__retarget_lock_acquire_recursive>:
 801575e:	4770      	bx	lr

08015760 <__retarget_lock_release_recursive>:
 8015760:	4770      	bx	lr

08015762 <memcpy>:
 8015762:	440a      	add	r2, r1
 8015764:	4291      	cmp	r1, r2
 8015766:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801576a:	d100      	bne.n	801576e <memcpy+0xc>
 801576c:	4770      	bx	lr
 801576e:	b510      	push	{r4, lr}
 8015770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015778:	4291      	cmp	r1, r2
 801577a:	d1f9      	bne.n	8015770 <memcpy+0xe>
 801577c:	bd10      	pop	{r4, pc}

0801577e <quorem>:
 801577e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015782:	6903      	ldr	r3, [r0, #16]
 8015784:	690c      	ldr	r4, [r1, #16]
 8015786:	42a3      	cmp	r3, r4
 8015788:	4607      	mov	r7, r0
 801578a:	db7e      	blt.n	801588a <quorem+0x10c>
 801578c:	3c01      	subs	r4, #1
 801578e:	f101 0814 	add.w	r8, r1, #20
 8015792:	00a3      	lsls	r3, r4, #2
 8015794:	f100 0514 	add.w	r5, r0, #20
 8015798:	9300      	str	r3, [sp, #0]
 801579a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801579e:	9301      	str	r3, [sp, #4]
 80157a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80157a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157a8:	3301      	adds	r3, #1
 80157aa:	429a      	cmp	r2, r3
 80157ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80157b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80157b4:	d32e      	bcc.n	8015814 <quorem+0x96>
 80157b6:	f04f 0a00 	mov.w	sl, #0
 80157ba:	46c4      	mov	ip, r8
 80157bc:	46ae      	mov	lr, r5
 80157be:	46d3      	mov	fp, sl
 80157c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80157c4:	b298      	uxth	r0, r3
 80157c6:	fb06 a000 	mla	r0, r6, r0, sl
 80157ca:	0c02      	lsrs	r2, r0, #16
 80157cc:	0c1b      	lsrs	r3, r3, #16
 80157ce:	fb06 2303 	mla	r3, r6, r3, r2
 80157d2:	f8de 2000 	ldr.w	r2, [lr]
 80157d6:	b280      	uxth	r0, r0
 80157d8:	b292      	uxth	r2, r2
 80157da:	1a12      	subs	r2, r2, r0
 80157dc:	445a      	add	r2, fp
 80157de:	f8de 0000 	ldr.w	r0, [lr]
 80157e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80157ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80157f0:	b292      	uxth	r2, r2
 80157f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80157f6:	45e1      	cmp	r9, ip
 80157f8:	f84e 2b04 	str.w	r2, [lr], #4
 80157fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015800:	d2de      	bcs.n	80157c0 <quorem+0x42>
 8015802:	9b00      	ldr	r3, [sp, #0]
 8015804:	58eb      	ldr	r3, [r5, r3]
 8015806:	b92b      	cbnz	r3, 8015814 <quorem+0x96>
 8015808:	9b01      	ldr	r3, [sp, #4]
 801580a:	3b04      	subs	r3, #4
 801580c:	429d      	cmp	r5, r3
 801580e:	461a      	mov	r2, r3
 8015810:	d32f      	bcc.n	8015872 <quorem+0xf4>
 8015812:	613c      	str	r4, [r7, #16]
 8015814:	4638      	mov	r0, r7
 8015816:	f001 f90b 	bl	8016a30 <__mcmp>
 801581a:	2800      	cmp	r0, #0
 801581c:	db25      	blt.n	801586a <quorem+0xec>
 801581e:	4629      	mov	r1, r5
 8015820:	2000      	movs	r0, #0
 8015822:	f858 2b04 	ldr.w	r2, [r8], #4
 8015826:	f8d1 c000 	ldr.w	ip, [r1]
 801582a:	fa1f fe82 	uxth.w	lr, r2
 801582e:	fa1f f38c 	uxth.w	r3, ip
 8015832:	eba3 030e 	sub.w	r3, r3, lr
 8015836:	4403      	add	r3, r0
 8015838:	0c12      	lsrs	r2, r2, #16
 801583a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801583e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015842:	b29b      	uxth	r3, r3
 8015844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015848:	45c1      	cmp	r9, r8
 801584a:	f841 3b04 	str.w	r3, [r1], #4
 801584e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015852:	d2e6      	bcs.n	8015822 <quorem+0xa4>
 8015854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801585c:	b922      	cbnz	r2, 8015868 <quorem+0xea>
 801585e:	3b04      	subs	r3, #4
 8015860:	429d      	cmp	r5, r3
 8015862:	461a      	mov	r2, r3
 8015864:	d30b      	bcc.n	801587e <quorem+0x100>
 8015866:	613c      	str	r4, [r7, #16]
 8015868:	3601      	adds	r6, #1
 801586a:	4630      	mov	r0, r6
 801586c:	b003      	add	sp, #12
 801586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015872:	6812      	ldr	r2, [r2, #0]
 8015874:	3b04      	subs	r3, #4
 8015876:	2a00      	cmp	r2, #0
 8015878:	d1cb      	bne.n	8015812 <quorem+0x94>
 801587a:	3c01      	subs	r4, #1
 801587c:	e7c6      	b.n	801580c <quorem+0x8e>
 801587e:	6812      	ldr	r2, [r2, #0]
 8015880:	3b04      	subs	r3, #4
 8015882:	2a00      	cmp	r2, #0
 8015884:	d1ef      	bne.n	8015866 <quorem+0xe8>
 8015886:	3c01      	subs	r4, #1
 8015888:	e7ea      	b.n	8015860 <quorem+0xe2>
 801588a:	2000      	movs	r0, #0
 801588c:	e7ee      	b.n	801586c <quorem+0xee>
	...

08015890 <_dtoa_r>:
 8015890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015894:	ed2d 8b02 	vpush	{d8}
 8015898:	69c7      	ldr	r7, [r0, #28]
 801589a:	b091      	sub	sp, #68	@ 0x44
 801589c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80158a0:	ec55 4b10 	vmov	r4, r5, d0
 80158a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80158a6:	9107      	str	r1, [sp, #28]
 80158a8:	4681      	mov	r9, r0
 80158aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80158ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80158ae:	b97f      	cbnz	r7, 80158d0 <_dtoa_r+0x40>
 80158b0:	2010      	movs	r0, #16
 80158b2:	f000 fd95 	bl	80163e0 <malloc>
 80158b6:	4602      	mov	r2, r0
 80158b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80158bc:	b920      	cbnz	r0, 80158c8 <_dtoa_r+0x38>
 80158be:	4ba0      	ldr	r3, [pc, #640]	@ (8015b40 <_dtoa_r+0x2b0>)
 80158c0:	21ef      	movs	r1, #239	@ 0xef
 80158c2:	48a0      	ldr	r0, [pc, #640]	@ (8015b44 <_dtoa_r+0x2b4>)
 80158c4:	f001 fc3e 	bl	8017144 <__assert_func>
 80158c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80158cc:	6007      	str	r7, [r0, #0]
 80158ce:	60c7      	str	r7, [r0, #12]
 80158d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80158d4:	6819      	ldr	r1, [r3, #0]
 80158d6:	b159      	cbz	r1, 80158f0 <_dtoa_r+0x60>
 80158d8:	685a      	ldr	r2, [r3, #4]
 80158da:	604a      	str	r2, [r1, #4]
 80158dc:	2301      	movs	r3, #1
 80158de:	4093      	lsls	r3, r2
 80158e0:	608b      	str	r3, [r1, #8]
 80158e2:	4648      	mov	r0, r9
 80158e4:	f000 fe72 	bl	80165cc <_Bfree>
 80158e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80158ec:	2200      	movs	r2, #0
 80158ee:	601a      	str	r2, [r3, #0]
 80158f0:	1e2b      	subs	r3, r5, #0
 80158f2:	bfbb      	ittet	lt
 80158f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80158f8:	9303      	strlt	r3, [sp, #12]
 80158fa:	2300      	movge	r3, #0
 80158fc:	2201      	movlt	r2, #1
 80158fe:	bfac      	ite	ge
 8015900:	6033      	strge	r3, [r6, #0]
 8015902:	6032      	strlt	r2, [r6, #0]
 8015904:	4b90      	ldr	r3, [pc, #576]	@ (8015b48 <_dtoa_r+0x2b8>)
 8015906:	9e03      	ldr	r6, [sp, #12]
 8015908:	43b3      	bics	r3, r6
 801590a:	d110      	bne.n	801592e <_dtoa_r+0x9e>
 801590c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801590e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015912:	6013      	str	r3, [r2, #0]
 8015914:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015918:	4323      	orrs	r3, r4
 801591a:	f000 84e6 	beq.w	80162ea <_dtoa_r+0xa5a>
 801591e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015920:	4f8a      	ldr	r7, [pc, #552]	@ (8015b4c <_dtoa_r+0x2bc>)
 8015922:	2b00      	cmp	r3, #0
 8015924:	f000 84e8 	beq.w	80162f8 <_dtoa_r+0xa68>
 8015928:	1cfb      	adds	r3, r7, #3
 801592a:	f000 bce3 	b.w	80162f4 <_dtoa_r+0xa64>
 801592e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015932:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801593a:	d10a      	bne.n	8015952 <_dtoa_r+0xc2>
 801593c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801593e:	2301      	movs	r3, #1
 8015940:	6013      	str	r3, [r2, #0]
 8015942:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015944:	b113      	cbz	r3, 801594c <_dtoa_r+0xbc>
 8015946:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015948:	4b81      	ldr	r3, [pc, #516]	@ (8015b50 <_dtoa_r+0x2c0>)
 801594a:	6013      	str	r3, [r2, #0]
 801594c:	4f81      	ldr	r7, [pc, #516]	@ (8015b54 <_dtoa_r+0x2c4>)
 801594e:	f000 bcd3 	b.w	80162f8 <_dtoa_r+0xa68>
 8015952:	aa0e      	add	r2, sp, #56	@ 0x38
 8015954:	a90f      	add	r1, sp, #60	@ 0x3c
 8015956:	4648      	mov	r0, r9
 8015958:	eeb0 0b48 	vmov.f64	d0, d8
 801595c:	f001 f918 	bl	8016b90 <__d2b>
 8015960:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8015964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015966:	9001      	str	r0, [sp, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d045      	beq.n	80159f8 <_dtoa_r+0x168>
 801596c:	eeb0 7b48 	vmov.f64	d7, d8
 8015970:	ee18 1a90 	vmov	r1, s17
 8015974:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015978:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801597c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8015980:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015984:	2500      	movs	r5, #0
 8015986:	ee07 1a90 	vmov	s15, r1
 801598a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801598e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015b28 <_dtoa_r+0x298>
 8015992:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015996:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015b30 <_dtoa_r+0x2a0>
 801599a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801599e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015b38 <_dtoa_r+0x2a8>
 80159a2:	ee07 3a90 	vmov	s15, r3
 80159a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80159aa:	eeb0 7b46 	vmov.f64	d7, d6
 80159ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80159b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80159b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80159ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159be:	ee16 8a90 	vmov	r8, s13
 80159c2:	d508      	bpl.n	80159d6 <_dtoa_r+0x146>
 80159c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80159c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80159cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d0:	bf18      	it	ne
 80159d2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80159d6:	f1b8 0f16 	cmp.w	r8, #22
 80159da:	d82b      	bhi.n	8015a34 <_dtoa_r+0x1a4>
 80159dc:	495e      	ldr	r1, [pc, #376]	@ (8015b58 <_dtoa_r+0x2c8>)
 80159de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80159e2:	ed91 7b00 	vldr	d7, [r1]
 80159e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80159ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ee:	d501      	bpl.n	80159f4 <_dtoa_r+0x164>
 80159f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80159f4:	2100      	movs	r1, #0
 80159f6:	e01e      	b.n	8015a36 <_dtoa_r+0x1a6>
 80159f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159fa:	4413      	add	r3, r2
 80159fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015a00:	2920      	cmp	r1, #32
 8015a02:	bfc1      	itttt	gt
 8015a04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015a08:	408e      	lslgt	r6, r1
 8015a0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015a0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8015a12:	bfd6      	itet	le
 8015a14:	f1c1 0120 	rsble	r1, r1, #32
 8015a18:	4331      	orrgt	r1, r6
 8015a1a:	fa04 f101 	lslle.w	r1, r4, r1
 8015a1e:	ee07 1a90 	vmov	s15, r1
 8015a22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015a26:	3b01      	subs	r3, #1
 8015a28:	ee17 1a90 	vmov	r1, s15
 8015a2c:	2501      	movs	r5, #1
 8015a2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8015a32:	e7a8      	b.n	8015986 <_dtoa_r+0xf6>
 8015a34:	2101      	movs	r1, #1
 8015a36:	1ad2      	subs	r2, r2, r3
 8015a38:	1e53      	subs	r3, r2, #1
 8015a3a:	9306      	str	r3, [sp, #24]
 8015a3c:	bf45      	ittet	mi
 8015a3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8015a42:	9304      	strmi	r3, [sp, #16]
 8015a44:	2300      	movpl	r3, #0
 8015a46:	2300      	movmi	r3, #0
 8015a48:	bf4c      	ite	mi
 8015a4a:	9306      	strmi	r3, [sp, #24]
 8015a4c:	9304      	strpl	r3, [sp, #16]
 8015a4e:	f1b8 0f00 	cmp.w	r8, #0
 8015a52:	910c      	str	r1, [sp, #48]	@ 0x30
 8015a54:	db18      	blt.n	8015a88 <_dtoa_r+0x1f8>
 8015a56:	9b06      	ldr	r3, [sp, #24]
 8015a58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015a5c:	4443      	add	r3, r8
 8015a5e:	9306      	str	r3, [sp, #24]
 8015a60:	2300      	movs	r3, #0
 8015a62:	9a07      	ldr	r2, [sp, #28]
 8015a64:	2a09      	cmp	r2, #9
 8015a66:	d845      	bhi.n	8015af4 <_dtoa_r+0x264>
 8015a68:	2a05      	cmp	r2, #5
 8015a6a:	bfc4      	itt	gt
 8015a6c:	3a04      	subgt	r2, #4
 8015a6e:	9207      	strgt	r2, [sp, #28]
 8015a70:	9a07      	ldr	r2, [sp, #28]
 8015a72:	f1a2 0202 	sub.w	r2, r2, #2
 8015a76:	bfcc      	ite	gt
 8015a78:	2400      	movgt	r4, #0
 8015a7a:	2401      	movle	r4, #1
 8015a7c:	2a03      	cmp	r2, #3
 8015a7e:	d844      	bhi.n	8015b0a <_dtoa_r+0x27a>
 8015a80:	e8df f002 	tbb	[pc, r2]
 8015a84:	0b173634 	.word	0x0b173634
 8015a88:	9b04      	ldr	r3, [sp, #16]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	eba3 0308 	sub.w	r3, r3, r8
 8015a90:	9304      	str	r3, [sp, #16]
 8015a92:	920a      	str	r2, [sp, #40]	@ 0x28
 8015a94:	f1c8 0300 	rsb	r3, r8, #0
 8015a98:	e7e3      	b.n	8015a62 <_dtoa_r+0x1d2>
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	9208      	str	r2, [sp, #32]
 8015a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015aa0:	eb08 0b02 	add.w	fp, r8, r2
 8015aa4:	f10b 0a01 	add.w	sl, fp, #1
 8015aa8:	4652      	mov	r2, sl
 8015aaa:	2a01      	cmp	r2, #1
 8015aac:	bfb8      	it	lt
 8015aae:	2201      	movlt	r2, #1
 8015ab0:	e006      	b.n	8015ac0 <_dtoa_r+0x230>
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	9208      	str	r2, [sp, #32]
 8015ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ab8:	2a00      	cmp	r2, #0
 8015aba:	dd29      	ble.n	8015b10 <_dtoa_r+0x280>
 8015abc:	4693      	mov	fp, r2
 8015abe:	4692      	mov	sl, r2
 8015ac0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	2004      	movs	r0, #4
 8015ac8:	f100 0614 	add.w	r6, r0, #20
 8015acc:	4296      	cmp	r6, r2
 8015ace:	d926      	bls.n	8015b1e <_dtoa_r+0x28e>
 8015ad0:	6079      	str	r1, [r7, #4]
 8015ad2:	4648      	mov	r0, r9
 8015ad4:	9305      	str	r3, [sp, #20]
 8015ad6:	f000 fd39 	bl	801654c <_Balloc>
 8015ada:	9b05      	ldr	r3, [sp, #20]
 8015adc:	4607      	mov	r7, r0
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	d13e      	bne.n	8015b60 <_dtoa_r+0x2d0>
 8015ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8015b5c <_dtoa_r+0x2cc>)
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8015aea:	e6ea      	b.n	80158c2 <_dtoa_r+0x32>
 8015aec:	2200      	movs	r2, #0
 8015aee:	e7e1      	b.n	8015ab4 <_dtoa_r+0x224>
 8015af0:	2200      	movs	r2, #0
 8015af2:	e7d3      	b.n	8015a9c <_dtoa_r+0x20c>
 8015af4:	2401      	movs	r4, #1
 8015af6:	2200      	movs	r2, #0
 8015af8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015afc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8015b00:	2100      	movs	r1, #0
 8015b02:	46da      	mov	sl, fp
 8015b04:	2212      	movs	r2, #18
 8015b06:	9109      	str	r1, [sp, #36]	@ 0x24
 8015b08:	e7da      	b.n	8015ac0 <_dtoa_r+0x230>
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	9208      	str	r2, [sp, #32]
 8015b0e:	e7f5      	b.n	8015afc <_dtoa_r+0x26c>
 8015b10:	f04f 0b01 	mov.w	fp, #1
 8015b14:	46da      	mov	sl, fp
 8015b16:	465a      	mov	r2, fp
 8015b18:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015b1c:	e7d0      	b.n	8015ac0 <_dtoa_r+0x230>
 8015b1e:	3101      	adds	r1, #1
 8015b20:	0040      	lsls	r0, r0, #1
 8015b22:	e7d1      	b.n	8015ac8 <_dtoa_r+0x238>
 8015b24:	f3af 8000 	nop.w
 8015b28:	636f4361 	.word	0x636f4361
 8015b2c:	3fd287a7 	.word	0x3fd287a7
 8015b30:	8b60c8b3 	.word	0x8b60c8b3
 8015b34:	3fc68a28 	.word	0x3fc68a28
 8015b38:	509f79fb 	.word	0x509f79fb
 8015b3c:	3fd34413 	.word	0x3fd34413
 8015b40:	08017a99 	.word	0x08017a99
 8015b44:	08017ab0 	.word	0x08017ab0
 8015b48:	7ff00000 	.word	0x7ff00000
 8015b4c:	08017a95 	.word	0x08017a95
 8015b50:	08017a69 	.word	0x08017a69
 8015b54:	08017a68 	.word	0x08017a68
 8015b58:	08017c00 	.word	0x08017c00
 8015b5c:	08017b08 	.word	0x08017b08
 8015b60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8015b64:	f1ba 0f0e 	cmp.w	sl, #14
 8015b68:	6010      	str	r0, [r2, #0]
 8015b6a:	d86e      	bhi.n	8015c4a <_dtoa_r+0x3ba>
 8015b6c:	2c00      	cmp	r4, #0
 8015b6e:	d06c      	beq.n	8015c4a <_dtoa_r+0x3ba>
 8015b70:	f1b8 0f00 	cmp.w	r8, #0
 8015b74:	f340 80b4 	ble.w	8015ce0 <_dtoa_r+0x450>
 8015b78:	4ac8      	ldr	r2, [pc, #800]	@ (8015e9c <_dtoa_r+0x60c>)
 8015b7a:	f008 010f 	and.w	r1, r8, #15
 8015b7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015b82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8015b86:	ed92 7b00 	vldr	d7, [r2]
 8015b8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015b8e:	f000 809b 	beq.w	8015cc8 <_dtoa_r+0x438>
 8015b92:	4ac3      	ldr	r2, [pc, #780]	@ (8015ea0 <_dtoa_r+0x610>)
 8015b94:	ed92 6b08 	vldr	d6, [r2, #32]
 8015b98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015b9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015ba0:	f001 010f 	and.w	r1, r1, #15
 8015ba4:	2203      	movs	r2, #3
 8015ba6:	48be      	ldr	r0, [pc, #760]	@ (8015ea0 <_dtoa_r+0x610>)
 8015ba8:	2900      	cmp	r1, #0
 8015baa:	f040 808f 	bne.w	8015ccc <_dtoa_r+0x43c>
 8015bae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015bb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015bb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015bba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015bbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015bc0:	2900      	cmp	r1, #0
 8015bc2:	f000 80b3 	beq.w	8015d2c <_dtoa_r+0x49c>
 8015bc6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015bca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd2:	f140 80ab 	bpl.w	8015d2c <_dtoa_r+0x49c>
 8015bd6:	f1ba 0f00 	cmp.w	sl, #0
 8015bda:	f000 80a7 	beq.w	8015d2c <_dtoa_r+0x49c>
 8015bde:	f1bb 0f00 	cmp.w	fp, #0
 8015be2:	dd30      	ble.n	8015c46 <_dtoa_r+0x3b6>
 8015be4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015be8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015bf0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8015bf4:	9105      	str	r1, [sp, #20]
 8015bf6:	3201      	adds	r2, #1
 8015bf8:	465c      	mov	r4, fp
 8015bfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015bfe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8015c02:	ee07 2a90 	vmov	s15, r2
 8015c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015c0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015c0e:	ee15 2a90 	vmov	r2, s11
 8015c12:	ec51 0b15 	vmov	r0, r1, d5
 8015c16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015c1a:	2c00      	cmp	r4, #0
 8015c1c:	f040 808a 	bne.w	8015d34 <_dtoa_r+0x4a4>
 8015c20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015c24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015c28:	ec41 0b17 	vmov	d7, r0, r1
 8015c2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c34:	f300 826a 	bgt.w	801610c <_dtoa_r+0x87c>
 8015c38:	eeb1 7b47 	vneg.f64	d7, d7
 8015c3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c44:	d423      	bmi.n	8015c8e <_dtoa_r+0x3fe>
 8015c46:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015c4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015c4c:	2a00      	cmp	r2, #0
 8015c4e:	f2c0 8129 	blt.w	8015ea4 <_dtoa_r+0x614>
 8015c52:	f1b8 0f0e 	cmp.w	r8, #14
 8015c56:	f300 8125 	bgt.w	8015ea4 <_dtoa_r+0x614>
 8015c5a:	4b90      	ldr	r3, [pc, #576]	@ (8015e9c <_dtoa_r+0x60c>)
 8015c5c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015c60:	ed93 6b00 	vldr	d6, [r3]
 8015c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	f280 80c8 	bge.w	8015dfc <_dtoa_r+0x56c>
 8015c6c:	f1ba 0f00 	cmp.w	sl, #0
 8015c70:	f300 80c4 	bgt.w	8015dfc <_dtoa_r+0x56c>
 8015c74:	d10b      	bne.n	8015c8e <_dtoa_r+0x3fe>
 8015c76:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015c7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015c7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c8a:	f2c0 823c 	blt.w	8016106 <_dtoa_r+0x876>
 8015c8e:	2400      	movs	r4, #0
 8015c90:	4625      	mov	r5, r4
 8015c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c94:	43db      	mvns	r3, r3
 8015c96:	9305      	str	r3, [sp, #20]
 8015c98:	463e      	mov	r6, r7
 8015c9a:	f04f 0800 	mov.w	r8, #0
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4648      	mov	r0, r9
 8015ca2:	f000 fc93 	bl	80165cc <_Bfree>
 8015ca6:	2d00      	cmp	r5, #0
 8015ca8:	f000 80a2 	beq.w	8015df0 <_dtoa_r+0x560>
 8015cac:	f1b8 0f00 	cmp.w	r8, #0
 8015cb0:	d005      	beq.n	8015cbe <_dtoa_r+0x42e>
 8015cb2:	45a8      	cmp	r8, r5
 8015cb4:	d003      	beq.n	8015cbe <_dtoa_r+0x42e>
 8015cb6:	4641      	mov	r1, r8
 8015cb8:	4648      	mov	r0, r9
 8015cba:	f000 fc87 	bl	80165cc <_Bfree>
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	4648      	mov	r0, r9
 8015cc2:	f000 fc83 	bl	80165cc <_Bfree>
 8015cc6:	e093      	b.n	8015df0 <_dtoa_r+0x560>
 8015cc8:	2202      	movs	r2, #2
 8015cca:	e76c      	b.n	8015ba6 <_dtoa_r+0x316>
 8015ccc:	07cc      	lsls	r4, r1, #31
 8015cce:	d504      	bpl.n	8015cda <_dtoa_r+0x44a>
 8015cd0:	ed90 6b00 	vldr	d6, [r0]
 8015cd4:	3201      	adds	r2, #1
 8015cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015cda:	1049      	asrs	r1, r1, #1
 8015cdc:	3008      	adds	r0, #8
 8015cde:	e763      	b.n	8015ba8 <_dtoa_r+0x318>
 8015ce0:	d022      	beq.n	8015d28 <_dtoa_r+0x498>
 8015ce2:	f1c8 0100 	rsb	r1, r8, #0
 8015ce6:	4a6d      	ldr	r2, [pc, #436]	@ (8015e9c <_dtoa_r+0x60c>)
 8015ce8:	f001 000f 	and.w	r0, r1, #15
 8015cec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015cf0:	ed92 7b00 	vldr	d7, [r2]
 8015cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015cfc:	4868      	ldr	r0, [pc, #416]	@ (8015ea0 <_dtoa_r+0x610>)
 8015cfe:	1109      	asrs	r1, r1, #4
 8015d00:	2400      	movs	r4, #0
 8015d02:	2202      	movs	r2, #2
 8015d04:	b929      	cbnz	r1, 8015d12 <_dtoa_r+0x482>
 8015d06:	2c00      	cmp	r4, #0
 8015d08:	f43f af57 	beq.w	8015bba <_dtoa_r+0x32a>
 8015d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d10:	e753      	b.n	8015bba <_dtoa_r+0x32a>
 8015d12:	07ce      	lsls	r6, r1, #31
 8015d14:	d505      	bpl.n	8015d22 <_dtoa_r+0x492>
 8015d16:	ed90 6b00 	vldr	d6, [r0]
 8015d1a:	3201      	adds	r2, #1
 8015d1c:	2401      	movs	r4, #1
 8015d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d22:	1049      	asrs	r1, r1, #1
 8015d24:	3008      	adds	r0, #8
 8015d26:	e7ed      	b.n	8015d04 <_dtoa_r+0x474>
 8015d28:	2202      	movs	r2, #2
 8015d2a:	e746      	b.n	8015bba <_dtoa_r+0x32a>
 8015d2c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015d30:	4654      	mov	r4, sl
 8015d32:	e762      	b.n	8015bfa <_dtoa_r+0x36a>
 8015d34:	4a59      	ldr	r2, [pc, #356]	@ (8015e9c <_dtoa_r+0x60c>)
 8015d36:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015d3a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015d3e:	9a08      	ldr	r2, [sp, #32]
 8015d40:	ec41 0b17 	vmov	d7, r0, r1
 8015d44:	443c      	add	r4, r7
 8015d46:	b34a      	cbz	r2, 8015d9c <_dtoa_r+0x50c>
 8015d48:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015d4c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015d50:	463e      	mov	r6, r7
 8015d52:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015d56:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015d5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015d62:	ee14 2a90 	vmov	r2, s9
 8015d66:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015d6a:	3230      	adds	r2, #48	@ 0x30
 8015d6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015d70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d78:	f806 2b01 	strb.w	r2, [r6], #1
 8015d7c:	d438      	bmi.n	8015df0 <_dtoa_r+0x560>
 8015d7e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015d82:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8a:	d46e      	bmi.n	8015e6a <_dtoa_r+0x5da>
 8015d8c:	42a6      	cmp	r6, r4
 8015d8e:	f43f af5a 	beq.w	8015c46 <_dtoa_r+0x3b6>
 8015d92:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015d96:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015d9a:	e7e0      	b.n	8015d5e <_dtoa_r+0x4ce>
 8015d9c:	4621      	mov	r1, r4
 8015d9e:	463e      	mov	r6, r7
 8015da0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015da4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015da8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015dac:	ee14 2a90 	vmov	r2, s9
 8015db0:	3230      	adds	r2, #48	@ 0x30
 8015db2:	f806 2b01 	strb.w	r2, [r6], #1
 8015db6:	42a6      	cmp	r6, r4
 8015db8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015dbc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015dc0:	d119      	bne.n	8015df6 <_dtoa_r+0x566>
 8015dc2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8015dc6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015dca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd2:	dc4a      	bgt.n	8015e6a <_dtoa_r+0x5da>
 8015dd4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015dd8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de0:	f57f af31 	bpl.w	8015c46 <_dtoa_r+0x3b6>
 8015de4:	460e      	mov	r6, r1
 8015de6:	3901      	subs	r1, #1
 8015de8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015dec:	2b30      	cmp	r3, #48	@ 0x30
 8015dee:	d0f9      	beq.n	8015de4 <_dtoa_r+0x554>
 8015df0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015df4:	e027      	b.n	8015e46 <_dtoa_r+0x5b6>
 8015df6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015dfa:	e7d5      	b.n	8015da8 <_dtoa_r+0x518>
 8015dfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e00:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8015e04:	463e      	mov	r6, r7
 8015e06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015e0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015e0e:	ee15 3a10 	vmov	r3, s10
 8015e12:	3330      	adds	r3, #48	@ 0x30
 8015e14:	f806 3b01 	strb.w	r3, [r6], #1
 8015e18:	1bf3      	subs	r3, r6, r7
 8015e1a:	459a      	cmp	sl, r3
 8015e1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015e20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015e24:	d132      	bne.n	8015e8c <_dtoa_r+0x5fc>
 8015e26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015e2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e32:	dc18      	bgt.n	8015e66 <_dtoa_r+0x5d6>
 8015e34:	eeb4 7b46 	vcmp.f64	d7, d6
 8015e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3c:	d103      	bne.n	8015e46 <_dtoa_r+0x5b6>
 8015e3e:	ee15 3a10 	vmov	r3, s10
 8015e42:	07db      	lsls	r3, r3, #31
 8015e44:	d40f      	bmi.n	8015e66 <_dtoa_r+0x5d6>
 8015e46:	9901      	ldr	r1, [sp, #4]
 8015e48:	4648      	mov	r0, r9
 8015e4a:	f000 fbbf 	bl	80165cc <_Bfree>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015e52:	7033      	strb	r3, [r6, #0]
 8015e54:	f108 0301 	add.w	r3, r8, #1
 8015e58:	6013      	str	r3, [r2, #0]
 8015e5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	f000 824b 	beq.w	80162f8 <_dtoa_r+0xa68>
 8015e62:	601e      	str	r6, [r3, #0]
 8015e64:	e248      	b.n	80162f8 <_dtoa_r+0xa68>
 8015e66:	f8cd 8014 	str.w	r8, [sp, #20]
 8015e6a:	4633      	mov	r3, r6
 8015e6c:	461e      	mov	r6, r3
 8015e6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e72:	2a39      	cmp	r2, #57	@ 0x39
 8015e74:	d106      	bne.n	8015e84 <_dtoa_r+0x5f4>
 8015e76:	429f      	cmp	r7, r3
 8015e78:	d1f8      	bne.n	8015e6c <_dtoa_r+0x5dc>
 8015e7a:	9a05      	ldr	r2, [sp, #20]
 8015e7c:	3201      	adds	r2, #1
 8015e7e:	9205      	str	r2, [sp, #20]
 8015e80:	2230      	movs	r2, #48	@ 0x30
 8015e82:	703a      	strb	r2, [r7, #0]
 8015e84:	781a      	ldrb	r2, [r3, #0]
 8015e86:	3201      	adds	r2, #1
 8015e88:	701a      	strb	r2, [r3, #0]
 8015e8a:	e7b1      	b.n	8015df0 <_dtoa_r+0x560>
 8015e8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015e90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e98:	d1b5      	bne.n	8015e06 <_dtoa_r+0x576>
 8015e9a:	e7d4      	b.n	8015e46 <_dtoa_r+0x5b6>
 8015e9c:	08017c00 	.word	0x08017c00
 8015ea0:	08017bd8 	.word	0x08017bd8
 8015ea4:	9908      	ldr	r1, [sp, #32]
 8015ea6:	2900      	cmp	r1, #0
 8015ea8:	f000 80e9 	beq.w	801607e <_dtoa_r+0x7ee>
 8015eac:	9907      	ldr	r1, [sp, #28]
 8015eae:	2901      	cmp	r1, #1
 8015eb0:	f300 80cb 	bgt.w	801604a <_dtoa_r+0x7ba>
 8015eb4:	2d00      	cmp	r5, #0
 8015eb6:	f000 80c4 	beq.w	8016042 <_dtoa_r+0x7b2>
 8015eba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015ebe:	9e04      	ldr	r6, [sp, #16]
 8015ec0:	461c      	mov	r4, r3
 8015ec2:	9305      	str	r3, [sp, #20]
 8015ec4:	9b04      	ldr	r3, [sp, #16]
 8015ec6:	4413      	add	r3, r2
 8015ec8:	9304      	str	r3, [sp, #16]
 8015eca:	9b06      	ldr	r3, [sp, #24]
 8015ecc:	2101      	movs	r1, #1
 8015ece:	4413      	add	r3, r2
 8015ed0:	4648      	mov	r0, r9
 8015ed2:	9306      	str	r3, [sp, #24]
 8015ed4:	f000 fc2e 	bl	8016734 <__i2b>
 8015ed8:	9b05      	ldr	r3, [sp, #20]
 8015eda:	4605      	mov	r5, r0
 8015edc:	b166      	cbz	r6, 8015ef8 <_dtoa_r+0x668>
 8015ede:	9a06      	ldr	r2, [sp, #24]
 8015ee0:	2a00      	cmp	r2, #0
 8015ee2:	dd09      	ble.n	8015ef8 <_dtoa_r+0x668>
 8015ee4:	42b2      	cmp	r2, r6
 8015ee6:	9904      	ldr	r1, [sp, #16]
 8015ee8:	bfa8      	it	ge
 8015eea:	4632      	movge	r2, r6
 8015eec:	1a89      	subs	r1, r1, r2
 8015eee:	9104      	str	r1, [sp, #16]
 8015ef0:	9906      	ldr	r1, [sp, #24]
 8015ef2:	1ab6      	subs	r6, r6, r2
 8015ef4:	1a8a      	subs	r2, r1, r2
 8015ef6:	9206      	str	r2, [sp, #24]
 8015ef8:	b30b      	cbz	r3, 8015f3e <_dtoa_r+0x6ae>
 8015efa:	9a08      	ldr	r2, [sp, #32]
 8015efc:	2a00      	cmp	r2, #0
 8015efe:	f000 80c5 	beq.w	801608c <_dtoa_r+0x7fc>
 8015f02:	2c00      	cmp	r4, #0
 8015f04:	f000 80bf 	beq.w	8016086 <_dtoa_r+0x7f6>
 8015f08:	4629      	mov	r1, r5
 8015f0a:	4622      	mov	r2, r4
 8015f0c:	4648      	mov	r0, r9
 8015f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f10:	f000 fcc8 	bl	80168a4 <__pow5mult>
 8015f14:	9a01      	ldr	r2, [sp, #4]
 8015f16:	4601      	mov	r1, r0
 8015f18:	4605      	mov	r5, r0
 8015f1a:	4648      	mov	r0, r9
 8015f1c:	f000 fc20 	bl	8016760 <__multiply>
 8015f20:	9901      	ldr	r1, [sp, #4]
 8015f22:	9005      	str	r0, [sp, #20]
 8015f24:	4648      	mov	r0, r9
 8015f26:	f000 fb51 	bl	80165cc <_Bfree>
 8015f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f2c:	1b1b      	subs	r3, r3, r4
 8015f2e:	f000 80b0 	beq.w	8016092 <_dtoa_r+0x802>
 8015f32:	9905      	ldr	r1, [sp, #20]
 8015f34:	461a      	mov	r2, r3
 8015f36:	4648      	mov	r0, r9
 8015f38:	f000 fcb4 	bl	80168a4 <__pow5mult>
 8015f3c:	9001      	str	r0, [sp, #4]
 8015f3e:	2101      	movs	r1, #1
 8015f40:	4648      	mov	r0, r9
 8015f42:	f000 fbf7 	bl	8016734 <__i2b>
 8015f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f48:	4604      	mov	r4, r0
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	f000 81da 	beq.w	8016304 <_dtoa_r+0xa74>
 8015f50:	461a      	mov	r2, r3
 8015f52:	4601      	mov	r1, r0
 8015f54:	4648      	mov	r0, r9
 8015f56:	f000 fca5 	bl	80168a4 <__pow5mult>
 8015f5a:	9b07      	ldr	r3, [sp, #28]
 8015f5c:	2b01      	cmp	r3, #1
 8015f5e:	4604      	mov	r4, r0
 8015f60:	f300 80a0 	bgt.w	80160a4 <_dtoa_r+0x814>
 8015f64:	9b02      	ldr	r3, [sp, #8]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	f040 8096 	bne.w	8016098 <_dtoa_r+0x808>
 8015f6c:	9b03      	ldr	r3, [sp, #12]
 8015f6e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015f72:	2a00      	cmp	r2, #0
 8015f74:	f040 8092 	bne.w	801609c <_dtoa_r+0x80c>
 8015f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015f7c:	0d12      	lsrs	r2, r2, #20
 8015f7e:	0512      	lsls	r2, r2, #20
 8015f80:	2a00      	cmp	r2, #0
 8015f82:	f000 808d 	beq.w	80160a0 <_dtoa_r+0x810>
 8015f86:	9b04      	ldr	r3, [sp, #16]
 8015f88:	3301      	adds	r3, #1
 8015f8a:	9304      	str	r3, [sp, #16]
 8015f8c:	9b06      	ldr	r3, [sp, #24]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	9306      	str	r3, [sp, #24]
 8015f92:	2301      	movs	r3, #1
 8015f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	f000 81b9 	beq.w	8016310 <_dtoa_r+0xa80>
 8015f9e:	6922      	ldr	r2, [r4, #16]
 8015fa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015fa4:	6910      	ldr	r0, [r2, #16]
 8015fa6:	f000 fb79 	bl	801669c <__hi0bits>
 8015faa:	f1c0 0020 	rsb	r0, r0, #32
 8015fae:	9b06      	ldr	r3, [sp, #24]
 8015fb0:	4418      	add	r0, r3
 8015fb2:	f010 001f 	ands.w	r0, r0, #31
 8015fb6:	f000 8081 	beq.w	80160bc <_dtoa_r+0x82c>
 8015fba:	f1c0 0220 	rsb	r2, r0, #32
 8015fbe:	2a04      	cmp	r2, #4
 8015fc0:	dd73      	ble.n	80160aa <_dtoa_r+0x81a>
 8015fc2:	9b04      	ldr	r3, [sp, #16]
 8015fc4:	f1c0 001c 	rsb	r0, r0, #28
 8015fc8:	4403      	add	r3, r0
 8015fca:	9304      	str	r3, [sp, #16]
 8015fcc:	9b06      	ldr	r3, [sp, #24]
 8015fce:	4406      	add	r6, r0
 8015fd0:	4403      	add	r3, r0
 8015fd2:	9306      	str	r3, [sp, #24]
 8015fd4:	9b04      	ldr	r3, [sp, #16]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	dd05      	ble.n	8015fe6 <_dtoa_r+0x756>
 8015fda:	9901      	ldr	r1, [sp, #4]
 8015fdc:	461a      	mov	r2, r3
 8015fde:	4648      	mov	r0, r9
 8015fe0:	f000 fcba 	bl	8016958 <__lshift>
 8015fe4:	9001      	str	r0, [sp, #4]
 8015fe6:	9b06      	ldr	r3, [sp, #24]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	dd05      	ble.n	8015ff8 <_dtoa_r+0x768>
 8015fec:	4621      	mov	r1, r4
 8015fee:	461a      	mov	r2, r3
 8015ff0:	4648      	mov	r0, r9
 8015ff2:	f000 fcb1 	bl	8016958 <__lshift>
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d060      	beq.n	80160c0 <_dtoa_r+0x830>
 8015ffe:	9801      	ldr	r0, [sp, #4]
 8016000:	4621      	mov	r1, r4
 8016002:	f000 fd15 	bl	8016a30 <__mcmp>
 8016006:	2800      	cmp	r0, #0
 8016008:	da5a      	bge.n	80160c0 <_dtoa_r+0x830>
 801600a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801600e:	9305      	str	r3, [sp, #20]
 8016010:	9901      	ldr	r1, [sp, #4]
 8016012:	2300      	movs	r3, #0
 8016014:	220a      	movs	r2, #10
 8016016:	4648      	mov	r0, r9
 8016018:	f000 fafa 	bl	8016610 <__multadd>
 801601c:	9b08      	ldr	r3, [sp, #32]
 801601e:	9001      	str	r0, [sp, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	f000 8177 	beq.w	8016314 <_dtoa_r+0xa84>
 8016026:	4629      	mov	r1, r5
 8016028:	2300      	movs	r3, #0
 801602a:	220a      	movs	r2, #10
 801602c:	4648      	mov	r0, r9
 801602e:	f000 faef 	bl	8016610 <__multadd>
 8016032:	f1bb 0f00 	cmp.w	fp, #0
 8016036:	4605      	mov	r5, r0
 8016038:	dc6e      	bgt.n	8016118 <_dtoa_r+0x888>
 801603a:	9b07      	ldr	r3, [sp, #28]
 801603c:	2b02      	cmp	r3, #2
 801603e:	dc48      	bgt.n	80160d2 <_dtoa_r+0x842>
 8016040:	e06a      	b.n	8016118 <_dtoa_r+0x888>
 8016042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016044:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016048:	e739      	b.n	8015ebe <_dtoa_r+0x62e>
 801604a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 801604e:	42a3      	cmp	r3, r4
 8016050:	db07      	blt.n	8016062 <_dtoa_r+0x7d2>
 8016052:	f1ba 0f00 	cmp.w	sl, #0
 8016056:	eba3 0404 	sub.w	r4, r3, r4
 801605a:	db0b      	blt.n	8016074 <_dtoa_r+0x7e4>
 801605c:	9e04      	ldr	r6, [sp, #16]
 801605e:	4652      	mov	r2, sl
 8016060:	e72f      	b.n	8015ec2 <_dtoa_r+0x632>
 8016062:	1ae2      	subs	r2, r4, r3
 8016064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016066:	9e04      	ldr	r6, [sp, #16]
 8016068:	4413      	add	r3, r2
 801606a:	930a      	str	r3, [sp, #40]	@ 0x28
 801606c:	4652      	mov	r2, sl
 801606e:	4623      	mov	r3, r4
 8016070:	2400      	movs	r4, #0
 8016072:	e726      	b.n	8015ec2 <_dtoa_r+0x632>
 8016074:	9a04      	ldr	r2, [sp, #16]
 8016076:	eba2 060a 	sub.w	r6, r2, sl
 801607a:	2200      	movs	r2, #0
 801607c:	e721      	b.n	8015ec2 <_dtoa_r+0x632>
 801607e:	9e04      	ldr	r6, [sp, #16]
 8016080:	9d08      	ldr	r5, [sp, #32]
 8016082:	461c      	mov	r4, r3
 8016084:	e72a      	b.n	8015edc <_dtoa_r+0x64c>
 8016086:	9a01      	ldr	r2, [sp, #4]
 8016088:	9205      	str	r2, [sp, #20]
 801608a:	e752      	b.n	8015f32 <_dtoa_r+0x6a2>
 801608c:	9901      	ldr	r1, [sp, #4]
 801608e:	461a      	mov	r2, r3
 8016090:	e751      	b.n	8015f36 <_dtoa_r+0x6a6>
 8016092:	9b05      	ldr	r3, [sp, #20]
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	e752      	b.n	8015f3e <_dtoa_r+0x6ae>
 8016098:	2300      	movs	r3, #0
 801609a:	e77b      	b.n	8015f94 <_dtoa_r+0x704>
 801609c:	9b02      	ldr	r3, [sp, #8]
 801609e:	e779      	b.n	8015f94 <_dtoa_r+0x704>
 80160a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80160a2:	e778      	b.n	8015f96 <_dtoa_r+0x706>
 80160a4:	2300      	movs	r3, #0
 80160a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80160a8:	e779      	b.n	8015f9e <_dtoa_r+0x70e>
 80160aa:	d093      	beq.n	8015fd4 <_dtoa_r+0x744>
 80160ac:	9b04      	ldr	r3, [sp, #16]
 80160ae:	321c      	adds	r2, #28
 80160b0:	4413      	add	r3, r2
 80160b2:	9304      	str	r3, [sp, #16]
 80160b4:	9b06      	ldr	r3, [sp, #24]
 80160b6:	4416      	add	r6, r2
 80160b8:	4413      	add	r3, r2
 80160ba:	e78a      	b.n	8015fd2 <_dtoa_r+0x742>
 80160bc:	4602      	mov	r2, r0
 80160be:	e7f5      	b.n	80160ac <_dtoa_r+0x81c>
 80160c0:	f1ba 0f00 	cmp.w	sl, #0
 80160c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80160c8:	46d3      	mov	fp, sl
 80160ca:	dc21      	bgt.n	8016110 <_dtoa_r+0x880>
 80160cc:	9b07      	ldr	r3, [sp, #28]
 80160ce:	2b02      	cmp	r3, #2
 80160d0:	dd1e      	ble.n	8016110 <_dtoa_r+0x880>
 80160d2:	f1bb 0f00 	cmp.w	fp, #0
 80160d6:	f47f addc 	bne.w	8015c92 <_dtoa_r+0x402>
 80160da:	4621      	mov	r1, r4
 80160dc:	465b      	mov	r3, fp
 80160de:	2205      	movs	r2, #5
 80160e0:	4648      	mov	r0, r9
 80160e2:	f000 fa95 	bl	8016610 <__multadd>
 80160e6:	4601      	mov	r1, r0
 80160e8:	4604      	mov	r4, r0
 80160ea:	9801      	ldr	r0, [sp, #4]
 80160ec:	f000 fca0 	bl	8016a30 <__mcmp>
 80160f0:	2800      	cmp	r0, #0
 80160f2:	f77f adce 	ble.w	8015c92 <_dtoa_r+0x402>
 80160f6:	463e      	mov	r6, r7
 80160f8:	2331      	movs	r3, #49	@ 0x31
 80160fa:	f806 3b01 	strb.w	r3, [r6], #1
 80160fe:	9b05      	ldr	r3, [sp, #20]
 8016100:	3301      	adds	r3, #1
 8016102:	9305      	str	r3, [sp, #20]
 8016104:	e5c9      	b.n	8015c9a <_dtoa_r+0x40a>
 8016106:	f8cd 8014 	str.w	r8, [sp, #20]
 801610a:	4654      	mov	r4, sl
 801610c:	4625      	mov	r5, r4
 801610e:	e7f2      	b.n	80160f6 <_dtoa_r+0x866>
 8016110:	9b08      	ldr	r3, [sp, #32]
 8016112:	2b00      	cmp	r3, #0
 8016114:	f000 8102 	beq.w	801631c <_dtoa_r+0xa8c>
 8016118:	2e00      	cmp	r6, #0
 801611a:	dd05      	ble.n	8016128 <_dtoa_r+0x898>
 801611c:	4629      	mov	r1, r5
 801611e:	4632      	mov	r2, r6
 8016120:	4648      	mov	r0, r9
 8016122:	f000 fc19 	bl	8016958 <__lshift>
 8016126:	4605      	mov	r5, r0
 8016128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801612a:	2b00      	cmp	r3, #0
 801612c:	d058      	beq.n	80161e0 <_dtoa_r+0x950>
 801612e:	6869      	ldr	r1, [r5, #4]
 8016130:	4648      	mov	r0, r9
 8016132:	f000 fa0b 	bl	801654c <_Balloc>
 8016136:	4606      	mov	r6, r0
 8016138:	b928      	cbnz	r0, 8016146 <_dtoa_r+0x8b6>
 801613a:	4b82      	ldr	r3, [pc, #520]	@ (8016344 <_dtoa_r+0xab4>)
 801613c:	4602      	mov	r2, r0
 801613e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016142:	f7ff bbbe 	b.w	80158c2 <_dtoa_r+0x32>
 8016146:	692a      	ldr	r2, [r5, #16]
 8016148:	3202      	adds	r2, #2
 801614a:	0092      	lsls	r2, r2, #2
 801614c:	f105 010c 	add.w	r1, r5, #12
 8016150:	300c      	adds	r0, #12
 8016152:	f7ff fb06 	bl	8015762 <memcpy>
 8016156:	2201      	movs	r2, #1
 8016158:	4631      	mov	r1, r6
 801615a:	4648      	mov	r0, r9
 801615c:	f000 fbfc 	bl	8016958 <__lshift>
 8016160:	1c7b      	adds	r3, r7, #1
 8016162:	9304      	str	r3, [sp, #16]
 8016164:	eb07 030b 	add.w	r3, r7, fp
 8016168:	9309      	str	r3, [sp, #36]	@ 0x24
 801616a:	9b02      	ldr	r3, [sp, #8]
 801616c:	f003 0301 	and.w	r3, r3, #1
 8016170:	46a8      	mov	r8, r5
 8016172:	9308      	str	r3, [sp, #32]
 8016174:	4605      	mov	r5, r0
 8016176:	9b04      	ldr	r3, [sp, #16]
 8016178:	9801      	ldr	r0, [sp, #4]
 801617a:	4621      	mov	r1, r4
 801617c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8016180:	f7ff fafd 	bl	801577e <quorem>
 8016184:	4641      	mov	r1, r8
 8016186:	9002      	str	r0, [sp, #8]
 8016188:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801618c:	9801      	ldr	r0, [sp, #4]
 801618e:	f000 fc4f 	bl	8016a30 <__mcmp>
 8016192:	462a      	mov	r2, r5
 8016194:	9006      	str	r0, [sp, #24]
 8016196:	4621      	mov	r1, r4
 8016198:	4648      	mov	r0, r9
 801619a:	f000 fc65 	bl	8016a68 <__mdiff>
 801619e:	68c2      	ldr	r2, [r0, #12]
 80161a0:	4606      	mov	r6, r0
 80161a2:	b9fa      	cbnz	r2, 80161e4 <_dtoa_r+0x954>
 80161a4:	4601      	mov	r1, r0
 80161a6:	9801      	ldr	r0, [sp, #4]
 80161a8:	f000 fc42 	bl	8016a30 <__mcmp>
 80161ac:	4602      	mov	r2, r0
 80161ae:	4631      	mov	r1, r6
 80161b0:	4648      	mov	r0, r9
 80161b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80161b4:	f000 fa0a 	bl	80165cc <_Bfree>
 80161b8:	9b07      	ldr	r3, [sp, #28]
 80161ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80161bc:	9e04      	ldr	r6, [sp, #16]
 80161be:	ea42 0103 	orr.w	r1, r2, r3
 80161c2:	9b08      	ldr	r3, [sp, #32]
 80161c4:	4319      	orrs	r1, r3
 80161c6:	d10f      	bne.n	80161e8 <_dtoa_r+0x958>
 80161c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80161cc:	d028      	beq.n	8016220 <_dtoa_r+0x990>
 80161ce:	9b06      	ldr	r3, [sp, #24]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	dd02      	ble.n	80161da <_dtoa_r+0x94a>
 80161d4:	9b02      	ldr	r3, [sp, #8]
 80161d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80161da:	f88b a000 	strb.w	sl, [fp]
 80161de:	e55e      	b.n	8015c9e <_dtoa_r+0x40e>
 80161e0:	4628      	mov	r0, r5
 80161e2:	e7bd      	b.n	8016160 <_dtoa_r+0x8d0>
 80161e4:	2201      	movs	r2, #1
 80161e6:	e7e2      	b.n	80161ae <_dtoa_r+0x91e>
 80161e8:	9b06      	ldr	r3, [sp, #24]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	db04      	blt.n	80161f8 <_dtoa_r+0x968>
 80161ee:	9907      	ldr	r1, [sp, #28]
 80161f0:	430b      	orrs	r3, r1
 80161f2:	9908      	ldr	r1, [sp, #32]
 80161f4:	430b      	orrs	r3, r1
 80161f6:	d120      	bne.n	801623a <_dtoa_r+0x9aa>
 80161f8:	2a00      	cmp	r2, #0
 80161fa:	ddee      	ble.n	80161da <_dtoa_r+0x94a>
 80161fc:	9901      	ldr	r1, [sp, #4]
 80161fe:	2201      	movs	r2, #1
 8016200:	4648      	mov	r0, r9
 8016202:	f000 fba9 	bl	8016958 <__lshift>
 8016206:	4621      	mov	r1, r4
 8016208:	9001      	str	r0, [sp, #4]
 801620a:	f000 fc11 	bl	8016a30 <__mcmp>
 801620e:	2800      	cmp	r0, #0
 8016210:	dc03      	bgt.n	801621a <_dtoa_r+0x98a>
 8016212:	d1e2      	bne.n	80161da <_dtoa_r+0x94a>
 8016214:	f01a 0f01 	tst.w	sl, #1
 8016218:	d0df      	beq.n	80161da <_dtoa_r+0x94a>
 801621a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801621e:	d1d9      	bne.n	80161d4 <_dtoa_r+0x944>
 8016220:	2339      	movs	r3, #57	@ 0x39
 8016222:	f88b 3000 	strb.w	r3, [fp]
 8016226:	4633      	mov	r3, r6
 8016228:	461e      	mov	r6, r3
 801622a:	3b01      	subs	r3, #1
 801622c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016230:	2a39      	cmp	r2, #57	@ 0x39
 8016232:	d052      	beq.n	80162da <_dtoa_r+0xa4a>
 8016234:	3201      	adds	r2, #1
 8016236:	701a      	strb	r2, [r3, #0]
 8016238:	e531      	b.n	8015c9e <_dtoa_r+0x40e>
 801623a:	2a00      	cmp	r2, #0
 801623c:	dd07      	ble.n	801624e <_dtoa_r+0x9be>
 801623e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016242:	d0ed      	beq.n	8016220 <_dtoa_r+0x990>
 8016244:	f10a 0301 	add.w	r3, sl, #1
 8016248:	f88b 3000 	strb.w	r3, [fp]
 801624c:	e527      	b.n	8015c9e <_dtoa_r+0x40e>
 801624e:	9b04      	ldr	r3, [sp, #16]
 8016250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016252:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016256:	4293      	cmp	r3, r2
 8016258:	d029      	beq.n	80162ae <_dtoa_r+0xa1e>
 801625a:	9901      	ldr	r1, [sp, #4]
 801625c:	2300      	movs	r3, #0
 801625e:	220a      	movs	r2, #10
 8016260:	4648      	mov	r0, r9
 8016262:	f000 f9d5 	bl	8016610 <__multadd>
 8016266:	45a8      	cmp	r8, r5
 8016268:	9001      	str	r0, [sp, #4]
 801626a:	f04f 0300 	mov.w	r3, #0
 801626e:	f04f 020a 	mov.w	r2, #10
 8016272:	4641      	mov	r1, r8
 8016274:	4648      	mov	r0, r9
 8016276:	d107      	bne.n	8016288 <_dtoa_r+0x9f8>
 8016278:	f000 f9ca 	bl	8016610 <__multadd>
 801627c:	4680      	mov	r8, r0
 801627e:	4605      	mov	r5, r0
 8016280:	9b04      	ldr	r3, [sp, #16]
 8016282:	3301      	adds	r3, #1
 8016284:	9304      	str	r3, [sp, #16]
 8016286:	e776      	b.n	8016176 <_dtoa_r+0x8e6>
 8016288:	f000 f9c2 	bl	8016610 <__multadd>
 801628c:	4629      	mov	r1, r5
 801628e:	4680      	mov	r8, r0
 8016290:	2300      	movs	r3, #0
 8016292:	220a      	movs	r2, #10
 8016294:	4648      	mov	r0, r9
 8016296:	f000 f9bb 	bl	8016610 <__multadd>
 801629a:	4605      	mov	r5, r0
 801629c:	e7f0      	b.n	8016280 <_dtoa_r+0x9f0>
 801629e:	f1bb 0f00 	cmp.w	fp, #0
 80162a2:	bfcc      	ite	gt
 80162a4:	465e      	movgt	r6, fp
 80162a6:	2601      	movle	r6, #1
 80162a8:	443e      	add	r6, r7
 80162aa:	f04f 0800 	mov.w	r8, #0
 80162ae:	9901      	ldr	r1, [sp, #4]
 80162b0:	2201      	movs	r2, #1
 80162b2:	4648      	mov	r0, r9
 80162b4:	f000 fb50 	bl	8016958 <__lshift>
 80162b8:	4621      	mov	r1, r4
 80162ba:	9001      	str	r0, [sp, #4]
 80162bc:	f000 fbb8 	bl	8016a30 <__mcmp>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	dcb0      	bgt.n	8016226 <_dtoa_r+0x996>
 80162c4:	d102      	bne.n	80162cc <_dtoa_r+0xa3c>
 80162c6:	f01a 0f01 	tst.w	sl, #1
 80162ca:	d1ac      	bne.n	8016226 <_dtoa_r+0x996>
 80162cc:	4633      	mov	r3, r6
 80162ce:	461e      	mov	r6, r3
 80162d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162d4:	2a30      	cmp	r2, #48	@ 0x30
 80162d6:	d0fa      	beq.n	80162ce <_dtoa_r+0xa3e>
 80162d8:	e4e1      	b.n	8015c9e <_dtoa_r+0x40e>
 80162da:	429f      	cmp	r7, r3
 80162dc:	d1a4      	bne.n	8016228 <_dtoa_r+0x998>
 80162de:	9b05      	ldr	r3, [sp, #20]
 80162e0:	3301      	adds	r3, #1
 80162e2:	9305      	str	r3, [sp, #20]
 80162e4:	2331      	movs	r3, #49	@ 0x31
 80162e6:	703b      	strb	r3, [r7, #0]
 80162e8:	e4d9      	b.n	8015c9e <_dtoa_r+0x40e>
 80162ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80162ec:	4f16      	ldr	r7, [pc, #88]	@ (8016348 <_dtoa_r+0xab8>)
 80162ee:	b11b      	cbz	r3, 80162f8 <_dtoa_r+0xa68>
 80162f0:	f107 0308 	add.w	r3, r7, #8
 80162f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80162f6:	6013      	str	r3, [r2, #0]
 80162f8:	4638      	mov	r0, r7
 80162fa:	b011      	add	sp, #68	@ 0x44
 80162fc:	ecbd 8b02 	vpop	{d8}
 8016300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016304:	9b07      	ldr	r3, [sp, #28]
 8016306:	2b01      	cmp	r3, #1
 8016308:	f77f ae2c 	ble.w	8015f64 <_dtoa_r+0x6d4>
 801630c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801630e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016310:	2001      	movs	r0, #1
 8016312:	e64c      	b.n	8015fae <_dtoa_r+0x71e>
 8016314:	f1bb 0f00 	cmp.w	fp, #0
 8016318:	f77f aed8 	ble.w	80160cc <_dtoa_r+0x83c>
 801631c:	463e      	mov	r6, r7
 801631e:	9801      	ldr	r0, [sp, #4]
 8016320:	4621      	mov	r1, r4
 8016322:	f7ff fa2c 	bl	801577e <quorem>
 8016326:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801632a:	f806 ab01 	strb.w	sl, [r6], #1
 801632e:	1bf2      	subs	r2, r6, r7
 8016330:	4593      	cmp	fp, r2
 8016332:	ddb4      	ble.n	801629e <_dtoa_r+0xa0e>
 8016334:	9901      	ldr	r1, [sp, #4]
 8016336:	2300      	movs	r3, #0
 8016338:	220a      	movs	r2, #10
 801633a:	4648      	mov	r0, r9
 801633c:	f000 f968 	bl	8016610 <__multadd>
 8016340:	9001      	str	r0, [sp, #4]
 8016342:	e7ec      	b.n	801631e <_dtoa_r+0xa8e>
 8016344:	08017b08 	.word	0x08017b08
 8016348:	08017a8c 	.word	0x08017a8c

0801634c <_free_r>:
 801634c:	b538      	push	{r3, r4, r5, lr}
 801634e:	4605      	mov	r5, r0
 8016350:	2900      	cmp	r1, #0
 8016352:	d041      	beq.n	80163d8 <_free_r+0x8c>
 8016354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016358:	1f0c      	subs	r4, r1, #4
 801635a:	2b00      	cmp	r3, #0
 801635c:	bfb8      	it	lt
 801635e:	18e4      	addlt	r4, r4, r3
 8016360:	f000 f8e8 	bl	8016534 <__malloc_lock>
 8016364:	4a1d      	ldr	r2, [pc, #116]	@ (80163dc <_free_r+0x90>)
 8016366:	6813      	ldr	r3, [r2, #0]
 8016368:	b933      	cbnz	r3, 8016378 <_free_r+0x2c>
 801636a:	6063      	str	r3, [r4, #4]
 801636c:	6014      	str	r4, [r2, #0]
 801636e:	4628      	mov	r0, r5
 8016370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016374:	f000 b8e4 	b.w	8016540 <__malloc_unlock>
 8016378:	42a3      	cmp	r3, r4
 801637a:	d908      	bls.n	801638e <_free_r+0x42>
 801637c:	6820      	ldr	r0, [r4, #0]
 801637e:	1821      	adds	r1, r4, r0
 8016380:	428b      	cmp	r3, r1
 8016382:	bf01      	itttt	eq
 8016384:	6819      	ldreq	r1, [r3, #0]
 8016386:	685b      	ldreq	r3, [r3, #4]
 8016388:	1809      	addeq	r1, r1, r0
 801638a:	6021      	streq	r1, [r4, #0]
 801638c:	e7ed      	b.n	801636a <_free_r+0x1e>
 801638e:	461a      	mov	r2, r3
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	b10b      	cbz	r3, 8016398 <_free_r+0x4c>
 8016394:	42a3      	cmp	r3, r4
 8016396:	d9fa      	bls.n	801638e <_free_r+0x42>
 8016398:	6811      	ldr	r1, [r2, #0]
 801639a:	1850      	adds	r0, r2, r1
 801639c:	42a0      	cmp	r0, r4
 801639e:	d10b      	bne.n	80163b8 <_free_r+0x6c>
 80163a0:	6820      	ldr	r0, [r4, #0]
 80163a2:	4401      	add	r1, r0
 80163a4:	1850      	adds	r0, r2, r1
 80163a6:	4283      	cmp	r3, r0
 80163a8:	6011      	str	r1, [r2, #0]
 80163aa:	d1e0      	bne.n	801636e <_free_r+0x22>
 80163ac:	6818      	ldr	r0, [r3, #0]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	6053      	str	r3, [r2, #4]
 80163b2:	4408      	add	r0, r1
 80163b4:	6010      	str	r0, [r2, #0]
 80163b6:	e7da      	b.n	801636e <_free_r+0x22>
 80163b8:	d902      	bls.n	80163c0 <_free_r+0x74>
 80163ba:	230c      	movs	r3, #12
 80163bc:	602b      	str	r3, [r5, #0]
 80163be:	e7d6      	b.n	801636e <_free_r+0x22>
 80163c0:	6820      	ldr	r0, [r4, #0]
 80163c2:	1821      	adds	r1, r4, r0
 80163c4:	428b      	cmp	r3, r1
 80163c6:	bf04      	itt	eq
 80163c8:	6819      	ldreq	r1, [r3, #0]
 80163ca:	685b      	ldreq	r3, [r3, #4]
 80163cc:	6063      	str	r3, [r4, #4]
 80163ce:	bf04      	itt	eq
 80163d0:	1809      	addeq	r1, r1, r0
 80163d2:	6021      	streq	r1, [r4, #0]
 80163d4:	6054      	str	r4, [r2, #4]
 80163d6:	e7ca      	b.n	801636e <_free_r+0x22>
 80163d8:	bd38      	pop	{r3, r4, r5, pc}
 80163da:	bf00      	nop
 80163dc:	240059c8 	.word	0x240059c8

080163e0 <malloc>:
 80163e0:	4b02      	ldr	r3, [pc, #8]	@ (80163ec <malloc+0xc>)
 80163e2:	4601      	mov	r1, r0
 80163e4:	6818      	ldr	r0, [r3, #0]
 80163e6:	f000 b825 	b.w	8016434 <_malloc_r>
 80163ea:	bf00      	nop
 80163ec:	2400003c 	.word	0x2400003c

080163f0 <sbrk_aligned>:
 80163f0:	b570      	push	{r4, r5, r6, lr}
 80163f2:	4e0f      	ldr	r6, [pc, #60]	@ (8016430 <sbrk_aligned+0x40>)
 80163f4:	460c      	mov	r4, r1
 80163f6:	6831      	ldr	r1, [r6, #0]
 80163f8:	4605      	mov	r5, r0
 80163fa:	b911      	cbnz	r1, 8016402 <sbrk_aligned+0x12>
 80163fc:	f000 fe92 	bl	8017124 <_sbrk_r>
 8016400:	6030      	str	r0, [r6, #0]
 8016402:	4621      	mov	r1, r4
 8016404:	4628      	mov	r0, r5
 8016406:	f000 fe8d 	bl	8017124 <_sbrk_r>
 801640a:	1c43      	adds	r3, r0, #1
 801640c:	d103      	bne.n	8016416 <sbrk_aligned+0x26>
 801640e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016412:	4620      	mov	r0, r4
 8016414:	bd70      	pop	{r4, r5, r6, pc}
 8016416:	1cc4      	adds	r4, r0, #3
 8016418:	f024 0403 	bic.w	r4, r4, #3
 801641c:	42a0      	cmp	r0, r4
 801641e:	d0f8      	beq.n	8016412 <sbrk_aligned+0x22>
 8016420:	1a21      	subs	r1, r4, r0
 8016422:	4628      	mov	r0, r5
 8016424:	f000 fe7e 	bl	8017124 <_sbrk_r>
 8016428:	3001      	adds	r0, #1
 801642a:	d1f2      	bne.n	8016412 <sbrk_aligned+0x22>
 801642c:	e7ef      	b.n	801640e <sbrk_aligned+0x1e>
 801642e:	bf00      	nop
 8016430:	240059c4 	.word	0x240059c4

08016434 <_malloc_r>:
 8016434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016438:	1ccd      	adds	r5, r1, #3
 801643a:	f025 0503 	bic.w	r5, r5, #3
 801643e:	3508      	adds	r5, #8
 8016440:	2d0c      	cmp	r5, #12
 8016442:	bf38      	it	cc
 8016444:	250c      	movcc	r5, #12
 8016446:	2d00      	cmp	r5, #0
 8016448:	4606      	mov	r6, r0
 801644a:	db01      	blt.n	8016450 <_malloc_r+0x1c>
 801644c:	42a9      	cmp	r1, r5
 801644e:	d904      	bls.n	801645a <_malloc_r+0x26>
 8016450:	230c      	movs	r3, #12
 8016452:	6033      	str	r3, [r6, #0]
 8016454:	2000      	movs	r0, #0
 8016456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801645a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016530 <_malloc_r+0xfc>
 801645e:	f000 f869 	bl	8016534 <__malloc_lock>
 8016462:	f8d8 3000 	ldr.w	r3, [r8]
 8016466:	461c      	mov	r4, r3
 8016468:	bb44      	cbnz	r4, 80164bc <_malloc_r+0x88>
 801646a:	4629      	mov	r1, r5
 801646c:	4630      	mov	r0, r6
 801646e:	f7ff ffbf 	bl	80163f0 <sbrk_aligned>
 8016472:	1c43      	adds	r3, r0, #1
 8016474:	4604      	mov	r4, r0
 8016476:	d158      	bne.n	801652a <_malloc_r+0xf6>
 8016478:	f8d8 4000 	ldr.w	r4, [r8]
 801647c:	4627      	mov	r7, r4
 801647e:	2f00      	cmp	r7, #0
 8016480:	d143      	bne.n	801650a <_malloc_r+0xd6>
 8016482:	2c00      	cmp	r4, #0
 8016484:	d04b      	beq.n	801651e <_malloc_r+0xea>
 8016486:	6823      	ldr	r3, [r4, #0]
 8016488:	4639      	mov	r1, r7
 801648a:	4630      	mov	r0, r6
 801648c:	eb04 0903 	add.w	r9, r4, r3
 8016490:	f000 fe48 	bl	8017124 <_sbrk_r>
 8016494:	4581      	cmp	r9, r0
 8016496:	d142      	bne.n	801651e <_malloc_r+0xea>
 8016498:	6821      	ldr	r1, [r4, #0]
 801649a:	1a6d      	subs	r5, r5, r1
 801649c:	4629      	mov	r1, r5
 801649e:	4630      	mov	r0, r6
 80164a0:	f7ff ffa6 	bl	80163f0 <sbrk_aligned>
 80164a4:	3001      	adds	r0, #1
 80164a6:	d03a      	beq.n	801651e <_malloc_r+0xea>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	442b      	add	r3, r5
 80164ac:	6023      	str	r3, [r4, #0]
 80164ae:	f8d8 3000 	ldr.w	r3, [r8]
 80164b2:	685a      	ldr	r2, [r3, #4]
 80164b4:	bb62      	cbnz	r2, 8016510 <_malloc_r+0xdc>
 80164b6:	f8c8 7000 	str.w	r7, [r8]
 80164ba:	e00f      	b.n	80164dc <_malloc_r+0xa8>
 80164bc:	6822      	ldr	r2, [r4, #0]
 80164be:	1b52      	subs	r2, r2, r5
 80164c0:	d420      	bmi.n	8016504 <_malloc_r+0xd0>
 80164c2:	2a0b      	cmp	r2, #11
 80164c4:	d917      	bls.n	80164f6 <_malloc_r+0xc2>
 80164c6:	1961      	adds	r1, r4, r5
 80164c8:	42a3      	cmp	r3, r4
 80164ca:	6025      	str	r5, [r4, #0]
 80164cc:	bf18      	it	ne
 80164ce:	6059      	strne	r1, [r3, #4]
 80164d0:	6863      	ldr	r3, [r4, #4]
 80164d2:	bf08      	it	eq
 80164d4:	f8c8 1000 	streq.w	r1, [r8]
 80164d8:	5162      	str	r2, [r4, r5]
 80164da:	604b      	str	r3, [r1, #4]
 80164dc:	4630      	mov	r0, r6
 80164de:	f000 f82f 	bl	8016540 <__malloc_unlock>
 80164e2:	f104 000b 	add.w	r0, r4, #11
 80164e6:	1d23      	adds	r3, r4, #4
 80164e8:	f020 0007 	bic.w	r0, r0, #7
 80164ec:	1ac2      	subs	r2, r0, r3
 80164ee:	bf1c      	itt	ne
 80164f0:	1a1b      	subne	r3, r3, r0
 80164f2:	50a3      	strne	r3, [r4, r2]
 80164f4:	e7af      	b.n	8016456 <_malloc_r+0x22>
 80164f6:	6862      	ldr	r2, [r4, #4]
 80164f8:	42a3      	cmp	r3, r4
 80164fa:	bf0c      	ite	eq
 80164fc:	f8c8 2000 	streq.w	r2, [r8]
 8016500:	605a      	strne	r2, [r3, #4]
 8016502:	e7eb      	b.n	80164dc <_malloc_r+0xa8>
 8016504:	4623      	mov	r3, r4
 8016506:	6864      	ldr	r4, [r4, #4]
 8016508:	e7ae      	b.n	8016468 <_malloc_r+0x34>
 801650a:	463c      	mov	r4, r7
 801650c:	687f      	ldr	r7, [r7, #4]
 801650e:	e7b6      	b.n	801647e <_malloc_r+0x4a>
 8016510:	461a      	mov	r2, r3
 8016512:	685b      	ldr	r3, [r3, #4]
 8016514:	42a3      	cmp	r3, r4
 8016516:	d1fb      	bne.n	8016510 <_malloc_r+0xdc>
 8016518:	2300      	movs	r3, #0
 801651a:	6053      	str	r3, [r2, #4]
 801651c:	e7de      	b.n	80164dc <_malloc_r+0xa8>
 801651e:	230c      	movs	r3, #12
 8016520:	6033      	str	r3, [r6, #0]
 8016522:	4630      	mov	r0, r6
 8016524:	f000 f80c 	bl	8016540 <__malloc_unlock>
 8016528:	e794      	b.n	8016454 <_malloc_r+0x20>
 801652a:	6005      	str	r5, [r0, #0]
 801652c:	e7d6      	b.n	80164dc <_malloc_r+0xa8>
 801652e:	bf00      	nop
 8016530:	240059c8 	.word	0x240059c8

08016534 <__malloc_lock>:
 8016534:	4801      	ldr	r0, [pc, #4]	@ (801653c <__malloc_lock+0x8>)
 8016536:	f7ff b912 	b.w	801575e <__retarget_lock_acquire_recursive>
 801653a:	bf00      	nop
 801653c:	240059c0 	.word	0x240059c0

08016540 <__malloc_unlock>:
 8016540:	4801      	ldr	r0, [pc, #4]	@ (8016548 <__malloc_unlock+0x8>)
 8016542:	f7ff b90d 	b.w	8015760 <__retarget_lock_release_recursive>
 8016546:	bf00      	nop
 8016548:	240059c0 	.word	0x240059c0

0801654c <_Balloc>:
 801654c:	b570      	push	{r4, r5, r6, lr}
 801654e:	69c6      	ldr	r6, [r0, #28]
 8016550:	4604      	mov	r4, r0
 8016552:	460d      	mov	r5, r1
 8016554:	b976      	cbnz	r6, 8016574 <_Balloc+0x28>
 8016556:	2010      	movs	r0, #16
 8016558:	f7ff ff42 	bl	80163e0 <malloc>
 801655c:	4602      	mov	r2, r0
 801655e:	61e0      	str	r0, [r4, #28]
 8016560:	b920      	cbnz	r0, 801656c <_Balloc+0x20>
 8016562:	4b18      	ldr	r3, [pc, #96]	@ (80165c4 <_Balloc+0x78>)
 8016564:	4818      	ldr	r0, [pc, #96]	@ (80165c8 <_Balloc+0x7c>)
 8016566:	216b      	movs	r1, #107	@ 0x6b
 8016568:	f000 fdec 	bl	8017144 <__assert_func>
 801656c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016570:	6006      	str	r6, [r0, #0]
 8016572:	60c6      	str	r6, [r0, #12]
 8016574:	69e6      	ldr	r6, [r4, #28]
 8016576:	68f3      	ldr	r3, [r6, #12]
 8016578:	b183      	cbz	r3, 801659c <_Balloc+0x50>
 801657a:	69e3      	ldr	r3, [r4, #28]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016582:	b9b8      	cbnz	r0, 80165b4 <_Balloc+0x68>
 8016584:	2101      	movs	r1, #1
 8016586:	fa01 f605 	lsl.w	r6, r1, r5
 801658a:	1d72      	adds	r2, r6, #5
 801658c:	0092      	lsls	r2, r2, #2
 801658e:	4620      	mov	r0, r4
 8016590:	f000 fdf6 	bl	8017180 <_calloc_r>
 8016594:	b160      	cbz	r0, 80165b0 <_Balloc+0x64>
 8016596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801659a:	e00e      	b.n	80165ba <_Balloc+0x6e>
 801659c:	2221      	movs	r2, #33	@ 0x21
 801659e:	2104      	movs	r1, #4
 80165a0:	4620      	mov	r0, r4
 80165a2:	f000 fded 	bl	8017180 <_calloc_r>
 80165a6:	69e3      	ldr	r3, [r4, #28]
 80165a8:	60f0      	str	r0, [r6, #12]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d1e4      	bne.n	801657a <_Balloc+0x2e>
 80165b0:	2000      	movs	r0, #0
 80165b2:	bd70      	pop	{r4, r5, r6, pc}
 80165b4:	6802      	ldr	r2, [r0, #0]
 80165b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165ba:	2300      	movs	r3, #0
 80165bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80165c0:	e7f7      	b.n	80165b2 <_Balloc+0x66>
 80165c2:	bf00      	nop
 80165c4:	08017a99 	.word	0x08017a99
 80165c8:	08017b19 	.word	0x08017b19

080165cc <_Bfree>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	69c6      	ldr	r6, [r0, #28]
 80165d0:	4605      	mov	r5, r0
 80165d2:	460c      	mov	r4, r1
 80165d4:	b976      	cbnz	r6, 80165f4 <_Bfree+0x28>
 80165d6:	2010      	movs	r0, #16
 80165d8:	f7ff ff02 	bl	80163e0 <malloc>
 80165dc:	4602      	mov	r2, r0
 80165de:	61e8      	str	r0, [r5, #28]
 80165e0:	b920      	cbnz	r0, 80165ec <_Bfree+0x20>
 80165e2:	4b09      	ldr	r3, [pc, #36]	@ (8016608 <_Bfree+0x3c>)
 80165e4:	4809      	ldr	r0, [pc, #36]	@ (801660c <_Bfree+0x40>)
 80165e6:	218f      	movs	r1, #143	@ 0x8f
 80165e8:	f000 fdac 	bl	8017144 <__assert_func>
 80165ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165f0:	6006      	str	r6, [r0, #0]
 80165f2:	60c6      	str	r6, [r0, #12]
 80165f4:	b13c      	cbz	r4, 8016606 <_Bfree+0x3a>
 80165f6:	69eb      	ldr	r3, [r5, #28]
 80165f8:	6862      	ldr	r2, [r4, #4]
 80165fa:	68db      	ldr	r3, [r3, #12]
 80165fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016600:	6021      	str	r1, [r4, #0]
 8016602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016606:	bd70      	pop	{r4, r5, r6, pc}
 8016608:	08017a99 	.word	0x08017a99
 801660c:	08017b19 	.word	0x08017b19

08016610 <__multadd>:
 8016610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016614:	690d      	ldr	r5, [r1, #16]
 8016616:	4607      	mov	r7, r0
 8016618:	460c      	mov	r4, r1
 801661a:	461e      	mov	r6, r3
 801661c:	f101 0c14 	add.w	ip, r1, #20
 8016620:	2000      	movs	r0, #0
 8016622:	f8dc 3000 	ldr.w	r3, [ip]
 8016626:	b299      	uxth	r1, r3
 8016628:	fb02 6101 	mla	r1, r2, r1, r6
 801662c:	0c1e      	lsrs	r6, r3, #16
 801662e:	0c0b      	lsrs	r3, r1, #16
 8016630:	fb02 3306 	mla	r3, r2, r6, r3
 8016634:	b289      	uxth	r1, r1
 8016636:	3001      	adds	r0, #1
 8016638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801663c:	4285      	cmp	r5, r0
 801663e:	f84c 1b04 	str.w	r1, [ip], #4
 8016642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016646:	dcec      	bgt.n	8016622 <__multadd+0x12>
 8016648:	b30e      	cbz	r6, 801668e <__multadd+0x7e>
 801664a:	68a3      	ldr	r3, [r4, #8]
 801664c:	42ab      	cmp	r3, r5
 801664e:	dc19      	bgt.n	8016684 <__multadd+0x74>
 8016650:	6861      	ldr	r1, [r4, #4]
 8016652:	4638      	mov	r0, r7
 8016654:	3101      	adds	r1, #1
 8016656:	f7ff ff79 	bl	801654c <_Balloc>
 801665a:	4680      	mov	r8, r0
 801665c:	b928      	cbnz	r0, 801666a <__multadd+0x5a>
 801665e:	4602      	mov	r2, r0
 8016660:	4b0c      	ldr	r3, [pc, #48]	@ (8016694 <__multadd+0x84>)
 8016662:	480d      	ldr	r0, [pc, #52]	@ (8016698 <__multadd+0x88>)
 8016664:	21ba      	movs	r1, #186	@ 0xba
 8016666:	f000 fd6d 	bl	8017144 <__assert_func>
 801666a:	6922      	ldr	r2, [r4, #16]
 801666c:	3202      	adds	r2, #2
 801666e:	f104 010c 	add.w	r1, r4, #12
 8016672:	0092      	lsls	r2, r2, #2
 8016674:	300c      	adds	r0, #12
 8016676:	f7ff f874 	bl	8015762 <memcpy>
 801667a:	4621      	mov	r1, r4
 801667c:	4638      	mov	r0, r7
 801667e:	f7ff ffa5 	bl	80165cc <_Bfree>
 8016682:	4644      	mov	r4, r8
 8016684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016688:	3501      	adds	r5, #1
 801668a:	615e      	str	r6, [r3, #20]
 801668c:	6125      	str	r5, [r4, #16]
 801668e:	4620      	mov	r0, r4
 8016690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016694:	08017b08 	.word	0x08017b08
 8016698:	08017b19 	.word	0x08017b19

0801669c <__hi0bits>:
 801669c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80166a0:	4603      	mov	r3, r0
 80166a2:	bf36      	itet	cc
 80166a4:	0403      	lslcc	r3, r0, #16
 80166a6:	2000      	movcs	r0, #0
 80166a8:	2010      	movcc	r0, #16
 80166aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80166ae:	bf3c      	itt	cc
 80166b0:	021b      	lslcc	r3, r3, #8
 80166b2:	3008      	addcc	r0, #8
 80166b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80166b8:	bf3c      	itt	cc
 80166ba:	011b      	lslcc	r3, r3, #4
 80166bc:	3004      	addcc	r0, #4
 80166be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80166c2:	bf3c      	itt	cc
 80166c4:	009b      	lslcc	r3, r3, #2
 80166c6:	3002      	addcc	r0, #2
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	db05      	blt.n	80166d8 <__hi0bits+0x3c>
 80166cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80166d0:	f100 0001 	add.w	r0, r0, #1
 80166d4:	bf08      	it	eq
 80166d6:	2020      	moveq	r0, #32
 80166d8:	4770      	bx	lr

080166da <__lo0bits>:
 80166da:	6803      	ldr	r3, [r0, #0]
 80166dc:	4602      	mov	r2, r0
 80166de:	f013 0007 	ands.w	r0, r3, #7
 80166e2:	d00b      	beq.n	80166fc <__lo0bits+0x22>
 80166e4:	07d9      	lsls	r1, r3, #31
 80166e6:	d421      	bmi.n	801672c <__lo0bits+0x52>
 80166e8:	0798      	lsls	r0, r3, #30
 80166ea:	bf49      	itett	mi
 80166ec:	085b      	lsrmi	r3, r3, #1
 80166ee:	089b      	lsrpl	r3, r3, #2
 80166f0:	2001      	movmi	r0, #1
 80166f2:	6013      	strmi	r3, [r2, #0]
 80166f4:	bf5c      	itt	pl
 80166f6:	6013      	strpl	r3, [r2, #0]
 80166f8:	2002      	movpl	r0, #2
 80166fa:	4770      	bx	lr
 80166fc:	b299      	uxth	r1, r3
 80166fe:	b909      	cbnz	r1, 8016704 <__lo0bits+0x2a>
 8016700:	0c1b      	lsrs	r3, r3, #16
 8016702:	2010      	movs	r0, #16
 8016704:	b2d9      	uxtb	r1, r3
 8016706:	b909      	cbnz	r1, 801670c <__lo0bits+0x32>
 8016708:	3008      	adds	r0, #8
 801670a:	0a1b      	lsrs	r3, r3, #8
 801670c:	0719      	lsls	r1, r3, #28
 801670e:	bf04      	itt	eq
 8016710:	091b      	lsreq	r3, r3, #4
 8016712:	3004      	addeq	r0, #4
 8016714:	0799      	lsls	r1, r3, #30
 8016716:	bf04      	itt	eq
 8016718:	089b      	lsreq	r3, r3, #2
 801671a:	3002      	addeq	r0, #2
 801671c:	07d9      	lsls	r1, r3, #31
 801671e:	d403      	bmi.n	8016728 <__lo0bits+0x4e>
 8016720:	085b      	lsrs	r3, r3, #1
 8016722:	f100 0001 	add.w	r0, r0, #1
 8016726:	d003      	beq.n	8016730 <__lo0bits+0x56>
 8016728:	6013      	str	r3, [r2, #0]
 801672a:	4770      	bx	lr
 801672c:	2000      	movs	r0, #0
 801672e:	4770      	bx	lr
 8016730:	2020      	movs	r0, #32
 8016732:	4770      	bx	lr

08016734 <__i2b>:
 8016734:	b510      	push	{r4, lr}
 8016736:	460c      	mov	r4, r1
 8016738:	2101      	movs	r1, #1
 801673a:	f7ff ff07 	bl	801654c <_Balloc>
 801673e:	4602      	mov	r2, r0
 8016740:	b928      	cbnz	r0, 801674e <__i2b+0x1a>
 8016742:	4b05      	ldr	r3, [pc, #20]	@ (8016758 <__i2b+0x24>)
 8016744:	4805      	ldr	r0, [pc, #20]	@ (801675c <__i2b+0x28>)
 8016746:	f240 1145 	movw	r1, #325	@ 0x145
 801674a:	f000 fcfb 	bl	8017144 <__assert_func>
 801674e:	2301      	movs	r3, #1
 8016750:	6144      	str	r4, [r0, #20]
 8016752:	6103      	str	r3, [r0, #16]
 8016754:	bd10      	pop	{r4, pc}
 8016756:	bf00      	nop
 8016758:	08017b08 	.word	0x08017b08
 801675c:	08017b19 	.word	0x08017b19

08016760 <__multiply>:
 8016760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016764:	4617      	mov	r7, r2
 8016766:	690a      	ldr	r2, [r1, #16]
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	429a      	cmp	r2, r3
 801676c:	bfa8      	it	ge
 801676e:	463b      	movge	r3, r7
 8016770:	4689      	mov	r9, r1
 8016772:	bfa4      	itt	ge
 8016774:	460f      	movge	r7, r1
 8016776:	4699      	movge	r9, r3
 8016778:	693d      	ldr	r5, [r7, #16]
 801677a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	6879      	ldr	r1, [r7, #4]
 8016782:	eb05 060a 	add.w	r6, r5, sl
 8016786:	42b3      	cmp	r3, r6
 8016788:	b085      	sub	sp, #20
 801678a:	bfb8      	it	lt
 801678c:	3101      	addlt	r1, #1
 801678e:	f7ff fedd 	bl	801654c <_Balloc>
 8016792:	b930      	cbnz	r0, 80167a2 <__multiply+0x42>
 8016794:	4602      	mov	r2, r0
 8016796:	4b41      	ldr	r3, [pc, #260]	@ (801689c <__multiply+0x13c>)
 8016798:	4841      	ldr	r0, [pc, #260]	@ (80168a0 <__multiply+0x140>)
 801679a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801679e:	f000 fcd1 	bl	8017144 <__assert_func>
 80167a2:	f100 0414 	add.w	r4, r0, #20
 80167a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80167aa:	4623      	mov	r3, r4
 80167ac:	2200      	movs	r2, #0
 80167ae:	4573      	cmp	r3, lr
 80167b0:	d320      	bcc.n	80167f4 <__multiply+0x94>
 80167b2:	f107 0814 	add.w	r8, r7, #20
 80167b6:	f109 0114 	add.w	r1, r9, #20
 80167ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80167be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80167c2:	9302      	str	r3, [sp, #8]
 80167c4:	1beb      	subs	r3, r5, r7
 80167c6:	3b15      	subs	r3, #21
 80167c8:	f023 0303 	bic.w	r3, r3, #3
 80167cc:	3304      	adds	r3, #4
 80167ce:	3715      	adds	r7, #21
 80167d0:	42bd      	cmp	r5, r7
 80167d2:	bf38      	it	cc
 80167d4:	2304      	movcc	r3, #4
 80167d6:	9301      	str	r3, [sp, #4]
 80167d8:	9b02      	ldr	r3, [sp, #8]
 80167da:	9103      	str	r1, [sp, #12]
 80167dc:	428b      	cmp	r3, r1
 80167de:	d80c      	bhi.n	80167fa <__multiply+0x9a>
 80167e0:	2e00      	cmp	r6, #0
 80167e2:	dd03      	ble.n	80167ec <__multiply+0x8c>
 80167e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d055      	beq.n	8016898 <__multiply+0x138>
 80167ec:	6106      	str	r6, [r0, #16]
 80167ee:	b005      	add	sp, #20
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f4:	f843 2b04 	str.w	r2, [r3], #4
 80167f8:	e7d9      	b.n	80167ae <__multiply+0x4e>
 80167fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80167fe:	f1ba 0f00 	cmp.w	sl, #0
 8016802:	d01f      	beq.n	8016844 <__multiply+0xe4>
 8016804:	46c4      	mov	ip, r8
 8016806:	46a1      	mov	r9, r4
 8016808:	2700      	movs	r7, #0
 801680a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801680e:	f8d9 3000 	ldr.w	r3, [r9]
 8016812:	fa1f fb82 	uxth.w	fp, r2
 8016816:	b29b      	uxth	r3, r3
 8016818:	fb0a 330b 	mla	r3, sl, fp, r3
 801681c:	443b      	add	r3, r7
 801681e:	f8d9 7000 	ldr.w	r7, [r9]
 8016822:	0c12      	lsrs	r2, r2, #16
 8016824:	0c3f      	lsrs	r7, r7, #16
 8016826:	fb0a 7202 	mla	r2, sl, r2, r7
 801682a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801682e:	b29b      	uxth	r3, r3
 8016830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016834:	4565      	cmp	r5, ip
 8016836:	f849 3b04 	str.w	r3, [r9], #4
 801683a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801683e:	d8e4      	bhi.n	801680a <__multiply+0xaa>
 8016840:	9b01      	ldr	r3, [sp, #4]
 8016842:	50e7      	str	r7, [r4, r3]
 8016844:	9b03      	ldr	r3, [sp, #12]
 8016846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801684a:	3104      	adds	r1, #4
 801684c:	f1b9 0f00 	cmp.w	r9, #0
 8016850:	d020      	beq.n	8016894 <__multiply+0x134>
 8016852:	6823      	ldr	r3, [r4, #0]
 8016854:	4647      	mov	r7, r8
 8016856:	46a4      	mov	ip, r4
 8016858:	f04f 0a00 	mov.w	sl, #0
 801685c:	f8b7 b000 	ldrh.w	fp, [r7]
 8016860:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016864:	fb09 220b 	mla	r2, r9, fp, r2
 8016868:	4452      	add	r2, sl
 801686a:	b29b      	uxth	r3, r3
 801686c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016870:	f84c 3b04 	str.w	r3, [ip], #4
 8016874:	f857 3b04 	ldr.w	r3, [r7], #4
 8016878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801687c:	f8bc 3000 	ldrh.w	r3, [ip]
 8016880:	fb09 330a 	mla	r3, r9, sl, r3
 8016884:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016888:	42bd      	cmp	r5, r7
 801688a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801688e:	d8e5      	bhi.n	801685c <__multiply+0xfc>
 8016890:	9a01      	ldr	r2, [sp, #4]
 8016892:	50a3      	str	r3, [r4, r2]
 8016894:	3404      	adds	r4, #4
 8016896:	e79f      	b.n	80167d8 <__multiply+0x78>
 8016898:	3e01      	subs	r6, #1
 801689a:	e7a1      	b.n	80167e0 <__multiply+0x80>
 801689c:	08017b08 	.word	0x08017b08
 80168a0:	08017b19 	.word	0x08017b19

080168a4 <__pow5mult>:
 80168a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168a8:	4615      	mov	r5, r2
 80168aa:	f012 0203 	ands.w	r2, r2, #3
 80168ae:	4607      	mov	r7, r0
 80168b0:	460e      	mov	r6, r1
 80168b2:	d007      	beq.n	80168c4 <__pow5mult+0x20>
 80168b4:	4c25      	ldr	r4, [pc, #148]	@ (801694c <__pow5mult+0xa8>)
 80168b6:	3a01      	subs	r2, #1
 80168b8:	2300      	movs	r3, #0
 80168ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168be:	f7ff fea7 	bl	8016610 <__multadd>
 80168c2:	4606      	mov	r6, r0
 80168c4:	10ad      	asrs	r5, r5, #2
 80168c6:	d03d      	beq.n	8016944 <__pow5mult+0xa0>
 80168c8:	69fc      	ldr	r4, [r7, #28]
 80168ca:	b97c      	cbnz	r4, 80168ec <__pow5mult+0x48>
 80168cc:	2010      	movs	r0, #16
 80168ce:	f7ff fd87 	bl	80163e0 <malloc>
 80168d2:	4602      	mov	r2, r0
 80168d4:	61f8      	str	r0, [r7, #28]
 80168d6:	b928      	cbnz	r0, 80168e4 <__pow5mult+0x40>
 80168d8:	4b1d      	ldr	r3, [pc, #116]	@ (8016950 <__pow5mult+0xac>)
 80168da:	481e      	ldr	r0, [pc, #120]	@ (8016954 <__pow5mult+0xb0>)
 80168dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80168e0:	f000 fc30 	bl	8017144 <__assert_func>
 80168e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168e8:	6004      	str	r4, [r0, #0]
 80168ea:	60c4      	str	r4, [r0, #12]
 80168ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80168f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168f4:	b94c      	cbnz	r4, 801690a <__pow5mult+0x66>
 80168f6:	f240 2171 	movw	r1, #625	@ 0x271
 80168fa:	4638      	mov	r0, r7
 80168fc:	f7ff ff1a 	bl	8016734 <__i2b>
 8016900:	2300      	movs	r3, #0
 8016902:	f8c8 0008 	str.w	r0, [r8, #8]
 8016906:	4604      	mov	r4, r0
 8016908:	6003      	str	r3, [r0, #0]
 801690a:	f04f 0900 	mov.w	r9, #0
 801690e:	07eb      	lsls	r3, r5, #31
 8016910:	d50a      	bpl.n	8016928 <__pow5mult+0x84>
 8016912:	4631      	mov	r1, r6
 8016914:	4622      	mov	r2, r4
 8016916:	4638      	mov	r0, r7
 8016918:	f7ff ff22 	bl	8016760 <__multiply>
 801691c:	4631      	mov	r1, r6
 801691e:	4680      	mov	r8, r0
 8016920:	4638      	mov	r0, r7
 8016922:	f7ff fe53 	bl	80165cc <_Bfree>
 8016926:	4646      	mov	r6, r8
 8016928:	106d      	asrs	r5, r5, #1
 801692a:	d00b      	beq.n	8016944 <__pow5mult+0xa0>
 801692c:	6820      	ldr	r0, [r4, #0]
 801692e:	b938      	cbnz	r0, 8016940 <__pow5mult+0x9c>
 8016930:	4622      	mov	r2, r4
 8016932:	4621      	mov	r1, r4
 8016934:	4638      	mov	r0, r7
 8016936:	f7ff ff13 	bl	8016760 <__multiply>
 801693a:	6020      	str	r0, [r4, #0]
 801693c:	f8c0 9000 	str.w	r9, [r0]
 8016940:	4604      	mov	r4, r0
 8016942:	e7e4      	b.n	801690e <__pow5mult+0x6a>
 8016944:	4630      	mov	r0, r6
 8016946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801694a:	bf00      	nop
 801694c:	08017bcc 	.word	0x08017bcc
 8016950:	08017a99 	.word	0x08017a99
 8016954:	08017b19 	.word	0x08017b19

08016958 <__lshift>:
 8016958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801695c:	460c      	mov	r4, r1
 801695e:	6849      	ldr	r1, [r1, #4]
 8016960:	6923      	ldr	r3, [r4, #16]
 8016962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016966:	68a3      	ldr	r3, [r4, #8]
 8016968:	4607      	mov	r7, r0
 801696a:	4691      	mov	r9, r2
 801696c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016970:	f108 0601 	add.w	r6, r8, #1
 8016974:	42b3      	cmp	r3, r6
 8016976:	db0b      	blt.n	8016990 <__lshift+0x38>
 8016978:	4638      	mov	r0, r7
 801697a:	f7ff fde7 	bl	801654c <_Balloc>
 801697e:	4605      	mov	r5, r0
 8016980:	b948      	cbnz	r0, 8016996 <__lshift+0x3e>
 8016982:	4602      	mov	r2, r0
 8016984:	4b28      	ldr	r3, [pc, #160]	@ (8016a28 <__lshift+0xd0>)
 8016986:	4829      	ldr	r0, [pc, #164]	@ (8016a2c <__lshift+0xd4>)
 8016988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801698c:	f000 fbda 	bl	8017144 <__assert_func>
 8016990:	3101      	adds	r1, #1
 8016992:	005b      	lsls	r3, r3, #1
 8016994:	e7ee      	b.n	8016974 <__lshift+0x1c>
 8016996:	2300      	movs	r3, #0
 8016998:	f100 0114 	add.w	r1, r0, #20
 801699c:	f100 0210 	add.w	r2, r0, #16
 80169a0:	4618      	mov	r0, r3
 80169a2:	4553      	cmp	r3, sl
 80169a4:	db33      	blt.n	8016a0e <__lshift+0xb6>
 80169a6:	6920      	ldr	r0, [r4, #16]
 80169a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169ac:	f104 0314 	add.w	r3, r4, #20
 80169b0:	f019 091f 	ands.w	r9, r9, #31
 80169b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80169b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80169bc:	d02b      	beq.n	8016a16 <__lshift+0xbe>
 80169be:	f1c9 0e20 	rsb	lr, r9, #32
 80169c2:	468a      	mov	sl, r1
 80169c4:	2200      	movs	r2, #0
 80169c6:	6818      	ldr	r0, [r3, #0]
 80169c8:	fa00 f009 	lsl.w	r0, r0, r9
 80169cc:	4310      	orrs	r0, r2
 80169ce:	f84a 0b04 	str.w	r0, [sl], #4
 80169d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80169d6:	459c      	cmp	ip, r3
 80169d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80169dc:	d8f3      	bhi.n	80169c6 <__lshift+0x6e>
 80169de:	ebac 0304 	sub.w	r3, ip, r4
 80169e2:	3b15      	subs	r3, #21
 80169e4:	f023 0303 	bic.w	r3, r3, #3
 80169e8:	3304      	adds	r3, #4
 80169ea:	f104 0015 	add.w	r0, r4, #21
 80169ee:	4560      	cmp	r0, ip
 80169f0:	bf88      	it	hi
 80169f2:	2304      	movhi	r3, #4
 80169f4:	50ca      	str	r2, [r1, r3]
 80169f6:	b10a      	cbz	r2, 80169fc <__lshift+0xa4>
 80169f8:	f108 0602 	add.w	r6, r8, #2
 80169fc:	3e01      	subs	r6, #1
 80169fe:	4638      	mov	r0, r7
 8016a00:	612e      	str	r6, [r5, #16]
 8016a02:	4621      	mov	r1, r4
 8016a04:	f7ff fde2 	bl	80165cc <_Bfree>
 8016a08:	4628      	mov	r0, r5
 8016a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a12:	3301      	adds	r3, #1
 8016a14:	e7c5      	b.n	80169a2 <__lshift+0x4a>
 8016a16:	3904      	subs	r1, #4
 8016a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a20:	459c      	cmp	ip, r3
 8016a22:	d8f9      	bhi.n	8016a18 <__lshift+0xc0>
 8016a24:	e7ea      	b.n	80169fc <__lshift+0xa4>
 8016a26:	bf00      	nop
 8016a28:	08017b08 	.word	0x08017b08
 8016a2c:	08017b19 	.word	0x08017b19

08016a30 <__mcmp>:
 8016a30:	690a      	ldr	r2, [r1, #16]
 8016a32:	4603      	mov	r3, r0
 8016a34:	6900      	ldr	r0, [r0, #16]
 8016a36:	1a80      	subs	r0, r0, r2
 8016a38:	b530      	push	{r4, r5, lr}
 8016a3a:	d10e      	bne.n	8016a5a <__mcmp+0x2a>
 8016a3c:	3314      	adds	r3, #20
 8016a3e:	3114      	adds	r1, #20
 8016a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016a50:	4295      	cmp	r5, r2
 8016a52:	d003      	beq.n	8016a5c <__mcmp+0x2c>
 8016a54:	d205      	bcs.n	8016a62 <__mcmp+0x32>
 8016a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a5a:	bd30      	pop	{r4, r5, pc}
 8016a5c:	42a3      	cmp	r3, r4
 8016a5e:	d3f3      	bcc.n	8016a48 <__mcmp+0x18>
 8016a60:	e7fb      	b.n	8016a5a <__mcmp+0x2a>
 8016a62:	2001      	movs	r0, #1
 8016a64:	e7f9      	b.n	8016a5a <__mcmp+0x2a>
	...

08016a68 <__mdiff>:
 8016a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a6c:	4689      	mov	r9, r1
 8016a6e:	4606      	mov	r6, r0
 8016a70:	4611      	mov	r1, r2
 8016a72:	4648      	mov	r0, r9
 8016a74:	4614      	mov	r4, r2
 8016a76:	f7ff ffdb 	bl	8016a30 <__mcmp>
 8016a7a:	1e05      	subs	r5, r0, #0
 8016a7c:	d112      	bne.n	8016aa4 <__mdiff+0x3c>
 8016a7e:	4629      	mov	r1, r5
 8016a80:	4630      	mov	r0, r6
 8016a82:	f7ff fd63 	bl	801654c <_Balloc>
 8016a86:	4602      	mov	r2, r0
 8016a88:	b928      	cbnz	r0, 8016a96 <__mdiff+0x2e>
 8016a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8016b88 <__mdiff+0x120>)
 8016a8c:	f240 2137 	movw	r1, #567	@ 0x237
 8016a90:	483e      	ldr	r0, [pc, #248]	@ (8016b8c <__mdiff+0x124>)
 8016a92:	f000 fb57 	bl	8017144 <__assert_func>
 8016a96:	2301      	movs	r3, #1
 8016a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a9c:	4610      	mov	r0, r2
 8016a9e:	b003      	add	sp, #12
 8016aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aa4:	bfbc      	itt	lt
 8016aa6:	464b      	movlt	r3, r9
 8016aa8:	46a1      	movlt	r9, r4
 8016aaa:	4630      	mov	r0, r6
 8016aac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016ab0:	bfba      	itte	lt
 8016ab2:	461c      	movlt	r4, r3
 8016ab4:	2501      	movlt	r5, #1
 8016ab6:	2500      	movge	r5, #0
 8016ab8:	f7ff fd48 	bl	801654c <_Balloc>
 8016abc:	4602      	mov	r2, r0
 8016abe:	b918      	cbnz	r0, 8016ac8 <__mdiff+0x60>
 8016ac0:	4b31      	ldr	r3, [pc, #196]	@ (8016b88 <__mdiff+0x120>)
 8016ac2:	f240 2145 	movw	r1, #581	@ 0x245
 8016ac6:	e7e3      	b.n	8016a90 <__mdiff+0x28>
 8016ac8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016acc:	6926      	ldr	r6, [r4, #16]
 8016ace:	60c5      	str	r5, [r0, #12]
 8016ad0:	f109 0310 	add.w	r3, r9, #16
 8016ad4:	f109 0514 	add.w	r5, r9, #20
 8016ad8:	f104 0e14 	add.w	lr, r4, #20
 8016adc:	f100 0b14 	add.w	fp, r0, #20
 8016ae0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016ae4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016ae8:	9301      	str	r3, [sp, #4]
 8016aea:	46d9      	mov	r9, fp
 8016aec:	f04f 0c00 	mov.w	ip, #0
 8016af0:	9b01      	ldr	r3, [sp, #4]
 8016af2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016af6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016afa:	9301      	str	r3, [sp, #4]
 8016afc:	fa1f f38a 	uxth.w	r3, sl
 8016b00:	4619      	mov	r1, r3
 8016b02:	b283      	uxth	r3, r0
 8016b04:	1acb      	subs	r3, r1, r3
 8016b06:	0c00      	lsrs	r0, r0, #16
 8016b08:	4463      	add	r3, ip
 8016b0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016b0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016b18:	4576      	cmp	r6, lr
 8016b1a:	f849 3b04 	str.w	r3, [r9], #4
 8016b1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b22:	d8e5      	bhi.n	8016af0 <__mdiff+0x88>
 8016b24:	1b33      	subs	r3, r6, r4
 8016b26:	3b15      	subs	r3, #21
 8016b28:	f023 0303 	bic.w	r3, r3, #3
 8016b2c:	3415      	adds	r4, #21
 8016b2e:	3304      	adds	r3, #4
 8016b30:	42a6      	cmp	r6, r4
 8016b32:	bf38      	it	cc
 8016b34:	2304      	movcc	r3, #4
 8016b36:	441d      	add	r5, r3
 8016b38:	445b      	add	r3, fp
 8016b3a:	461e      	mov	r6, r3
 8016b3c:	462c      	mov	r4, r5
 8016b3e:	4544      	cmp	r4, r8
 8016b40:	d30e      	bcc.n	8016b60 <__mdiff+0xf8>
 8016b42:	f108 0103 	add.w	r1, r8, #3
 8016b46:	1b49      	subs	r1, r1, r5
 8016b48:	f021 0103 	bic.w	r1, r1, #3
 8016b4c:	3d03      	subs	r5, #3
 8016b4e:	45a8      	cmp	r8, r5
 8016b50:	bf38      	it	cc
 8016b52:	2100      	movcc	r1, #0
 8016b54:	440b      	add	r3, r1
 8016b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b5a:	b191      	cbz	r1, 8016b82 <__mdiff+0x11a>
 8016b5c:	6117      	str	r7, [r2, #16]
 8016b5e:	e79d      	b.n	8016a9c <__mdiff+0x34>
 8016b60:	f854 1b04 	ldr.w	r1, [r4], #4
 8016b64:	46e6      	mov	lr, ip
 8016b66:	0c08      	lsrs	r0, r1, #16
 8016b68:	fa1c fc81 	uxtah	ip, ip, r1
 8016b6c:	4471      	add	r1, lr
 8016b6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016b72:	b289      	uxth	r1, r1
 8016b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016b78:	f846 1b04 	str.w	r1, [r6], #4
 8016b7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b80:	e7dd      	b.n	8016b3e <__mdiff+0xd6>
 8016b82:	3f01      	subs	r7, #1
 8016b84:	e7e7      	b.n	8016b56 <__mdiff+0xee>
 8016b86:	bf00      	nop
 8016b88:	08017b08 	.word	0x08017b08
 8016b8c:	08017b19 	.word	0x08017b19

08016b90 <__d2b>:
 8016b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b94:	460f      	mov	r7, r1
 8016b96:	2101      	movs	r1, #1
 8016b98:	ec59 8b10 	vmov	r8, r9, d0
 8016b9c:	4616      	mov	r6, r2
 8016b9e:	f7ff fcd5 	bl	801654c <_Balloc>
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	b930      	cbnz	r0, 8016bb4 <__d2b+0x24>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	4b23      	ldr	r3, [pc, #140]	@ (8016c38 <__d2b+0xa8>)
 8016baa:	4824      	ldr	r0, [pc, #144]	@ (8016c3c <__d2b+0xac>)
 8016bac:	f240 310f 	movw	r1, #783	@ 0x30f
 8016bb0:	f000 fac8 	bl	8017144 <__assert_func>
 8016bb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016bbc:	b10d      	cbz	r5, 8016bc2 <__d2b+0x32>
 8016bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016bc2:	9301      	str	r3, [sp, #4]
 8016bc4:	f1b8 0300 	subs.w	r3, r8, #0
 8016bc8:	d023      	beq.n	8016c12 <__d2b+0x82>
 8016bca:	4668      	mov	r0, sp
 8016bcc:	9300      	str	r3, [sp, #0]
 8016bce:	f7ff fd84 	bl	80166da <__lo0bits>
 8016bd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016bd6:	b1d0      	cbz	r0, 8016c0e <__d2b+0x7e>
 8016bd8:	f1c0 0320 	rsb	r3, r0, #32
 8016bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8016be0:	430b      	orrs	r3, r1
 8016be2:	40c2      	lsrs	r2, r0
 8016be4:	6163      	str	r3, [r4, #20]
 8016be6:	9201      	str	r2, [sp, #4]
 8016be8:	9b01      	ldr	r3, [sp, #4]
 8016bea:	61a3      	str	r3, [r4, #24]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	bf0c      	ite	eq
 8016bf0:	2201      	moveq	r2, #1
 8016bf2:	2202      	movne	r2, #2
 8016bf4:	6122      	str	r2, [r4, #16]
 8016bf6:	b1a5      	cbz	r5, 8016c22 <__d2b+0x92>
 8016bf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016bfc:	4405      	add	r5, r0
 8016bfe:	603d      	str	r5, [r7, #0]
 8016c00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016c04:	6030      	str	r0, [r6, #0]
 8016c06:	4620      	mov	r0, r4
 8016c08:	b003      	add	sp, #12
 8016c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c0e:	6161      	str	r1, [r4, #20]
 8016c10:	e7ea      	b.n	8016be8 <__d2b+0x58>
 8016c12:	a801      	add	r0, sp, #4
 8016c14:	f7ff fd61 	bl	80166da <__lo0bits>
 8016c18:	9b01      	ldr	r3, [sp, #4]
 8016c1a:	6163      	str	r3, [r4, #20]
 8016c1c:	3020      	adds	r0, #32
 8016c1e:	2201      	movs	r2, #1
 8016c20:	e7e8      	b.n	8016bf4 <__d2b+0x64>
 8016c22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016c26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016c2a:	6038      	str	r0, [r7, #0]
 8016c2c:	6918      	ldr	r0, [r3, #16]
 8016c2e:	f7ff fd35 	bl	801669c <__hi0bits>
 8016c32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016c36:	e7e5      	b.n	8016c04 <__d2b+0x74>
 8016c38:	08017b08 	.word	0x08017b08
 8016c3c:	08017b19 	.word	0x08017b19

08016c40 <__sfputc_r>:
 8016c40:	6893      	ldr	r3, [r2, #8]
 8016c42:	3b01      	subs	r3, #1
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	b410      	push	{r4}
 8016c48:	6093      	str	r3, [r2, #8]
 8016c4a:	da08      	bge.n	8016c5e <__sfputc_r+0x1e>
 8016c4c:	6994      	ldr	r4, [r2, #24]
 8016c4e:	42a3      	cmp	r3, r4
 8016c50:	db01      	blt.n	8016c56 <__sfputc_r+0x16>
 8016c52:	290a      	cmp	r1, #10
 8016c54:	d103      	bne.n	8016c5e <__sfputc_r+0x1e>
 8016c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c5a:	f7fe bc10 	b.w	801547e <__swbuf_r>
 8016c5e:	6813      	ldr	r3, [r2, #0]
 8016c60:	1c58      	adds	r0, r3, #1
 8016c62:	6010      	str	r0, [r2, #0]
 8016c64:	7019      	strb	r1, [r3, #0]
 8016c66:	4608      	mov	r0, r1
 8016c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c6c:	4770      	bx	lr

08016c6e <__sfputs_r>:
 8016c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c70:	4606      	mov	r6, r0
 8016c72:	460f      	mov	r7, r1
 8016c74:	4614      	mov	r4, r2
 8016c76:	18d5      	adds	r5, r2, r3
 8016c78:	42ac      	cmp	r4, r5
 8016c7a:	d101      	bne.n	8016c80 <__sfputs_r+0x12>
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	e007      	b.n	8016c90 <__sfputs_r+0x22>
 8016c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c84:	463a      	mov	r2, r7
 8016c86:	4630      	mov	r0, r6
 8016c88:	f7ff ffda 	bl	8016c40 <__sfputc_r>
 8016c8c:	1c43      	adds	r3, r0, #1
 8016c8e:	d1f3      	bne.n	8016c78 <__sfputs_r+0xa>
 8016c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c94 <_vfiprintf_r>:
 8016c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	460d      	mov	r5, r1
 8016c9a:	b09d      	sub	sp, #116	@ 0x74
 8016c9c:	4614      	mov	r4, r2
 8016c9e:	4698      	mov	r8, r3
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	b118      	cbz	r0, 8016cac <_vfiprintf_r+0x18>
 8016ca4:	6a03      	ldr	r3, [r0, #32]
 8016ca6:	b90b      	cbnz	r3, 8016cac <_vfiprintf_r+0x18>
 8016ca8:	f7fe fb00 	bl	80152ac <__sinit>
 8016cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cae:	07d9      	lsls	r1, r3, #31
 8016cb0:	d405      	bmi.n	8016cbe <_vfiprintf_r+0x2a>
 8016cb2:	89ab      	ldrh	r3, [r5, #12]
 8016cb4:	059a      	lsls	r2, r3, #22
 8016cb6:	d402      	bmi.n	8016cbe <_vfiprintf_r+0x2a>
 8016cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cba:	f7fe fd50 	bl	801575e <__retarget_lock_acquire_recursive>
 8016cbe:	89ab      	ldrh	r3, [r5, #12]
 8016cc0:	071b      	lsls	r3, r3, #28
 8016cc2:	d501      	bpl.n	8016cc8 <_vfiprintf_r+0x34>
 8016cc4:	692b      	ldr	r3, [r5, #16]
 8016cc6:	b99b      	cbnz	r3, 8016cf0 <_vfiprintf_r+0x5c>
 8016cc8:	4629      	mov	r1, r5
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f7fe fc16 	bl	80154fc <__swsetup_r>
 8016cd0:	b170      	cbz	r0, 8016cf0 <_vfiprintf_r+0x5c>
 8016cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cd4:	07dc      	lsls	r4, r3, #31
 8016cd6:	d504      	bpl.n	8016ce2 <_vfiprintf_r+0x4e>
 8016cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cdc:	b01d      	add	sp, #116	@ 0x74
 8016cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce2:	89ab      	ldrh	r3, [r5, #12]
 8016ce4:	0598      	lsls	r0, r3, #22
 8016ce6:	d4f7      	bmi.n	8016cd8 <_vfiprintf_r+0x44>
 8016ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cea:	f7fe fd39 	bl	8015760 <__retarget_lock_release_recursive>
 8016cee:	e7f3      	b.n	8016cd8 <_vfiprintf_r+0x44>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cf4:	2320      	movs	r3, #32
 8016cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8016cfe:	2330      	movs	r3, #48	@ 0x30
 8016d00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016eb0 <_vfiprintf_r+0x21c>
 8016d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016d08:	f04f 0901 	mov.w	r9, #1
 8016d0c:	4623      	mov	r3, r4
 8016d0e:	469a      	mov	sl, r3
 8016d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d14:	b10a      	cbz	r2, 8016d1a <_vfiprintf_r+0x86>
 8016d16:	2a25      	cmp	r2, #37	@ 0x25
 8016d18:	d1f9      	bne.n	8016d0e <_vfiprintf_r+0x7a>
 8016d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8016d1e:	d00b      	beq.n	8016d38 <_vfiprintf_r+0xa4>
 8016d20:	465b      	mov	r3, fp
 8016d22:	4622      	mov	r2, r4
 8016d24:	4629      	mov	r1, r5
 8016d26:	4630      	mov	r0, r6
 8016d28:	f7ff ffa1 	bl	8016c6e <__sfputs_r>
 8016d2c:	3001      	adds	r0, #1
 8016d2e:	f000 80a7 	beq.w	8016e80 <_vfiprintf_r+0x1ec>
 8016d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d34:	445a      	add	r2, fp
 8016d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d38:	f89a 3000 	ldrb.w	r3, [sl]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	f000 809f 	beq.w	8016e80 <_vfiprintf_r+0x1ec>
 8016d42:	2300      	movs	r3, #0
 8016d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d4c:	f10a 0a01 	add.w	sl, sl, #1
 8016d50:	9304      	str	r3, [sp, #16]
 8016d52:	9307      	str	r3, [sp, #28]
 8016d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d5a:	4654      	mov	r4, sl
 8016d5c:	2205      	movs	r2, #5
 8016d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d62:	4853      	ldr	r0, [pc, #332]	@ (8016eb0 <_vfiprintf_r+0x21c>)
 8016d64:	f7e9 fad4 	bl	8000310 <memchr>
 8016d68:	9a04      	ldr	r2, [sp, #16]
 8016d6a:	b9d8      	cbnz	r0, 8016da4 <_vfiprintf_r+0x110>
 8016d6c:	06d1      	lsls	r1, r2, #27
 8016d6e:	bf44      	itt	mi
 8016d70:	2320      	movmi	r3, #32
 8016d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d76:	0713      	lsls	r3, r2, #28
 8016d78:	bf44      	itt	mi
 8016d7a:	232b      	movmi	r3, #43	@ 0x2b
 8016d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d80:	f89a 3000 	ldrb.w	r3, [sl]
 8016d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d86:	d015      	beq.n	8016db4 <_vfiprintf_r+0x120>
 8016d88:	9a07      	ldr	r2, [sp, #28]
 8016d8a:	4654      	mov	r4, sl
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	f04f 0c0a 	mov.w	ip, #10
 8016d92:	4621      	mov	r1, r4
 8016d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d98:	3b30      	subs	r3, #48	@ 0x30
 8016d9a:	2b09      	cmp	r3, #9
 8016d9c:	d94b      	bls.n	8016e36 <_vfiprintf_r+0x1a2>
 8016d9e:	b1b0      	cbz	r0, 8016dce <_vfiprintf_r+0x13a>
 8016da0:	9207      	str	r2, [sp, #28]
 8016da2:	e014      	b.n	8016dce <_vfiprintf_r+0x13a>
 8016da4:	eba0 0308 	sub.w	r3, r0, r8
 8016da8:	fa09 f303 	lsl.w	r3, r9, r3
 8016dac:	4313      	orrs	r3, r2
 8016dae:	9304      	str	r3, [sp, #16]
 8016db0:	46a2      	mov	sl, r4
 8016db2:	e7d2      	b.n	8016d5a <_vfiprintf_r+0xc6>
 8016db4:	9b03      	ldr	r3, [sp, #12]
 8016db6:	1d19      	adds	r1, r3, #4
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	9103      	str	r1, [sp, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	bfbb      	ittet	lt
 8016dc0:	425b      	neglt	r3, r3
 8016dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8016dc6:	9307      	strge	r3, [sp, #28]
 8016dc8:	9307      	strlt	r3, [sp, #28]
 8016dca:	bfb8      	it	lt
 8016dcc:	9204      	strlt	r2, [sp, #16]
 8016dce:	7823      	ldrb	r3, [r4, #0]
 8016dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8016dd2:	d10a      	bne.n	8016dea <_vfiprintf_r+0x156>
 8016dd4:	7863      	ldrb	r3, [r4, #1]
 8016dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016dd8:	d132      	bne.n	8016e40 <_vfiprintf_r+0x1ac>
 8016dda:	9b03      	ldr	r3, [sp, #12]
 8016ddc:	1d1a      	adds	r2, r3, #4
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	9203      	str	r2, [sp, #12]
 8016de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016de6:	3402      	adds	r4, #2
 8016de8:	9305      	str	r3, [sp, #20]
 8016dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ec0 <_vfiprintf_r+0x22c>
 8016dee:	7821      	ldrb	r1, [r4, #0]
 8016df0:	2203      	movs	r2, #3
 8016df2:	4650      	mov	r0, sl
 8016df4:	f7e9 fa8c 	bl	8000310 <memchr>
 8016df8:	b138      	cbz	r0, 8016e0a <_vfiprintf_r+0x176>
 8016dfa:	9b04      	ldr	r3, [sp, #16]
 8016dfc:	eba0 000a 	sub.w	r0, r0, sl
 8016e00:	2240      	movs	r2, #64	@ 0x40
 8016e02:	4082      	lsls	r2, r0
 8016e04:	4313      	orrs	r3, r2
 8016e06:	3401      	adds	r4, #1
 8016e08:	9304      	str	r3, [sp, #16]
 8016e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e0e:	4829      	ldr	r0, [pc, #164]	@ (8016eb4 <_vfiprintf_r+0x220>)
 8016e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016e14:	2206      	movs	r2, #6
 8016e16:	f7e9 fa7b 	bl	8000310 <memchr>
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d03f      	beq.n	8016e9e <_vfiprintf_r+0x20a>
 8016e1e:	4b26      	ldr	r3, [pc, #152]	@ (8016eb8 <_vfiprintf_r+0x224>)
 8016e20:	bb1b      	cbnz	r3, 8016e6a <_vfiprintf_r+0x1d6>
 8016e22:	9b03      	ldr	r3, [sp, #12]
 8016e24:	3307      	adds	r3, #7
 8016e26:	f023 0307 	bic.w	r3, r3, #7
 8016e2a:	3308      	adds	r3, #8
 8016e2c:	9303      	str	r3, [sp, #12]
 8016e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e30:	443b      	add	r3, r7
 8016e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e34:	e76a      	b.n	8016d0c <_vfiprintf_r+0x78>
 8016e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	2001      	movs	r0, #1
 8016e3e:	e7a8      	b.n	8016d92 <_vfiprintf_r+0xfe>
 8016e40:	2300      	movs	r3, #0
 8016e42:	3401      	adds	r4, #1
 8016e44:	9305      	str	r3, [sp, #20]
 8016e46:	4619      	mov	r1, r3
 8016e48:	f04f 0c0a 	mov.w	ip, #10
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e52:	3a30      	subs	r2, #48	@ 0x30
 8016e54:	2a09      	cmp	r2, #9
 8016e56:	d903      	bls.n	8016e60 <_vfiprintf_r+0x1cc>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d0c6      	beq.n	8016dea <_vfiprintf_r+0x156>
 8016e5c:	9105      	str	r1, [sp, #20]
 8016e5e:	e7c4      	b.n	8016dea <_vfiprintf_r+0x156>
 8016e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e64:	4604      	mov	r4, r0
 8016e66:	2301      	movs	r3, #1
 8016e68:	e7f0      	b.n	8016e4c <_vfiprintf_r+0x1b8>
 8016e6a:	ab03      	add	r3, sp, #12
 8016e6c:	9300      	str	r3, [sp, #0]
 8016e6e:	462a      	mov	r2, r5
 8016e70:	4b12      	ldr	r3, [pc, #72]	@ (8016ebc <_vfiprintf_r+0x228>)
 8016e72:	a904      	add	r1, sp, #16
 8016e74:	4630      	mov	r0, r6
 8016e76:	f7fd fde7 	bl	8014a48 <_printf_float>
 8016e7a:	4607      	mov	r7, r0
 8016e7c:	1c78      	adds	r0, r7, #1
 8016e7e:	d1d6      	bne.n	8016e2e <_vfiprintf_r+0x19a>
 8016e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e82:	07d9      	lsls	r1, r3, #31
 8016e84:	d405      	bmi.n	8016e92 <_vfiprintf_r+0x1fe>
 8016e86:	89ab      	ldrh	r3, [r5, #12]
 8016e88:	059a      	lsls	r2, r3, #22
 8016e8a:	d402      	bmi.n	8016e92 <_vfiprintf_r+0x1fe>
 8016e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e8e:	f7fe fc67 	bl	8015760 <__retarget_lock_release_recursive>
 8016e92:	89ab      	ldrh	r3, [r5, #12]
 8016e94:	065b      	lsls	r3, r3, #25
 8016e96:	f53f af1f 	bmi.w	8016cd8 <_vfiprintf_r+0x44>
 8016e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016e9c:	e71e      	b.n	8016cdc <_vfiprintf_r+0x48>
 8016e9e:	ab03      	add	r3, sp, #12
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	462a      	mov	r2, r5
 8016ea4:	4b05      	ldr	r3, [pc, #20]	@ (8016ebc <_vfiprintf_r+0x228>)
 8016ea6:	a904      	add	r1, sp, #16
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	f7fe f855 	bl	8014f58 <_printf_i>
 8016eae:	e7e4      	b.n	8016e7a <_vfiprintf_r+0x1e6>
 8016eb0:	08017b72 	.word	0x08017b72
 8016eb4:	08017b7c 	.word	0x08017b7c
 8016eb8:	08014a49 	.word	0x08014a49
 8016ebc:	08016c6f 	.word	0x08016c6f
 8016ec0:	08017b78 	.word	0x08017b78

08016ec4 <__sflush_r>:
 8016ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	0716      	lsls	r6, r2, #28
 8016ece:	4605      	mov	r5, r0
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	d454      	bmi.n	8016f7e <__sflush_r+0xba>
 8016ed4:	684b      	ldr	r3, [r1, #4]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	dc02      	bgt.n	8016ee0 <__sflush_r+0x1c>
 8016eda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	dd48      	ble.n	8016f72 <__sflush_r+0xae>
 8016ee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016ee2:	2e00      	cmp	r6, #0
 8016ee4:	d045      	beq.n	8016f72 <__sflush_r+0xae>
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016eec:	682f      	ldr	r7, [r5, #0]
 8016eee:	6a21      	ldr	r1, [r4, #32]
 8016ef0:	602b      	str	r3, [r5, #0]
 8016ef2:	d030      	beq.n	8016f56 <__sflush_r+0x92>
 8016ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016ef6:	89a3      	ldrh	r3, [r4, #12]
 8016ef8:	0759      	lsls	r1, r3, #29
 8016efa:	d505      	bpl.n	8016f08 <__sflush_r+0x44>
 8016efc:	6863      	ldr	r3, [r4, #4]
 8016efe:	1ad2      	subs	r2, r2, r3
 8016f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016f02:	b10b      	cbz	r3, 8016f08 <__sflush_r+0x44>
 8016f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016f06:	1ad2      	subs	r2, r2, r3
 8016f08:	2300      	movs	r3, #0
 8016f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016f0c:	6a21      	ldr	r1, [r4, #32]
 8016f0e:	4628      	mov	r0, r5
 8016f10:	47b0      	blx	r6
 8016f12:	1c43      	adds	r3, r0, #1
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	d106      	bne.n	8016f26 <__sflush_r+0x62>
 8016f18:	6829      	ldr	r1, [r5, #0]
 8016f1a:	291d      	cmp	r1, #29
 8016f1c:	d82b      	bhi.n	8016f76 <__sflush_r+0xb2>
 8016f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8016fc8 <__sflush_r+0x104>)
 8016f20:	40ca      	lsrs	r2, r1
 8016f22:	07d6      	lsls	r6, r2, #31
 8016f24:	d527      	bpl.n	8016f76 <__sflush_r+0xb2>
 8016f26:	2200      	movs	r2, #0
 8016f28:	6062      	str	r2, [r4, #4]
 8016f2a:	04d9      	lsls	r1, r3, #19
 8016f2c:	6922      	ldr	r2, [r4, #16]
 8016f2e:	6022      	str	r2, [r4, #0]
 8016f30:	d504      	bpl.n	8016f3c <__sflush_r+0x78>
 8016f32:	1c42      	adds	r2, r0, #1
 8016f34:	d101      	bne.n	8016f3a <__sflush_r+0x76>
 8016f36:	682b      	ldr	r3, [r5, #0]
 8016f38:	b903      	cbnz	r3, 8016f3c <__sflush_r+0x78>
 8016f3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8016f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016f3e:	602f      	str	r7, [r5, #0]
 8016f40:	b1b9      	cbz	r1, 8016f72 <__sflush_r+0xae>
 8016f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f46:	4299      	cmp	r1, r3
 8016f48:	d002      	beq.n	8016f50 <__sflush_r+0x8c>
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	f7ff f9fe 	bl	801634c <_free_r>
 8016f50:	2300      	movs	r3, #0
 8016f52:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f54:	e00d      	b.n	8016f72 <__sflush_r+0xae>
 8016f56:	2301      	movs	r3, #1
 8016f58:	4628      	mov	r0, r5
 8016f5a:	47b0      	blx	r6
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	1c50      	adds	r0, r2, #1
 8016f60:	d1c9      	bne.n	8016ef6 <__sflush_r+0x32>
 8016f62:	682b      	ldr	r3, [r5, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d0c6      	beq.n	8016ef6 <__sflush_r+0x32>
 8016f68:	2b1d      	cmp	r3, #29
 8016f6a:	d001      	beq.n	8016f70 <__sflush_r+0xac>
 8016f6c:	2b16      	cmp	r3, #22
 8016f6e:	d11e      	bne.n	8016fae <__sflush_r+0xea>
 8016f70:	602f      	str	r7, [r5, #0]
 8016f72:	2000      	movs	r0, #0
 8016f74:	e022      	b.n	8016fbc <__sflush_r+0xf8>
 8016f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f7a:	b21b      	sxth	r3, r3
 8016f7c:	e01b      	b.n	8016fb6 <__sflush_r+0xf2>
 8016f7e:	690f      	ldr	r7, [r1, #16]
 8016f80:	2f00      	cmp	r7, #0
 8016f82:	d0f6      	beq.n	8016f72 <__sflush_r+0xae>
 8016f84:	0793      	lsls	r3, r2, #30
 8016f86:	680e      	ldr	r6, [r1, #0]
 8016f88:	bf08      	it	eq
 8016f8a:	694b      	ldreq	r3, [r1, #20]
 8016f8c:	600f      	str	r7, [r1, #0]
 8016f8e:	bf18      	it	ne
 8016f90:	2300      	movne	r3, #0
 8016f92:	eba6 0807 	sub.w	r8, r6, r7
 8016f96:	608b      	str	r3, [r1, #8]
 8016f98:	f1b8 0f00 	cmp.w	r8, #0
 8016f9c:	dde9      	ble.n	8016f72 <__sflush_r+0xae>
 8016f9e:	6a21      	ldr	r1, [r4, #32]
 8016fa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016fa2:	4643      	mov	r3, r8
 8016fa4:	463a      	mov	r2, r7
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	47b0      	blx	r6
 8016faa:	2800      	cmp	r0, #0
 8016fac:	dc08      	bgt.n	8016fc0 <__sflush_r+0xfc>
 8016fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fb6:	81a3      	strh	r3, [r4, #12]
 8016fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc0:	4407      	add	r7, r0
 8016fc2:	eba8 0800 	sub.w	r8, r8, r0
 8016fc6:	e7e7      	b.n	8016f98 <__sflush_r+0xd4>
 8016fc8:	20400001 	.word	0x20400001

08016fcc <_fflush_r>:
 8016fcc:	b538      	push	{r3, r4, r5, lr}
 8016fce:	690b      	ldr	r3, [r1, #16]
 8016fd0:	4605      	mov	r5, r0
 8016fd2:	460c      	mov	r4, r1
 8016fd4:	b913      	cbnz	r3, 8016fdc <_fflush_r+0x10>
 8016fd6:	2500      	movs	r5, #0
 8016fd8:	4628      	mov	r0, r5
 8016fda:	bd38      	pop	{r3, r4, r5, pc}
 8016fdc:	b118      	cbz	r0, 8016fe6 <_fflush_r+0x1a>
 8016fde:	6a03      	ldr	r3, [r0, #32]
 8016fe0:	b90b      	cbnz	r3, 8016fe6 <_fflush_r+0x1a>
 8016fe2:	f7fe f963 	bl	80152ac <__sinit>
 8016fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d0f3      	beq.n	8016fd6 <_fflush_r+0xa>
 8016fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ff0:	07d0      	lsls	r0, r2, #31
 8016ff2:	d404      	bmi.n	8016ffe <_fflush_r+0x32>
 8016ff4:	0599      	lsls	r1, r3, #22
 8016ff6:	d402      	bmi.n	8016ffe <_fflush_r+0x32>
 8016ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ffa:	f7fe fbb0 	bl	801575e <__retarget_lock_acquire_recursive>
 8016ffe:	4628      	mov	r0, r5
 8017000:	4621      	mov	r1, r4
 8017002:	f7ff ff5f 	bl	8016ec4 <__sflush_r>
 8017006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017008:	07da      	lsls	r2, r3, #31
 801700a:	4605      	mov	r5, r0
 801700c:	d4e4      	bmi.n	8016fd8 <_fflush_r+0xc>
 801700e:	89a3      	ldrh	r3, [r4, #12]
 8017010:	059b      	lsls	r3, r3, #22
 8017012:	d4e1      	bmi.n	8016fd8 <_fflush_r+0xc>
 8017014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017016:	f7fe fba3 	bl	8015760 <__retarget_lock_release_recursive>
 801701a:	e7dd      	b.n	8016fd8 <_fflush_r+0xc>

0801701c <__swhatbuf_r>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	460c      	mov	r4, r1
 8017020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017024:	2900      	cmp	r1, #0
 8017026:	b096      	sub	sp, #88	@ 0x58
 8017028:	4615      	mov	r5, r2
 801702a:	461e      	mov	r6, r3
 801702c:	da0d      	bge.n	801704a <__swhatbuf_r+0x2e>
 801702e:	89a3      	ldrh	r3, [r4, #12]
 8017030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017034:	f04f 0100 	mov.w	r1, #0
 8017038:	bf14      	ite	ne
 801703a:	2340      	movne	r3, #64	@ 0x40
 801703c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017040:	2000      	movs	r0, #0
 8017042:	6031      	str	r1, [r6, #0]
 8017044:	602b      	str	r3, [r5, #0]
 8017046:	b016      	add	sp, #88	@ 0x58
 8017048:	bd70      	pop	{r4, r5, r6, pc}
 801704a:	466a      	mov	r2, sp
 801704c:	f000 f848 	bl	80170e0 <_fstat_r>
 8017050:	2800      	cmp	r0, #0
 8017052:	dbec      	blt.n	801702e <__swhatbuf_r+0x12>
 8017054:	9901      	ldr	r1, [sp, #4]
 8017056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801705a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801705e:	4259      	negs	r1, r3
 8017060:	4159      	adcs	r1, r3
 8017062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017066:	e7eb      	b.n	8017040 <__swhatbuf_r+0x24>

08017068 <__smakebuf_r>:
 8017068:	898b      	ldrh	r3, [r1, #12]
 801706a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801706c:	079d      	lsls	r5, r3, #30
 801706e:	4606      	mov	r6, r0
 8017070:	460c      	mov	r4, r1
 8017072:	d507      	bpl.n	8017084 <__smakebuf_r+0x1c>
 8017074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	6123      	str	r3, [r4, #16]
 801707c:	2301      	movs	r3, #1
 801707e:	6163      	str	r3, [r4, #20]
 8017080:	b003      	add	sp, #12
 8017082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017084:	ab01      	add	r3, sp, #4
 8017086:	466a      	mov	r2, sp
 8017088:	f7ff ffc8 	bl	801701c <__swhatbuf_r>
 801708c:	9f00      	ldr	r7, [sp, #0]
 801708e:	4605      	mov	r5, r0
 8017090:	4639      	mov	r1, r7
 8017092:	4630      	mov	r0, r6
 8017094:	f7ff f9ce 	bl	8016434 <_malloc_r>
 8017098:	b948      	cbnz	r0, 80170ae <__smakebuf_r+0x46>
 801709a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801709e:	059a      	lsls	r2, r3, #22
 80170a0:	d4ee      	bmi.n	8017080 <__smakebuf_r+0x18>
 80170a2:	f023 0303 	bic.w	r3, r3, #3
 80170a6:	f043 0302 	orr.w	r3, r3, #2
 80170aa:	81a3      	strh	r3, [r4, #12]
 80170ac:	e7e2      	b.n	8017074 <__smakebuf_r+0xc>
 80170ae:	89a3      	ldrh	r3, [r4, #12]
 80170b0:	6020      	str	r0, [r4, #0]
 80170b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170b6:	81a3      	strh	r3, [r4, #12]
 80170b8:	9b01      	ldr	r3, [sp, #4]
 80170ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80170be:	b15b      	cbz	r3, 80170d8 <__smakebuf_r+0x70>
 80170c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170c4:	4630      	mov	r0, r6
 80170c6:	f000 f81d 	bl	8017104 <_isatty_r>
 80170ca:	b128      	cbz	r0, 80170d8 <__smakebuf_r+0x70>
 80170cc:	89a3      	ldrh	r3, [r4, #12]
 80170ce:	f023 0303 	bic.w	r3, r3, #3
 80170d2:	f043 0301 	orr.w	r3, r3, #1
 80170d6:	81a3      	strh	r3, [r4, #12]
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	431d      	orrs	r5, r3
 80170dc:	81a5      	strh	r5, [r4, #12]
 80170de:	e7cf      	b.n	8017080 <__smakebuf_r+0x18>

080170e0 <_fstat_r>:
 80170e0:	b538      	push	{r3, r4, r5, lr}
 80170e2:	4d07      	ldr	r5, [pc, #28]	@ (8017100 <_fstat_r+0x20>)
 80170e4:	2300      	movs	r3, #0
 80170e6:	4604      	mov	r4, r0
 80170e8:	4608      	mov	r0, r1
 80170ea:	4611      	mov	r1, r2
 80170ec:	602b      	str	r3, [r5, #0]
 80170ee:	f7eb fd1f 	bl	8002b30 <_fstat>
 80170f2:	1c43      	adds	r3, r0, #1
 80170f4:	d102      	bne.n	80170fc <_fstat_r+0x1c>
 80170f6:	682b      	ldr	r3, [r5, #0]
 80170f8:	b103      	cbz	r3, 80170fc <_fstat_r+0x1c>
 80170fa:	6023      	str	r3, [r4, #0]
 80170fc:	bd38      	pop	{r3, r4, r5, pc}
 80170fe:	bf00      	nop
 8017100:	240059bc 	.word	0x240059bc

08017104 <_isatty_r>:
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	4d06      	ldr	r5, [pc, #24]	@ (8017120 <_isatty_r+0x1c>)
 8017108:	2300      	movs	r3, #0
 801710a:	4604      	mov	r4, r0
 801710c:	4608      	mov	r0, r1
 801710e:	602b      	str	r3, [r5, #0]
 8017110:	f7eb fd1e 	bl	8002b50 <_isatty>
 8017114:	1c43      	adds	r3, r0, #1
 8017116:	d102      	bne.n	801711e <_isatty_r+0x1a>
 8017118:	682b      	ldr	r3, [r5, #0]
 801711a:	b103      	cbz	r3, 801711e <_isatty_r+0x1a>
 801711c:	6023      	str	r3, [r4, #0]
 801711e:	bd38      	pop	{r3, r4, r5, pc}
 8017120:	240059bc 	.word	0x240059bc

08017124 <_sbrk_r>:
 8017124:	b538      	push	{r3, r4, r5, lr}
 8017126:	4d06      	ldr	r5, [pc, #24]	@ (8017140 <_sbrk_r+0x1c>)
 8017128:	2300      	movs	r3, #0
 801712a:	4604      	mov	r4, r0
 801712c:	4608      	mov	r0, r1
 801712e:	602b      	str	r3, [r5, #0]
 8017130:	f7eb fd26 	bl	8002b80 <_sbrk>
 8017134:	1c43      	adds	r3, r0, #1
 8017136:	d102      	bne.n	801713e <_sbrk_r+0x1a>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	b103      	cbz	r3, 801713e <_sbrk_r+0x1a>
 801713c:	6023      	str	r3, [r4, #0]
 801713e:	bd38      	pop	{r3, r4, r5, pc}
 8017140:	240059bc 	.word	0x240059bc

08017144 <__assert_func>:
 8017144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017146:	4614      	mov	r4, r2
 8017148:	461a      	mov	r2, r3
 801714a:	4b09      	ldr	r3, [pc, #36]	@ (8017170 <__assert_func+0x2c>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	4605      	mov	r5, r0
 8017150:	68d8      	ldr	r0, [r3, #12]
 8017152:	b14c      	cbz	r4, 8017168 <__assert_func+0x24>
 8017154:	4b07      	ldr	r3, [pc, #28]	@ (8017174 <__assert_func+0x30>)
 8017156:	9100      	str	r1, [sp, #0]
 8017158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801715c:	4906      	ldr	r1, [pc, #24]	@ (8017178 <__assert_func+0x34>)
 801715e:	462b      	mov	r3, r5
 8017160:	f000 f842 	bl	80171e8 <fiprintf>
 8017164:	f000 f852 	bl	801720c <abort>
 8017168:	4b04      	ldr	r3, [pc, #16]	@ (801717c <__assert_func+0x38>)
 801716a:	461c      	mov	r4, r3
 801716c:	e7f3      	b.n	8017156 <__assert_func+0x12>
 801716e:	bf00      	nop
 8017170:	2400003c 	.word	0x2400003c
 8017174:	08017b8d 	.word	0x08017b8d
 8017178:	08017b9a 	.word	0x08017b9a
 801717c:	08017bc8 	.word	0x08017bc8

08017180 <_calloc_r>:
 8017180:	b570      	push	{r4, r5, r6, lr}
 8017182:	fba1 5402 	umull	r5, r4, r1, r2
 8017186:	b934      	cbnz	r4, 8017196 <_calloc_r+0x16>
 8017188:	4629      	mov	r1, r5
 801718a:	f7ff f953 	bl	8016434 <_malloc_r>
 801718e:	4606      	mov	r6, r0
 8017190:	b928      	cbnz	r0, 801719e <_calloc_r+0x1e>
 8017192:	4630      	mov	r0, r6
 8017194:	bd70      	pop	{r4, r5, r6, pc}
 8017196:	220c      	movs	r2, #12
 8017198:	6002      	str	r2, [r0, #0]
 801719a:	2600      	movs	r6, #0
 801719c:	e7f9      	b.n	8017192 <_calloc_r+0x12>
 801719e:	462a      	mov	r2, r5
 80171a0:	4621      	mov	r1, r4
 80171a2:	f7fe fa01 	bl	80155a8 <memset>
 80171a6:	e7f4      	b.n	8017192 <_calloc_r+0x12>

080171a8 <__ascii_mbtowc>:
 80171a8:	b082      	sub	sp, #8
 80171aa:	b901      	cbnz	r1, 80171ae <__ascii_mbtowc+0x6>
 80171ac:	a901      	add	r1, sp, #4
 80171ae:	b142      	cbz	r2, 80171c2 <__ascii_mbtowc+0x1a>
 80171b0:	b14b      	cbz	r3, 80171c6 <__ascii_mbtowc+0x1e>
 80171b2:	7813      	ldrb	r3, [r2, #0]
 80171b4:	600b      	str	r3, [r1, #0]
 80171b6:	7812      	ldrb	r2, [r2, #0]
 80171b8:	1e10      	subs	r0, r2, #0
 80171ba:	bf18      	it	ne
 80171bc:	2001      	movne	r0, #1
 80171be:	b002      	add	sp, #8
 80171c0:	4770      	bx	lr
 80171c2:	4610      	mov	r0, r2
 80171c4:	e7fb      	b.n	80171be <__ascii_mbtowc+0x16>
 80171c6:	f06f 0001 	mvn.w	r0, #1
 80171ca:	e7f8      	b.n	80171be <__ascii_mbtowc+0x16>

080171cc <__ascii_wctomb>:
 80171cc:	4603      	mov	r3, r0
 80171ce:	4608      	mov	r0, r1
 80171d0:	b141      	cbz	r1, 80171e4 <__ascii_wctomb+0x18>
 80171d2:	2aff      	cmp	r2, #255	@ 0xff
 80171d4:	d904      	bls.n	80171e0 <__ascii_wctomb+0x14>
 80171d6:	228a      	movs	r2, #138	@ 0x8a
 80171d8:	601a      	str	r2, [r3, #0]
 80171da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80171de:	4770      	bx	lr
 80171e0:	700a      	strb	r2, [r1, #0]
 80171e2:	2001      	movs	r0, #1
 80171e4:	4770      	bx	lr
	...

080171e8 <fiprintf>:
 80171e8:	b40e      	push	{r1, r2, r3}
 80171ea:	b503      	push	{r0, r1, lr}
 80171ec:	4601      	mov	r1, r0
 80171ee:	ab03      	add	r3, sp, #12
 80171f0:	4805      	ldr	r0, [pc, #20]	@ (8017208 <fiprintf+0x20>)
 80171f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80171f6:	6800      	ldr	r0, [r0, #0]
 80171f8:	9301      	str	r3, [sp, #4]
 80171fa:	f7ff fd4b 	bl	8016c94 <_vfiprintf_r>
 80171fe:	b002      	add	sp, #8
 8017200:	f85d eb04 	ldr.w	lr, [sp], #4
 8017204:	b003      	add	sp, #12
 8017206:	4770      	bx	lr
 8017208:	2400003c 	.word	0x2400003c

0801720c <abort>:
 801720c:	b508      	push	{r3, lr}
 801720e:	2006      	movs	r0, #6
 8017210:	f000 f82c 	bl	801726c <raise>
 8017214:	2001      	movs	r0, #1
 8017216:	f7eb fc57 	bl	8002ac8 <_exit>

0801721a <_raise_r>:
 801721a:	291f      	cmp	r1, #31
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4605      	mov	r5, r0
 8017220:	460c      	mov	r4, r1
 8017222:	d904      	bls.n	801722e <_raise_r+0x14>
 8017224:	2316      	movs	r3, #22
 8017226:	6003      	str	r3, [r0, #0]
 8017228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801722c:	bd38      	pop	{r3, r4, r5, pc}
 801722e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017230:	b112      	cbz	r2, 8017238 <_raise_r+0x1e>
 8017232:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017236:	b94b      	cbnz	r3, 801724c <_raise_r+0x32>
 8017238:	4628      	mov	r0, r5
 801723a:	f000 f831 	bl	80172a0 <_getpid_r>
 801723e:	4622      	mov	r2, r4
 8017240:	4601      	mov	r1, r0
 8017242:	4628      	mov	r0, r5
 8017244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017248:	f000 b818 	b.w	801727c <_kill_r>
 801724c:	2b01      	cmp	r3, #1
 801724e:	d00a      	beq.n	8017266 <_raise_r+0x4c>
 8017250:	1c59      	adds	r1, r3, #1
 8017252:	d103      	bne.n	801725c <_raise_r+0x42>
 8017254:	2316      	movs	r3, #22
 8017256:	6003      	str	r3, [r0, #0]
 8017258:	2001      	movs	r0, #1
 801725a:	e7e7      	b.n	801722c <_raise_r+0x12>
 801725c:	2100      	movs	r1, #0
 801725e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017262:	4620      	mov	r0, r4
 8017264:	4798      	blx	r3
 8017266:	2000      	movs	r0, #0
 8017268:	e7e0      	b.n	801722c <_raise_r+0x12>
	...

0801726c <raise>:
 801726c:	4b02      	ldr	r3, [pc, #8]	@ (8017278 <raise+0xc>)
 801726e:	4601      	mov	r1, r0
 8017270:	6818      	ldr	r0, [r3, #0]
 8017272:	f7ff bfd2 	b.w	801721a <_raise_r>
 8017276:	bf00      	nop
 8017278:	2400003c 	.word	0x2400003c

0801727c <_kill_r>:
 801727c:	b538      	push	{r3, r4, r5, lr}
 801727e:	4d07      	ldr	r5, [pc, #28]	@ (801729c <_kill_r+0x20>)
 8017280:	2300      	movs	r3, #0
 8017282:	4604      	mov	r4, r0
 8017284:	4608      	mov	r0, r1
 8017286:	4611      	mov	r1, r2
 8017288:	602b      	str	r3, [r5, #0]
 801728a:	f7eb fc0d 	bl	8002aa8 <_kill>
 801728e:	1c43      	adds	r3, r0, #1
 8017290:	d102      	bne.n	8017298 <_kill_r+0x1c>
 8017292:	682b      	ldr	r3, [r5, #0]
 8017294:	b103      	cbz	r3, 8017298 <_kill_r+0x1c>
 8017296:	6023      	str	r3, [r4, #0]
 8017298:	bd38      	pop	{r3, r4, r5, pc}
 801729a:	bf00      	nop
 801729c:	240059bc 	.word	0x240059bc

080172a0 <_getpid_r>:
 80172a0:	f7eb bbfa 	b.w	8002a98 <_getpid>

080172a4 <atan2f>:
 80172a4:	f000 b800 	b.w	80172a8 <__ieee754_atan2f>

080172a8 <__ieee754_atan2f>:
 80172a8:	ee10 2a90 	vmov	r2, s1
 80172ac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80172b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80172b4:	b510      	push	{r4, lr}
 80172b6:	eef0 7a40 	vmov.f32	s15, s0
 80172ba:	d806      	bhi.n	80172ca <__ieee754_atan2f+0x22>
 80172bc:	ee10 0a10 	vmov	r0, s0
 80172c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80172c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80172c8:	d904      	bls.n	80172d4 <__ieee754_atan2f+0x2c>
 80172ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80172ce:	eeb0 0a67 	vmov.f32	s0, s15
 80172d2:	bd10      	pop	{r4, pc}
 80172d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80172d8:	d103      	bne.n	80172e2 <__ieee754_atan2f+0x3a>
 80172da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172de:	f000 b881 	b.w	80173e4 <atanf>
 80172e2:	1794      	asrs	r4, r2, #30
 80172e4:	f004 0402 	and.w	r4, r4, #2
 80172e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80172ec:	b93b      	cbnz	r3, 80172fe <__ieee754_atan2f+0x56>
 80172ee:	2c02      	cmp	r4, #2
 80172f0:	d05c      	beq.n	80173ac <__ieee754_atan2f+0x104>
 80172f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80173c0 <__ieee754_atan2f+0x118>
 80172f6:	2c03      	cmp	r4, #3
 80172f8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80172fc:	e7e7      	b.n	80172ce <__ieee754_atan2f+0x26>
 80172fe:	b939      	cbnz	r1, 8017310 <__ieee754_atan2f+0x68>
 8017300:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80173c4 <__ieee754_atan2f+0x11c>
 8017304:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80173c8 <__ieee754_atan2f+0x120>
 8017308:	2800      	cmp	r0, #0
 801730a:	fe67 7a27 	vselge.f32	s15, s14, s15
 801730e:	e7de      	b.n	80172ce <__ieee754_atan2f+0x26>
 8017310:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8017314:	d110      	bne.n	8017338 <__ieee754_atan2f+0x90>
 8017316:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801731a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801731e:	d107      	bne.n	8017330 <__ieee754_atan2f+0x88>
 8017320:	2c02      	cmp	r4, #2
 8017322:	d846      	bhi.n	80173b2 <__ieee754_atan2f+0x10a>
 8017324:	4b29      	ldr	r3, [pc, #164]	@ (80173cc <__ieee754_atan2f+0x124>)
 8017326:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801732a:	edd3 7a00 	vldr	s15, [r3]
 801732e:	e7ce      	b.n	80172ce <__ieee754_atan2f+0x26>
 8017330:	2c02      	cmp	r4, #2
 8017332:	d841      	bhi.n	80173b8 <__ieee754_atan2f+0x110>
 8017334:	4b26      	ldr	r3, [pc, #152]	@ (80173d0 <__ieee754_atan2f+0x128>)
 8017336:	e7f6      	b.n	8017326 <__ieee754_atan2f+0x7e>
 8017338:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801733c:	d0e0      	beq.n	8017300 <__ieee754_atan2f+0x58>
 801733e:	1a5b      	subs	r3, r3, r1
 8017340:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8017344:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8017348:	da1a      	bge.n	8017380 <__ieee754_atan2f+0xd8>
 801734a:	2a00      	cmp	r2, #0
 801734c:	da01      	bge.n	8017352 <__ieee754_atan2f+0xaa>
 801734e:	313c      	adds	r1, #60	@ 0x3c
 8017350:	db19      	blt.n	8017386 <__ieee754_atan2f+0xde>
 8017352:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8017356:	f000 f919 	bl	801758c <fabsf>
 801735a:	f000 f843 	bl	80173e4 <atanf>
 801735e:	eef0 7a40 	vmov.f32	s15, s0
 8017362:	2c01      	cmp	r4, #1
 8017364:	d012      	beq.n	801738c <__ieee754_atan2f+0xe4>
 8017366:	2c02      	cmp	r4, #2
 8017368:	d017      	beq.n	801739a <__ieee754_atan2f+0xf2>
 801736a:	2c00      	cmp	r4, #0
 801736c:	d0af      	beq.n	80172ce <__ieee754_atan2f+0x26>
 801736e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80173d4 <__ieee754_atan2f+0x12c>
 8017372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017376:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80173d8 <__ieee754_atan2f+0x130>
 801737a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801737e:	e7a6      	b.n	80172ce <__ieee754_atan2f+0x26>
 8017380:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80173c8 <__ieee754_atan2f+0x120>
 8017384:	e7ed      	b.n	8017362 <__ieee754_atan2f+0xba>
 8017386:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80173dc <__ieee754_atan2f+0x134>
 801738a:	e7ea      	b.n	8017362 <__ieee754_atan2f+0xba>
 801738c:	ee17 3a90 	vmov	r3, s15
 8017390:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8017394:	ee07 3a90 	vmov	s15, r3
 8017398:	e799      	b.n	80172ce <__ieee754_atan2f+0x26>
 801739a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80173d4 <__ieee754_atan2f+0x12c>
 801739e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80173d8 <__ieee754_atan2f+0x130>
 80173a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173aa:	e790      	b.n	80172ce <__ieee754_atan2f+0x26>
 80173ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80173d8 <__ieee754_atan2f+0x130>
 80173b0:	e78d      	b.n	80172ce <__ieee754_atan2f+0x26>
 80173b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80173e0 <__ieee754_atan2f+0x138>
 80173b6:	e78a      	b.n	80172ce <__ieee754_atan2f+0x26>
 80173b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80173dc <__ieee754_atan2f+0x134>
 80173bc:	e787      	b.n	80172ce <__ieee754_atan2f+0x26>
 80173be:	bf00      	nop
 80173c0:	c0490fdb 	.word	0xc0490fdb
 80173c4:	bfc90fdb 	.word	0xbfc90fdb
 80173c8:	3fc90fdb 	.word	0x3fc90fdb
 80173cc:	08017dd8 	.word	0x08017dd8
 80173d0:	08017dcc 	.word	0x08017dcc
 80173d4:	33bbbd2e 	.word	0x33bbbd2e
 80173d8:	40490fdb 	.word	0x40490fdb
 80173dc:	00000000 	.word	0x00000000
 80173e0:	3f490fdb 	.word	0x3f490fdb

080173e4 <atanf>:
 80173e4:	b538      	push	{r3, r4, r5, lr}
 80173e6:	ee10 5a10 	vmov	r5, s0
 80173ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80173ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80173f2:	eef0 7a40 	vmov.f32	s15, s0
 80173f6:	d30f      	bcc.n	8017418 <atanf+0x34>
 80173f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80173fc:	d904      	bls.n	8017408 <atanf+0x24>
 80173fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017402:	eeb0 0a67 	vmov.f32	s0, s15
 8017406:	bd38      	pop	{r3, r4, r5, pc}
 8017408:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017540 <atanf+0x15c>
 801740c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017544 <atanf+0x160>
 8017410:	2d00      	cmp	r5, #0
 8017412:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8017416:	e7f4      	b.n	8017402 <atanf+0x1e>
 8017418:	4b4b      	ldr	r3, [pc, #300]	@ (8017548 <atanf+0x164>)
 801741a:	429c      	cmp	r4, r3
 801741c:	d810      	bhi.n	8017440 <atanf+0x5c>
 801741e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017422:	d20a      	bcs.n	801743a <atanf+0x56>
 8017424:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801754c <atanf+0x168>
 8017428:	ee30 7a07 	vadd.f32	s14, s0, s14
 801742c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017430:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017438:	dce3      	bgt.n	8017402 <atanf+0x1e>
 801743a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801743e:	e013      	b.n	8017468 <atanf+0x84>
 8017440:	f000 f8a4 	bl	801758c <fabsf>
 8017444:	4b42      	ldr	r3, [pc, #264]	@ (8017550 <atanf+0x16c>)
 8017446:	429c      	cmp	r4, r3
 8017448:	d84f      	bhi.n	80174ea <atanf+0x106>
 801744a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801744e:	429c      	cmp	r4, r3
 8017450:	d841      	bhi.n	80174d6 <atanf+0xf2>
 8017452:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017456:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801745a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801745e:	2300      	movs	r3, #0
 8017460:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017464:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017468:	1c5a      	adds	r2, r3, #1
 801746a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801746e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8017554 <atanf+0x170>
 8017472:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8017558 <atanf+0x174>
 8017476:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 801755c <atanf+0x178>
 801747a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801747e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017482:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8017560 <atanf+0x17c>
 8017486:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801748a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8017564 <atanf+0x180>
 801748e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017492:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8017568 <atanf+0x184>
 8017496:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801749a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801756c <atanf+0x188>
 801749e:	eee7 5a26 	vfma.f32	s11, s14, s13
 80174a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8017570 <atanf+0x18c>
 80174a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80174aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017574 <atanf+0x190>
 80174ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 80174b2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8017578 <atanf+0x194>
 80174b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80174ba:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801757c <atanf+0x198>
 80174be:	eea5 7a26 	vfma.f32	s14, s10, s13
 80174c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80174c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80174ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80174ce:	d121      	bne.n	8017514 <atanf+0x130>
 80174d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174d4:	e795      	b.n	8017402 <atanf+0x1e>
 80174d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80174da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80174de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80174e2:	2301      	movs	r3, #1
 80174e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80174e8:	e7be      	b.n	8017468 <atanf+0x84>
 80174ea:	4b25      	ldr	r3, [pc, #148]	@ (8017580 <atanf+0x19c>)
 80174ec:	429c      	cmp	r4, r3
 80174ee:	d80b      	bhi.n	8017508 <atanf+0x124>
 80174f0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80174f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80174f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80174fc:	2302      	movs	r3, #2
 80174fe:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017506:	e7af      	b.n	8017468 <atanf+0x84>
 8017508:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801750c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017510:	2303      	movs	r3, #3
 8017512:	e7a9      	b.n	8017468 <atanf+0x84>
 8017514:	4a1b      	ldr	r2, [pc, #108]	@ (8017584 <atanf+0x1a0>)
 8017516:	491c      	ldr	r1, [pc, #112]	@ (8017588 <atanf+0x1a4>)
 8017518:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801751c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017520:	edd3 6a00 	vldr	s13, [r3]
 8017524:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017528:	2d00      	cmp	r5, #0
 801752a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801752e:	edd2 7a00 	vldr	s15, [r2]
 8017532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017536:	bfb8      	it	lt
 8017538:	eef1 7a67 	vneglt.f32	s15, s15
 801753c:	e761      	b.n	8017402 <atanf+0x1e>
 801753e:	bf00      	nop
 8017540:	bfc90fdb 	.word	0xbfc90fdb
 8017544:	3fc90fdb 	.word	0x3fc90fdb
 8017548:	3edfffff 	.word	0x3edfffff
 801754c:	7149f2ca 	.word	0x7149f2ca
 8017550:	3f97ffff 	.word	0x3f97ffff
 8017554:	3c8569d7 	.word	0x3c8569d7
 8017558:	3d4bda59 	.word	0x3d4bda59
 801755c:	bd6ef16b 	.word	0xbd6ef16b
 8017560:	3d886b35 	.word	0x3d886b35
 8017564:	3dba2e6e 	.word	0x3dba2e6e
 8017568:	3e124925 	.word	0x3e124925
 801756c:	3eaaaaab 	.word	0x3eaaaaab
 8017570:	bd15a221 	.word	0xbd15a221
 8017574:	bd9d8795 	.word	0xbd9d8795
 8017578:	bde38e38 	.word	0xbde38e38
 801757c:	be4ccccd 	.word	0xbe4ccccd
 8017580:	401bffff 	.word	0x401bffff
 8017584:	08017df4 	.word	0x08017df4
 8017588:	08017de4 	.word	0x08017de4

0801758c <fabsf>:
 801758c:	ee10 3a10 	vmov	r3, s0
 8017590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017594:	ee00 3a10 	vmov	s0, r3
 8017598:	4770      	bx	lr
	...

0801759c <_init>:
 801759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759e:	bf00      	nop
 80175a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175a2:	bc08      	pop	{r3}
 80175a4:	469e      	mov	lr, r3
 80175a6:	4770      	bx	lr

080175a8 <_fini>:
 80175a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175aa:	bf00      	nop
 80175ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ae:	bc08      	pop	{r3}
 80175b0:	469e      	mov	lr, r3
 80175b2:	4770      	bx	lr
