
05 - Complete Code H7 FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d0c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001294  08019fe0  08019fe0  0001afe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b274  0801b274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b27c  0801b27c  0001c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b280  0801b280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  24000000  0801b284  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a94  240001ec  0801b470  0001d1ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005c80  0801b470  0001dc80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d1ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c76a  00000000  00000000  0001d21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000078c6  00000000  00000000  00059984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c38  00000000  00000000  00061250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002222  00000000  00000000  00063e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414c0  00000000  00000000  000660aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038537  00000000  00000000  000a756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f914  00000000  00000000  000dfaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025f3b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c8bc  00000000  00000000  0025f3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0026bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001ec 	.word	0x240001ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019fc4 	.word	0x08019fc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f0 	.word	0x240001f0
 800030c:	08019fc4 	.word	0x08019fc4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f043 0201 	orr.w	r2, r3, #1
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f023 0201 	bic.w	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6a1a      	ldr	r2, [r3, #32]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	431a      	orrs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	621a      	str	r2, [r3, #32]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a1a      	ldr	r2, [r3, #32]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	43db      	mvns	r3, r3
 8000760:	401a      	ands	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	621a      	str	r2, [r3, #32]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <Buzzer_PlayTone>:
  * @param  delays: Array of delay durations in milliseconds for each tone
  * @param  numTones: Number of tones to play
  * @retval None
  */
void Buzzer_PlayTone(uint16_t *prescalers, uint16_t *delays, uint8_t numTones)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	4613      	mov	r3, r2
 8000780:	71fb      	strb	r3, [r7, #7]
    // Enable the timer and channel
    LL_TIM_EnableCounter(BUZZER_TIM);
 8000782:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000786:	f7ff ffb1 	bl	80006ec <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 800078a:	2101      	movs	r1, #1
 800078c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000790:	f7ff ffcc 	bl	800072c <LL_TIM_CC_EnableChannel>

    // Set duty cycle (e.g., 25% as in original code)
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 8000794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a8:	4913      	ldr	r1, [pc, #76]	@ (80007f8 <Buzzer_PlayTone+0x84>)
 80007aa:	fba1 1303 	umull	r1, r3, r1, r3
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	6353      	str	r3, [r2, #52]	@ 0x34

    // Play each tone
    for (uint8_t i = 0; i < numTones; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e012      	b.n	80007de <Buzzer_PlayTone+0x6a>
    {
        BUZZER_TIM->PSC = prescalers[i];
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
        HAL_Delay(delays[i]);
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fd0e 	bl	80051f4 <HAL_Delay>
    for (uint8_t i = 0; i < numTones; i++)
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	3301      	adds	r3, #1
 80007dc:	75fb      	strb	r3, [r7, #23]
 80007de:	7dfa      	ldrb	r2, [r7, #23]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d3e8      	bcc.n	80007b8 <Buzzer_PlayTone+0x44>
    }

    // Disable the timer to stop the buzzer
    LL_TIM_DisableCounter(BUZZER_TIM);
 80007e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007ea:	f7ff ff8f 	bl	800070c <LL_TIM_DisableCounter>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	51eb851f 	.word	0x51eb851f

080007fc <Buzzer_On>:
  * @brief  Turn the buzzer on with a specific prescaler
  * @param  prescaler: Timer prescaler value
  * @retval None
  */
void Buzzer_On(uint16_t prescaler)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
    BUZZER_TIM->PSC = prescaler;
 8000806:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	6293      	str	r3, [r2, #40]	@ 0x28
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 800080e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009a      	lsls	r2, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000822:	4909      	ldr	r1, [pc, #36]	@ (8000848 <Buzzer_On+0x4c>)
 8000824:	fba1 1303 	umull	r1, r3, r1, r3
 8000828:	095b      	lsrs	r3, r3, #5
 800082a:	6353      	str	r3, [r2, #52]	@ 0x34
    LL_TIM_EnableCounter(BUZZER_TIM);
 800082c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000830:	f7ff ff5c 	bl	80006ec <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000834:	2101      	movs	r1, #1
 8000836:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800083a:	f7ff ff77 	bl	800072c <LL_TIM_CC_EnableChannel>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	51eb851f 	.word	0x51eb851f

0800084c <Buzzer_Off>:
/**
  * @brief  Turn the buzzer off
  * @retval None
  */
void Buzzer_Off(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
//    LL_TIM_DisableCounter(BUZZER_TIM);
    LL_TIM_CC_DisableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000850:	2101      	movs	r1, #1
 8000852:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000856:	f7ff ff7a 	bl	800074e <LL_TIM_CC_DisableChannel>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <StartupTone>:
/**
  * @brief  Play the startup tone sequence
  * @retval None
  */
void StartupTone(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
    // Define the startup tone sequence
    uint16_t prescalers[] = {1092, 592, 292};
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <StartupTone+0x40>)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	6018      	str	r0, [r3, #0]
 8000872:	3304      	adds	r3, #4
 8000874:	8019      	strh	r1, [r3, #0]
    uint16_t delays[] = {100, 100, 100};
 8000876:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <StartupTone+0x44>)
 8000878:	463b      	mov	r3, r7
 800087a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	3304      	adds	r3, #4
 8000882:	8019      	strh	r1, [r3, #0]
    uint8_t numTones = 3;
 8000884:	2303      	movs	r3, #3
 8000886:	73fb      	strb	r3, [r7, #15]

    // Play the sequence using Buzzer_PlayTone
    Buzzer_PlayTone(prescalers, delays, numTones);
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	4639      	mov	r1, r7
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff6f 	bl	8000774 <Buzzer_PlayTone>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	08019fe0 	.word	0x08019fe0
 80008a4:	08019fe8 	.word	0x08019fe8

080008a8 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b096      	sub	sp, #88	@ 0x58
 80008ac:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2250      	movs	r2, #80	@ 0x50
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f017 fd07 	bl	80182c8 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 80008be:	239f      	movs	r3, #159	@ 0x9f
 80008c0:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80008d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 80008d8:	2303      	movs	r3, #3
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008ea:	4619      	mov	r1, r3
 80008ec:	4815      	ldr	r0, [pc, #84]	@ (8000944 <EEPROM_Init+0x9c>)
 80008ee:	f009 fbb3 	bl	800a058 <HAL_OSPI_Command>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 80008f8:	4813      	ldr	r0, [pc, #76]	@ (8000948 <EEPROM_Init+0xa0>)
 80008fa:	f017 fc05 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000902:	e01b      	b.n	800093c <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000904:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <EEPROM_Init+0x9c>)
 8000910:	f009 fca2 	bl	800a258 <HAL_OSPI_Receive>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <EEPROM_Init+0xa4>)
 800091c:	f017 fbf4 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000924:	e00a      	b.n	800093c <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8000926:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800092a:	2bef      	cmp	r3, #239	@ 0xef
 800092c:	d005      	beq.n	800093a <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 800092e:	4808      	ldr	r0, [pc, #32]	@ (8000950 <EEPROM_Init+0xa8>)
 8000930:	f017 fbea 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000938:	e000      	b.n	800093c <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3758      	adds	r7, #88	@ 0x58
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000bb8 	.word	0x24000bb8
 8000948:	08019ff0 	.word	0x08019ff0
 800094c:	0801a018 	.word	0x0801a018
 8000950:	0801a034 	.word	0x0801a034

08000954 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b0a8      	sub	sp, #160	@ 0xa0
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2290      	movs	r2, #144	@ 0x90
 8000962:	4619      	mov	r1, r3
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fa49 	bl	8000dfc <W25Qxx_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8000970:	4812      	ldr	r0, [pc, #72]	@ (80009bc <EEPROM_ReadConfig+0x68>)
 8000972:	f017 fbc9 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800097a:	e01b      	b.n	80009b4 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2290      	movs	r2, #144	@ 0x90
 8000986:	4619      	mov	r1, r3
 8000988:	f017 fd7b 	bl	8018482 <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 800098c:	218c      	movs	r1, #140	@ 0x8c
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f83c 	bl	8000a0c <CalculateCRC32>
 8000994:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d005      	beq.n	80009b2 <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <EEPROM_ReadConfig+0x6c>)
 80009a8:	f017 fbae 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b0:	e000      	b.n	80009b4 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	37a0      	adds	r7, #160	@ 0xa0
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0801a048 	.word	0x0801a048
 80009c0:	0801a068 	.word	0x0801a068

080009c4 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0a6      	sub	sp, #152	@ 0x98
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4611      	mov	r1, r2
 80009d4:	2290      	movs	r2, #144	@ 0x90
 80009d6:	4618      	mov	r0, r3
 80009d8:	f017 fd53 	bl	8018482 <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2290      	movs	r2, #144	@ 0x90
 80009e2:	4619      	mov	r1, r3
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fa5d 	bl	8000ea4 <W25Qxx_Write>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <EEPROM_WriteConfig+0x44>)
 80009f2:	f017 fb89 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009fa:	e000      	b.n	80009fe <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3798      	adds	r7, #152	@ 0x98
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	0801a084 	.word	0x0801a084

08000a0c <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a1a:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <CalculateCRC32+0x70>)
 8000a1e:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	e01f      	b.n	8000a66 <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	4053      	eors	r3, r2
 8000a34:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e00e      	b.n	8000a5a <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da05      	bge.n	8000a4e <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4053      	eors	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e002      	b.n	8000a54 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	3301      	adds	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9ed      	bls.n	8000a3c <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	3301      	adds	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3db      	bcc.n	8000a26 <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 8000a6e:	697b      	ldr	r3, [r7, #20]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	04c11db7 	.word	0x04c11db7

08000a80 <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0aa      	sub	sp, #168	@ 0xa8
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff61 	bl	8000954 <EEPROM_ReadConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d012      	beq.n	8000abe <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8000a98:	481c      	ldr	r0, [pc, #112]	@ (8000b0c <EEPROM_GetAccelCalibration+0x8c>)
 8000a9a:	f017 fb35 	bl	8018108 <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f103 0208 	add.w	r2, r3, #8
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3304      	adds	r3, #4
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000abc:	e021      	b.n	8000b02 <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f017 fcdb 	bl	8018482 <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	edd3 6a00 	vldr	s13, [r3]
 8000aea:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000aee:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000af2:	ed8d 7b00 	vstr	d7, [sp]
 8000af6:	ec53 2b15 	vmov	r2, r3, d5
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <EEPROM_GetAccelCalibration+0x90>)
 8000afc:	f017 fa9c 	bl	8018038 <iprintf>
    return W25Qxx_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3798      	adds	r7, #152	@ 0x98
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	0801a0a4 	.word	0x0801a0a4
 8000b10:	0801a0d8 	.word	0x0801a0d8

08000b14 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0aa      	sub	sp, #168	@ 0xa8
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff17 	bl	8000954 <EEPROM_ReadConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d012      	beq.n	8000b52 <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 8000b2c:	481c      	ldr	r0, [pc, #112]	@ (8000ba0 <EEPROM_GetGyroCalibration+0x8c>)
 8000b2e:	f017 faeb 	bl	8018108 <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f103 0208 	add.w	r2, r3, #8
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3304      	adds	r3, #4
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b50:	e022      	b.n	8000b98 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	330c      	adds	r3, #12
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f017 fc90 	bl	8018482 <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3304      	adds	r3, #4
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	edd3 6a00 	vldr	s13, [r3]
 8000b80:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b88:	ed8d 7b00 	vstr	d7, [sp]
 8000b8c:	ec53 2b15 	vmov	r2, r3, d5
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <EEPROM_GetGyroCalibration+0x90>)
 8000b92:	f017 fa51 	bl	8018038 <iprintf>
    return W25Qxx_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3798      	adds	r7, #152	@ 0x98
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	0801a134 	.word	0x0801a134
 8000ba4:	0801a168 	.word	0x0801a168

08000ba8 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0a6      	sub	sp, #152	@ 0x98
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fecd 	bl	8000954 <EEPROM_ReadConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d012      	beq.n	8000be6 <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 8000bc0:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <EEPROM_GetMagCalibration+0x58>)
 8000bc2:	f017 faa1 	bl	8018108 <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f103 0208 	add.w	r2, r3, #8
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be4:	e008      	b.n	8000bf8 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	3318      	adds	r3, #24
 8000bec:	220c      	movs	r2, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f017 fc46 	bl	8018482 <memcpy>
    return W25Qxx_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3798      	adds	r7, #152	@ 0x98
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	0801a1c4 	.word	0x0801a1c4

08000c04 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0a6      	sub	sp, #152	@ 0x98
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe9f 	bl	8000954 <EEPROM_ReadConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d005      	beq.n	8000c28 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <EEPROM_GetPID+0x40>)
 8000c1e:	f017 fa73 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c26:	e008      	b.n	8000c3a <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	3324      	adds	r3, #36	@ 0x24
 8000c2e:	220c      	movs	r2, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f017 fc25 	bl	8018482 <memcpy>
    return W25Qxx_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3798      	adds	r7, #152	@ 0x98
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0801a224 	.word	0x0801a224

08000c48 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0a6      	sub	sp, #152	@ 0x98
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe7d 	bl	8000954 <EEPROM_ReadConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <EEPROM_GetRollPID+0x40>)
 8000c62:	f017 fa51 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c6a:	e008      	b.n	8000c7e <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	3340      	adds	r3, #64	@ 0x40
 8000c72:	2218      	movs	r2, #24
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f017 fc03 	bl	8018482 <memcpy>
    return W25Qxx_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3798      	adds	r7, #152	@ 0x98
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	0801a31c 	.word	0x0801a31c

08000c8c <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0a6      	sub	sp, #152	@ 0x98
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe5b 	bl	8000954 <EEPROM_ReadConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 8000ca4:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <EEPROM_GetPitchPID+0x40>)
 8000ca6:	f017 fa2f 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cae:	e008      	b.n	8000cc2 <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	3358      	adds	r3, #88	@ 0x58
 8000cb6:	2218      	movs	r2, #24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f017 fbe1 	bl	8018482 <memcpy>
    return W25Qxx_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3798      	adds	r7, #152	@ 0x98
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0801a374 	.word	0x0801a374

08000cd0 <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0a6      	sub	sp, #152	@ 0x98
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe39 	bl	8000954 <EEPROM_ReadConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <EEPROM_GetYawRatePID+0x40>)
 8000cea:	f017 fa0d 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf2:	e008      	b.n	8000d06 <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	3370      	adds	r3, #112	@ 0x70
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f017 fbbf 	bl	8018482 <memcpy>
    return W25Qxx_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3798      	adds	r7, #152	@ 0x98
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	0801a3cc 	.word	0x0801a3cc

08000d14 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b0a7      	sub	sp, #156	@ 0x9c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe17 	bl	8000954 <EEPROM_ReadConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 8000d2c:	480a      	ldr	r0, [pc, #40]	@ (8000d58 <EEPROM_GetAircraftLights+0x44>)
 8000d2e:	f017 f9eb 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d36:	e00a      	b.n	8000d4e <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d42:	6020      	str	r0, [r4, #0]
 8000d44:	6061      	str	r1, [r4, #4]
 8000d46:	60a2      	str	r2, [r4, #8]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	379c      	adds	r7, #156	@ 0x9c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0801a424 	.word	0x0801a424

08000d5c <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b096      	sub	sp, #88	@ 0x58
 8000d60:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2250      	movs	r2, #80	@ 0x50
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f017 faac 	bl	80182c8 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8000d74:	2305      	movs	r3, #5
 8000d76:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000d88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <W25Qxx_WaitForWriteEnd+0x94>)
 8000da6:	f009 f957 	bl	800a058 <HAL_OSPI_Command>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 8000db0:	4810      	ldr	r0, [pc, #64]	@ (8000df4 <W25Qxx_WaitForWriteEnd+0x98>)
 8000db2:	f017 f9a9 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dba:	e015      	b.n	8000de8 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <W25Qxx_WaitForWriteEnd+0x94>)
 8000dc6:	f009 fa47 	bl	800a258 <HAL_OSPI_Receive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <W25Qxx_WaitForWriteEnd+0x9c>)
 8000dd2:	f017 f999 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e005      	b.n	8000de8 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3758      	adds	r7, #88	@ 0x58
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000bb8 	.word	0x24000bb8
 8000df4:	0801a484 	.word	0x0801a484
 8000df8:	0801a4b0 	.word	0x0801a4b0

08000dfc <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b098      	sub	sp, #96	@ 0x60
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2250      	movs	r2, #80	@ 0x50
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f017 fa59 	bl	80182c8 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000e30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000e3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e54:	4619      	mov	r1, r3
 8000e56:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <W25Qxx_Read+0x9c>)
 8000e58:	f009 f8fe 	bl	800a058 <HAL_OSPI_Command>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 8000e62:	480e      	ldr	r0, [pc, #56]	@ (8000e9c <W25Qxx_Read+0xa0>)
 8000e64:	f017 f950 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6c:	e00f      	b.n	8000e8e <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <W25Qxx_Read+0x9c>)
 8000e76:	f009 f9ef 	bl	800a258 <HAL_OSPI_Receive>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 8000e80:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <W25Qxx_Read+0xa4>)
 8000e82:	f017 f941 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8a:	e000      	b.n	8000e8e <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3760      	adds	r7, #96	@ 0x60
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	24000bb8 	.word	0x24000bb8
 8000e9c:	0801a4c8 	.word	0x0801a4c8
 8000ea0:	0801a4ec 	.word	0x0801a4ec

08000ea4 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09e      	sub	sp, #120	@ 0x78
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2250      	movs	r2, #80	@ 0x50
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f017 fa05 	bl	80182c8 <memset>
    uint32_t remaining = length;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	0b1b      	lsrs	r3, r3, #12
 8000ece:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000efc:	4619      	mov	r1, r3
 8000efe:	484f      	ldr	r0, [pc, #316]	@ (800103c <W25Qxx_Write+0x198>)
 8000f00:	f009 f8aa 	bl	800a058 <HAL_OSPI_Command>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 8000f0a:	484d      	ldr	r0, [pc, #308]	@ (8001040 <W25Qxx_Write+0x19c>)
 8000f0c:	f017 f8fc 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f14:	e08e      	b.n	8001034 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 8000f16:	2320      	movs	r3, #32
 8000f18:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 8000f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1c:	031b      	lsls	r3, r3, #12
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f34:	4619      	mov	r1, r3
 8000f36:	4841      	ldr	r0, [pc, #260]	@ (800103c <W25Qxx_Write+0x198>)
 8000f38:	f009 f88e 	bl	800a058 <HAL_OSPI_Command>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 8000f42:	4840      	ldr	r0, [pc, #256]	@ (8001044 <W25Qxx_Write+0x1a0>)
 8000f44:	f017 f8e0 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f4c:	e072      	b.n	8001034 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 8000f4e:	f7ff ff05 	bl	8000d5c <W25Qxx_WaitForWriteEnd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d069      	beq.n	800102c <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 8000f58:	483b      	ldr	r0, [pc, #236]	@ (8001048 <W25Qxx_Write+0x1a4>)
 8000f5a:	f017 f8d5 	bl	8018108 <puts>
        return W25Qxx_ERROR;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f62:	e067      	b.n	8001034 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8000f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f6a:	bf28      	it	cs
 8000f6c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8000f70:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8000f72:	2306      	movs	r3, #6
 8000f74:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f86:	4619      	mov	r1, r3
 8000f88:	482c      	ldr	r0, [pc, #176]	@ (800103c <W25Qxx_Write+0x198>)
 8000f8a:	f009 f865 	bl	800a058 <HAL_OSPI_Command>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 8000f94:	482d      	ldr	r0, [pc, #180]	@ (800104c <W25Qxx_Write+0x1a8>)
 8000f96:	f017 f8b7 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9e:	e049      	b.n	8001034 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 8000fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 8000fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fbc:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481c      	ldr	r0, [pc, #112]	@ (800103c <W25Qxx_Write+0x198>)
 8000fca:	f009 f845 	bl	800a058 <HAL_OSPI_Command>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 8000fd4:	481e      	ldr	r0, [pc, #120]	@ (8001050 <W25Qxx_Write+0x1ac>)
 8000fd6:	f017 f897 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	e029      	b.n	8001034 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000fe6:	4815      	ldr	r0, [pc, #84]	@ (800103c <W25Qxx_Write+0x198>)
 8000fe8:	f009 f8c3 	bl	800a172 <HAL_OSPI_Transmit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 8000ff2:	4818      	ldr	r0, [pc, #96]	@ (8001054 <W25Qxx_Write+0x1b0>)
 8000ff4:	f017 f888 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffc:	e01a      	b.n	8001034 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 8000ffe:	f7ff fead 	bl	8000d5c <W25Qxx_WaitForWriteEnd>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 8001008:	4813      	ldr	r0, [pc, #76]	@ (8001058 <W25Qxx_Write+0x1b4>)
 800100a:	f017 f87d 	bl	8018108 <puts>
            return W25Qxx_ERROR;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001012:	e00f      	b.n	8001034 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 8001014:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 800101c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800101e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001020:	4413      	add	r3, r2
 8001022:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 8001024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001028:	4413      	add	r3, r2
 800102a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 800102c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800102e:	2b00      	cmp	r3, #0
 8001030:	d198      	bne.n	8000f64 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3778      	adds	r7, #120	@ 0x78
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	24000bb8 	.word	0x24000bb8
 8001040:	0801a504 	.word	0x0801a504
 8001044:	0801a530 	.word	0x0801a530
 8001048:	0801a548 	.word	0x0801a548
 800104c:	0801a56c 	.word	0x0801a56c
 8001050:	0801a598 	.word	0x0801a598
 8001054:	0801a5c4 	.word	0x0801a5c4
 8001058:	0801a5e0 	.word	0x0801a5e0

0800105c <CS_Low>:

// ====== FreeRTOS Semaphore for DMA ======
extern SemaphoreHandle_t spiDmaSem;   // declared in freertos.c

// ====== LOW LEVEL SPI FUNCTIONS ======
static void CS_Low(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <CS_Low+0x14>)
 8001068:	f007 fa3a 	bl	80084e0 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58020000 	.word	0x58020000

08001074 <CS_High>:
static void CS_High(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_CS_PORT, ICM42688P_CS_PIN, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107e:	4802      	ldr	r0, [pc, #8]	@ (8001088 <CS_High+0x14>)
 8001080:	f007 fa2e 	bl	80084e0 <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58020000 	.word	0x58020000

0800108c <HAL_SPI_TxRxCpltCallback>:

// ====== DMA Callback ======
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3) {    // check SPI3 DMA complete
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_SPI_TxRxCpltCallback+0x44>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d114      	bne.n	80010c8 <HAL_SPI_TxRxCpltCallback+0x3c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
        xSemaphoreGiveFromISR(spiDmaSem, &xHigherPriorityTaskWoken);
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_SPI_TxRxCpltCallback+0x48>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f013 fd09 	bl	8014ac4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_SPI_TxRxCpltCallback+0x3c>
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80010ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	f3bf 8f4f 	dsb	sy
 80010c4:	f3bf 8f6f 	isb	sy
    }
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40003c00 	.word	0x40003c00
 80010d4:	240007f0 	.word	0x240007f0
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <SPI_RW>:

// ====== Single-Byte DMA Transfer with FreeRTOS Sync ======
static uint8_t SPI_RW(ICM42688P_HandleTypeDef *dev, uint8_t data) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    if (HAL_SPI_TransmitReceive_DMA(dev->hspi, &data, &rx, 1) != HAL_OK) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020f 	add.w	r2, r7, #15
 80010f0:	1cf9      	adds	r1, r7, #3
 80010f2:	2301      	movs	r3, #1
 80010f4:	f00c ff82 	bl	800dffc <HAL_SPI_TransmitReceive_DMA>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SPI_RW+0x26>
        return 0xFF;
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	e00b      	b.n	800111a <SPI_RW+0x3e>
    }
    if (xSemaphoreTake(spiDmaSem, pdMS_TO_TICKS(10)) != pdTRUE) {
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <SPI_RW+0x48>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	210a      	movs	r1, #10
 8001108:	4618      	mov	r0, r3
 800110a:	f013 fe4d 	bl	8014da8 <xQueueSemaphoreTake>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d001      	beq.n	8001118 <SPI_RW+0x3c>
        return 0xFF; // Timeout
 8001114:	23ff      	movs	r3, #255	@ 0xff
 8001116:	e000      	b.n	800111a <SPI_RW+0x3e>
    }
    return rx;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	240007f0 	.word	0x240007f0

08001128 <WriteReg>:
    xSemaphoreTake(spiDmaSem, pdMS_TO_TICKS(10));
    CS_High();
}

// ====== Register Write ======
static void WriteReg(ICM42688P_HandleTypeDef *dev, uint8_t reg, uint8_t data) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
 8001134:	4613      	mov	r3, r2
 8001136:	70bb      	strb	r3, [r7, #2]
    CS_Low();
 8001138:	f7ff ff90 	bl	800105c <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_WRITE);
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	4619      	mov	r1, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffcb 	bl	80010dc <SPI_RW>
    SPI_RW(dev, data);
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffc6 	bl	80010dc <SPI_RW>
    CS_High();
 8001150:	f7ff ff90 	bl	8001074 <CS_High>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <ReadReg>:

// ====== Register Read ======
static uint8_t ReadReg(ICM42688P_HandleTypeDef *dev, uint8_t reg) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
    CS_Low();
 8001168:	f7ff ff78 	bl	800105c <CS_Low>
    SPI_RW(dev, reg | ICM42688P_SPI_READ);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb0 	bl	80010dc <SPI_RW>
    uint8_t val = SPI_RW(dev, 0xFF);
 800117c:	21ff      	movs	r1, #255	@ 0xff
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffac 	bl	80010dc <SPI_RW>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
    CS_High();
 8001188:	f7ff ff74 	bl	8001074 <CS_High>
    return val;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <SelectBank>:

// ====== Bank Select ======
static void SelectBank(ICM42688P_HandleTypeDef *dev, uint8_t bank) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
    WriteReg(dev, ICM42688P_REG_BANK_SEL, (bank & 0x07) << 4);
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	2176      	movs	r1, #118	@ 0x76
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb8 	bl	8001128 <WriteReg>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <ICM42688P_DeviceReset>:

// ====== Device Reset ======
void ICM42688P_DeviceReset(ICM42688P_HandleTypeDef *dev) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    WriteReg(dev, ICM42688P_DEVICE_CONFIG, 0x01);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2111      	movs	r1, #17
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffab 	bl	8001128 <WriteReg>
    HAL_Delay(50);
 80011d2:	2032      	movs	r0, #50	@ 0x32
 80011d4:	f004 f80e 	bl	80051f4 <HAL_Delay>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <ICM42688P_Init>:

// ====== Initialization ======
void ICM42688P_Init(ICM42688P_HandleTypeDef *dev, SPI_HandleTypeDef *hspi) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    dev->hspi = hspi;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]
    dev->accel_scale = 1.0f / 2048.0f;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 80011f6:	605a      	str	r2, [r3, #4]
    dev->gyro_scale  = 1.0f / 16.4f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <ICM42688P_Init+0xa8>)
 80011fc:	609a      	str	r2, [r3, #8]

    HAL_Delay(50);
 80011fe:	2032      	movs	r0, #50	@ 0x32
 8001200:	f003 fff8 	bl	80051f4 <HAL_Delay>
    ICM42688P_DeviceReset(dev);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffdb 	bl	80011c0 <ICM42688P_DeviceReset>
    SelectBank(dev, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffc2 	bl	8001196 <SelectBank>

    uint8_t whoami = ReadReg(dev, ICM42688P_WHO_AM_I);
 8001212:	2175      	movs	r1, #117	@ 0x75
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffa1 	bl	800115c <ReadReg>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
    printf("WHO_AM_I=0x%02X\r\n", whoami);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4619      	mov	r1, r3
 8001222:	481a      	ldr	r0, [pc, #104]	@ (800128c <ICM42688P_Init+0xac>)
 8001224:	f016 ff08 	bl	8018038 <iprintf>
    if (whoami != ICM42688P_DEVICE_ID) {
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b47      	cmp	r3, #71	@ 0x47
 800122c:	d004      	beq.n	8001238 <ICM42688P_Init+0x58>
        printf("ICM42688P not found!\r\n");
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <ICM42688P_Init+0xb0>)
 8001230:	f016 ff6a 	bl	8018108 <puts>
        while (1);
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <ICM42688P_Init+0x54>
    }

    WriteReg(dev, ICM42688P_PWR_MGMT0, 0x0F);
 8001238:	220f      	movs	r2, #15
 800123a:	214e      	movs	r1, #78	@ 0x4e
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff73 	bl	8001128 <WriteReg>
    HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f003 ffd6 	bl	80051f4 <HAL_Delay>
    uint8_t pwr = ReadReg(dev, ICM42688P_PWR_MGMT0);
 8001248:	214e      	movs	r1, #78	@ 0x4e
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff86 	bl	800115c <ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	73bb      	strb	r3, [r7, #14]
    printf("PWR_MGMT0=0x%02X\r\n", pwr);
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	4619      	mov	r1, r3
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <ICM42688P_Init+0xb4>)
 800125a:	f016 feed 	bl	8018038 <iprintf>

    WriteReg(dev, ICM42688P_GYRO_CONFIG0, 0x06);
 800125e:	2206      	movs	r2, #6
 8001260:	214f      	movs	r1, #79	@ 0x4f
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <WriteReg>
    WriteReg(dev, ICM42688P_ACCEL_CONFIG0, 0x06);
 8001268:	2206      	movs	r2, #6
 800126a:	2150      	movs	r1, #80	@ 0x50
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff5b 	bl	8001128 <WriteReg>

    HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f003 ffbe 	bl	80051f4 <HAL_Delay>
    printf("ICM42688P Initialized Successfully\r\n");
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <ICM42688P_Init+0xb8>)
 800127a:	f016 ff45 	bl	8018108 <puts>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	3d79c190 	.word	0x3d79c190
 800128c:	0801a600 	.word	0x0801a600
 8001290:	0801a614 	.word	0x0801a614
 8001294:	0801a62c 	.word	0x0801a62c
 8001298:	0801a640 	.word	0x0801a640

0800129c <swap_buffers>:
#define WS2812_LATCH_DELAY_MS 1   // >50us required for WS2812 reset

// ----------------------------
// Helper: Swap Buffers Safely
// ----------------------------
static inline void swap_buffers(void) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
    uint32_t *temp = active_buffer;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <swap_buffers+0x28>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	607b      	str	r3, [r7, #4]
    active_buffer = prepare_buffer;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <swap_buffers+0x2c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <swap_buffers+0x28>)
 80012ae:	6013      	str	r3, [r2, #0]
    prepare_buffer = temp;
 80012b0:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <swap_buffers+0x2c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	24000000 	.word	0x24000000
 80012c8:	24000004 	.word	0x24000004

080012cc <AIRCRAFTLIGHTS_Init>:

// ----------------------------
// Initialize (Clear LEDs)
// ----------------------------
void AIRCRAFTLIGHTS_Init(TIM_HandleTypeDef *htim) {
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e00c      	b.n	80012f4 <AIRCRAFTLIGHTS_Init+0x28>
        pwm_buffer_a[i] = DUTY_RESET;
 80012da:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <AIRCRAFTLIGHTS_Init+0x3c>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2100      	movs	r1, #0
 80012e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        pwm_buffer_b[i] = DUTY_RESET;
 80012e4:	4a09      	ldr	r2, [pc, #36]	@ (800130c <AIRCRAFTLIGHTS_Init+0x40>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2100      	movs	r1, #0
 80012ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b91      	cmp	r3, #145	@ 0x91
 80012f8:	d9ef      	bls.n	80012da <AIRCRAFTLIGHTS_Init+0xe>
    }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	2400020c 	.word	0x2400020c
 800130c:	24000454 	.word	0x24000454

08001310 <aircraftlights>:
}

// ----------------------------
// Set Color for Individual LED
// ----------------------------
void aircraftlights(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001322:	4603      	mov	r3, r0
 8001324:	72fb      	strb	r3, [r7, #11]
 8001326:	460b      	mov	r3, r1
 8001328:	72bb      	strb	r3, [r7, #10]
 800132a:	4613      	mov	r3, r2
 800132c:	727b      	strb	r3, [r7, #9]
    if (led_index < AIRCRAFT_LED_COUNT) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d865      	bhi.n	8001400 <aircraftlights+0xf0>
        if (brightness < 0.0f) brightness = 0.0f;
 8001334:	edd7 7a01 	vldr	s15, [r7, #4]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d502      	bpl.n	8001348 <aircraftlights+0x38>
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0f) brightness = 1.0f;
 8001348:	edd7 7a01 	vldr	s15, [r7, #4]
 800134c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd02      	ble.n	8001360 <aircraftlights+0x50>
 800135a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800135e:	607b      	str	r3, [r7, #4]

        float total_brightness = brightness * global_brightness;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <aircraftlights+0xfc>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ed97 7a01 	vldr	s14, [r7, #4]
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // WS2812 uses GRB
 8001372:	7abb      	ldrb	r3, [r7, #10]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001388:	edc7 7a00 	vstr	s15, [r7]
 800138c:	783b      	ldrb	r3, [r7, #0]
 800138e:	b2d8      	uxtb	r0, r3
 8001390:	491f      	ldr	r1, [pc, #124]	@ (8001410 <aircraftlights+0x100>)
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	440b      	add	r3, r1
 800139c:	4602      	mov	r2, r0
 800139e:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red   * total_brightness);
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b6:	edc7 7a00 	vstr	s15, [r7]
 80013ba:	783b      	ldrb	r3, [r7, #0]
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	4914      	ldr	r1, [pc, #80]	@ (8001410 <aircraftlights+0x100>)
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	3301      	adds	r3, #1
 80013cc:	4602      	mov	r2, r0
 80013ce:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue  * total_brightness);
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	edc7 7a00 	vstr	s15, [r7]
 80013ea:	783b      	ldrb	r3, [r7, #0]
 80013ec:	b2d8      	uxtb	r0, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <aircraftlights+0x100>)
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	3302      	adds	r3, #2
 80013fc:	4602      	mov	r2, r0
 80013fe:	701a      	strb	r2, [r3, #0]
    }
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	24000008 	.word	0x24000008
 8001410:	2400069c 	.word	0x2400069c

08001414 <encode_leds_to_pwm>:

// ----------------------------
// Encode LED Data → PWM Buffer
// ----------------------------
static void encode_leds_to_pwm(uint32_t *buffer) {
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    uint32_t buffer_index = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]

    // Clear buffer
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	e008      	b.n	8001438 <encode_leds_to_pwm+0x24>
        buffer[i] = DUTY_RESET;
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < AIRCRAFT_BUFFER_SIZE; i++) {
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b91      	cmp	r3, #145	@ 0x91
 800143c:	d9f3      	bls.n	8001426 <encode_leds_to_pwm+0x12>
    }

    // Encode GRB
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e034      	b.n	80014ae <encode_leds_to_pwm+0x9a>
        for (uint32_t color = 0; color < 3; color++) {
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	e02b      	b.n	80014a2 <encode_leds_to_pwm+0x8e>
            for (int8_t bit = 7; bit >= 0; bit--) {
 800144a:	2307      	movs	r3, #7
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e021      	b.n	8001494 <encode_leds_to_pwm+0x80>
                buffer[buffer_index++] = (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 8001450:	491c      	ldr	r1, [pc, #112]	@ (80014c4 <encode_leds_to_pwm+0xb0>)
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	18ca      	adds	r2, r1, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	fa42 f303 	asr.w	r3, r2, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <encode_leds_to_pwm+0x64>
 8001474:	22a0      	movs	r2, #160	@ 0xa0
 8001476:	e000      	b.n	800147a <encode_leds_to_pwm+0x66>
 8001478:	2250      	movs	r2, #80	@ 0x50
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	1c59      	adds	r1, r3, #1
 800147e:	61f9      	str	r1, [r7, #28]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	440b      	add	r3, r1
 8001486:	601a      	str	r2, [r3, #0]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dad9      	bge.n	8001450 <encode_leds_to_pwm+0x3c>
        for (uint32_t color = 0; color < 3; color++) {
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3301      	adds	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d9d0      	bls.n	800144a <encode_leds_to_pwm+0x36>
    for (uint32_t led = 0; led < AIRCRAFT_LED_COUNT; led++) {
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d9c7      	bls.n	8001444 <encode_leds_to_pwm+0x30>
            }
        }
    }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2400069c 	.word	0x2400069c

080014c8 <aircraftlights_update>:

// ----------------------------
// Send Data via DMA (No Flicker)
// ----------------------------
void aircraftlights_update(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    // Encode into the non-active buffer
    encode_leds_to_pwm(prepare_buffer);
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <aircraftlights_update+0x98>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff9f 	bl	8001414 <encode_leds_to_pwm>
    swap_buffers();
 80014d6:	f7ff fee1 	bl	800129c <swap_buffers>

    // Disable interrupts briefly (timing critical)
    taskENTER_CRITICAL();
 80014da:	f015 fda5 	bl	8017028 <vPortEnterCritical>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
    __disable_irq();

    // Stop any ongoing DMA
    HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 80014e2:	2108      	movs	r1, #8
 80014e4:	481f      	ldr	r0, [pc, #124]	@ (8001564 <aircraftlights_update+0x9c>)
 80014e6:	f00d ff9f 	bl	800f428 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 80014ea:	481e      	ldr	r0, [pc, #120]	@ (8001564 <aircraftlights_update+0x9c>)
 80014ec:	f00d fb3c 	bl	800eb68 <HAL_TIM_Base_Stop>

    // Re-enable DMA IRQ
    HAL_NVIC_SetPriority(AIRCRAFTLIGHTS_TIMER_DMA_IRQn, 5, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	2010      	movs	r0, #16
 80014f6:	f003 ff59 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AIRCRAFTLIGHTS_TIMER_DMA_IRQn);
 80014fa:	2010      	movs	r0, #16
 80014fc:	f003 ff70 	bl	80053e0 <HAL_NVIC_EnableIRQ>

    aircraftlights_data_sent_flag = 0;
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <aircraftlights_update+0xa0>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

    // Start DMA with timing protected
    HAL_TIM_Base_Start(&AIRCRAFTLIGHTS_TIMER);
 8001506:	4817      	ldr	r0, [pc, #92]	@ (8001564 <aircraftlights_update+0x9c>)
 8001508:	f00d fab0 	bl	800ea6c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL,
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <aircraftlights_update+0xa4>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2392      	movs	r3, #146	@ 0x92
 8001512:	2108      	movs	r1, #8
 8001514:	4813      	ldr	r0, [pc, #76]	@ (8001564 <aircraftlights_update+0x9c>)
 8001516:	f00d fd53 	bl	800efc0 <HAL_TIM_PWM_Start_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800151a:	b662      	cpsie	i
}
 800151c:	bf00      	nop
                          active_buffer, AIRCRAFT_BUFFER_SIZE);

    // Re-enable IRQs immediately after DMA start
    __enable_irq();
    taskEXIT_CRITICAL();
 800151e:	f015 fdb5 	bl	801708c <vPortExitCritical>

    // Wait for DMA to complete (use semaphore or fallback)
    if (aircraftlights_dma_semaphore != NULL) {
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <aircraftlights_update+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00f      	beq.n	800154a <aircraftlights_update+0x82>
        xSemaphoreTake(aircraftlights_dma_semaphore, pdMS_TO_TICKS(2));
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <aircraftlights_update+0xa8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2102      	movs	r1, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f013 fc39 	bl	8014da8 <xQueueSemaphoreTake>
 8001536:	e00d      	b.n	8001554 <aircraftlights_update+0x8c>
    } else {
        while (!aircraftlights_data_sent_flag) {
            if (HAL_DMA_GetState(&AIRCRAFTLIGHTS_DMA) == HAL_DMA_STATE_READY) {
 8001538:	480e      	ldr	r0, [pc, #56]	@ (8001574 <aircraftlights_update+0xac>)
 800153a:	f006 fa27 	bl	800798c <HAL_DMA_GetState>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <aircraftlights_update+0x82>
                aircraftlights_data_sent_flag = 1;
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <aircraftlights_update+0xa0>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
        while (!aircraftlights_data_sent_flag) {
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <aircraftlights_update+0xa0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f1      	beq.n	8001538 <aircraftlights_update+0x70>
            }
        }
    }

    // WS2812 latch delay to ensure proper reset
    vTaskDelay(pdMS_TO_TICKS(WS2812_LATCH_DELAY_MS));
 8001554:	2001      	movs	r0, #1
 8001556:	f014 f8ef 	bl	8015738 <vTaskDelay>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000004 	.word	0x24000004
 8001564:	24000e04 	.word	0x24000e04
 8001568:	24000208 	.word	0x24000208
 800156c:	24000000 	.word	0x24000000
 8001570:	240007f8 	.word	0x240007f8
 8001574:	24000f14 	.word	0x24000f14

08001578 <AircraftLights_PWM_Callback>:

// ----------------------------
// DMA Complete ISR
// ----------------------------
void AircraftLights_PWM_Callback(TIM_HandleTypeDef *htim) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <AircraftLights_PWM_Callback+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d122      	bne.n	80015d2 <AircraftLights_PWM_Callback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&AIRCRAFTLIGHTS_TIMER, AIRCRAFTLIGHTS_TIMER_TIMER_CHANNEL);
 800158c:	2108      	movs	r1, #8
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <AircraftLights_PWM_Callback+0x64>)
 8001590:	f00d ff4a 	bl	800f428 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&AIRCRAFTLIGHTS_TIMER);
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <AircraftLights_PWM_Callback+0x64>)
 8001596:	f00d fae7 	bl	800eb68 <HAL_TIM_Base_Stop>
        aircraftlights_data_sent_flag = 1;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <AircraftLights_PWM_Callback+0x68>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]

        if (aircraftlights_dma_semaphore != NULL) {
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <AircraftLights_PWM_Callback+0x6c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d014      	beq.n	80015d2 <AircraftLights_PWM_Callback+0x5a>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(aircraftlights_dma_semaphore, &xHigherPriorityTaskWoken);
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <AircraftLights_PWM_Callback+0x6c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f107 020c 	add.w	r2, r7, #12
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f013 fa84 	bl	8014ac4 <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <AircraftLights_PWM_Callback+0x5a>
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <AircraftLights_PWM_Callback+0x70>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	f3bf 8f6f 	isb	sy
        }
    }
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000e04 	.word	0x24000e04
 80015e0:	24000208 	.word	0x24000208
 80015e4:	240007f8 	.word	0x240007f8
 80015e8:	e000ed04 	.word	0xe000ed04

080015ec <WS2812_Init>:
volatile uint8_t data_sent_flag = 0;
static uint32_t pwm_buffer[BUFFER_SIZE];
static uint8_t led_data[LED_COUNT][3];
static float global_brightness = 1.0;

void WS2812_Init(TIM_HandleTypeDef *htim) {
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e007      	b.n	800160a <WS2812_Init+0x1e>
        pwm_buffer[i] = DUTY_RESET;
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <WS2812_Init+0x34>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2100      	movs	r1, #0
 8001600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b49      	cmp	r3, #73	@ 0x49
 800160e:	d9f4      	bls.n	80015fa <WS2812_Init+0xe>
    }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	240006ac 	.word	0x240006ac

08001624 <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
 8001636:	4603      	mov	r3, r0
 8001638:	72fb      	strb	r3, [r7, #11]
 800163a:	460b      	mov	r3, r1
 800163c:	72bb      	strb	r3, [r7, #10]
 800163e:	4613      	mov	r3, r2
 8001640:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d165      	bne.n	8001714 <WS2812_SetColor+0xf0>
        if (brightness < 0.0) brightness = 0.0;
 8001648:	edd7 7a01 	vldr	s15, [r7, #4]
 800164c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	d502      	bpl.n	800165c <WS2812_SetColor+0x38>
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 800165c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	dd02      	ble.n	8001674 <WS2812_SetColor+0x50>
 800166e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001672:	607b      	str	r3, [r7, #4]
        float total_brightness = brightness * global_brightness;
 8001674:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <WS2812_SetColor+0xfc>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed97 7a01 	vldr	s14, [r7, #4]
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness);
 8001686:	7abb      	ldrb	r3, [r7, #10]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001690:	edd7 7a05 	vldr	s15, [r7, #20]
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169c:	edc7 7a00 	vstr	s15, [r7]
 80016a0:	783b      	ldrb	r3, [r7, #0]
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	491f      	ldr	r1, [pc, #124]	@ (8001724 <WS2812_SetColor+0x100>)
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	4602      	mov	r2, r0
 80016b2:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ca:	edc7 7a00 	vstr	s15, [r7]
 80016ce:	783b      	ldrb	r3, [r7, #0]
 80016d0:	b2d8      	uxtb	r0, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	@ (8001724 <WS2812_SetColor+0x100>)
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	440b      	add	r3, r1
 80016de:	3301      	adds	r3, #1
 80016e0:	4602      	mov	r2, r0
 80016e2:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 80016e4:	7a7b      	ldrb	r3, [r7, #9]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fa:	edc7 7a00 	vstr	s15, [r7]
 80016fe:	783b      	ldrb	r3, [r7, #0]
 8001700:	b2d8      	uxtb	r0, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <WS2812_SetColor+0x100>)
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	440b      	add	r3, r1
 800170e:	3302      	adds	r3, #2
 8001710:	4602      	mov	r2, r0
 8001712:	701a      	strb	r2, [r3, #0]
    }
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2400000c 	.word	0x2400000c
 8001724:	240007d4 	.word	0x240007d4

08001728 <WS2812_Send>:

void WS2812_Send(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

    // Fill reset first
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e007      	b.n	8001748 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <WS2812_Send+0xd8>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2100      	movs	r1, #0
 800173e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3301      	adds	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b49      	cmp	r3, #73	@ 0x49
 800174c:	d9f4      	bls.n	8001738 <WS2812_Send+0x10>
    }

    // Encode GRB bits
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e033      	b.n	80017bc <WS2812_Send+0x94>
        for (uint32_t color = 0; color < 3; color++) {
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	e02a      	b.n	80017b0 <WS2812_Send+0x88>
            for (int8_t bit = 7; bit >= 0; bit--) {
 800175a:	2307      	movs	r3, #7
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e020      	b.n	80017a2 <WS2812_Send+0x7a>
                pwm_buffer[buffer_index++] = (led_data[led][color] & (1 << bit)) ? DUTY_1 : DUTY_0;
 8001760:	4928      	ldr	r1, [pc, #160]	@ (8001804 <WS2812_Send+0xdc>)
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	18ca      	adds	r2, r1, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	fa42 f303 	asr.w	r3, r2, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <WS2812_Send+0x60>
 8001784:	22a0      	movs	r2, #160	@ 0xa0
 8001786:	e000      	b.n	800178a <WS2812_Send+0x62>
 8001788:	2250      	movs	r2, #80	@ 0x50
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	6179      	str	r1, [r7, #20]
 8001790:	491b      	ldr	r1, [pc, #108]	@ (8001800 <WS2812_Send+0xd8>)
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	dada      	bge.n	8001760 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) {
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d9d1      	bls.n	800175a <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0c8      	beq.n	8001754 <WS2812_Send+0x2c>
            }
        }
    }

    // Stop old DMA
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 80017c2:	2104      	movs	r1, #4
 80017c4:	4810      	ldr	r0, [pc, #64]	@ (8001808 <WS2812_Send+0xe0>)
 80017c6:	f00d fe2f 	bl	800f428 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 80017ca:	480f      	ldr	r0, [pc, #60]	@ (8001808 <WS2812_Send+0xe0>)
 80017cc:	f00d f9cc 	bl	800eb68 <HAL_TIM_Base_Stop>

    // Ensure NVIC
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	200f      	movs	r0, #15
 80017d6:	f003 fde9 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 80017da:	200f      	movs	r0, #15
 80017dc:	f003 fe00 	bl	80053e0 <HAL_NVIC_EnableIRQ>

    // Reset flag
    data_sent_flag = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <WS2812_Send+0xe4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]

    // Start DMA transfer
    HAL_TIM_Base_Start(&WS2812_TIMER);
 80017e6:	4808      	ldr	r0, [pc, #32]	@ (8001808 <WS2812_Send+0xe0>)
 80017e8:	f00d f940 	bl	800ea6c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 80017ec:	234a      	movs	r3, #74	@ 0x4a
 80017ee:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <WS2812_Send+0xd8>)
 80017f0:	2104      	movs	r1, #4
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <WS2812_Send+0xe0>)
 80017f4:	f00d fbe4 	bl	800efc0 <HAL_TIM_PWM_Start_DMA>
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	240006ac 	.word	0x240006ac
 8001804:	240007d4 	.word	0x240007d4
 8001808:	24000e04 	.word	0x24000e04
 800180c:	240006a8 	.word	0x240006a8

08001810 <main_led>:

// Non-blocking main_led (works in FreeRTOS)
void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness, uint32_t main_led_time) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001822:	4603      	mov	r3, r0
 8001824:	72fb      	strb	r3, [r7, #11]
 8001826:	460b      	mov	r3, r1
 8001828:	72bb      	strb	r3, [r7, #10]
 800182a:	4613      	mov	r3, r2
 800182c:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 800182e:	7a7b      	ldrb	r3, [r7, #9]
 8001830:	7aba      	ldrb	r2, [r7, #10]
 8001832:	7af9      	ldrb	r1, [r7, #11]
 8001834:	ed97 0a01 	vldr	s0, [r7, #4]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fef3 	bl	8001624 <WS2812_SetColor>
    WS2812_Send();
 800183e:	f7ff ff73 	bl	8001728 <WS2812_Send>

    // Wait for DMA to finish using semaphore (if available)
    if (ws2812_dma_semaphore != NULL) {
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <main_led+0xa0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <main_led+0x48>
        xSemaphoreTake(ws2812_dma_semaphore, pdMS_TO_TICKS(50));
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <main_led+0xa0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2132      	movs	r1, #50	@ 0x32
 8001850:	4618      	mov	r0, r3
 8001852:	f013 faa9 	bl	8014da8 <xQueueSemaphoreTake>
 8001856:	e018      	b.n	800188a <main_led+0x7a>
    } else {
        // Fallback: Busy wait like original
        uint32_t start = HAL_GetTick();
 8001858:	f003 fcc0 	bl	80051dc <HAL_GetTick>
 800185c:	6178      	str	r0, [r7, #20]
        while (!data_sent_flag && (HAL_GetTick() - start) < 100) {
 800185e:	e008      	b.n	8001872 <main_led+0x62>
            if (HAL_DMA_GetState(&WS2812_DMA) == HAL_DMA_STATE_READY) {
 8001860:	4814      	ldr	r0, [pc, #80]	@ (80018b4 <main_led+0xa4>)
 8001862:	f006 f893 	bl	800798c <HAL_DMA_GetState>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d102      	bne.n	8001872 <main_led+0x62>
                data_sent_flag = 1;
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <main_led+0xa8>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
        while (!data_sent_flag && (HAL_GetTick() - start) < 100) {
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <main_led+0xa8>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <main_led+0x7a>
 800187c:	f003 fcae 	bl	80051dc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b63      	cmp	r3, #99	@ 0x63
 8001888:	d9ea      	bls.n	8001860 <main_led+0x50>
            }
        }
    }

    // Keeping LED ON for requested duration
    if (main_led_time > 0) {
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <main_led+0x98>
        vTaskDelay(pdMS_TO_TICKS(main_led_time));
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <main_led+0xac>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	4618      	mov	r0, r3
 80018a4:	f013 ff48 	bl	8015738 <vTaskDelay>
    }
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	240007f4 	.word	0x240007f4
 80018b4:	24000e9c 	.word	0x24000e9c
 80018b8:	240006a8 	.word	0x240006a8
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <pid_init>:
#include "pid_controller.h"
#include <math.h>

// Initialize PID structures with EEPROM values
void pid_init(RuntimeDualPID_t *roll_pid, RuntimeDualPID_t *pitch_pid, RuntimePID_t *yaw_rate_pid,
              const DualPID_t *eeprom_roll_pid, const DualPID_t *eeprom_pitch_pid, const PID_t *eeprom_yaw_rate_pid) {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
    // Roll PID
    roll_pid->out.kp = eeprom_roll_pid->out.kp;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	601a      	str	r2, [r3, #0]
    roll_pid->out.ki = eeprom_roll_pid->out.ki;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]
    roll_pid->out.kd = eeprom_roll_pid->out.kd;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	609a      	str	r2, [r3, #8]
    roll_pid->out.integral = 0.0f;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    roll_pid->out.last_error = 0.0f;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
    roll_pid->out.output_limit = 200.0f; // Max angular rate (deg/s)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a31      	ldr	r2, [pc, #196]	@ (80019c0 <pid_init+0x100>)
 80018fa:	615a      	str	r2, [r3, #20]

    roll_pid->in.kp = eeprom_roll_pid->in.kp;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	619a      	str	r2, [r3, #24]
    roll_pid->in.ki = eeprom_roll_pid->in.ki;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	61da      	str	r2, [r3, #28]
    roll_pid->in.kd = eeprom_roll_pid->in.kd;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	621a      	str	r2, [r3, #32]
    roll_pid->in.integral = 0.0f;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	@ 0x24
    roll_pid->in.last_error = 0.0f;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
    roll_pid->in.output_limit = 950.0f; // Max PWM contribution
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <pid_init+0x104>)
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Pitch PID
    pitch_pid->out.kp = eeprom_pitch_pid->out.kp;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	601a      	str	r2, [r3, #0]
    pitch_pid->out.ki = eeprom_pitch_pid->out.ki;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	605a      	str	r2, [r3, #4]
    pitch_pid->out.kd = eeprom_pitch_pid->out.kd;
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	609a      	str	r2, [r3, #8]
    pitch_pid->out.integral = 0.0f;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    pitch_pid->out.last_error = 0.0f;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
    pitch_pid->out.output_limit = 200.0f;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <pid_init+0x100>)
 8001956:	615a      	str	r2, [r3, #20]

    pitch_pid->in.kp = eeprom_pitch_pid->in.kp;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	619a      	str	r2, [r3, #24]
    pitch_pid->in.ki = eeprom_pitch_pid->in.ki;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61da      	str	r2, [r3, #28]
    pitch_pid->in.kd = eeprom_pitch_pid->in.kd;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	621a      	str	r2, [r3, #32]
    pitch_pid->in.integral = 0.0f;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
    pitch_pid->in.last_error = 0.0f;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
    pitch_pid->in.output_limit = 950.0f;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <pid_init+0x104>)
 8001984:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Yaw rate PID
    yaw_rate_pid->kp = eeprom_yaw_rate_pid->kp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
    yaw_rate_pid->ki = eeprom_yaw_rate_pid->ki;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	605a      	str	r2, [r3, #4]
    yaw_rate_pid->kd = eeprom_yaw_rate_pid->kd;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
    yaw_rate_pid->integral = 0.0f;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    yaw_rate_pid->last_error = 0.0f;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    yaw_rate_pid->output_limit = 950.0f;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <pid_init+0x104>)
 80019b2:	615a      	str	r2, [r3, #20]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	43480000 	.word	0x43480000
 80019c4:	446d8000 	.word	0x446d8000

080019c8 <iBus_Check_CHKSUM>:

#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len){
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 80019d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d8:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < len-2; i++){
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	e00a      	b.n	80019f6 <iBus_Check_CHKSUM+0x2e>
		chksum = chksum - data[i];
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len-2; i++){
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	3b02      	subs	r3, #2
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbef      	blt.n	80019e0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30] && (chksum>>8)==data[31]);
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	321e      	adds	r2, #30
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d109      	bne.n	8001a22 <iBus_Check_CHKSUM+0x5a>
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	321f      	adds	r2, #31
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <iBus_Check_CHKSUM+0x5a>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <iBus_Check_CHKSUM+0x5c>
 8001a22:	2300      	movs	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus) {
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3303      	adds	r3, #3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3304      	adds	r3, #4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3305      	adds	r3, #5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3306      	adds	r3, #6
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3307      	adds	r3, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3309      	adds	r3, #9
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	330a      	adds	r3, #10
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	330b      	adds	r3, #11
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0fff;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	330c      	adds	r3, #12
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	330d      	adds	r3, #13
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	815a      	strh	r2, [r3, #10]
	iBus->SwC = (data[14] | data[15]<<8) & 0x0fff;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	330e      	adds	r3, #14
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	330f      	adds	r3, #15
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0fff;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3311      	adds	r3, #17
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0fff;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3312      	adds	r3, #18
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3313      	adds	r3, #19
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0fff;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3314      	adds	r3, #20
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3315      	adds	r3, #21
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13] >> 4);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	330d      	adds	r3, #13
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	829a      	strh	r2, [r3, #20]

}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <iBus_isActiveFailsafe>:

#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
#endif

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8a9b      	ldrh	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <MX_DMA_Init+0xac>)
 8001bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bf0:	4a27      	ldr	r2, [pc, #156]	@ (8001c90 <MX_DMA_Init+0xac>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <MX_DMA_Init+0xac>)
 8001bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	200b      	movs	r0, #11
 8001c0e:	f003 fbcd 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c12:	200b      	movs	r0, #11
 8001c14:	f003 fbe4 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	200c      	movs	r0, #12
 8001c1e:	f003 fbc5 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c22:	200c      	movs	r0, #12
 8001c24:	f003 fbdc 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	200d      	movs	r0, #13
 8001c2e:	f003 fbbd 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c32:	200d      	movs	r0, #13
 8001c34:	f003 fbd4 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	200e      	movs	r0, #14
 8001c3e:	f003 fbb5 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c42:	200e      	movs	r0, #14
 8001c44:	f003 fbcc 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f003 fbad 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c52:	200f      	movs	r0, #15
 8001c54:	f003 fbc4 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2105      	movs	r1, #5
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f003 fba5 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c62:	2010      	movs	r0, #16
 8001c64:	f003 fbbc 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	2011      	movs	r0, #17
 8001c6e:	f003 fb9d 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c72:	2011      	movs	r0, #17
 8001c74:	f003 fbb4 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	202f      	movs	r0, #47	@ 0x2f
 8001c7e:	f003 fb95 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c82:	202f      	movs	r0, #47	@ 0x2f
 8001c84:	f003 fbac 	bl	80053e0 <HAL_NVIC_EnableIRQ>

}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024400 	.word	0x58024400

08001c94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  InitTaskHandle = osThreadNew(InitTask, NULL, &InitTask_attributes);
 8001c98:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <MX_FREERTOS_Init+0xf0>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	483a      	ldr	r0, [pc, #232]	@ (8001d88 <MX_FREERTOS_Init+0xf4>)
 8001c9e:	f012 fa27 	bl	80140f0 <osThreadNew>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a39      	ldr	r2, [pc, #228]	@ (8001d8c <MX_FREERTOS_Init+0xf8>)
 8001ca6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_MUTEX */
  /* Add mutexes if required */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  spiDmaSem = xSemaphoreCreateBinary();
 8001ca8:	2203      	movs	r2, #3
 8001caa:	2100      	movs	r1, #0
 8001cac:	2001      	movs	r0, #1
 8001cae:	f012 fd0a 	bl	80146c6 <xQueueGenericCreate>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a36      	ldr	r2, [pc, #216]	@ (8001d90 <MX_FREERTOS_Init+0xfc>)
 8001cb6:	6013      	str	r3, [r2, #0]
  if (spiDmaSem == NULL) {
 8001cb8:	4b35      	ldr	r3, [pc, #212]	@ (8001d90 <MX_FREERTOS_Init+0xfc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <MX_FREERTOS_Init+0x30>
      Error_Handler();
 8001cc0:	f001 fbc4 	bl	800344c <Error_Handler>
  }

  ws2812_dma_semaphore = xSemaphoreCreateBinary();
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f012 fcfc 	bl	80146c6 <xQueueGenericCreate>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a30      	ldr	r2, [pc, #192]	@ (8001d94 <MX_FREERTOS_Init+0x100>)
 8001cd2:	6013      	str	r3, [r2, #0]
  if (ws2812_dma_semaphore == NULL) {
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <MX_FREERTOS_Init+0x100>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <MX_FREERTOS_Init+0x4c>
      Error_Handler();
 8001cdc:	f001 fbb6 	bl	800344c <Error_Handler>
  }

  aircraftlights_dma_semaphore = xSemaphoreCreateBinary();
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f012 fcee 	bl	80146c6 <xQueueGenericCreate>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a2a      	ldr	r2, [pc, #168]	@ (8001d98 <MX_FREERTOS_Init+0x104>)
 8001cee:	6013      	str	r3, [r2, #0]
  if (aircraftlights_dma_semaphore == NULL) {
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <MX_FREERTOS_Init+0x104>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <MX_FREERTOS_Init+0x68>
      Error_Handler();
 8001cf8:	f001 fba8 	bl	800344c <Error_Handler>
  /* Add queues if required */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cfc:	4a27      	ldr	r2, [pc, #156]	@ (8001d9c <MX_FREERTOS_Init+0x108>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4827      	ldr	r0, [pc, #156]	@ (8001da0 <MX_FREERTOS_Init+0x10c>)
 8001d02:	f012 f9f5 	bl	80140f0 <osThreadNew>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <MX_FREERTOS_Init+0x110>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_init, NULL, &Task2_attributes);
 8001d0c:	4a26      	ldr	r2, [pc, #152]	@ (8001da8 <MX_FREERTOS_Init+0x114>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4826      	ldr	r0, [pc, #152]	@ (8001dac <MX_FREERTOS_Init+0x118>)
 8001d12:	f012 f9ed 	bl	80140f0 <osThreadNew>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a25      	ldr	r2, [pc, #148]	@ (8001db0 <MX_FREERTOS_Init+0x11c>)
 8001d1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  Task_1khzHandle = osThreadNew(Task_1khz_init, NULL, &Task_1khz_attributes);
 8001d1c:	4a25      	ldr	r2, [pc, #148]	@ (8001db4 <MX_FREERTOS_Init+0x120>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4825      	ldr	r0, [pc, #148]	@ (8001db8 <MX_FREERTOS_Init+0x124>)
 8001d22:	f012 f9e5 	bl	80140f0 <osThreadNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <MX_FREERTOS_Init+0x128>)
 8001d2a:	6013      	str	r3, [r2, #0]

  Task_100HzHandle = osThreadNew(Task_100Hz_init, NULL, &Task_100Hz_attributes);
 8001d2c:	4a24      	ldr	r2, [pc, #144]	@ (8001dc0 <MX_FREERTOS_Init+0x12c>)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4824      	ldr	r0, [pc, #144]	@ (8001dc4 <MX_FREERTOS_Init+0x130>)
 8001d32:	f012 f9dd 	bl	80140f0 <osThreadNew>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <MX_FREERTOS_Init+0x134>)
 8001d3a:	6013      	str	r3, [r2, #0]

  Task_50HzHandle = osThreadNew(Task_50Hz_init, NULL, &Task_50Hz_attributes);
 8001d3c:	4a23      	ldr	r2, [pc, #140]	@ (8001dcc <MX_FREERTOS_Init+0x138>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4823      	ldr	r0, [pc, #140]	@ (8001dd0 <MX_FREERTOS_Init+0x13c>)
 8001d42:	f012 f9d5 	bl	80140f0 <osThreadNew>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <MX_FREERTOS_Init+0x140>)
 8001d4a:	6013      	str	r3, [r2, #0]

  LedTaskHandle = osThreadNew(LedTask, NULL, &LedTask_attributes);
 8001d4c:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <MX_FREERTOS_Init+0x144>)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4822      	ldr	r0, [pc, #136]	@ (8001ddc <MX_FREERTOS_Init+0x148>)
 8001d52:	f012 f9cd 	bl	80140f0 <osThreadNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <MX_FREERTOS_Init+0x14c>)
 8001d5a:	6013      	str	r3, [r2, #0]
  osThreadSuspend(LedTaskHandle);
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <MX_FREERTOS_Init+0x14c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f012 fa57 	bl	8014214 <osThreadSuspend>

  AircraftLightsTaskHandle = osThreadNew(AircraftLightsTask, NULL, &AircraftLightsTask_attributes);
 8001d66:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <MX_FREERTOS_Init+0x150>)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	481f      	ldr	r0, [pc, #124]	@ (8001de8 <MX_FREERTOS_Init+0x154>)
 8001d6c:	f012 f9c0 	bl	80140f0 <osThreadNew>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a1e      	ldr	r2, [pc, #120]	@ (8001dec <MX_FREERTOS_Init+0x158>)
 8001d74:	6013      	str	r3, [r2, #0]
  osThreadSuspend(AircraftLightsTaskHandle);  // Start suspended, resume after init
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <MX_FREERTOS_Init+0x158>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f012 fa4a 	bl	8014214 <osThreadSuspend>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* Add event groups if required */
  /* USER CODE END RTOS_EVENTS */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	0801adb0 	.word	0x0801adb0
 8001d88:	08001e6d 	.word	0x08001e6d
 8001d8c:	24000808 	.word	0x24000808
 8001d90:	240007f0 	.word	0x240007f0
 8001d94:	240007f4 	.word	0x240007f4
 8001d98:	240007f8 	.word	0x240007f8
 8001d9c:	0801ae1c 	.word	0x0801ae1c
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	24000814 	.word	0x24000814
 8001da8:	0801ae40 	.word	0x0801ae40
 8001dac:	08001e11 	.word	0x08001e11
 8001db0:	24000818 	.word	0x24000818
 8001db4:	0801ad44 	.word	0x0801ad44
 8001db8:	08001e31 	.word	0x08001e31
 8001dbc:	240007fc 	.word	0x240007fc
 8001dc0:	0801ad68 	.word	0x0801ad68
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	24000800 	.word	0x24000800
 8001dcc:	0801ad8c 	.word	0x0801ad8c
 8001dd0:	08001e5d 	.word	0x08001e5d
 8001dd4:	24000804 	.word	0x24000804
 8001dd8:	0801add4 	.word	0x0801add4
 8001ddc:	08001f0d 	.word	0x08001f0d
 8001de0:	2400080c 	.word	0x2400080c
 8001de4:	0801adf8 	.word	0x0801adf8
 8001de8:	08001f51 	.word	0x08001f51
 8001dec:	24000810 	.word	0x24000810

08001df0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  for(;;) {
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001df8:	2108      	movs	r1, #8
 8001dfa:	4804      	ldr	r0, [pc, #16]	@ (8001e0c <StartDefaultTask+0x1c>)
 8001dfc:	f006 fb89 	bl	8008512 <HAL_GPIO_TogglePin>
    osDelay(800);
 8001e00:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e04:	f012 fa75 	bl	80142f2 <osDelay>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001e08:	bf00      	nop
 8001e0a:	e7f5      	b.n	8001df8 <StartDefaultTask+0x8>
 8001e0c:	58021000 	.word	0x58021000

08001e10 <Task2_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task2_init */
void Task2_init(void *argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  for(;;) {
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8001e18:	2120      	movs	r1, #32
 8001e1a:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <Task2_init+0x1c>)
 8001e1c:	f006 fb79 	bl	8008512 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001e20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e24:	f012 fa65 	bl	80142f2 <osDelay>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8001e28:	bf00      	nop
 8001e2a:	e7f5      	b.n	8001e18 <Task2_init+0x8>
 8001e2c:	58021000 	.word	0x58021000

08001e30 <Task_1khz_init>:

/**
  * @brief Task3: IMU data acquisition
  */
void Task_1khz_init(void *argument)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    for(;;) {
//        run_imu();
    	mixer_run();
 8001e38:	f001 f900 	bl	800303c <mixer_run>
        osDelay(1);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f012 fa58 	bl	80142f2 <osDelay>
    for(;;) {
 8001e42:	bf00      	nop
 8001e44:	e7f8      	b.n	8001e38 <Task_1khz_init+0x8>

08001e46 <Task_100Hz_init>:
    }
}

void Task_100Hz_init(void *argument)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	for(;;) {

//		run_mag();
		FSiA6B_Print();
 8001e4e:	f001 f9f3 	bl	8003238 <FSiA6B_Print>
		osDelay(100);
 8001e52:	2064      	movs	r0, #100	@ 0x64
 8001e54:	f012 fa4d 	bl	80142f2 <osDelay>
	for(;;) {
 8001e58:	bf00      	nop
 8001e5a:	e7f8      	b.n	8001e4e <Task_100Hz_init+0x8>

08001e5c <Task_50Hz_init>:

	}
}

void Task_50Hz_init(void *argument)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	for(;;) {
//		printf("Hello, World\n");
		osDelay(20);
 8001e64:	2014      	movs	r0, #20
 8001e66:	f012 fa44 	bl	80142f2 <osDelay>
 8001e6a:	e7fb      	b.n	8001e64 <Task_50Hz_init+0x8>

08001e6c <InitTask>:
}
/**
  * @brief InitTask: Initializes sensors & WS2812
  */
void InitTask(void *argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    printf("Starting sensor initialization...\r\n");
 8001e74:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <InitTask+0x78>)
 8001e76:	f016 f947 	bl	8018108 <puts>

    osThreadSuspend(Task_1khzHandle);
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <InitTask+0x7c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f012 f9c8 	bl	8014214 <osThreadSuspend>
    osDelay(200);
 8001e84:	20c8      	movs	r0, #200	@ 0xc8
 8001e86:	f012 fa34 	bl	80142f2 <osDelay>
    sensor_init();
 8001e8a:	f000 fe33 	bl	8002af4 <sensor_init>
    printf("Sensor initialization complete.\r\n");
 8001e8e:	4817      	ldr	r0, [pc, #92]	@ (8001eec <InitTask+0x80>)
 8001e90:	f016 f93a 	bl	8018108 <puts>

    /* Initialize WS2812 */
    extern TIM_HandleTypeDef htim3;
    WS2812_Init(&htim3);
 8001e94:	4816      	ldr	r0, [pc, #88]	@ (8001ef0 <InitTask+0x84>)
 8001e96:	f7ff fba9 	bl	80015ec <WS2812_Init>
    printf("WS2812 LED Driver Initialized.\r\n");
 8001e9a:	4816      	ldr	r0, [pc, #88]	@ (8001ef4 <InitTask+0x88>)
 8001e9c:	f016 f934 	bl	8018108 <puts>

    /* Initialize AircraftLights */
    extern TIM_HandleTypeDef htim3;
    AIRCRAFTLIGHTS_Init(&htim3);
 8001ea0:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <InitTask+0x84>)
 8001ea2:	f7ff fa13 	bl	80012cc <AIRCRAFTLIGHTS_Init>
    printf("AircraftLights Driver Initialized.\r\n");
 8001ea6:	4814      	ldr	r0, [pc, #80]	@ (8001ef8 <InitTask+0x8c>)
 8001ea8:	f016 f92e 	bl	8018108 <puts>

    /* Resume other tasks */
    osThreadResume(Task_1khzHandle);
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <InitTask+0x7c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f012 f9d0 	bl	8014256 <osThreadResume>
    osThreadResume(LedTaskHandle);
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <InitTask+0x90>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f012 f9cb 	bl	8014256 <osThreadResume>
    osThreadResume(AircraftLightsTaskHandle);
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <InitTask+0x94>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f012 f9c6 	bl	8014256 <osThreadResume>

    printf("InitTask complete. Deleting InitTask...\r\n");
 8001eca:	480e      	ldr	r0, [pc, #56]	@ (8001f04 <InitTask+0x98>)
 8001ecc:	f016 f91c 	bl	8018108 <puts>
    osThreadTerminate(InitTaskHandle);
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <InitTask+0x9c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f012 f9df 	bl	8014298 <osThreadTerminate>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0801a6c4 	.word	0x0801a6c4
 8001ee8:	240007fc 	.word	0x240007fc
 8001eec:	0801a6e8 	.word	0x0801a6e8
 8001ef0:	24000e04 	.word	0x24000e04
 8001ef4:	0801a70c 	.word	0x0801a70c
 8001ef8:	0801a72c 	.word	0x0801a72c
 8001efc:	2400080c 	.word	0x2400080c
 8001f00:	24000810 	.word	0x24000810
 8001f04:	0801a750 	.word	0x0801a750
 8001f08:	24000808 	.word	0x24000808

08001f0c <LedTask>:

/**
  * @brief LedTask: Controls WS2812 LED
  */
void LedTask(void *argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	6078      	str	r0, [r7, #4]
    for(;;) {

        main_led(0, 0, 255, 0, 0.1, 100);
 8001f14:	2364      	movs	r3, #100	@ 0x64
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001f4c <LedTask+0x40>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	2100      	movs	r1, #0
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fc74 	bl	8001810 <main_led>
        osDelay(100);
 8001f28:	2064      	movs	r0, #100	@ 0x64
 8001f2a:	f012 f9e2 	bl	80142f2 <osDelay>

        main_led(0, 0, 0, 0, 0.1, 100);
 8001f2e:	2364      	movs	r3, #100	@ 0x64
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001f4c <LedTask+0x40>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff fc67 	bl	8001810 <main_led>
        osDelay(100);
 8001f42:	2064      	movs	r0, #100	@ 0x64
 8001f44:	f012 f9d5 	bl	80142f2 <osDelay>
        main_led(0, 0, 255, 0, 0.1, 100);
 8001f48:	bf00      	nop
 8001f4a:	e7e3      	b.n	8001f14 <LedTask+0x8>
 8001f4c:	3dcccccd 	.word	0x3dcccccd

08001f50 <AircraftLightsTask>:

/**
  * @brief AircraftLightsTask: Controls Aircraft Lights
  */
void AircraftLightsTask(void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    for(;;) {

    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 8001f58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	21ff      	movs	r1, #255	@ 0xff
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff f9d4 	bl	8001310 <aircraftlights>
    	aircraftlights(1, 0, 255, 0, 1.0);  // Green
 8001f68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	22ff      	movs	r2, #255	@ 0xff
 8001f70:	2100      	movs	r1, #0
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff f9cc 	bl	8001310 <aircraftlights>
    	aircraftlights(2, 0, 255, 0, 1.0);  // Green
 8001f78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	22ff      	movs	r2, #255	@ 0xff
 8001f80:	2100      	movs	r1, #0
 8001f82:	2002      	movs	r0, #2
 8001f84:	f7ff f9c4 	bl	8001310 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);  // Red
 8001f88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	21ff      	movs	r1, #255	@ 0xff
 8001f92:	2003      	movs	r0, #3
 8001f94:	f7ff f9bc 	bl	8001310 <aircraftlights>
    	aircraftlights_update();
 8001f98:	f7ff fa96 	bl	80014c8 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(2000));
 8001f9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fa0:	f013 fbca 	bl	8015738 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 8001fa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fa8:	23ff      	movs	r3, #255	@ 0xff
 8001faa:	22ff      	movs	r2, #255	@ 0xff
 8001fac:	21ff      	movs	r1, #255	@ 0xff
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff f9ae 	bl	8001310 <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 8001fb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fb8:	23ff      	movs	r3, #255	@ 0xff
 8001fba:	22ff      	movs	r2, #255	@ 0xff
 8001fbc:	21ff      	movs	r1, #255	@ 0xff
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7ff f9a6 	bl	8001310 <aircraftlights>
    	aircraftlights_update();
 8001fc4:	f7ff fa80 	bl	80014c8 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8001fc8:	2023      	movs	r0, #35	@ 0x23
 8001fca:	f013 fbb5 	bl	8015738 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 8001fce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	21ff      	movs	r1, #255	@ 0xff
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff f999 	bl	8001310 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 8001fde:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	21ff      	movs	r1, #255	@ 0xff
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f7ff f991 	bl	8001310 <aircraftlights>
    	aircraftlights_update();
 8001fee:	f7ff fa6b 	bl	80014c8 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8001ff2:	2023      	movs	r0, #35	@ 0x23
 8001ff4:	f013 fba0 	bl	8015738 <vTaskDelay>

    	aircraftlights(0, 255, 255, 255, 1.0);
 8001ff8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001ffc:	23ff      	movs	r3, #255	@ 0xff
 8001ffe:	22ff      	movs	r2, #255	@ 0xff
 8002000:	21ff      	movs	r1, #255	@ 0xff
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff f984 	bl	8001310 <aircraftlights>
    	aircraftlights(3, 255, 255, 255, 1.0);
 8002008:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800200c:	23ff      	movs	r3, #255	@ 0xff
 800200e:	22ff      	movs	r2, #255	@ 0xff
 8002010:	21ff      	movs	r1, #255	@ 0xff
 8002012:	2003      	movs	r0, #3
 8002014:	f7ff f97c 	bl	8001310 <aircraftlights>
    	aircraftlights_update();
 8002018:	f7ff fa56 	bl	80014c8 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 800201c:	2023      	movs	r0, #35	@ 0x23
 800201e:	f013 fb8b 	bl	8015738 <vTaskDelay>

    	aircraftlights(0, 255, 0, 0, 1.0);
 8002022:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002026:	2300      	movs	r3, #0
 8002028:	2200      	movs	r2, #0
 800202a:	21ff      	movs	r1, #255	@ 0xff
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff f96f 	bl	8001310 <aircraftlights>
    	aircraftlights(3, 255, 0, 0, 1.0);
 8002032:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002036:	2300      	movs	r3, #0
 8002038:	2200      	movs	r2, #0
 800203a:	21ff      	movs	r1, #255	@ 0xff
 800203c:	2003      	movs	r0, #3
 800203e:	f7ff f967 	bl	8001310 <aircraftlights>
    	aircraftlights_update();
 8002042:	f7ff fa41 	bl	80014c8 <aircraftlights_update>

    	vTaskDelay(pdMS_TO_TICKS(35));
 8002046:	2023      	movs	r0, #35	@ 0x23
 8002048:	f013 fb76 	bl	8015738 <vTaskDelay>
    	aircraftlights(0, 255, 0, 0, 1.0);  // Red
 800204c:	bf00      	nop
 800204e:	e783      	b.n	8001f58 <AircraftLightsTask+0x8>

08002050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002066:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <MX_GPIO_Init+0x124>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206c:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <MX_GPIO_Init+0x124>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002076:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <MX_GPIO_Init+0x124>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002084:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <MX_GPIO_Init+0x124>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208a:	4a3a      	ldr	r2, [pc, #232]	@ (8002174 <MX_GPIO_Init+0x124>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <MX_GPIO_Init+0x124>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d0:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e4:	4a23      	ldr	r2, [pc, #140]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <MX_GPIO_Init+0x124>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002102:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <MX_GPIO_Init+0x124>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <MX_GPIO_Init+0x124>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2128      	movs	r1, #40	@ 0x28
 800211e:	4816      	ldr	r0, [pc, #88]	@ (8002178 <MX_GPIO_Init+0x128>)
 8002120:	f006 f9de 	bl	80084e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800212a:	4814      	ldr	r0, [pc, #80]	@ (800217c <MX_GPIO_Init+0x12c>)
 800212c:	f006 f9d8 	bl	80084e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002130:	2328      	movs	r3, #40	@ 0x28
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	@ (8002178 <MX_GPIO_Init+0x128>)
 8002148:	f006 f822 	bl	8008190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800214c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_GPIO_Init+0x12c>)
 8002166:	f006 f813 	bl	8008190 <HAL_GPIO_Init>

}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	@ 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	58024400 	.word	0x58024400
 8002178:	58021000 	.word	0x58021000
 800217c:	58020000 	.word	0x58020000

08002180 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	733b      	strb	r3, [r7, #12]
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 8002198:	f107 020c 	add.w	r2, r7, #12
 800219c:	2364      	movs	r3, #100	@ 0x64
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2302      	movs	r3, #2
 80021a2:	213c      	movs	r1, #60	@ 0x3c
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <HMC5883L_WriteReg+0x34>)
 80021a6:	f006 fa6b 	bl	8008680 <HAL_I2C_Master_Transmit>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2400081c 	.word	0x2400081c

080021b8 <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 80021c2:	1dfa      	adds	r2, r7, #7
 80021c4:	2364      	movs	r3, #100	@ 0x64
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	213c      	movs	r1, #60	@ 0x3c
 80021cc:	4808      	ldr	r0, [pc, #32]	@ (80021f0 <HMC5883L_ReadReg+0x38>)
 80021ce:	f006 fa57 	bl	8008680 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 80021d2:	f107 020f 	add.w	r2, r7, #15
 80021d6:	2364      	movs	r3, #100	@ 0x64
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	213c      	movs	r1, #60	@ 0x3c
 80021de:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <HMC5883L_ReadReg+0x38>)
 80021e0:	f006 fb66 	bl	80088b0 <HAL_I2C_Master_Receive>
    return rx_data;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2400081c 	.word	0x2400081c

080021f4 <HMC5883L_Init>:

void HMC5883L_Init(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 80021f8:	2180      	movs	r1, #128	@ 0x80
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff ffc0 	bl	8002180 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8002200:	2064      	movs	r0, #100	@ 0x64
 8002202:	f002 fff7 	bl	80051f4 <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 8002206:	2178      	movs	r1, #120	@ 0x78
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff ffb9 	bl	8002180 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 800220e:	2120      	movs	r1, #32
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff ffb5 	bl	8002180 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 8002216:	2100      	movs	r1, #0
 8002218:	2002      	movs	r0, #2
 800221a:	f7ff ffb1 	bl	8002180 <HMC5883L_WriteReg>
    HAL_Delay(10);
 800221e:	200a      	movs	r0, #10
 8002220:	f002 ffe8 	bl	80051f4 <HAL_Delay>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <MX_I2C1_Init+0x74>)
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <MX_I2C1_Init+0x78>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <MX_I2C1_Init+0x74>)
 8002234:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <MX_I2C1_Init+0x7c>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002238:	4b18      	ldr	r3, [pc, #96]	@ (800229c <MX_I2C1_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <MX_I2C1_Init+0x74>)
 8002240:	2201      	movs	r2, #1
 8002242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <MX_I2C1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_I2C1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <MX_I2C1_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_I2C1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <MX_I2C1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002262:	480e      	ldr	r0, [pc, #56]	@ (800229c <MX_I2C1_Init+0x74>)
 8002264:	f006 f970 	bl	8008548 <HAL_I2C_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800226e:	f001 f8ed 	bl	800344c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002272:	2100      	movs	r1, #0
 8002274:	4809      	ldr	r0, [pc, #36]	@ (800229c <MX_I2C1_Init+0x74>)
 8002276:	f007 fd9b 	bl	8009db0 <HAL_I2CEx_ConfigAnalogFilter>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002280:	f001 f8e4 	bl	800344c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002284:	2100      	movs	r1, #0
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_I2C1_Init+0x74>)
 8002288:	f007 fddd 	bl	8009e46 <HAL_I2CEx_ConfigDigitalFilter>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002292:	f001 f8db 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2400081c 	.word	0x2400081c
 80022a0:	40005400 	.word	0x40005400
 80022a4:	00d049fb 	.word	0x00d049fb

080022a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <MX_I2C2_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <MX_I2C2_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00D049FB;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <MX_I2C2_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <MX_I2C2_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022b8:	4b18      	ldr	r3, [pc, #96]	@ (800231c <MX_I2C2_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_I2C2_Init+0x74>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	@ (800231c <MX_I2C2_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_I2C2_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <MX_I2C2_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_I2C2_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <MX_I2C2_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022e2:	480e      	ldr	r0, [pc, #56]	@ (800231c <MX_I2C2_Init+0x74>)
 80022e4:	f006 f930 	bl	8008548 <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f001 f8ad 	bl	800344c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f2:	2100      	movs	r1, #0
 80022f4:	4809      	ldr	r0, [pc, #36]	@ (800231c <MX_I2C2_Init+0x74>)
 80022f6:	f007 fd5b 	bl	8009db0 <HAL_I2CEx_ConfigAnalogFilter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002300:	f001 f8a4 	bl	800344c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002304:	2100      	movs	r1, #0
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_I2C2_Init+0x74>)
 8002308:	f007 fd9d 	bl	8009e46 <HAL_I2CEx_ConfigDigitalFilter>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002312:	f001 f89b 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	24000870 	.word	0x24000870
 8002320:	40005800 	.word	0x40005800
 8002324:	00d049fb 	.word	0x00d049fb

08002328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ba      	sub	sp, #232	@ 0xe8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	22b8      	movs	r2, #184	@ 0xb8
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f015 ffbd 	bl	80182c8 <memset>
  if(i2cHandle->Instance==I2C1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <HAL_I2C_MspInit+0x198>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f040 80c1 	bne.w	80024dc <HAL_I2C_MspInit+0x1b4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800235a:	f04f 0208 	mov.w	r2, #8
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	4618      	mov	r0, r3
 8002372:	f009 ff5d 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800237c:	f001 f866 	bl	800344c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002386:	4a4f      	ldr	r2, [pc, #316]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002390:	4b4c      	ldr	r3, [pc, #304]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800239e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a6:	2312      	movs	r3, #18
 80023a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b8:	2304      	movs	r3, #4
 80023ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4840      	ldr	r0, [pc, #256]	@ (80024c8 <HAL_I2C_MspInit+0x1a0>)
 80023c6:	f005 fee3 	bl	8008190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ca:	4b3e      	ldr	r3, [pc, #248]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 80023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d0:	4a3c      	ldr	r2, [pc, #240]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 80023d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023da:	4b3a      	ldr	r3, [pc, #232]	@ (80024c4 <HAL_I2C_MspInit+0x19c>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80023e8:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 80023ea:	4a39      	ldr	r2, [pc, #228]	@ (80024d0 <HAL_I2C_MspInit+0x1a8>)
 80023ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 80023f0:	2221      	movs	r2, #33	@ 0x21
 80023f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f4:	4b35      	ldr	r3, [pc, #212]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fa:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002400:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 8002402:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002406:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002408:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002414:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002426:	4829      	ldr	r0, [pc, #164]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 8002428:	f003 f860 	bl	80054ec <HAL_DMA_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8002432:	f001 f80b 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 800243a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800243c:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_I2C_MspInit+0x1a4>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002442:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002444:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_I2C_MspInit+0x1b0>)
 8002446:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 800244a:	2222      	movs	r2, #34	@ 0x22
 800244c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800245a:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 800245c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002460:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800246e:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002470:	2200      	movs	r2, #0
 8002472:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002474:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002480:	4814      	ldr	r0, [pc, #80]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002482:	f003 f833 	bl	80054ec <HAL_DMA_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800248c:	f000 ffde 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a10      	ldr	r2, [pc, #64]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002494:	639a      	str	r2, [r3, #56]	@ 0x38
 8002496:	4a0f      	ldr	r2, [pc, #60]	@ (80024d4 <HAL_I2C_MspInit+0x1ac>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2105      	movs	r1, #5
 80024a0:	201f      	movs	r0, #31
 80024a2:	f002 ff83 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024a6:	201f      	movs	r0, #31
 80024a8:	f002 ff9a 	bl	80053e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2105      	movs	r1, #5
 80024b0:	2020      	movs	r0, #32
 80024b2:	f002 ff7b 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024b6:	2020      	movs	r0, #32
 80024b8:	f002 ff92 	bl	80053e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80024bc:	e0c5      	b.n	800264a <HAL_I2C_MspInit+0x322>
 80024be:	bf00      	nop
 80024c0:	40005400 	.word	0x40005400
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58020400 	.word	0x58020400
 80024cc:	240008c4 	.word	0x240008c4
 80024d0:	40020010 	.word	0x40020010
 80024d4:	2400093c 	.word	0x2400093c
 80024d8:	40020028 	.word	0x40020028
  else if(i2cHandle->Instance==I2C2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002654 <HAL_I2C_MspInit+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f040 80b1 	bne.w	800264a <HAL_I2C_MspInit+0x322>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024e8:	f04f 0208 	mov.w	r2, #8
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0318 	add.w	r3, r7, #24
 80024fe:	4618      	mov	r0, r3
 8002500:	f009 fe96 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_MspInit+0x1e6>
      Error_Handler();
 800250a:	f000 ff9f 	bl	800344c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b52      	ldr	r3, [pc, #328]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002514:	4a50      	ldr	r2, [pc, #320]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800251e:	4b4e      	ldr	r3, [pc, #312]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800252c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002534:	2312      	movs	r3, #18
 8002536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002546:	2304      	movs	r3, #4
 8002548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002550:	4619      	mov	r1, r3
 8002552:	4842      	ldr	r0, [pc, #264]	@ (800265c <HAL_I2C_MspInit+0x334>)
 8002554:	f005 fe1c 	bl	8008190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 800255a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800255e:	4a3e      	ldr	r2, [pc, #248]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 8002560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002568:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_I2C_MspInit+0x330>)
 800256a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream6;
 8002576:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 8002578:	4a3a      	ldr	r2, [pc, #232]	@ (8002664 <HAL_I2C_MspInit+0x33c>)
 800257a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800257c:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 800257e:	2223      	movs	r2, #35	@ 0x23
 8002580:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002582:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800258e:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 8002590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002594:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002596:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259c:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80025b4:	482a      	ldr	r0, [pc, #168]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025b6:	f002 ff99 	bl	80054ec <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_MspInit+0x29c>
      Error_Handler();
 80025c0:	f000 ff44 	bl	800344c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ca:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_I2C_MspInit+0x338>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80025d0:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025d2:	4a26      	ldr	r2, [pc, #152]	@ (800266c <HAL_I2C_MspInit+0x344>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025d8:	2224      	movs	r2, #36	@ 0x24
 80025da:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025dc:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800260e:	4816      	ldr	r0, [pc, #88]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 8002610:	f002 ff6c 	bl	80054ec <HAL_DMA_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_MspInit+0x2f6>
      Error_Handler();
 800261a:	f000 ff17 	bl	800344c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 8002622:	639a      	str	r2, [r3, #56]	@ 0x38
 8002624:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <HAL_I2C_MspInit+0x340>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2105      	movs	r1, #5
 800262e:	2021      	movs	r0, #33	@ 0x21
 8002630:	f002 febc 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002634:	2021      	movs	r0, #33	@ 0x21
 8002636:	f002 fed3 	bl	80053e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2105      	movs	r1, #5
 800263e:	2022      	movs	r0, #34	@ 0x22
 8002640:	f002 feb4 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002644:	2022      	movs	r0, #34	@ 0x22
 8002646:	f002 fecb 	bl	80053e0 <HAL_NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	37e8      	adds	r7, #232	@ 0xe8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40005800 	.word	0x40005800
 8002658:	58024400 	.word	0x58024400
 800265c:	58020400 	.word	0x58020400
 8002660:	240009b4 	.word	0x240009b4
 8002664:	400200a0 	.word	0x400200a0
 8002668:	24000a2c 	.word	0x24000a2c
 800266c:	400200b8 	.word	0x400200b8

08002670 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d101      	bne.n	8002688 <LL_USART_IsActiveFlag_FE+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_USART_IsActiveFlag_FE+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d101      	bne.n	80026ae <LL_USART_IsActiveFlag_ORE+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_USART_IsActiveFlag_ORE+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d101      	bne.n	80026d4 <LL_USART_IsActiveFlag_TC+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_USART_IsActiveFlag_TC+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b80      	cmp	r3, #128	@ 0x80
 80026f4:	d101      	bne.n	80026fa <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2208      	movs	r2, #8
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	61ba      	str	r2, [r7, #24]
 800275e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	e841 2300 	strex	r3, r2, [r1]
 8002768:	613b      	str	r3, [r7, #16]
   return(result);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e025      	b.n	80027fa <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 80027ae:	481b      	ldr	r0, [pc, #108]	@ (800281c <_write+0x80>)
 80027b0:	f7ff ff71 	bl	8002696 <LL_USART_IsActiveFlag_ORE>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <_write+0x2a>
 80027ba:	4818      	ldr	r0, [pc, #96]	@ (800281c <_write+0x80>)
 80027bc:	f7ff ff58 	bl	8002670 <LL_USART_IsActiveFlag_FE>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 80027c6:	4815      	ldr	r0, [pc, #84]	@ (800281c <_write+0x80>)
 80027c8:	f7ff ffab 	bl	8002722 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 80027cc:	4813      	ldr	r0, [pc, #76]	@ (800281c <_write+0x80>)
 80027ce:	f7ff ff9b 	bl	8002708 <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d6:	e01c      	b.n	8002812 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 80027d8:	4810      	ldr	r0, [pc, #64]	@ (800281c <_write+0x80>)
 80027da:	f7ff ff82 	bl	80026e2 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0e4      	beq.n	80027ae <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	480b      	ldr	r0, [pc, #44]	@ (800281c <_write+0x80>)
 80027f0:	f7ff ffc5 	bl	800277e <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	dbea      	blt.n	80027d8 <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8002802:	bf00      	nop
 8002804:	4805      	ldr	r0, [pc, #20]	@ (800281c <_write+0x80>)
 8002806:	f7ff ff59 	bl	80026bc <LL_USART_IsActiveFlag_TC>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f9      	beq.n	8002804 <_write+0x68>
    return len;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40011400 	.word	0x40011400

08002820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002826:	f000 fdd3 	bl	80033d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282a:	f002 fc87 	bl	800513c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800282e:	f000 f8f3 	bl	8002a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002832:	f7ff fc0d 	bl	8002050 <MX_GPIO_Init>
  MX_DMA_Init();
 8002836:	f7ff f9d5 	bl	8001be4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 800283a:	f002 fa9f 	bl	8004d7c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800283e:	f000 ff45 	bl	80036cc <MX_SPI3_Init>
  MX_I2C1_Init();
 8002842:	f7ff fcf1 	bl	8002228 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002846:	f001 fe03 	bl	8004450 <MX_TIM3_Init>
  MX_TIM2_Init();
 800284a:	f001 fd8b 	bl	8004364 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 800284e:	f000 fe03 	bl	8003458 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 8002852:	f7ff fd29 	bl	80022a8 <MX_I2C2_Init>
  MX_UART4_Init();
 8002856:	f002 f9ad 	bl	8004bb4 <MX_UART4_Init>
  MX_TIM5_Init();
 800285a:	f001 fe7b 	bl	8004554 <MX_TIM5_Init>
  MX_UART7_Init();
 800285e:	f002 f9f5 	bl	8004c4c <MX_UART7_Init>
  MX_USART2_UART_Init();
 8002862:	f002 fa3f 	bl	8004ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  StartupTone();
 8002866:	f7fd fffb 	bl	8000860 <StartupTone>

  LL_USART_EnableIT_RXNE(USART6);
 800286a:	485f      	ldr	r0, [pc, #380]	@ (80029e8 <main+0x1c8>)
 800286c:	f7ff ff66 	bl	800273c <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8002870:	485e      	ldr	r0, [pc, #376]	@ (80029ec <main+0x1cc>)
 8002872:	f7ff ff63 	bl	800273c <LL_USART_EnableIT_RXNE_RXFNE>

  HAL_Delay(500);
 8002876:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800287a:	f002 fcbb 	bl	80051f4 <HAL_Delay>

  eeprom_startup();
 800287e:	f000 f9a9 	bl	8002bd4 <eeprom_startup>

  // Initialize PID controllers
  pid_init(&roll_pid, &pitch_pid, &yaw_rate_pid,
 8002882:	4b5b      	ldr	r3, [pc, #364]	@ (80029f0 <main+0x1d0>)
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <main+0x1d4>)
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <main+0x1d8>)
 800288c:	4a5b      	ldr	r2, [pc, #364]	@ (80029fc <main+0x1dc>)
 800288e:	495c      	ldr	r1, [pc, #368]	@ (8002a00 <main+0x1e0>)
 8002890:	485c      	ldr	r0, [pc, #368]	@ (8002a04 <main+0x1e4>)
 8002892:	f7ff f815 	bl	80018c0 <pid_init>
		  &eeprom_roll_pid_read, &eeprom_pitch_pid_read, &eeprom_yaw_rate_pid_read);

  /* *********** ESC Startup Calibration ************ */
  HAL_Delay(3000);
 8002896:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800289a:	f002 fcab 	bl	80051f4 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800289e:	2100      	movs	r1, #0
 80028a0:	4859      	ldr	r0, [pc, #356]	@ (8002a08 <main+0x1e8>)
 80028a2:	f00c fa71 	bl	800ed88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80028a6:	2104      	movs	r1, #4
 80028a8:	4857      	ldr	r0, [pc, #348]	@ (8002a08 <main+0x1e8>)
 80028aa:	f00c fa6d 	bl	800ed88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80028ae:	2108      	movs	r1, #8
 80028b0:	4855      	ldr	r0, [pc, #340]	@ (8002a08 <main+0x1e8>)
 80028b2:	f00c fa69 	bl	800ed88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80028b6:	210c      	movs	r1, #12
 80028b8:	4853      	ldr	r0, [pc, #332]	@ (8002a08 <main+0x1e8>)
 80028ba:	f00c fa65 	bl	800ed88 <HAL_TIM_PWM_Start>
  /* *********** ESC Startup Calibration END ************ */

  /* *********** iBus Calibration Check ************ */
  while (Is_iBus_Received() == 0) {
 80028be:	e00b      	b.n	80028d8 <main+0xb8>
	  Buzzer_On(3000);
 80028c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80028c4:	f7fd ff9a 	bl	80007fc <Buzzer_On>
	  HAL_Delay(200);
 80028c8:	20c8      	movs	r0, #200	@ 0xc8
 80028ca:	f002 fc93 	bl	80051f4 <HAL_Delay>
	  Buzzer_Off();
 80028ce:	f7fd ffbd 	bl	800084c <Buzzer_Off>
	  HAL_Delay(200);
 80028d2:	20c8      	movs	r0, #200	@ 0xc8
 80028d4:	f002 fc8e 	bl	80051f4 <HAL_Delay>
  while (Is_iBus_Received() == 0) {
 80028d8:	f000 fd5a 	bl	8003390 <Is_iBus_Received>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <main+0xa0>
  }
  if (iBus.SwC == 2000) {
 80028e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <main+0x1ec>)
 80028e4:	899b      	ldrh	r3, [r3, #12]
 80028e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028ea:	d144      	bne.n	8002976 <main+0x156>
	  Buzzer_On(1500);
 80028ec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80028f0:	f7fd ff84 	bl	80007fc <Buzzer_On>
	  HAL_Delay(200);
 80028f4:	20c8      	movs	r0, #200	@ 0xc8
 80028f6:	f002 fc7d 	bl	80051f4 <HAL_Delay>
	  Buzzer_On(2000);
 80028fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028fe:	f7fd ff7d 	bl	80007fc <Buzzer_On>
	  HAL_Delay(200);
 8002902:	20c8      	movs	r0, #200	@ 0xc8
 8002904:	f002 fc76 	bl	80051f4 <HAL_Delay>
	  Buzzer_On(1500);
 8002908:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800290c:	f7fd ff76 	bl	80007fc <Buzzer_On>
	  HAL_Delay(200);
 8002910:	20c8      	movs	r0, #200	@ 0xc8
 8002912:	f002 fc6f 	bl	80051f4 <HAL_Delay>
	  Buzzer_On(2000);
 8002916:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800291a:	f7fd ff6f 	bl	80007fc <Buzzer_On>
	  HAL_Delay(200);
 800291e:	20c8      	movs	r0, #200	@ 0xc8
 8002920:	f002 fc68 	bl	80051f4 <HAL_Delay>
	  Buzzer_Off();
 8002924:	f7fd ff92 	bl	800084c <Buzzer_Off>
	  ESC_Calibration();
 8002928:	f000 fce2 	bl	80032f0 <ESC_Calibration>
	  while (iBus.SwC != 1000) {
 800292c:	e011      	b.n	8002952 <main+0x132>
		  Is_iBus_Received();
 800292e:	f000 fd2f 	bl	8003390 <Is_iBus_Received>
		  Buzzer_On(1500);
 8002932:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002936:	f7fd ff61 	bl	80007fc <Buzzer_On>
		  HAL_Delay(200);
 800293a:	20c8      	movs	r0, #200	@ 0xc8
 800293c:	f002 fc5a 	bl	80051f4 <HAL_Delay>
		  Buzzer_On(2000);
 8002940:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002944:	f7fd ff5a 	bl	80007fc <Buzzer_On>
		  HAL_Delay(200);
 8002948:	20c8      	movs	r0, #200	@ 0xc8
 800294a:	f002 fc53 	bl	80051f4 <HAL_Delay>
		  Buzzer_Off();
 800294e:	f7fd ff7d 	bl	800084c <Buzzer_Off>
	  while (iBus.SwC != 1000) {
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <main+0x1ec>)
 8002954:	899b      	ldrh	r3, [r3, #12]
 8002956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800295a:	d1e8      	bne.n	800292e <main+0x10e>
	  }
  }
  /* *********** iBus Calibration Check END ************ */

  /* *********** iBus Throttle Check ************ */
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 800295c:	e00b      	b.n	8002976 <main+0x156>
	  Buzzer_On(343);
 800295e:	f240 1057 	movw	r0, #343	@ 0x157
 8002962:	f7fd ff4b 	bl	80007fc <Buzzer_On>
	  HAL_Delay(70);
 8002966:	2046      	movs	r0, #70	@ 0x46
 8002968:	f002 fc44 	bl	80051f4 <HAL_Delay>
	  Buzzer_Off();
 800296c:	f7fd ff6e 	bl	800084c <Buzzer_Off>
	  HAL_Delay(70);
 8002970:	2046      	movs	r0, #70	@ 0x46
 8002972:	f002 fc3f 	bl	80051f4 <HAL_Delay>
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8002976:	f000 fb3b 	bl	8002ff0 <Is_iBus_Throttle_Min>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <main+0x13e>
 8002980:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <main+0x1ec>)
 8002982:	891b      	ldrh	r3, [r3, #8]
 8002984:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002988:	d0e9      	beq.n	800295e <main+0x13e>
  }
  Buzzer_On(1092);
 800298a:	f240 4044 	movw	r0, #1092	@ 0x444
 800298e:	f7fd ff35 	bl	80007fc <Buzzer_On>
  HAL_Delay(100);
 8002992:	2064      	movs	r0, #100	@ 0x64
 8002994:	f002 fc2e 	bl	80051f4 <HAL_Delay>
  Buzzer_On(592);
 8002998:	f44f 7014 	mov.w	r0, #592	@ 0x250
 800299c:	f7fd ff2e 	bl	80007fc <Buzzer_On>
  HAL_Delay(100);
 80029a0:	2064      	movs	r0, #100	@ 0x64
 80029a2:	f002 fc27 	bl	80051f4 <HAL_Delay>
  Buzzer_On(292);
 80029a6:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80029aa:	f7fd ff27 	bl	80007fc <Buzzer_On>
  HAL_Delay(100);
 80029ae:	2064      	movs	r0, #100	@ 0x64
 80029b0:	f002 fc20 	bl	80051f4 <HAL_Delay>
  Buzzer_Off();
 80029b4:	f7fd ff4a 	bl	800084c <Buzzer_Off>
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  /* === Initialize sensors here === */

  HMC5883L_Init();
 80029b8:	f7ff fc1c 	bl	80021f4 <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 80029bc:	200a      	movs	r0, #10
 80029be:	f7ff fbfb 	bl	80021b8 <HMC5883L_ReadReg>
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  printf("HMC5883L ID: %c\n", hmc_id);
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4811      	ldr	r0, [pc, #68]	@ (8002a10 <main+0x1f0>)
 80029cc:	f015 fb34 	bl	8018038 <iprintf>

  WS2812_Init(&htim3);
 80029d0:	4810      	ldr	r0, [pc, #64]	@ (8002a14 <main+0x1f4>)
 80029d2:	f7fe fe0b 	bl	80015ec <WS2812_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80029d6:	f011 fb41 	bl	801405c <osKernelInitialize>
  MX_FREERTOS_Init();
 80029da:	f7ff f95b 	bl	8001c94 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80029de:	f011 fb61 	bl	80140a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029e2:	bf00      	nop
 80029e4:	e7fd      	b.n	80029e2 <main+0x1c2>
 80029e6:	bf00      	nop
 80029e8:	40011400 	.word	0x40011400
 80029ec:	40004c00 	.word	0x40004c00
 80029f0:	24000b14 	.word	0x24000b14
 80029f4:	24000afc 	.word	0x24000afc
 80029f8:	24000ae4 	.word	0x24000ae4
 80029fc:	24000b90 	.word	0x24000b90
 8002a00:	24000b60 	.word	0x24000b60
 8002a04:	24000b30 	.word	0x24000b30
 8002a08:	24000e50 	.word	0x24000e50
 8002a0c:	240007d8 	.word	0x240007d8
 8002a10:	0801a77c 	.word	0x0801a77c
 8002a14:	24000e04 	.word	0x24000e04

08002a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b09c      	sub	sp, #112	@ 0x70
 8002a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a22:	224c      	movs	r2, #76	@ 0x4c
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f015 fc4e 	bl	80182c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2220      	movs	r2, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f015 fc48 	bl	80182c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f008 fc17 	bl	800b26c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <SystemClock_Config+0xd8>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	4a2a      	ldr	r2, [pc, #168]	@ (8002af0 <SystemClock_Config+0xd8>)
 8002a48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a4c:	6193      	str	r3, [r2, #24]
 8002a4e:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <SystemClock_Config+0xd8>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a5a:	bf00      	nop
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <SystemClock_Config+0xd8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a68:	d1f8      	bne.n	8002a5c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a74:	2302      	movs	r3, #2
 8002a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002a80:	232c      	movs	r3, #44	@ 0x2c
 8002a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002a90:	230c      	movs	r3, #12
 8002a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f008 fc1d 	bl	800b2e0 <HAL_RCC_OscConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002aac:	f000 fcce 	bl	800344c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab0:	233f      	movs	r3, #63	@ 0x3f
 8002ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002abc:	2308      	movs	r3, #8
 8002abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002ac0:	2340      	movs	r3, #64	@ 0x40
 8002ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002ac4:	2340      	movs	r3, #64	@ 0x40
 8002ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002ace:	2340      	movs	r3, #64	@ 0x40
 8002ad0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f008 ffdc 	bl	800ba94 <HAL_RCC_ClockConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002ae2:	f000 fcb3 	bl	800344c <Error_Handler>
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	3770      	adds	r7, #112	@ 0x70
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	58024800 	.word	0x58024800

08002af4 <sensor_init>:
    printf("Mag: %.2f %.2f %.2f | Heading: %.2f°\r\n",
           hmc_data.mag_x, hmc_data.mag_y, hmc_data.mag_z,
           compass->heading);
}

void sensor_init(void){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
    // === Initialize ICM42688P ===
	ICM42688P_Init(&icm, &hspi3);
 8002afa:	4911      	ldr	r1, [pc, #68]	@ (8002b40 <sensor_init+0x4c>)
 8002afc:	4811      	ldr	r0, [pc, #68]	@ (8002b44 <sensor_init+0x50>)
 8002afe:	f7fe fb6f 	bl	80011e0 <ICM42688P_Init>
	printf("ICM42688P initialization called.\r\n");
 8002b02:	4811      	ldr	r0, [pc, #68]	@ (8002b48 <sensor_init+0x54>)
 8002b04:	f015 fb00 	bl	8018108 <puts>

    // === Initialize HMC5883L ===
    HMC5883L_Init();
 8002b08:	f7ff fb74 	bl	80021f4 <HMC5883L_Init>
    uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	f7ff fb53 	bl	80021b8 <HMC5883L_ReadReg>
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
    printf("HMC5883L ID: %c\r\n", hmc_id);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480c      	ldr	r0, [pc, #48]	@ (8002b4c <sensor_init+0x58>)
 8002b1c:	f015 fa8c 	bl	8018038 <iprintf>

    WS2812_Init(&WS2812_TIMER);
 8002b20:	480b      	ldr	r0, [pc, #44]	@ (8002b50 <sensor_init+0x5c>)
 8002b22:	f7fe fd63 	bl	80015ec <WS2812_Init>

    printf("Sensor initialization complete. Deleting InitTask...\r\n");
 8002b26:	480b      	ldr	r0, [pc, #44]	@ (8002b54 <sensor_init+0x60>)
 8002b28:	f015 faee 	bl	8018108 <puts>

    sensors_ready = 1;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <sensor_init+0x64>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]

    system_startup();
 8002b32:	f000 f813 	bl	8002b5c <system_startup>

}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	24000c14 	.word	0x24000c14
 8002b44:	24000aa4 	.word	0x24000aa4
 8002b48:	0801a81c 	.word	0x0801a81c
 8002b4c:	0801a840 	.word	0x0801a840
 8002b50:	24000e04 	.word	0x24000e04
 8002b54:	0801a854 	.word	0x0801a854
 8002b58:	24000ab0 	.word	0x24000ab0

08002b5c <system_startup>:

void system_startup(void) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

	while (Is_iBus_Throttle_Armed() == 0) {
 8002b60:	bf00      	nop
 8002b62:	f000 fb9f 	bl	80032a4 <Is_iBus_Throttle_Armed>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0fa      	beq.n	8002b62 <system_startup+0x6>
//		}

	}

	/* *********** iBus Throttle Check ************ */
	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA != 2000) {
 8002b6c:	e00c      	b.n	8002b88 <system_startup+0x2c>
		Buzzer_On(1200);
 8002b6e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8002b72:	f7fd fe43 	bl	80007fc <Buzzer_On>
		HAL_Delay(300);
 8002b76:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002b7a:	f002 fb3b 	bl	80051f4 <HAL_Delay>
		Buzzer_Off();
 8002b7e:	f7fd fe65 	bl	800084c <Buzzer_Off>
		HAL_Delay(70);
 8002b82:	2046      	movs	r0, #70	@ 0x46
 8002b84:	f002 fb36 	bl	80051f4 <HAL_Delay>
	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA != 2000) {
 8002b88:	f000 fa32 	bl	8002ff0 <Is_iBus_Throttle_Min>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <system_startup+0x12>
 8002b92:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <system_startup+0x74>)
 8002b94:	891b      	ldrh	r3, [r3, #8]
 8002b96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b9a:	d1e8      	bne.n	8002b6e <system_startup+0x12>
	}
	Buzzer_On(1092);
 8002b9c:	f240 4044 	movw	r0, #1092	@ 0x444
 8002ba0:	f7fd fe2c 	bl	80007fc <Buzzer_On>
	HAL_Delay(100);
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	f002 fb25 	bl	80051f4 <HAL_Delay>
	Buzzer_On(592);
 8002baa:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002bae:	f7fd fe25 	bl	80007fc <Buzzer_On>
	HAL_Delay(100);
 8002bb2:	2064      	movs	r0, #100	@ 0x64
 8002bb4:	f002 fb1e 	bl	80051f4 <HAL_Delay>
	Buzzer_On(292);
 8002bb8:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8002bbc:	f7fd fe1e 	bl	80007fc <Buzzer_On>
	HAL_Delay(100);
 8002bc0:	2064      	movs	r0, #100	@ 0x64
 8002bc2:	f002 fb17 	bl	80051f4 <HAL_Delay>
	Buzzer_Off();
 8002bc6:	f7fd fe41 	bl	800084c <Buzzer_Off>
	/* *********** iBus Throttle Check END ************ */

}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	240007d8 	.word	0x240007d8

08002bd4 <eeprom_startup>:

void eeprom_startup(void){
 8002bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd8:	b0d6      	sub	sp, #344	@ 0x158
 8002bda:	af0a      	add	r7, sp, #40	@ 0x28

	if (EEPROM_Init() != W25Qxx_OK) {
 8002bdc:	f7fd fe64 	bl	80008a8 <EEPROM_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01c      	beq.n	8002c20 <eeprom_startup+0x4c>
		printf("EEPROM Init Failed\r\n");
 8002be6:	48ba      	ldr	r0, [pc, #744]	@ (8002ed0 <eeprom_startup+0x2fc>)
 8002be8:	f015 fa8e 	bl	8018108 <puts>
		while(1)
		{
			Buzzer_On(500);
 8002bec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bf0:	f7fd fe04 	bl	80007fc <Buzzer_On>
			HAL_Delay(200);
 8002bf4:	20c8      	movs	r0, #200	@ 0xc8
 8002bf6:	f002 fafd 	bl	80051f4 <HAL_Delay>
			Buzzer_Off();
 8002bfa:	f7fd fe27 	bl	800084c <Buzzer_Off>
			HAL_Delay(200);
 8002bfe:	20c8      	movs	r0, #200	@ 0xc8
 8002c00:	f002 faf8 	bl	80051f4 <HAL_Delay>
			Buzzer_On(500);
 8002c04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c08:	f7fd fdf8 	bl	80007fc <Buzzer_On>
			HAL_Delay(200);
 8002c0c:	20c8      	movs	r0, #200	@ 0xc8
 8002c0e:	f002 faf1 	bl	80051f4 <HAL_Delay>
			Buzzer_Off();
 8002c12:	f7fd fe1b 	bl	800084c <Buzzer_Off>
			HAL_Delay(200);
 8002c16:	20c8      	movs	r0, #200	@ 0xc8
 8002c18:	f002 faec 	bl	80051f4 <HAL_Delay>
			Buzzer_On(500);
 8002c1c:	bf00      	nop
 8002c1e:	e7e5      	b.n	8002bec <eeprom_startup+0x18>
		Error_Handler();
	}

	DroneConfig_t config;

	printf("================= Connecting to EEPROM =================\n"
 8002c20:	48ac      	ldr	r0, [pc, #688]	@ (8002ed4 <eeprom_startup+0x300>)
 8002c22:	f015 fa71 	bl	8018108 <puts>
			"\r\n");

	if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 8002c26:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fe92 	bl	8000954 <EEPROM_ReadConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <eeprom_startup+0x7c>
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
				config.flight_mode, config.pid[0]);
 8002c36:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002c3a:	4619      	mov	r1, r3
				config.flight_mode, config.pid[0]);
 8002c3c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
		printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c44:	ec53 2b17 	vmov	r2, r3, d7
 8002c48:	48a3      	ldr	r0, [pc, #652]	@ (8002ed8 <eeprom_startup+0x304>)
 8002c4a:	f015 f9f5 	bl	8018038 <iprintf>
 8002c4e:	e02a      	b.n	8002ca6 <eeprom_startup+0xd2>
	} else {
		printf("No valid config found, loading defaults\r\n");
 8002c50:	48a2      	ldr	r0, [pc, #648]	@ (8002edc <eeprom_startup+0x308>)
 8002c52:	f015 fa59 	bl	8018108 <puts>
		DroneConfig_t default_config = {
 8002c56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c5e:	4aa0      	ldr	r2, [pc, #640]	@ (8002ee0 <eeprom_startup+0x30c>)
 8002c60:	4618      	mov	r0, r3
 8002c62:	4611      	mov	r1, r2
 8002c64:	2390      	movs	r3, #144	@ 0x90
 8002c66:	461a      	mov	r2, r3
 8002c68:	f015 fc0b 	bl	8018482 <memcpy>
						.rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
						.mode = 0
				},
				.crc = 0
		};
		default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	218c      	movs	r1, #140	@ 0x8c
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd feca 	bl	8000a0c <CalculateCRC32>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fe9a 	bl	80009c4 <EEPROM_WriteConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <eeprom_startup+0xcc>
			printf("Failed to write default config\r\n");
 8002c96:	4893      	ldr	r0, [pc, #588]	@ (8002ee4 <eeprom_startup+0x310>)
 8002c98:	f015 fa36 	bl	8018108 <puts>
			Error_Handler();
 8002c9c:	f000 fbd6 	bl	800344c <Error_Handler>
		}
		printf("Default config written and verified\r\n");
 8002ca0:	4891      	ldr	r0, [pc, #580]	@ (8002ee8 <eeprom_startup+0x314>)
 8002ca2:	f015 fa31 	bl	8018108 <puts>
	}

	if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 8002ca6:	4891      	ldr	r0, [pc, #580]	@ (8002eec <eeprom_startup+0x318>)
 8002ca8:	f7fd ffac 	bl	8000c04 <EEPROM_GetPID>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d118      	bne.n	8002ce4 <eeprom_startup+0x110>
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8002eec <eeprom_startup+0x318>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002cb8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002cbc:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <eeprom_startup+0x318>)
 8002cbe:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002cc6:	4b89      	ldr	r3, [pc, #548]	@ (8002eec <eeprom_startup+0x318>)
 8002cc8:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002ccc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002cd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002cd4:	ed8d 7b00 	vstr	d7, [sp]
 8002cd8:	ec53 2b15 	vmov	r2, r3, d5
 8002cdc:	4884      	ldr	r0, [pc, #528]	@ (8002ef0 <eeprom_startup+0x31c>)
 8002cde:	f015 f9ab 	bl	8018038 <iprintf>
 8002ce2:	e002      	b.n	8002cea <eeprom_startup+0x116>
	} else {
		printf("Failed to read PID\r\n");
 8002ce4:	4883      	ldr	r0, [pc, #524]	@ (8002ef4 <eeprom_startup+0x320>)
 8002ce6:	f015 fa0f 	bl	8018108 <puts>
	}

	if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 8002cea:	4883      	ldr	r0, [pc, #524]	@ (8002ef8 <eeprom_startup+0x324>)
 8002cec:	f7fd ff12 	bl	8000b14 <EEPROM_GetGyroCalibration>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <eeprom_startup+0x154>
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002cf6:	4b80      	ldr	r3, [pc, #512]	@ (8002ef8 <eeprom_startup+0x324>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002cfc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002d00:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef8 <eeprom_startup+0x324>)
 8002d02:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <eeprom_startup+0x324>)
 8002d0c:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d10:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d18:	ed8d 7b00 	vstr	d7, [sp]
 8002d1c:	ec53 2b15 	vmov	r2, r3, d5
 8002d20:	4876      	ldr	r0, [pc, #472]	@ (8002efc <eeprom_startup+0x328>)
 8002d22:	f015 f989 	bl	8018038 <iprintf>
 8002d26:	e002      	b.n	8002d2e <eeprom_startup+0x15a>
	} else {
		printf("Failed to read EEPROM Gyro Data\r\n");
 8002d28:	4875      	ldr	r0, [pc, #468]	@ (8002f00 <eeprom_startup+0x32c>)
 8002d2a:	f015 f9ed 	bl	8018108 <puts>
	}

	if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8002d2e:	4875      	ldr	r0, [pc, #468]	@ (8002f04 <eeprom_startup+0x330>)
 8002d30:	f7fd fea6 	bl	8000a80 <EEPROM_GetAccelCalibration>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <eeprom_startup+0x198>
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002d3a:	4b72      	ldr	r3, [pc, #456]	@ (8002f04 <eeprom_startup+0x330>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002d44:	4b6f      	ldr	r3, [pc, #444]	@ (8002f04 <eeprom_startup+0x330>)
 8002d46:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f04 <eeprom_startup+0x330>)
 8002d50:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d54:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d58:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d5c:	ed8d 7b00 	vstr	d7, [sp]
 8002d60:	ec53 2b15 	vmov	r2, r3, d5
 8002d64:	4868      	ldr	r0, [pc, #416]	@ (8002f08 <eeprom_startup+0x334>)
 8002d66:	f015 f967 	bl	8018038 <iprintf>
 8002d6a:	e002      	b.n	8002d72 <eeprom_startup+0x19e>
	} else {
		printf("Failed to read EEPROM Accel Data\r\n");
 8002d6c:	4867      	ldr	r0, [pc, #412]	@ (8002f0c <eeprom_startup+0x338>)
 8002d6e:	f015 f9cb 	bl	8018108 <puts>
	}

	if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 8002d72:	4867      	ldr	r0, [pc, #412]	@ (8002f10 <eeprom_startup+0x33c>)
 8002d74:	f7fd ff18 	bl	8000ba8 <EEPROM_GetMagCalibration>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <eeprom_startup+0x1dc>
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002d7e:	4b64      	ldr	r3, [pc, #400]	@ (8002f10 <eeprom_startup+0x33c>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d84:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002d88:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <eeprom_startup+0x33c>)
 8002d8a:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002d92:	4b5f      	ldr	r3, [pc, #380]	@ (8002f10 <eeprom_startup+0x33c>)
 8002d94:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002d98:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002da0:	ed8d 7b00 	vstr	d7, [sp]
 8002da4:	ec53 2b15 	vmov	r2, r3, d5
 8002da8:	485a      	ldr	r0, [pc, #360]	@ (8002f14 <eeprom_startup+0x340>)
 8002daa:	f015 f945 	bl	8018038 <iprintf>
 8002dae:	e002      	b.n	8002db6 <eeprom_startup+0x1e2>
	} else {
		printf("Failed to read EEPROM Mag Data\r\n");
 8002db0:	4859      	ldr	r0, [pc, #356]	@ (8002f18 <eeprom_startup+0x344>)
 8002db2:	f015 f9a9 	bl	8018108 <puts>
	}

	if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8002db6:	4859      	ldr	r0, [pc, #356]	@ (8002f1c <eeprom_startup+0x348>)
 8002db8:	f7fd ff46 	bl	8000c48 <EEPROM_GetRollPID>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12d      	bne.n	8002e1e <eeprom_startup+0x24a>
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002dc2:	4b56      	ldr	r3, [pc, #344]	@ (8002f1c <eeprom_startup+0x348>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002dc8:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002dcc:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <eeprom_startup+0x348>)
 8002dce:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002dd6:	4b51      	ldr	r3, [pc, #324]	@ (8002f1c <eeprom_startup+0x348>)
 8002dd8:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002ddc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <eeprom_startup+0x348>)
 8002de2:	edd3 5a03 	vldr	s11, [r3, #12]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002de6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002dea:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <eeprom_startup+0x348>)
 8002dec:	edd3 4a04 	vldr	s9, [r3, #16]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002df0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <eeprom_startup+0x348>)
 8002df6:	edd3 3a05 	vldr	s7, [r3, #20]
		printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002dfa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002dfe:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002e02:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002e06:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002e0a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e0e:	ed8d 7b00 	vstr	d7, [sp]
 8002e12:	ec53 2b12 	vmov	r2, r3, d2
 8002e16:	4842      	ldr	r0, [pc, #264]	@ (8002f20 <eeprom_startup+0x34c>)
 8002e18:	f015 f90e 	bl	8018038 <iprintf>
 8002e1c:	e002      	b.n	8002e24 <eeprom_startup+0x250>
	} else {
		printf("Failed to read Roll PID\r\n");
 8002e1e:	4841      	ldr	r0, [pc, #260]	@ (8002f24 <eeprom_startup+0x350>)
 8002e20:	f015 f972 	bl	8018108 <puts>
	}

	if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8002e24:	4840      	ldr	r0, [pc, #256]	@ (8002f28 <eeprom_startup+0x354>)
 8002e26:	f7fd ff31 	bl	8000c8c <EEPROM_GetPitchPID>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d12d      	bne.n	8002e8c <eeprom_startup+0x2b8>
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002e30:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <eeprom_startup+0x354>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e36:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <eeprom_startup+0x354>)
 8002e3c:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002e44:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <eeprom_startup+0x354>)
 8002e46:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e4a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002e4e:	4b36      	ldr	r3, [pc, #216]	@ (8002f28 <eeprom_startup+0x354>)
 8002e50:	edd3 5a03 	vldr	s11, [r3, #12]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e54:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002e58:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <eeprom_startup+0x354>)
 8002e5a:	edd3 4a04 	vldr	s9, [r3, #16]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e5e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <eeprom_startup+0x354>)
 8002e64:	edd3 3a05 	vldr	s7, [r3, #20]
		printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002e68:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002e6c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002e70:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002e74:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002e78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e7c:	ed8d 7b00 	vstr	d7, [sp]
 8002e80:	ec53 2b12 	vmov	r2, r3, d2
 8002e84:	4829      	ldr	r0, [pc, #164]	@ (8002f2c <eeprom_startup+0x358>)
 8002e86:	f015 f8d7 	bl	8018038 <iprintf>
 8002e8a:	e002      	b.n	8002e92 <eeprom_startup+0x2be>
	} else {
		printf("Failed to read Pitch PID\r\n");
 8002e8c:	4828      	ldr	r0, [pc, #160]	@ (8002f30 <eeprom_startup+0x35c>)
 8002e8e:	f015 f93b 	bl	8018108 <puts>
	}

	if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 8002e92:	4828      	ldr	r0, [pc, #160]	@ (8002f34 <eeprom_startup+0x360>)
 8002e94:	f7fd ff1c 	bl	8000cd0 <EEPROM_GetYawRatePID>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d14e      	bne.n	8002f3c <eeprom_startup+0x368>
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002e9e:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <eeprom_startup+0x360>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002ea4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002ea8:	4b22      	ldr	r3, [pc, #136]	@ (8002f34 <eeprom_startup+0x360>)
 8002eaa:	edd3 7a01 	vldr	s15, [r3, #4]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <eeprom_startup+0x360>)
 8002eb4:	edd3 6a02 	vldr	s13, [r3, #8]
		printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002eb8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ebc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ec0:	ed8d 7b00 	vstr	d7, [sp]
 8002ec4:	ec53 2b15 	vmov	r2, r3, d5
 8002ec8:	481b      	ldr	r0, [pc, #108]	@ (8002f38 <eeprom_startup+0x364>)
 8002eca:	f015 f8b5 	bl	8018038 <iprintf>
 8002ece:	e038      	b.n	8002f42 <eeprom_startup+0x36e>
 8002ed0:	0801a88c 	.word	0x0801a88c
 8002ed4:	0801a8a0 	.word	0x0801a8a0
 8002ed8:	0801a8dc 	.word	0x0801a8dc
 8002edc:	0801a90c 	.word	0x0801a90c
 8002ee0:	0801ac7c 	.word	0x0801ac7c
 8002ee4:	0801a938 	.word	0x0801a938
 8002ee8:	0801a958 	.word	0x0801a958
 8002eec:	24000ab4 	.word	0x24000ab4
 8002ef0:	0801a980 	.word	0x0801a980
 8002ef4:	0801a9ac 	.word	0x0801a9ac
 8002ef8:	24000ac0 	.word	0x24000ac0
 8002efc:	0801a9c0 	.word	0x0801a9c0
 8002f00:	0801a9ec 	.word	0x0801a9ec
 8002f04:	24000acc 	.word	0x24000acc
 8002f08:	0801aa10 	.word	0x0801aa10
 8002f0c:	0801aa3c 	.word	0x0801aa3c
 8002f10:	24000ad8 	.word	0x24000ad8
 8002f14:	0801aa60 	.word	0x0801aa60
 8002f18:	0801aa8c 	.word	0x0801aa8c
 8002f1c:	24000ae4 	.word	0x24000ae4
 8002f20:	0801aaac 	.word	0x0801aaac
 8002f24:	0801aaf0 	.word	0x0801aaf0
 8002f28:	24000afc 	.word	0x24000afc
 8002f2c:	0801ab0c 	.word	0x0801ab0c
 8002f30:	0801ab50 	.word	0x0801ab50
 8002f34:	24000b14 	.word	0x24000b14
 8002f38:	0801ab6c 	.word	0x0801ab6c
	} else {
		printf("Failed to read Yaw Rate PID\r\n");
 8002f3c:	4827      	ldr	r0, [pc, #156]	@ (8002fdc <eeprom_startup+0x408>)
 8002f3e:	f015 f8e3 	bl	8018108 <puts>
	}

	if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 8002f42:	4827      	ldr	r0, [pc, #156]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f44:	f7fd fee6 	bl	8000d14 <EEPROM_GetAircraftLights>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d139      	bne.n	8002fc2 <eeprom_startup+0x3ee>
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f52:	469c      	mov	ip, r3
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002f54:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f56:	785b      	ldrb	r3, [r3, #1]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f58:	469e      	mov	lr, r3
				aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002f5a:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f5c:	789b      	ldrb	r3, [r3, #2]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f5e:	4698      	mov	r8, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002f60:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f62:	78db      	ldrb	r3, [r3, #3]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f64:	461a      	mov	r2, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002f66:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f68:	791b      	ldrb	r3, [r3, #4]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f6a:	4619      	mov	r1, r3
				aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f6e:	795b      	ldrb	r3, [r3, #5]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f70:	4618      	mov	r0, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002f72:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f74:	799b      	ldrb	r3, [r3, #6]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f76:	461c      	mov	r4, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f7a:	79db      	ldrb	r3, [r3, #7]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f7c:	461d      	mov	r5, r3
				aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002f7e:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f80:	7a1b      	ldrb	r3, [r3, #8]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f82:	461e      	mov	r6, r3
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002f84:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f86:	7a5b      	ldrb	r3, [r3, #9]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f88:	60fb      	str	r3, [r7, #12]
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f8c:	7a9b      	ldrb	r3, [r3, #10]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f8e:	60bb      	str	r3, [r7, #8]
				aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f92:	7adb      	ldrb	r3, [r3, #11]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f94:	607b      	str	r3, [r7, #4]
				aircraft_lights.mode);
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <eeprom_startup+0x40c>)
 8002f98:	7b1b      	ldrb	r3, [r3, #12]
		printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	9308      	str	r3, [sp, #32]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	9307      	str	r3, [sp, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	9306      	str	r3, [sp, #24]
 8002fa8:	9605      	str	r6, [sp, #20]
 8002faa:	9504      	str	r5, [sp, #16]
 8002fac:	9403      	str	r4, [sp, #12]
 8002fae:	9002      	str	r0, [sp, #8]
 8002fb0:	9101      	str	r1, [sp, #4]
 8002fb2:	9200      	str	r2, [sp, #0]
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	4672      	mov	r2, lr
 8002fb8:	4661      	mov	r1, ip
 8002fba:	480a      	ldr	r0, [pc, #40]	@ (8002fe4 <eeprom_startup+0x410>)
 8002fbc:	f015 f83c 	bl	8018038 <iprintf>
 8002fc0:	e002      	b.n	8002fc8 <eeprom_startup+0x3f4>
	} else {
		printf("Failed to read Aircraft Lights\r\n");
 8002fc2:	4809      	ldr	r0, [pc, #36]	@ (8002fe8 <eeprom_startup+0x414>)
 8002fc4:	f015 f8a0 	bl	8018108 <puts>
	}

	printf("\r\n"
 8002fc8:	4808      	ldr	r0, [pc, #32]	@ (8002fec <eeprom_startup+0x418>)
 8002fca:	f015 f89d 	bl	8018108 <puts>
			"================= EEPROM Data Fetched =================\n"
			"\r\n");

}
 8002fce:	bf00      	nop
 8002fd0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fda:	bf00      	nop
 8002fdc:	0801ab94 	.word	0x0801ab94
 8002fe0:	24000b20 	.word	0x24000b20
 8002fe4:	0801abb4 	.word	0x0801abb4
 8002fe8:	0801ac20 	.word	0x0801ac20
 8002fec:	0801ac40 	.word	0x0801ac40

08002ff0 <Is_iBus_Throttle_Min>:

int Is_iBus_Throttle_Min(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    if (ibus_rx_cplt_flag == 1) {
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <Is_iBus_Throttle_Min+0x40>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <Is_iBus_Throttle_Min+0x38>
        ibus_rx_cplt_flag = 0;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <Is_iBus_Throttle_Min+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
        if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1) {
 8003002:	2120      	movs	r1, #32
 8003004:	480b      	ldr	r0, [pc, #44]	@ (8003034 <Is_iBus_Throttle_Min+0x44>)
 8003006:	f7fe fcdf 	bl	80019c8 <iBus_Check_CHKSUM>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10b      	bne.n	8003028 <Is_iBus_Throttle_Min+0x38>
            iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003010:	4909      	ldr	r1, [pc, #36]	@ (8003038 <Is_iBus_Throttle_Min+0x48>)
 8003012:	4808      	ldr	r0, [pc, #32]	@ (8003034 <Is_iBus_Throttle_Min+0x44>)
 8003014:	f7fe fd0d 	bl	8001a32 <iBus_Parsing>
            if (iBus.LV < 1010)
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <Is_iBus_Throttle_Min+0x48>)
 800301a:	889b      	ldrh	r3, [r3, #4]
 800301c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003020:	4293      	cmp	r3, r2
 8003022:	d801      	bhi.n	8003028 <Is_iBus_Throttle_Min+0x38>
                return 1;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <Is_iBus_Throttle_Min+0x3a>
        }
    }
    return 0;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	24000dfc 	.word	0x24000dfc
 8003034:	24000ddc 	.word	0x24000ddc
 8003038:	240007d8 	.word	0x240007d8

0800303c <mixer_run>:

void mixer_run(void) {
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0

	// Motor mixing
	if (motor_arming_flag == 1 && failsafe_flag == 0) {
 8003040:	4b6f      	ldr	r3, [pc, #444]	@ (8003200 <mixer_run+0x1c4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d164      	bne.n	8003112 <mixer_run+0xd6>
 8003048:	4b6e      	ldr	r3, [pc, #440]	@ (8003204 <mixer_run+0x1c8>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d160      	bne.n	8003112 <mixer_run+0xd6>
//		motor_mixing(roll_out, pitch_out, yaw_out, throttle, ccr);

		ccr1 = 1050 + ((iBus.LV - 1000) * 950) / 1000;
 8003050:	4b6d      	ldr	r3, [pc, #436]	@ (8003208 <mixer_run+0x1cc>)
 8003052:	889b      	ldrh	r3, [r3, #4]
 8003054:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003058:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <mixer_run+0x1d0>)
 8003062:	fb82 1203 	smull	r1, r2, r2, r3
 8003066:	1192      	asrs	r2, r2, #6
 8003068:	17db      	asrs	r3, r3, #31
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <mixer_run+0x1d4>)
 8003076:	801a      	strh	r2, [r3, #0]
		ccr2 = 1050 + ((iBus.LV - 1000) * 950) / 1000;
 8003078:	4b63      	ldr	r3, [pc, #396]	@ (8003208 <mixer_run+0x1cc>)
 800307a:	889b      	ldrh	r3, [r3, #4]
 800307c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003080:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	4a60      	ldr	r2, [pc, #384]	@ (800320c <mixer_run+0x1d0>)
 800308a:	fb82 1203 	smull	r1, r2, r2, r3
 800308e:	1192      	asrs	r2, r2, #6
 8003090:	17db      	asrs	r3, r3, #31
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b29b      	uxth	r3, r3
 8003096:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 800309a:	b29a      	uxth	r2, r3
 800309c:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <mixer_run+0x1d8>)
 800309e:	801a      	strh	r2, [r3, #0]
		ccr3 = 1050 + ((iBus.LV - 1000) * 950) / 1000;
 80030a0:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <mixer_run+0x1cc>)
 80030a2:	889b      	ldrh	r3, [r3, #4]
 80030a4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80030a8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	4a56      	ldr	r2, [pc, #344]	@ (800320c <mixer_run+0x1d0>)
 80030b2:	fb82 1203 	smull	r1, r2, r2, r3
 80030b6:	1192      	asrs	r2, r2, #6
 80030b8:	17db      	asrs	r3, r3, #31
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b54      	ldr	r3, [pc, #336]	@ (8003218 <mixer_run+0x1dc>)
 80030c6:	801a      	strh	r2, [r3, #0]
		ccr4 = 1050 + ((iBus.LV - 1000) * 950) / 1000;
 80030c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003208 <mixer_run+0x1cc>)
 80030ca:	889b      	ldrh	r3, [r3, #4]
 80030cc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80030d0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	4a4c      	ldr	r2, [pc, #304]	@ (800320c <mixer_run+0x1d0>)
 80030da:	fb82 1203 	smull	r1, r2, r2, r3
 80030de:	1192      	asrs	r2, r2, #6
 80030e0:	17db      	asrs	r3, r3, #31
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f203 431a 	addw	r3, r3, #1050	@ 0x41a
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b4b      	ldr	r3, [pc, #300]	@ (800321c <mixer_run+0x1e0>)
 80030ee:	801a      	strh	r2, [r3, #0]

		TIM5->CCR1 = ccr1;
 80030f0:	4b47      	ldr	r3, [pc, #284]	@ (8003210 <mixer_run+0x1d4>)
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <mixer_run+0x1e4>)
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM5->CCR2 = ccr2;
 80030f8:	4b46      	ldr	r3, [pc, #280]	@ (8003214 <mixer_run+0x1d8>)
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	4b48      	ldr	r3, [pc, #288]	@ (8003220 <mixer_run+0x1e4>)
 80030fe:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = ccr3;
 8003100:	4b45      	ldr	r3, [pc, #276]	@ (8003218 <mixer_run+0x1dc>)
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	4b46      	ldr	r3, [pc, #280]	@ (8003220 <mixer_run+0x1e4>)
 8003106:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM5->CCR4 = ccr4;
 8003108:	4b44      	ldr	r3, [pc, #272]	@ (800321c <mixer_run+0x1e0>)
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <mixer_run+0x1e4>)
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003110:	e00f      	b.n	8003132 <mixer_run+0xf6>
	} else {
		TIM5->CCR1 = 1000;
 8003112:	4b43      	ldr	r3, [pc, #268]	@ (8003220 <mixer_run+0x1e4>)
 8003114:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM5->CCR2 = 1000;
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <mixer_run+0x1e4>)
 800311c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = 1000;
 8003122:	4b3f      	ldr	r3, [pc, #252]	@ (8003220 <mixer_run+0x1e4>)
 8003124:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003128:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM5->CCR4 = 1000;
 800312a:	4b3d      	ldr	r3, [pc, #244]	@ (8003220 <mixer_run+0x1e4>)
 800312c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003130:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8003132:	2108      	movs	r1, #8
 8003134:	483b      	ldr	r0, [pc, #236]	@ (8003224 <mixer_run+0x1e8>)
 8003136:	f005 f9ec 	bl	8008512 <HAL_GPIO_TogglePin>



	if (iBus.SwA == 2000 && iBus_SwA_Prev != 2000) {
 800313a:	4b33      	ldr	r3, [pc, #204]	@ (8003208 <mixer_run+0x1cc>)
 800313c:	891b      	ldrh	r3, [r3, #8]
 800313e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003142:	d10d      	bne.n	8003160 <mixer_run+0x124>
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <mixer_run+0x1ec>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800314c:	d008      	beq.n	8003160 <mixer_run+0x124>
		if (iBus.LV < 1010) {
 800314e:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <mixer_run+0x1cc>)
 8003150:	889b      	ldrh	r3, [r3, #4]
 8003152:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <mixer_run+0x124>
			motor_arming_flag = 1;
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <mixer_run+0x1c4>)
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
		}
	}
	iBus_SwA_Prev = iBus.SwA;
 8003160:	4b29      	ldr	r3, [pc, #164]	@ (8003208 <mixer_run+0x1cc>)
 8003162:	891a      	ldrh	r2, [r3, #8]
 8003164:	4b30      	ldr	r3, [pc, #192]	@ (8003228 <mixer_run+0x1ec>)
 8003166:	801a      	strh	r2, [r3, #0]

	if (iBus.SwA != 2000) {
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <mixer_run+0x1cc>)
 800316a:	891b      	ldrh	r3, [r3, #8]
 800316c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003170:	d002      	beq.n	8003178 <mixer_run+0x13c>
		motor_arming_flag = 0;
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <mixer_run+0x1c4>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	}

	if (ibus_rx_cplt_flag == 1) {
 8003178:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <mixer_run+0x1f0>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d12b      	bne.n	80031d8 <mixer_run+0x19c>
		ibus_rx_cplt_flag = 0;
 8003180:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <mixer_run+0x1f0>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1) {
 8003186:	2120      	movs	r1, #32
 8003188:	4829      	ldr	r0, [pc, #164]	@ (8003230 <mixer_run+0x1f4>)
 800318a:	f7fe fc1d 	bl	80019c8 <iBus_Check_CHKSUM>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d121      	bne.n	80031d8 <mixer_run+0x19c>
			//			main_led(0, 0, 255, 0, 0.3);
			//			main_led(0, 0, 255, 0, 0.0);
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003194:	491c      	ldr	r1, [pc, #112]	@ (8003208 <mixer_run+0x1cc>)
 8003196:	4826      	ldr	r0, [pc, #152]	@ (8003230 <mixer_run+0x1f4>)
 8003198:	f7fe fc4b 	bl	8001a32 <iBus_Parsing>
			iBus_rx_cnt++;
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <mixer_run+0x1f8>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <mixer_run+0x1f8>)
 80031a6:	801a      	strh	r2, [r3, #0]
			if (iBus_isActiveFailsafe(&iBus) == 1) {
 80031a8:	4817      	ldr	r0, [pc, #92]	@ (8003208 <mixer_run+0x1cc>)
 80031aa:	f7fe fd09 	bl	8001bc0 <iBus_isActiveFailsafe>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10c      	bne.n	80031ce <mixer_run+0x192>
				failsafe_flag = 1;
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <mixer_run+0x1c8>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
				Buzzer_On(292);
 80031ba:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80031be:	f7fd fb1d 	bl	80007fc <Buzzer_On>
				HAL_Delay(50);
 80031c2:	2032      	movs	r0, #50	@ 0x32
 80031c4:	f002 f816 	bl	80051f4 <HAL_Delay>
				Buzzer_Off();
 80031c8:	f7fd fb40 	bl	800084c <Buzzer_Off>
 80031cc:	e004      	b.n	80031d8 <mixer_run+0x19c>
			} else {
				failsafe_flag = 0;
 80031ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <mixer_run+0x1c8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
				Buzzer_Off();
 80031d4:	f7fd fb3a 	bl	800084c <Buzzer_Off>
			}
		}
	}

	if (failsafe_flag == 1 || failsafe_flag == 2) {
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <mixer_run+0x1c8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d003      	beq.n	80031e8 <mixer_run+0x1ac>
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <mixer_run+0x1c8>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d108      	bne.n	80031fa <mixer_run+0x1be>
		Buzzer_On(292);
 80031e8:	f44f 7092 	mov.w	r0, #292	@ 0x124
 80031ec:	f7fd fb06 	bl	80007fc <Buzzer_On>
		HAL_Delay(50);
 80031f0:	2032      	movs	r0, #50	@ 0x32
 80031f2:	f001 ffff 	bl	80051f4 <HAL_Delay>
		Buzzer_Off();
 80031f6:	f7fd fb29 	bl	800084c <Buzzer_Off>
	}

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	24000ba8 	.word	0x24000ba8
 8003204:	24000ab1 	.word	0x24000ab1
 8003208:	240007d8 	.word	0x240007d8
 800320c:	10624dd3 	.word	0x10624dd3
 8003210:	24000bae 	.word	0x24000bae
 8003214:	24000bb0 	.word	0x24000bb0
 8003218:	24000bb2 	.word	0x24000bb2
 800321c:	24000bb4 	.word	0x24000bb4
 8003220:	40000c00 	.word	0x40000c00
 8003224:	58021000 	.word	0x58021000
 8003228:	24000baa 	.word	0x24000baa
 800322c:	24000dfc 	.word	0x24000dfc
 8003230:	24000ddc 	.word	0x24000ddc
 8003234:	24000bac 	.word	0x24000bac

08003238 <FSiA6B_Print>:

void FSiA6B_Print(void) {
 8003238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323c:	b088      	sub	sp, #32
 800323e:	af08      	add	r7, sp, #32
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <FSiA6B_Print+0x64>)
 8003242:	881b      	ldrh	r3, [r3, #0]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003244:	469c      	mov	ip, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <FSiA6B_Print+0x64>)
 8003248:	885b      	ldrh	r3, [r3, #2]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 800324a:	469e      	mov	lr, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <FSiA6B_Print+0x64>)
 800324e:	889b      	ldrh	r3, [r3, #4]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003250:	4698      	mov	r8, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003252:	4b12      	ldr	r3, [pc, #72]	@ (800329c <FSiA6B_Print+0x64>)
 8003254:	88db      	ldrh	r3, [r3, #6]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003256:	461a      	mov	r2, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <FSiA6B_Print+0x64>)
 800325a:	891b      	ldrh	r3, [r3, #8]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 800325c:	4619      	mov	r1, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <FSiA6B_Print+0x64>)
 8003260:	895b      	ldrh	r3, [r3, #10]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003262:	4618      	mov	r0, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003264:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <FSiA6B_Print+0x64>)
 8003266:	899b      	ldrh	r3, [r3, #12]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003268:	461c      	mov	r4, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 800326a:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <FSiA6B_Print+0x64>)
 800326c:	89db      	ldrh	r3, [r3, #14]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 800326e:	461d      	mov	r5, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003270:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <FSiA6B_Print+0x64>)
 8003272:	8a1b      	ldrh	r3, [r3, #16]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 8003274:	461e      	mov	r6, r3
			iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
 8003276:	4b09      	ldr	r3, [pc, #36]	@ (800329c <FSiA6B_Print+0x64>)
 8003278:	8a5b      	ldrh	r3, [r3, #18]
	printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
 800327a:	9306      	str	r3, [sp, #24]
 800327c:	9605      	str	r6, [sp, #20]
 800327e:	9504      	str	r5, [sp, #16]
 8003280:	9403      	str	r4, [sp, #12]
 8003282:	9002      	str	r0, [sp, #8]
 8003284:	9101      	str	r1, [sp, #4]
 8003286:	9200      	str	r2, [sp, #0]
 8003288:	4643      	mov	r3, r8
 800328a:	4672      	mov	r2, lr
 800328c:	4661      	mov	r1, ip
 800328e:	4804      	ldr	r0, [pc, #16]	@ (80032a0 <FSiA6B_Print+0x68>)
 8003290:	f014 fed2 	bl	8018038 <iprintf>
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329c:	240007d8 	.word	0x240007d8
 80032a0:	0801ad0c 	.word	0x0801ad0c

080032a4 <Is_iBus_Throttle_Armed>:
		failsafe_flag = 2;
	}
	iBus_rx_cnt = 0;
}

int Is_iBus_Throttle_Armed(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
    if (ibus_rx_cplt_flag == 1) {
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <Is_iBus_Throttle_Armed+0x40>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d115      	bne.n	80032dc <Is_iBus_Throttle_Armed+0x38>
        ibus_rx_cplt_flag = 0;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <Is_iBus_Throttle_Armed+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
        if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1) {
 80032b6:	2120      	movs	r1, #32
 80032b8:	480b      	ldr	r0, [pc, #44]	@ (80032e8 <Is_iBus_Throttle_Armed+0x44>)
 80032ba:	f7fe fb85 	bl	80019c8 <iBus_Check_CHKSUM>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10b      	bne.n	80032dc <Is_iBus_Throttle_Armed+0x38>
            iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80032c4:	4909      	ldr	r1, [pc, #36]	@ (80032ec <Is_iBus_Throttle_Armed+0x48>)
 80032c6:	4808      	ldr	r0, [pc, #32]	@ (80032e8 <Is_iBus_Throttle_Armed+0x44>)
 80032c8:	f7fe fbb3 	bl	8001a32 <iBus_Parsing>
            if (iBus.SwA >= 1900)
 80032cc:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <Is_iBus_Throttle_Armed+0x48>)
 80032ce:	891b      	ldrh	r3, [r3, #8]
 80032d0:	f240 726b 	movw	r2, #1899	@ 0x76b
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <Is_iBus_Throttle_Armed+0x38>
                return 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <Is_iBus_Throttle_Armed+0x3a>
        }
    }
    return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	24000dfc 	.word	0x24000dfc
 80032e8:	24000ddc 	.word	0x24000ddc
 80032ec:	240007d8 	.word	0x240007d8

080032f0 <ESC_Calibration>:

void ESC_Calibration(void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af02      	add	r7, sp, #8
    TIM5->CCR1 = 2000;
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <ESC_Calibration+0x98>)
 80032f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM5->CCR2 = 2000;
 80032fe:	4b22      	ldr	r3, [pc, #136]	@ (8003388 <ESC_Calibration+0x98>)
 8003300:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM5->CCR3 = 2000;
 8003306:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <ESC_Calibration+0x98>)
 8003308:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM5->CCR4 = 2000;
 800330e:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <ESC_Calibration+0x98>)
 8003310:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
    main_led(0, 0, 255, 0, 0.1, 1);
 8003316:	2301      	movs	r3, #1
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800338c <ESC_Calibration+0x9c>
 800331e:	2300      	movs	r3, #0
 8003320:	22ff      	movs	r2, #255	@ 0xff
 8003322:	2100      	movs	r1, #0
 8003324:	2000      	movs	r0, #0
 8003326:	f7fe fa73 	bl	8001810 <main_led>
    HAL_Delay(7000);
 800332a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800332e:	f001 ff61 	bl	80051f4 <HAL_Delay>
    TIM5->CCR1 = 1000;
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <ESC_Calibration+0x98>)
 8003334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM5->CCR2 = 1000;
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <ESC_Calibration+0x98>)
 800333c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM5->CCR3 = 1000;
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <ESC_Calibration+0x98>)
 8003344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM5->CCR4 = 1000;
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <ESC_Calibration+0x98>)
 800334c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
    main_led(0, 0, 255, 0, 0.1, 1);
 8003352:	2301      	movs	r3, #1
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800338c <ESC_Calibration+0x9c>
 800335a:	2300      	movs	r3, #0
 800335c:	22ff      	movs	r2, #255	@ 0xff
 800335e:	2100      	movs	r1, #0
 8003360:	2000      	movs	r0, #0
 8003362:	f7fe fa55 	bl	8001810 <main_led>
    HAL_Delay(8000);
 8003366:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800336a:	f001 ff43 	bl	80051f4 <HAL_Delay>
    main_led(0, 0, 255, 0, 0.1, 1);
 800336e:	2301      	movs	r3, #1
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800338c <ESC_Calibration+0x9c>
 8003376:	2300      	movs	r3, #0
 8003378:	22ff      	movs	r2, #255	@ 0xff
 800337a:	2100      	movs	r1, #0
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe fa47 	bl	8001810 <main_led>
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40000c00 	.word	0x40000c00
 800338c:	3dcccccd 	.word	0x3dcccccd

08003390 <Is_iBus_Received>:

int Is_iBus_Received(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
    if (ibus_rx_cplt_flag == 1) {
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <Is_iBus_Received+0x34>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10f      	bne.n	80033bc <Is_iBus_Received+0x2c>
        ibus_rx_cplt_flag = 0;
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <Is_iBus_Received+0x34>)
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
        if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1) {
 80033a2:	2120      	movs	r1, #32
 80033a4:	4808      	ldr	r0, [pc, #32]	@ (80033c8 <Is_iBus_Received+0x38>)
 80033a6:	f7fe fb0f 	bl	80019c8 <iBus_Check_CHKSUM>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <Is_iBus_Received+0x2c>
            iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80033b0:	4906      	ldr	r1, [pc, #24]	@ (80033cc <Is_iBus_Received+0x3c>)
 80033b2:	4805      	ldr	r0, [pc, #20]	@ (80033c8 <Is_iBus_Received+0x38>)
 80033b4:	f7fe fb3d 	bl	8001a32 <iBus_Parsing>
            return 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <Is_iBus_Received+0x2e>
        }
    }
    return 0;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	24000dfc 	.word	0x24000dfc
 80033c8:	24000ddc 	.word	0x24000ddc
 80033cc:	240007d8 	.word	0x240007d8

080033d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80033d6:	463b      	mov	r3, r7
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80033e2:	f002 f80b 	bl	80053fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80033f2:	231f      	movs	r3, #31
 80033f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80033f6:	2387      	movs	r3, #135	@ 0x87
 80033f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80033fe:	2300      	movs	r3, #0
 8003400:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003402:	2301      	movs	r3, #1
 8003404:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003406:	2301      	movs	r3, #1
 8003408:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003412:	463b      	mov	r3, r7
 8003414:	4618      	mov	r0, r3
 8003416:	f002 f829 	bl	800546c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800341a:	2004      	movs	r0, #4
 800341c:	f002 f806 	bl	800542c <HAL_MPU_Enable>

}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800343a:	f001 febb 	bl	80051b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000

0800344c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <Error_Handler+0x8>

08003458 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800345e:	463b      	mov	r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 8003470:	4a28      	ldr	r2, [pc, #160]	@ (8003514 <MX_OCTOSPI1_Init+0xbc>)
 8003472:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8003474:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 8003476:	2201      	movs	r2, #1
 8003478:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800347a:	4b25      	ldr	r3, [pc, #148]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 8003488:	2217      	movs	r2, #23
 800348a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 800348c:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 800348e:	2202      	movs	r2, #2
 8003490:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8003492:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 8003498:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 800349a:	2201      	movs	r2, #1
 800349c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800349e:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034a6:	2202      	movs	r2, #2
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80034b8:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034c0:	2208      	movs	r2, #8
 80034c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80034c4:	4b12      	ldr	r3, [pc, #72]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80034d0:	480f      	ldr	r0, [pc, #60]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034d2:	f006 fd05 	bl	8009ee0 <HAL_OSPI_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80034dc:	f7ff ffb6 	bl	800344c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80034e0:	2301      	movs	r3, #1
 80034e2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80034e8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80034ec:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4619      	mov	r1, r3
 80034f6:	4806      	ldr	r0, [pc, #24]	@ (8003510 <MX_OCTOSPI1_Init+0xb8>)
 80034f8:	f006 ff60 	bl	800a3bc <HAL_OSPIM_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8003502:	f7ff ffa3 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	24000bb8 	.word	0x24000bb8
 8003514:	52005000 	.word	0x52005000

08003518 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0bc      	sub	sp, #240	@ 0xf0
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003530:	f107 0320 	add.w	r3, r7, #32
 8003534:	22b8      	movs	r2, #184	@ 0xb8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f014 fec5 	bl	80182c8 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5d      	ldr	r2, [pc, #372]	@ (80036b8 <HAL_OSPI_MspInit+0x1a0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f040 80b2 	bne.w	80036ae <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8003556:	2300      	movs	r3, #0
 8003558:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4618      	mov	r0, r3
 8003560:	f008 fe66 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800356a:	f7ff ff6f 	bl	800344c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800356e:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 8003570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003574:	4a51      	ldr	r2, [pc, #324]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 8003576:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800357a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800357e:	4b4f      	ldr	r3, [pc, #316]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 8003580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800358c:	4b4b      	ldr	r3, [pc, #300]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 800358e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003592:	4a4a      	ldr	r2, [pc, #296]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003598:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800359c:	4b47      	ldr	r3, [pc, #284]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 800359e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035aa:	4b44      	ldr	r3, [pc, #272]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035b0:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035b2:	f043 0310 	orr.w	r3, r3, #16
 80035b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035ba:	4b40      	ldr	r3, [pc, #256]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b3c      	ldr	r3, [pc, #240]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ce:	4a3b      	ldr	r2, [pc, #236]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035d8:	4b38      	ldr	r3, [pc, #224]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e6:	4b35      	ldr	r3, [pc, #212]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ec:	4a33      	ldr	r2, [pc, #204]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035ee:	f043 0308 	orr.w	r3, r3, #8
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <HAL_OSPI_MspInit+0x1a4>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003604:	2304      	movs	r3, #4
 8003606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800361c:	2309      	movs	r3, #9
 800361e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003622:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003626:	4619      	mov	r1, r3
 8003628:	4825      	ldr	r0, [pc, #148]	@ (80036c0 <HAL_OSPI_MspInit+0x1a8>)
 800362a:	f004 fdb1 	bl	8008190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800362e:	2304      	movs	r3, #4
 8003630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003646:	2309      	movs	r3, #9
 8003648:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003650:	4619      	mov	r1, r3
 8003652:	481c      	ldr	r0, [pc, #112]	@ (80036c4 <HAL_OSPI_MspInit+0x1ac>)
 8003654:	f004 fd9c 	bl	8008190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003658:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800365c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003672:	2309      	movs	r3, #9
 8003674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003678:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800367c:	4619      	mov	r1, r3
 800367e:	4812      	ldr	r0, [pc, #72]	@ (80036c8 <HAL_OSPI_MspInit+0x1b0>)
 8003680:	f004 fd86 	bl	8008190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003684:	2340      	movs	r3, #64	@ 0x40
 8003686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800369c:	230a      	movs	r3, #10
 800369e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036a6:	4619      	mov	r1, r3
 80036a8:	4806      	ldr	r0, [pc, #24]	@ (80036c4 <HAL_OSPI_MspInit+0x1ac>)
 80036aa:	f004 fd71 	bl	8008190 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80036ae:	bf00      	nop
 80036b0:	37f0      	adds	r7, #240	@ 0xf0
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	52005000 	.word	0x52005000
 80036bc:	58024400 	.word	0x58024400
 80036c0:	58021000 	.word	0x58021000
 80036c4:	58020400 	.word	0x58020400
 80036c8:	58020c00 	.word	0x58020c00

080036cc <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80036d0:	4b28      	ldr	r3, [pc, #160]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036d2:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <MX_SPI3_Init+0xac>)
 80036d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80036d6:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80036dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80036de:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80036e4:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036e6:	2207      	movs	r2, #7
 80036e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80036ea:	4b22      	ldr	r3, [pc, #136]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80036fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003774 <MX_SPI3_Init+0xa8>)
 80036fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003700:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003702:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003704:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003708:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800370c:	2200      	movs	r2, #0
 800370e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003712:	2200      	movs	r2, #0
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003718:	2200      	movs	r2, #0
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800371c:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800371e:	2200      	movs	r2, #0
 8003720:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003722:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800372c:	2200      	movs	r2, #0
 800372e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003730:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003732:	2200      	movs	r2, #0
 8003734:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003736:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003738:	2200      	movs	r2, #0
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800373c:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003742:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003744:	2200      	movs	r2, #0
 8003746:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003748:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800374a:	2200      	movs	r2, #0
 800374c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003750:	2200      	movs	r2, #0
 8003752:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003754:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <MX_SPI3_Init+0xa8>)
 800375c:	2200      	movs	r2, #0
 800375e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003760:	4804      	ldr	r0, [pc, #16]	@ (8003774 <MX_SPI3_Init+0xa8>)
 8003762:	f00a fb27 	bl	800ddb4 <HAL_SPI_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 800376c:	f7ff fe6e 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}
 8003774:	24000c14 	.word	0x24000c14
 8003778:	40003c00 	.word	0x40003c00

0800377c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0b8      	sub	sp, #224	@ 0xe0
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	22b8      	movs	r2, #184	@ 0xb8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f014 fd93 	bl	80182c8 <memset>
  if(spiHandle->Instance==SPI3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a58      	ldr	r2, [pc, #352]	@ (8003908 <HAL_SPI_MspInit+0x18c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f040 80a8 	bne.w	80038fe <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80037ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f008 fd34 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80037ce:	f7ff fe3d 	bl	800344c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037d2:	4b4e      	ldr	r3, [pc, #312]	@ (800390c <HAL_SPI_MspInit+0x190>)
 80037d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037d8:	4a4c      	ldr	r2, [pc, #304]	@ (800390c <HAL_SPI_MspInit+0x190>)
 80037da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037e2:	4b4a      	ldr	r3, [pc, #296]	@ (800390c <HAL_SPI_MspInit+0x190>)
 80037e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f0:	4b46      	ldr	r3, [pc, #280]	@ (800390c <HAL_SPI_MspInit+0x190>)
 80037f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037f6:	4a45      	ldr	r2, [pc, #276]	@ (800390c <HAL_SPI_MspInit+0x190>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003800:	4b42      	ldr	r3, [pc, #264]	@ (800390c <HAL_SPI_MspInit+0x190>)
 8003802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800380e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003812:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003828:	2306      	movs	r3, #6
 800382a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800382e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003832:	4619      	mov	r1, r3
 8003834:	4836      	ldr	r0, [pc, #216]	@ (8003910 <HAL_SPI_MspInit+0x194>)
 8003836:	f004 fcab 	bl	8008190 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800383a:	4b36      	ldr	r3, [pc, #216]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800383c:	4a36      	ldr	r2, [pc, #216]	@ (8003918 <HAL_SPI_MspInit+0x19c>)
 800383e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003840:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003842:	223d      	movs	r2, #61	@ 0x3d
 8003844:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003846:	4b33      	ldr	r3, [pc, #204]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800384c:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003852:	4b30      	ldr	r3, [pc, #192]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003858:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800385a:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003860:	4b2c      	ldr	r3, [pc, #176]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003866:	4b2b      	ldr	r3, [pc, #172]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003868:	2200      	movs	r2, #0
 800386a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800386c:	4b29      	ldr	r3, [pc, #164]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800386e:	2200      	movs	r2, #0
 8003870:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003872:	4b28      	ldr	r3, [pc, #160]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003874:	2200      	movs	r2, #0
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003878:	4826      	ldr	r0, [pc, #152]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800387a:	f001 fe37 	bl	80054ec <HAL_DMA_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003884:	f7ff fde2 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a22      	ldr	r2, [pc, #136]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 800388c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800388e:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <HAL_SPI_MspInit+0x198>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream3;
 8003894:	4b21      	ldr	r3, [pc, #132]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 8003896:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <HAL_SPI_MspInit+0x1a4>)
 8003898:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 800389c:	223e      	movs	r2, #62	@ 0x3e
 800389e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a6:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038b2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038b4:	4b19      	ldr	r3, [pc, #100]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ba:	4b18      	ldr	r3, [pc, #96]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80038c0:	4b16      	ldr	r3, [pc, #88]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038c6:	4b15      	ldr	r3, [pc, #84]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80038d2:	4812      	ldr	r0, [pc, #72]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038d4:	f001 fe0a 	bl	80054ec <HAL_DMA_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 80038de:	f7ff fdb5 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a0d      	ldr	r2, [pc, #52]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038e6:	679a      	str	r2, [r3, #120]	@ 0x78
 80038e8:	4a0c      	ldr	r2, [pc, #48]	@ (800391c <HAL_SPI_MspInit+0x1a0>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2105      	movs	r1, #5
 80038f2:	2033      	movs	r0, #51	@ 0x33
 80038f4:	f001 fd5a 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80038f8:	2033      	movs	r0, #51	@ 0x33
 80038fa:	f001 fd71 	bl	80053e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80038fe:	bf00      	nop
 8003900:	37e0      	adds	r7, #224	@ 0xe0
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40003c00 	.word	0x40003c00
 800390c:	58024400 	.word	0x58024400
 8003910:	58020800 	.word	0x58020800
 8003914:	24000c9c 	.word	0x24000c9c
 8003918:	40020040 	.word	0x40020040
 800391c:	24000d14 	.word	0x24000d14
 8003920:	40020058 	.word	0x40020058

08003924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392a:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <HAL_MspInit+0x38>)
 800392c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_MspInit+0x38>)
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <HAL_MspInit+0x38>)
 800393c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	210f      	movs	r1, #15
 800394c:	f06f 0001 	mvn.w	r0, #1
 8003950:	f001 fd2c 	bl	80053ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400

08003960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	@ 0x38
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d844      	bhi.n	80039f8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800396e:	2200      	movs	r2, #0
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	2019      	movs	r0, #25
 8003974:	f001 fd1a 	bl	80053ac <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003978:	2019      	movs	r0, #25
 800397a:	f001 fd31 	bl	80053e0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800397e:	4a24      	ldr	r2, [pc, #144]	@ (8003a10 <HAL_InitTick+0xb0>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003984:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <HAL_InitTick+0xb4>)
 8003986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800398a:	4a22      	ldr	r2, [pc, #136]	@ (8003a14 <HAL_InitTick+0xb4>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003994:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <HAL_InitTick+0xb4>)
 8003996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039a2:	f107 020c 	add.w	r2, r7, #12
 80039a6:	f107 0310 	add.w	r3, r7, #16
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f008 fbfd 	bl	800c1ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80039b2:	f008 fbe5 	bl	800c180 <HAL_RCC_GetPCLK2Freq>
 80039b6:	4603      	mov	r3, r0
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039be:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <HAL_InitTick+0xb8>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	0c9b      	lsrs	r3, r3, #18
 80039c6:	3b01      	subs	r3, #1
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80039ca:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039cc:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <HAL_InitTick+0xc0>)
 80039ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80039d0:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80039d8:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80039de:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80039ea:	480c      	ldr	r0, [pc, #48]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039ec:	f00a ffe7 	bl	800e9be <HAL_TIM_Base_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <HAL_InitTick+0xa6>
 80039f6:	e001      	b.n	80039fc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e005      	b.n	8003a08 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80039fc:	4807      	ldr	r0, [pc, #28]	@ (8003a1c <HAL_InitTick+0xbc>)
 80039fe:	f00b f8db 	bl	800ebb8 <HAL_TIM_Base_Start_IT>
 8003a02:	4603      	mov	r3, r0
 8003a04:	e000      	b.n	8003a08 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3738      	adds	r7, #56	@ 0x38
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	24000018 	.word	0x24000018
 8003a14:	58024400 	.word	0x58024400
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	24000d8c 	.word	0x24000d8c
 8003a20:	40010000 	.word	0x40010000

08003a24 <LL_USART_IsActiveFlag_FE>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d101      	bne.n	8003a3c <LL_USART_IsActiveFlag_FE+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_USART_IsActiveFlag_FE+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_USART_IsActiveFlag_NE>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d101      	bne.n	8003a62 <LL_USART_IsActiveFlag_NE+0x18>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <LL_USART_IsActiveFlag_NE+0x1a>
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_USART_IsActiveFlag_ORE>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d101      	bne.n	8003a88 <LL_USART_IsActiveFlag_ORE+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_USART_IsActiveFlag_ORE+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d101      	bne.n	8003aae <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_USART_ClearFlag_FE>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <LL_USART_ClearFlag_NE>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_USART_ClearFlag_ORE>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2208      	movs	r2, #8
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_USART_ReceiveData8>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2db      	uxtb	r3, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <NMI_Handler+0x4>

08003b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <HardFault_Handler+0x4>

08003b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <MemManage_Handler+0x4>

08003b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b40:	bf00      	nop
 8003b42:	e7fd      	b.n	8003b40 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b60:	4802      	ldr	r0, [pc, #8]	@ (8003b6c <DMA1_Stream0_IRQHandler+0x10>)
 8003b62:	f002 ffe9 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	240008c4 	.word	0x240008c4

08003b70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003b74:	4802      	ldr	r0, [pc, #8]	@ (8003b80 <DMA1_Stream1_IRQHandler+0x10>)
 8003b76:	f002 ffdf 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2400093c 	.word	0x2400093c

08003b84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003b88:	4802      	ldr	r0, [pc, #8]	@ (8003b94 <DMA1_Stream2_IRQHandler+0x10>)
 8003b8a:	f002 ffd5 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	24000c9c 	.word	0x24000c9c

08003b98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003b9c:	4802      	ldr	r0, [pc, #8]	@ (8003ba8 <DMA1_Stream3_IRQHandler+0x10>)
 8003b9e:	f002 ffcb 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	24000d14 	.word	0x24000d14

08003bac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003bb0:	4802      	ldr	r0, [pc, #8]	@ (8003bbc <DMA1_Stream4_IRQHandler+0x10>)
 8003bb2:	f002 ffc1 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	24000e9c 	.word	0x24000e9c

08003bc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003bc4:	4802      	ldr	r0, [pc, #8]	@ (8003bd0 <DMA1_Stream5_IRQHandler+0x10>)
 8003bc6:	f002 ffb7 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	24000f14 	.word	0x24000f14

08003bd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003bd8:	4802      	ldr	r0, [pc, #8]	@ (8003be4 <DMA1_Stream6_IRQHandler+0x10>)
 8003bda:	f002 ffad 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	240009b4 	.word	0x240009b4

08003be8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bec:	4802      	ldr	r0, [pc, #8]	@ (8003bf8 <TIM1_UP_IRQHandler+0x10>)
 8003bee:	f00b fd13 	bl	800f618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	24000d8c 	.word	0x24000d8c

08003bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c00:	4802      	ldr	r0, [pc, #8]	@ (8003c0c <TIM3_IRQHandler+0x10>)
 8003c02:	f00b fd09 	bl	800f618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24000e04 	.word	0x24000e04

08003c10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c14:	4802      	ldr	r0, [pc, #8]	@ (8003c20 <I2C1_EV_IRQHandler+0x10>)
 8003c16:	f004 ff41 	bl	8008a9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2400081c 	.word	0x2400081c

08003c24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c28:	4802      	ldr	r0, [pc, #8]	@ (8003c34 <I2C1_ER_IRQHandler+0x10>)
 8003c2a:	f004 ff51 	bl	8008ad0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2400081c 	.word	0x2400081c

08003c38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003c3c:	4802      	ldr	r0, [pc, #8]	@ (8003c48 <I2C2_EV_IRQHandler+0x10>)
 8003c3e:	f004 ff2d 	bl	8008a9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	24000870 	.word	0x24000870

08003c4c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003c50:	4802      	ldr	r0, [pc, #8]	@ (8003c5c <I2C2_ER_IRQHandler+0x10>)
 8003c52:	f004 ff3d 	bl	8008ad0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	24000870 	.word	0x24000870

08003c60 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003c64:	4802      	ldr	r0, [pc, #8]	@ (8003c70 <DMA1_Stream7_IRQHandler+0x10>)
 8003c66:	f002 ff67 	bl	8006b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	24000a2c 	.word	0x24000a2c

08003c74 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003c78:	4802      	ldr	r0, [pc, #8]	@ (8003c84 <SPI3_IRQHandler+0x10>)
 8003c7a:	f00a fb77 	bl	800e36c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	24000c14 	.word	0x24000c14

08003c88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	    if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8003c8c:	4841      	ldr	r0, [pc, #260]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003c8e:	f7ff ff02 	bl	8003a96 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d059      	beq.n	8003d4c <UART4_IRQHandler+0xc4>
	        uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003c98:	483e      	ldr	r0, [pc, #248]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003c9a:	f7ff ff36 	bl	8003b0a <LL_USART_ReceiveData8>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003ca4:	701a      	strb	r2, [r3, #0]
	        uart4_rx_flag = 1;
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8003d9c <UART4_IRQHandler+0x114>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]

	        switch (cnt) {
 8003cac:	4b3c      	ldr	r3, [pc, #240]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b1f      	cmp	r3, #31
 8003cb2:	d02e      	beq.n	8003d12 <UART4_IRQHandler+0x8a>
 8003cb4:	2b1f      	cmp	r3, #31
 8003cb6:	dc3a      	bgt.n	8003d2e <UART4_IRQHandler+0xa6>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <UART4_IRQHandler+0x3a>
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d012      	beq.n	8003ce6 <UART4_IRQHandler+0x5e>
 8003cc0:	e035      	b.n	8003d2e <UART4_IRQHandler+0xa6>
	            case 0:
	                if (uart4_rx_data == 0x20) {
 8003cc2:	4b35      	ldr	r3, [pc, #212]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d13f      	bne.n	8003d4a <UART4_IRQHandler+0xc2>
	                    ibus_rx_buf[cnt] = uart4_rx_data;
 8003cca:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b31      	ldr	r3, [pc, #196]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003cd2:	7819      	ldrb	r1, [r3, #0]
 8003cd4:	4b33      	ldr	r3, [pc, #204]	@ (8003da4 <UART4_IRQHandler+0x11c>)
 8003cd6:	5499      	strb	r1, [r3, r2]
	                    cnt++;
 8003cd8:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003ce2:	701a      	strb	r2, [r3, #0]
	                }
	                break;
 8003ce4:	e031      	b.n	8003d4a <UART4_IRQHandler+0xc2>
	            case 1:
	                if (uart4_rx_data == 0x40) {
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b40      	cmp	r3, #64	@ 0x40
 8003cec:	d10d      	bne.n	8003d0a <UART4_IRQHandler+0x82>
	                    ibus_rx_buf[cnt] = uart4_rx_data;
 8003cee:	4b2c      	ldr	r3, [pc, #176]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b28      	ldr	r3, [pc, #160]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003cf6:	7819      	ldrb	r1, [r3, #0]
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <UART4_IRQHandler+0x11c>)
 8003cfa:	5499      	strb	r1, [r3, r2]
	                    cnt++;
 8003cfc:	4b28      	ldr	r3, [pc, #160]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	4b26      	ldr	r3, [pc, #152]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d06:	701a      	strb	r2, [r3, #0]
	                } else {
	                    cnt = 0; // Reset if invalid header
	                }
	                break;
 8003d08:	e020      	b.n	8003d4c <UART4_IRQHandler+0xc4>
	                    cnt = 0; // Reset if invalid header
 8003d0a:	4b25      	ldr	r3, [pc, #148]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	                break;
 8003d10:	e01c      	b.n	8003d4c <UART4_IRQHandler+0xc4>
	            case 31:
	                ibus_rx_buf[cnt] = uart4_rx_data;
 8003d12:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b1f      	ldr	r3, [pc, #124]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003d1a:	7819      	ldrb	r1, [r3, #0]
 8003d1c:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <UART4_IRQHandler+0x11c>)
 8003d1e:	5499      	strb	r1, [r3, r2]
	                cnt = 0;
 8003d20:	4b1f      	ldr	r3, [pc, #124]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
	                ibus_rx_cplt_flag = 1;
 8003d26:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <UART4_IRQHandler+0x120>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
//	                for (uint8_t i = 0; i < len; i++) {
//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
//	                }
//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
	                break;
 8003d2c:	e00e      	b.n	8003d4c <UART4_IRQHandler+0xc4>
	            default:
	                ibus_rx_buf[cnt] = uart4_rx_data;
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <UART4_IRQHandler+0x110>)
 8003d36:	7819      	ldrb	r1, [r3, #0]
 8003d38:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <UART4_IRQHandler+0x11c>)
 8003d3a:	5499      	strb	r1, [r3, r2]
	                cnt++;
 8003d3c:	4b18      	ldr	r3, [pc, #96]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b16      	ldr	r3, [pc, #88]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d46:	701a      	strb	r2, [r3, #0]
	                break;
 8003d48:	e000      	b.n	8003d4c <UART4_IRQHandler+0xc4>
	                break;
 8003d4a:	bf00      	nop
	        }
	    }

	    // Handle UART errors
	    if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 8003d4c:	4811      	ldr	r0, [pc, #68]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d4e:	f7ff fe8f 	bl	8003a70 <LL_USART_IsActiveFlag_ORE>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <UART4_IRQHandler+0xe8>
 8003d58:	480e      	ldr	r0, [pc, #56]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d5a:	f7ff fe63 	bl	8003a24 <LL_USART_IsActiveFlag_FE>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <UART4_IRQHandler+0xe8>
 8003d64:	480b      	ldr	r0, [pc, #44]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d66:	f7ff fe70 	bl	8003a4a <LL_USART_IsActiveFlag_NE>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <UART4_IRQHandler+0x100>
	        LL_USART_ClearFlag_ORE(UART4);
 8003d70:	4808      	ldr	r0, [pc, #32]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d72:	f7ff febd 	bl	8003af0 <LL_USART_ClearFlag_ORE>
	        LL_USART_ClearFlag_FE(UART4);
 8003d76:	4807      	ldr	r0, [pc, #28]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d78:	f7ff fea0 	bl	8003abc <LL_USART_ClearFlag_FE>
	        LL_USART_ClearFlag_NE(UART4);
 8003d7c:	4805      	ldr	r0, [pc, #20]	@ (8003d94 <UART4_IRQHandler+0x10c>)
 8003d7e:	f7ff feaa 	bl	8003ad6 <LL_USART_ClearFlag_NE>
	        cnt = 0; // Reset buffer on error
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <UART4_IRQHandler+0x118>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
//	        while (!LL_USART_IsActiveFlag_TC(USART6)) {}

	    }

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d88:	4808      	ldr	r0, [pc, #32]	@ (8003dac <UART4_IRQHandler+0x124>)
 8003d8a:	f00c fdad 	bl	80108e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40004c00 	.word	0x40004c00
 8003d98:	24000ddb 	.word	0x24000ddb
 8003d9c:	24000dda 	.word	0x24000dda
 8003da0:	24000dfd 	.word	0x24000dfd
 8003da4:	24000ddc 	.word	0x24000ddc
 8003da8:	24000dfc 	.word	0x24000dfc
 8003dac:	24000f8c 	.word	0x24000f8c

08003db0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8003db4:	4808      	ldr	r0, [pc, #32]	@ (8003dd8 <USART6_IRQHandler+0x28>)
 8003db6:	f7ff fe6e 	bl	8003a96 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <USART6_IRQHandler+0x24>
			{
	//			LL_USART_ClearFlag_RXNE(USART6);
				uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8003dc0:	4805      	ldr	r0, [pc, #20]	@ (8003dd8 <USART6_IRQHandler+0x28>)
 8003dc2:	f7ff fea2 	bl	8003b0a <LL_USART_ReceiveData8>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <USART6_IRQHandler+0x2c>)
 8003dcc:	701a      	strb	r2, [r3, #0]
				uart6_rx_flag = 1;
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <USART6_IRQHandler+0x30>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	24000dd9 	.word	0x24000dd9
 8003de0:	24000dd8 	.word	0x24000dd8

08003de4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003de8:	4802      	ldr	r0, [pc, #8]	@ (8003df4 <UART7_IRQHandler+0x10>)
 8003dea:	f00c fd7d 	bl	80108e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	24001020 	.word	0x24001020

08003df8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    // --- WS2812 Handling ---
    if (htim->Instance == WS2812_TIMER.Instance) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b19      	ldr	r3, [pc, #100]	@ (8003e6c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d122      	bne.n	8003e52 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	4817      	ldr	r0, [pc, #92]	@ (8003e6c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8003e10:	f00b fb0a 	bl	800f428 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8003e14:	4815      	ldr	r0, [pc, #84]	@ (8003e6c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8003e16:	f00a fea7 	bl	800eb68 <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]

        if (ws2812_dma_semaphore != NULL) {
 8003e20:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d014      	beq.n	8003e52 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
            xSemaphoreGiveFromISR(ws2812_dma_semaphore, &xHigherPriorityTaskWoken);
 8003e2c:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f107 020c 	add.w	r2, r7, #12
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f010 fe44 	bl	8014ac4 <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
 8003e42:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
        }
    }

    // --- Aircraft Lights Handling ---
    if (htim->Instance == AIRCRAFTLIGHTS_TIMER.Instance) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d102      	bne.n	8003e64 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>
        AircraftLights_PWM_Callback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fb8a 	bl	8001578 <AircraftLights_PWM_Callback>
    }
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	24000e04 	.word	0x24000e04
 8003e70:	240006a8 	.word	0x240006a8
 8003e74:	240007f4 	.word	0x240007f4
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return 1;
 8003e80:	2301      	movs	r3, #1
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_kill>:

int _kill(int pid, int sig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e96:	f014 fac7 	bl	8018428 <__errno>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2216      	movs	r2, #22
 8003e9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_exit>:

void _exit (int status)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003eb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ffe7 	bl	8003e8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <_exit+0x12>

08003ec2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e00a      	b.n	8003eea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	4601      	mov	r1, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	60ba      	str	r2, [r7, #8]
 8003ee0:	b2ca      	uxtb	r2, r1
 8003ee2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	dbf0      	blt.n	8003ed4 <_read+0x12>
  }

  return len;
 8003ef2:	687b      	ldr	r3, [r7, #4]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_close>:
  }
  return len;
}

int _close(int file)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f24:	605a      	str	r2, [r3, #4]
  return 0;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_isatty>:

int _isatty(int file)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f3c:	2301      	movs	r3, #1
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f6c:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <_sbrk+0x5c>)
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <_sbrk+0x60>)
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <_sbrk+0x64>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f80:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <_sbrk+0x64>)
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <_sbrk+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <_sbrk+0x64>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d207      	bcs.n	8003fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f94:	f014 fa48 	bl	8018428 <__errno>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fa2:	e009      	b.n	8003fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa4:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <_sbrk+0x64>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003faa:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <_sbrk+0x64>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a05      	ldr	r2, [pc, #20]	@ (8003fc8 <_sbrk+0x64>)
 8003fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	24050000 	.word	0x24050000
 8003fc4:	00000400 	.word	0x00000400
 8003fc8:	24000e00 	.word	0x24000e00
 8003fcc:	24005c80 	.word	0x24005c80

08003fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80040d0 <SystemInit+0x100>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	4a3d      	ldr	r2, [pc, #244]	@ (80040d0 <SystemInit+0x100>)
 8003fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80040d4 <SystemInit+0x104>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d807      	bhi.n	8004000 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ff0:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <SystemInit+0x104>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 030f 	bic.w	r3, r3, #15
 8003ff8:	4a36      	ldr	r2, [pc, #216]	@ (80040d4 <SystemInit+0x104>)
 8003ffa:	f043 0307 	orr.w	r3, r3, #7
 8003ffe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004000:	4b35      	ldr	r3, [pc, #212]	@ (80040d8 <SystemInit+0x108>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a34      	ldr	r2, [pc, #208]	@ (80040d8 <SystemInit+0x108>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800400c:	4b32      	ldr	r3, [pc, #200]	@ (80040d8 <SystemInit+0x108>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004012:	4b31      	ldr	r3, [pc, #196]	@ (80040d8 <SystemInit+0x108>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4930      	ldr	r1, [pc, #192]	@ (80040d8 <SystemInit+0x108>)
 8004018:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <SystemInit+0x10c>)
 800401a:	4013      	ands	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800401e:	4b2d      	ldr	r3, [pc, #180]	@ (80040d4 <SystemInit+0x104>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800402a:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <SystemInit+0x104>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 030f 	bic.w	r3, r3, #15
 8004032:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <SystemInit+0x104>)
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800403a:	4b27      	ldr	r3, [pc, #156]	@ (80040d8 <SystemInit+0x108>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004040:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <SystemInit+0x108>)
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004046:	4b24      	ldr	r3, [pc, #144]	@ (80040d8 <SystemInit+0x108>)
 8004048:	2200      	movs	r2, #0
 800404a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800404c:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <SystemInit+0x108>)
 800404e:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <SystemInit+0x110>)
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004052:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <SystemInit+0x108>)
 8004054:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <SystemInit+0x114>)
 8004056:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004058:	4b1f      	ldr	r3, [pc, #124]	@ (80040d8 <SystemInit+0x108>)
 800405a:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <SystemInit+0x118>)
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800405e:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <SystemInit+0x108>)
 8004060:	2200      	movs	r2, #0
 8004062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004064:	4b1c      	ldr	r3, [pc, #112]	@ (80040d8 <SystemInit+0x108>)
 8004066:	4a20      	ldr	r2, [pc, #128]	@ (80040e8 <SystemInit+0x118>)
 8004068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800406a:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <SystemInit+0x108>)
 800406c:	2200      	movs	r2, #0
 800406e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <SystemInit+0x108>)
 8004072:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <SystemInit+0x118>)
 8004074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004076:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <SystemInit+0x108>)
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800407c:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <SystemInit+0x108>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <SystemInit+0x108>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004088:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <SystemInit+0x108>)
 800408a:	2200      	movs	r2, #0
 800408c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <SystemInit+0x108>)
 8004090:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d113      	bne.n	80040c4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800409c:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <SystemInit+0x108>)
 800409e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80040a2:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <SystemInit+0x108>)
 80040a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040ac:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <SystemInit+0x11c>)
 80040ae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80040b2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80040b4:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <SystemInit+0x108>)
 80040b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80040ba:	4a07      	ldr	r2, [pc, #28]	@ (80040d8 <SystemInit+0x108>)
 80040bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	52002000 	.word	0x52002000
 80040d8:	58024400 	.word	0x58024400
 80040dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80040e0:	02020200 	.word	0x02020200
 80040e4:	01ff0000 	.word	0x01ff0000
 80040e8:	01010280 	.word	0x01010280
 80040ec:	52004000 	.word	0x52004000

080040f0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80040f4:	4b09      	ldr	r3, [pc, #36]	@ (800411c <ExitRun0Mode+0x2c>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a08      	ldr	r2, [pc, #32]	@ (800411c <ExitRun0Mode+0x2c>)
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004100:	bf00      	nop
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <ExitRun0Mode+0x2c>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f9      	beq.n	8004102 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	58024800 	.word	0x58024800

08004120 <LL_TIM_EnableARRPreload>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d028      	beq.n	80041a2 <LL_TIM_OC_EnableFast+0x62>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d023      	beq.n	800419e <LL_TIM_OC_EnableFast+0x5e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b10      	cmp	r3, #16
 800415a:	d01e      	beq.n	800419a <LL_TIM_OC_EnableFast+0x5a>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d019      	beq.n	8004196 <LL_TIM_OC_EnableFast+0x56>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004168:	d013      	beq.n	8004192 <LL_TIM_OC_EnableFast+0x52>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004170:	d00d      	beq.n	800418e <LL_TIM_OC_EnableFast+0x4e>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004178:	d007      	beq.n	800418a <LL_TIM_OC_EnableFast+0x4a>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d101      	bne.n	8004186 <LL_TIM_OC_EnableFast+0x46>
 8004182:	2307      	movs	r3, #7
 8004184:	e00e      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 8004186:	2308      	movs	r3, #8
 8004188:	e00c      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 800418a:	2306      	movs	r3, #6
 800418c:	e00a      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 800418e:	2305      	movs	r3, #5
 8004190:	e008      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 8004192:	2304      	movs	r3, #4
 8004194:	e006      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 8004196:	2303      	movs	r3, #3
 8004198:	e004      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 800419a:	2302      	movs	r3, #2
 800419c:	e002      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <LL_TIM_OC_EnableFast+0x64>
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3318      	adds	r3, #24
 80041aa:	4619      	mov	r1, r3
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <LL_TIM_OC_EnableFast+0x98>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
 80041b2:	440b      	add	r3, r1
 80041b4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4907      	ldr	r1, [pc, #28]	@ (80041dc <LL_TIM_OC_EnableFast+0x9c>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	4619      	mov	r1, r3
 80041c2:	2304      	movs	r3, #4
 80041c4:	408b      	lsls	r3, r1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	601a      	str	r2, [r3, #0]

}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	0801ae74 	.word	0x0801ae74
 80041dc:	0801ae80 	.word	0x0801ae80

080041e0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d028      	beq.n	8004242 <LL_TIM_OC_EnablePreload+0x62>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d023      	beq.n	800423e <LL_TIM_OC_EnablePreload+0x5e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d01e      	beq.n	800423a <LL_TIM_OC_EnablePreload+0x5a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d019      	beq.n	8004236 <LL_TIM_OC_EnablePreload+0x56>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004208:	d013      	beq.n	8004232 <LL_TIM_OC_EnablePreload+0x52>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004210:	d00d      	beq.n	800422e <LL_TIM_OC_EnablePreload+0x4e>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004218:	d007      	beq.n	800422a <LL_TIM_OC_EnablePreload+0x4a>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004220:	d101      	bne.n	8004226 <LL_TIM_OC_EnablePreload+0x46>
 8004222:	2307      	movs	r3, #7
 8004224:	e00e      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 8004226:	2308      	movs	r3, #8
 8004228:	e00c      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 800422a:	2306      	movs	r3, #6
 800422c:	e00a      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 800422e:	2305      	movs	r3, #5
 8004230:	e008      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 8004232:	2304      	movs	r3, #4
 8004234:	e006      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 8004236:	2303      	movs	r3, #3
 8004238:	e004      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 800423a:	2302      	movs	r3, #2
 800423c:	e002      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <LL_TIM_OC_EnablePreload+0x64>
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3318      	adds	r3, #24
 800424a:	4619      	mov	r1, r3
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <LL_TIM_OC_EnablePreload+0x98>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	440b      	add	r3, r1
 8004254:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	4907      	ldr	r1, [pc, #28]	@ (800427c <LL_TIM_OC_EnablePreload+0x9c>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	4619      	mov	r1, r3
 8004262:	2308      	movs	r3, #8
 8004264:	408b      	lsls	r3, r1
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	601a      	str	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	0801ae74 	.word	0x0801ae74
 800427c:	0801ae80 	.word	0x0801ae80

08004280 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <LL_TIM_SetClockSource+0x28>)
 8004290:	4013      	ands	r3, r2
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	609a      	str	r2, [r3, #8]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	fffebff8 	.word	0xfffebff8

080042ac <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <LL_AHB4_GRP1_EnableClock+0x34>)
 80042fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004302:	4909      	ldr	r1, [pc, #36]	@ (8004328 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <LL_AHB4_GRP1_EnableClock+0x34>)
 800430e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4013      	ands	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004318:	68fb      	ldr	r3, [r7, #12]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400

0800432c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8004334:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <LL_APB1_GRP1_EnableClock+0x34>)
 8004336:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800433a:	4909      	ldr	r1, [pc, #36]	@ (8004360 <LL_APB1_GRP1_EnableClock+0x34>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004344:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <LL_APB1_GRP1_EnableClock+0x34>)
 8004346:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	58024400 	.word	0x58024400

08004364 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim3_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b094      	sub	sp, #80	@ 0x50
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800436a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800437a:	f107 031c 	add.w	r3, r7, #28
 800437e:	2220      	movs	r2, #32
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f013 ffa0 	bl	80182c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004398:	2001      	movs	r0, #1
 800439a:	f7ff ffc7 	bl	800432c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 800439e:	f240 2322 	movw	r3, #546	@ 0x222
 80043a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80043a4:	2300      	movs	r3, #0
 80043a6:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 80043a8:	23f9      	movs	r3, #249	@ 0xf9
 80043aa:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80043ac:	2300      	movs	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80043b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043b4:	4619      	mov	r1, r3
 80043b6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043ba:	f00f f8ef 	bl	801359c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80043be:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043c2:	f7ff fead 	bl	8004120 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80043c6:	2100      	movs	r1, #0
 80043c8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043cc:	f7ff ff58 	bl	8004280 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80043d0:	2101      	movs	r1, #1
 80043d2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043d6:	f7ff ff03 	bl	80041e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80043da:	2360      	movs	r3, #96	@ 0x60
 80043dc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80043ee:	f107 031c 	add.w	r3, r7, #28
 80043f2:	461a      	mov	r2, r3
 80043f4:	2101      	movs	r1, #1
 80043f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80043fa:	f00f f96f 	bl	80136dc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80043fe:	2101      	movs	r1, #1
 8004400:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004404:	f7ff fe9c 	bl	8004140 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8004408:	2100      	movs	r1, #0
 800440a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800440e:	f7ff ff4d 	bl	80042ac <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004412:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004416:	f7ff ff5c 	bl	80042d2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 800441a:	2001      	movs	r0, #1
 800441c:	f7ff ff6a 	bl	80042f4 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004420:	2320      	movs	r3, #32
 8004422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004424:	2302      	movs	r3, #2
 8004426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004434:	2301      	movs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <MX_TIM2_Init+0xe8>)
 800443e:	f00e f90d 	bl	801265c <LL_GPIO_Init>

}
 8004442:	bf00      	nop
 8004444:	3750      	adds	r7, #80	@ 0x50
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	58020000 	.word	0x58020000

08004450 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	@ 0x38
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004464:	f107 031c 	add.w	r3, r7, #28
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004470:	463b      	mov	r3, r7
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	615a      	str	r2, [r3, #20]
 8004480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004482:	4b32      	ldr	r3, [pc, #200]	@ (800454c <MX_TIM3_Init+0xfc>)
 8004484:	4a32      	ldr	r2, [pc, #200]	@ (8004550 <MX_TIM3_Init+0x100>)
 8004486:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004488:	4b30      	ldr	r3, [pc, #192]	@ (800454c <MX_TIM3_Init+0xfc>)
 800448a:	2200      	movs	r2, #0
 800448c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800448e:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <MX_TIM3_Init+0xfc>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8004494:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <MX_TIM3_Init+0xfc>)
 8004496:	f240 1257 	movw	r2, #343	@ 0x157
 800449a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800449c:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <MX_TIM3_Init+0xfc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044a2:	4b2a      	ldr	r3, [pc, #168]	@ (800454c <MX_TIM3_Init+0xfc>)
 80044a4:	2280      	movs	r2, #128	@ 0x80
 80044a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044a8:	4828      	ldr	r0, [pc, #160]	@ (800454c <MX_TIM3_Init+0xfc>)
 80044aa:	f00a fa88 	bl	800e9be <HAL_TIM_Base_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80044b4:	f7fe ffca 	bl	800344c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044c2:	4619      	mov	r1, r3
 80044c4:	4821      	ldr	r0, [pc, #132]	@ (800454c <MX_TIM3_Init+0xfc>)
 80044c6:	f00b fac3 	bl	800fa50 <HAL_TIM_ConfigClockSource>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80044d0:	f7fe ffbc 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044d4:	481d      	ldr	r0, [pc, #116]	@ (800454c <MX_TIM3_Init+0xfc>)
 80044d6:	f00a fbf5 	bl	800ecc4 <HAL_TIM_PWM_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80044e0:	f7fe ffb4 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4619      	mov	r1, r3
 80044f2:	4816      	ldr	r0, [pc, #88]	@ (800454c <MX_TIM3_Init+0xfc>)
 80044f4:	f00c f8ee 	bl	80106d4 <HAL_TIMEx_MasterConfigSynchronization>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80044fe:	f7fe ffa5 	bl	800344c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004502:	2360      	movs	r3, #96	@ 0x60
 8004504:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004512:	463b      	mov	r3, r7
 8004514:	2204      	movs	r2, #4
 8004516:	4619      	mov	r1, r3
 8004518:	480c      	ldr	r0, [pc, #48]	@ (800454c <MX_TIM3_Init+0xfc>)
 800451a:	f00b f985 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004524:	f7fe ff92 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004528:	463b      	mov	r3, r7
 800452a:	2208      	movs	r2, #8
 800452c:	4619      	mov	r1, r3
 800452e:	4807      	ldr	r0, [pc, #28]	@ (800454c <MX_TIM3_Init+0xfc>)
 8004530:	f00b f97a 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800453a:	f7fe ff87 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800453e:	4803      	ldr	r0, [pc, #12]	@ (800454c <MX_TIM3_Init+0xfc>)
 8004540:	f000 f948 	bl	80047d4 <HAL_TIM_MspPostInit>

}
 8004544:	bf00      	nop
 8004546:	3738      	adds	r7, #56	@ 0x38
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	24000e04 	.word	0x24000e04
 8004550:	40000400 	.word	0x40000400

08004554 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08e      	sub	sp, #56	@ 0x38
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800455a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004574:	463b      	mov	r3, r7
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	615a      	str	r2, [r3, #20]
 8004584:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004588:	4a3e      	ldr	r2, [pc, #248]	@ (8004684 <MX_TIM5_Init+0x130>)
 800458a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 800458c:	4b3c      	ldr	r3, [pc, #240]	@ (8004680 <MX_TIM5_Init+0x12c>)
 800458e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8004592:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004594:	4b3a      	ldr	r3, [pc, #232]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800459a:	4b39      	ldr	r3, [pc, #228]	@ (8004680 <MX_TIM5_Init+0x12c>)
 800459c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80045a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a2:	4b37      	ldr	r3, [pc, #220]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045a8:	4b35      	ldr	r3, [pc, #212]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045aa:	2280      	movs	r2, #128	@ 0x80
 80045ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045ae:	4834      	ldr	r0, [pc, #208]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045b0:	f00a fa05 	bl	800e9be <HAL_TIM_Base_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 80045ba:	f7fe ff47 	bl	800344c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045c8:	4619      	mov	r1, r3
 80045ca:	482d      	ldr	r0, [pc, #180]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045cc:	f00b fa40 	bl	800fa50 <HAL_TIM_ConfigClockSource>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 80045d6:	f7fe ff39 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80045da:	4829      	ldr	r0, [pc, #164]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045dc:	f00a fb72 	bl	800ecc4 <HAL_TIM_PWM_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80045e6:	f7fe ff31 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045f2:	f107 031c 	add.w	r3, r7, #28
 80045f6:	4619      	mov	r1, r3
 80045f8:	4821      	ldr	r0, [pc, #132]	@ (8004680 <MX_TIM5_Init+0x12c>)
 80045fa:	f00c f86b 	bl	80106d4 <HAL_TIMEx_MasterConfigSynchronization>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8004604:	f7fe ff22 	bl	800344c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004608:	2360      	movs	r3, #96	@ 0x60
 800460a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800460c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004610:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004616:	2304      	movs	r3, #4
 8004618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800461a:	463b      	mov	r3, r7
 800461c:	2200      	movs	r2, #0
 800461e:	4619      	mov	r1, r3
 8004620:	4817      	ldr	r0, [pc, #92]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004622:	f00b f901 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 800462c:	f7fe ff0e 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004630:	463b      	mov	r3, r7
 8004632:	2204      	movs	r2, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4812      	ldr	r0, [pc, #72]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004638:	f00b f8f6 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8004642:	f7fe ff03 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004646:	463b      	mov	r3, r7
 8004648:	2208      	movs	r2, #8
 800464a:	4619      	mov	r1, r3
 800464c:	480c      	ldr	r0, [pc, #48]	@ (8004680 <MX_TIM5_Init+0x12c>)
 800464e:	f00b f8eb 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8004658:	f7fe fef8 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800465c:	463b      	mov	r3, r7
 800465e:	220c      	movs	r2, #12
 8004660:	4619      	mov	r1, r3
 8004662:	4807      	ldr	r0, [pc, #28]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004664:	f00b f8e0 	bl	800f828 <HAL_TIM_PWM_ConfigChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800466e:	f7fe feed 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004672:	4803      	ldr	r0, [pc, #12]	@ (8004680 <MX_TIM5_Init+0x12c>)
 8004674:	f000 f8ae 	bl	80047d4 <HAL_TIM_MspPostInit>

}
 8004678:	bf00      	nop
 800467a:	3738      	adds	r7, #56	@ 0x38
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	24000e50 	.word	0x24000e50
 8004684:	40000c00 	.word	0x40000c00

08004688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a48      	ldr	r2, [pc, #288]	@ (80047b8 <HAL_TIM_Base_MspInit+0x130>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d175      	bne.n	8004786 <HAL_TIM_Base_MspInit+0xfe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800469a:	4b48      	ldr	r3, [pc, #288]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 800469c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046a0:	4a46      	ldr	r2, [pc, #280]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046aa:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 80046ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream4;
 80046b8:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046ba:	4a42      	ldr	r2, [pc, #264]	@ (80047c4 <HAL_TIM_Base_MspInit+0x13c>)
 80046bc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80046be:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046c0:	2218      	movs	r2, #24
 80046c2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046c6:	2240      	movs	r2, #64	@ 0x40
 80046c8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ca:	4b3d      	ldr	r3, [pc, #244]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80046d0:	4b3b      	ldr	r3, [pc, #236]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046d6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80046d8:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80046de:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80046e0:	4b37      	ldr	r3, [pc, #220]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80046e8:	4b35      	ldr	r3, [pc, #212]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80046ee:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046f4:	4b32      	ldr	r3, [pc, #200]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80046fa:	4831      	ldr	r0, [pc, #196]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 80046fc:	f000 fef6 	bl	80054ec <HAL_DMA_Init>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004706:	f7fe fea1 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 800470e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004710:	4a2b      	ldr	r2, [pc, #172]	@ (80047c0 <HAL_TIM_Base_MspInit+0x138>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream5;
 8004716:	4b2c      	ldr	r3, [pc, #176]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004718:	4a2c      	ldr	r2, [pc, #176]	@ (80047cc <HAL_TIM_Base_MspInit+0x144>)
 800471a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 800471c:	4b2a      	ldr	r3, [pc, #168]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 800471e:	2219      	movs	r2, #25
 8004720:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004722:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004724:	2240      	movs	r2, #64	@ 0x40
 8004726:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004728:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800472e:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004734:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004738:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800473c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004740:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004744:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8004746:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004748:	2200      	movs	r2, #0
 800474a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800474c:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 800474e:	2200      	movs	r2, #0
 8004750:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004752:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004754:	2200      	movs	r2, #0
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8004758:	481b      	ldr	r0, [pc, #108]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 800475a:	f000 fec7 	bl	80054ec <HAL_DMA_Init>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_MspInit+0xe0>
    {
      Error_Handler();
 8004764:	f7fe fe72 	bl	800344c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800476e:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_TIM_Base_MspInit+0x140>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004774:	2200      	movs	r2, #0
 8004776:	2105      	movs	r1, #5
 8004778:	201d      	movs	r0, #29
 800477a:	f000 fe17 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800477e:	201d      	movs	r0, #29
 8004780:	f000 fe2e 	bl	80053e0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004784:	e013      	b.n	80047ae <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM5)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a11      	ldr	r2, [pc, #68]	@ (80047d0 <HAL_TIM_Base_MspInit+0x148>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 8004792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_TIM_Base_MspInit+0x134>)
 80047a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40000400 	.word	0x40000400
 80047bc:	58024400 	.word	0x58024400
 80047c0:	24000e9c 	.word	0x24000e9c
 80047c4:	40020070 	.word	0x40020070
 80047c8:	24000f14 	.word	0x24000f14
 80047cc:	40020088 	.word	0x40020088
 80047d0:	40000c00 	.word	0x40000c00

080047d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a34      	ldr	r2, [pc, #208]	@ (80048c4 <HAL_TIM_MspPostInit+0xf0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d13e      	bne.n	8004874 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f6:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 80047f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047fc:	4a32      	ldr	r2, [pc, #200]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004806:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004814:	4b2c      	ldr	r3, [pc, #176]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800481a:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 800481c:	f043 0302 	orr.w	r3, r3, #2
 8004820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004824:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004842:	2302      	movs	r3, #2
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	4619      	mov	r1, r3
 800484c:	481f      	ldr	r0, [pc, #124]	@ (80048cc <HAL_TIM_MspPostInit+0xf8>)
 800484e:	f003 fc9f 	bl	8008190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	2302      	movs	r3, #2
 8004858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004862:	2302      	movs	r3, #2
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	4619      	mov	r1, r3
 800486c:	4818      	ldr	r0, [pc, #96]	@ (80048d0 <HAL_TIM_MspPostInit+0xfc>)
 800486e:	f003 fc8f 	bl	8008190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004872:	e023      	b.n	80048bc <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM5)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <HAL_TIM_MspPostInit+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d11e      	bne.n	80048bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487e:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004884:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_TIM_MspPostInit+0xf4>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800489c:	230f      	movs	r3, #15
 800489e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80048ac:	2302      	movs	r3, #2
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4619      	mov	r1, r3
 80048b6:	4805      	ldr	r0, [pc, #20]	@ (80048cc <HAL_TIM_MspPostInit+0xf8>)
 80048b8:	f003 fc6a 	bl	8008190 <HAL_GPIO_Init>
}
 80048bc:	bf00      	nop
 80048be:	3728      	adds	r7, #40	@ 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40000400 	.word	0x40000400
 80048c8:	58024400 	.word	0x58024400
 80048cc:	58020000 	.word	0x58020000
 80048d0:	58020400 	.word	0x58020400
 80048d4:	40000c00 	.word	0x40000c00

080048d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048dc:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <__NVIC_GetPriorityGrouping+0x18>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	f003 0307 	and.w	r3, r3, #7
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db0b      	blt.n	800491e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	4907      	ldr	r1, [pc, #28]	@ (800492c <__NVIC_EnableIRQ+0x38>)
 800490e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2001      	movs	r0, #1
 8004916:	fa00 f202 	lsl.w	r2, r0, r2
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e100 	.word	0xe000e100

08004930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	6039      	str	r1, [r7, #0]
 800493a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800493c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	db0a      	blt.n	800495a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	490c      	ldr	r1, [pc, #48]	@ (800497c <__NVIC_SetPriority+0x4c>)
 800494a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494e:	0112      	lsls	r2, r2, #4
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	440b      	add	r3, r1
 8004954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004958:	e00a      	b.n	8004970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4908      	ldr	r1, [pc, #32]	@ (8004980 <__NVIC_SetPriority+0x50>)
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	3b04      	subs	r3, #4
 8004968:	0112      	lsls	r2, r2, #4
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	440b      	add	r3, r1
 800496e:	761a      	strb	r2, [r3, #24]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000e100 	.word	0xe000e100
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	@ 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f1c3 0307 	rsb	r3, r3, #7
 800499e:	2b04      	cmp	r3, #4
 80049a0:	bf28      	it	cs
 80049a2:	2304      	movcs	r3, #4
 80049a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d902      	bls.n	80049b4 <NVIC_EncodePriority+0x30>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3b03      	subs	r3, #3
 80049b2:	e000      	b.n	80049b6 <NVIC_EncodePriority+0x32>
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43da      	mvns	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	401a      	ands	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	43d9      	mvns	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049dc:	4313      	orrs	r3, r2
         );
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3724      	adds	r7, #36	@ 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_USART_Enable>:
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_USART_DisableFIFO>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_USART_SetTXFIFOThreshold>:
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b089      	sub	sp, #36	@ 0x24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3308      	adds	r3, #8
 8004a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	075b      	lsls	r3, r3, #29
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3308      	adds	r3, #8
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	61ba      	str	r2, [r7, #24]
 8004a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	613b      	str	r3, [r7, #16]
   return(result);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e4      	bne.n	8004a34 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3724      	adds	r7, #36	@ 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_USART_SetRXFIFOThreshold>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3308      	adds	r3, #8
 8004a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	065b      	lsls	r3, r3, #25
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	61ba      	str	r2, [r7, #24]
 8004aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e4      	bne.n	8004a82 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3724      	adds	r7, #36	@ 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_USART_ConfigAsyncMode>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <LL_USART_IsActiveFlag_TEACK>:
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b06:	d101      	bne.n	8004b0c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <LL_USART_IsActiveFlag_TEACK+0x1c>
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_USART_IsActiveFlag_REACK>:
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b2e:	d101      	bne.n	8004b34 <LL_USART_IsActiveFlag_REACK+0x1a>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <LL_USART_IsActiveFlag_REACK+0x1c>
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <LL_AHB4_GRP1_EnableClock>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004b4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004b52:	4909      	ldr	r1, [pc, #36]	@ (8004b78 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004b5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400

08004b7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <LL_APB2_GRP1_EnableClock+0x34>)
 8004b86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004b8a:	4909      	ldr	r1, [pc, #36]	@ (8004bb0 <LL_APB2_GRP1_EnableClock+0x34>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <LL_APB2_GRP1_EnableClock+0x34>)
 8004b96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400

08004bb4 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004bb8:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bba:	4a23      	ldr	r2, [pc, #140]	@ (8004c48 <MX_UART4_Init+0x94>)
 8004bbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004bbe:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004bc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bda:	2204      	movs	r2, #4
 8004bdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bde:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be4:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bea:	4b16      	ldr	r3, [pc, #88]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bf0:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bf6:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004bfc:	4811      	ldr	r0, [pc, #68]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004bfe:	f00b fe23 	bl	8010848 <HAL_UART_Init>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004c08:	f7fe fc20 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	480d      	ldr	r0, [pc, #52]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004c10:	f00d fb80 	bl	8012314 <HAL_UARTEx_SetTxFifoThreshold>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004c1a:	f7fe fc17 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4808      	ldr	r0, [pc, #32]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004c22:	f00d fbb5 	bl	8012390 <HAL_UARTEx_SetRxFifoThreshold>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004c2c:	f7fe fc0e 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004c30:	4804      	ldr	r0, [pc, #16]	@ (8004c44 <MX_UART4_Init+0x90>)
 8004c32:	f00d fb36 	bl	80122a2 <HAL_UARTEx_DisableFifoMode>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004c3c:	f7fe fc06 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	24000f8c 	.word	0x24000f8c
 8004c48:	40004c00 	.word	0x40004c00

08004c4c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004c50:	4b22      	ldr	r3, [pc, #136]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c52:	4a23      	ldr	r2, [pc, #140]	@ (8004ce0 <MX_UART7_Init+0x94>)
 8004c54:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004c56:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004c5c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004c64:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004c70:	4b1a      	ldr	r3, [pc, #104]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c72:	220c      	movs	r2, #12
 8004c74:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c76:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c7c:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c82:	4b16      	ldr	r3, [pc, #88]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c88:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c8e:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004c94:	4811      	ldr	r0, [pc, #68]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004c96:	f00b fdd7 	bl	8010848 <HAL_UART_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8004ca0:	f7fe fbd4 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	480d      	ldr	r0, [pc, #52]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004ca8:	f00d fb34 	bl	8012314 <HAL_UARTEx_SetTxFifoThreshold>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8004cb2:	f7fe fbcb 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4808      	ldr	r0, [pc, #32]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004cba:	f00d fb69 	bl	8012390 <HAL_UARTEx_SetRxFifoThreshold>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8004cc4:	f7fe fbc2 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8004cc8:	4804      	ldr	r0, [pc, #16]	@ (8004cdc <MX_UART7_Init+0x90>)
 8004cca:	f00d faea 	bl	80122a2 <HAL_UARTEx_DisableFifoMode>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8004cd4:	f7fe fbba 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004cd8:	bf00      	nop
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	24001020 	.word	0x24001020
 8004ce0:	40007800 	.word	0x40007800

08004ce4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ce8:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004cea:	4a23      	ldr	r2, [pc, #140]	@ (8004d78 <MX_USART2_UART_Init+0x94>)
 8004cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004cee:	4b21      	ldr	r3, [pc, #132]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d02:	4b1c      	ldr	r3, [pc, #112]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0e:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d14:	4b17      	ldr	r3, [pc, #92]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d1a:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d20:	4b14      	ldr	r3, [pc, #80]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d2c:	4811      	ldr	r0, [pc, #68]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d2e:	f00b fd8b 	bl	8010848 <HAL_UART_Init>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004d38:	f7fe fb88 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	480d      	ldr	r0, [pc, #52]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d40:	f00d fae8 	bl	8012314 <HAL_UARTEx_SetTxFifoThreshold>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004d4a:	f7fe fb7f 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4808      	ldr	r0, [pc, #32]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d52:	f00d fb1d 	bl	8012390 <HAL_UARTEx_SetRxFifoThreshold>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004d5c:	f7fe fb76 	bl	800344c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004d60:	4804      	ldr	r0, [pc, #16]	@ (8004d74 <MX_USART2_UART_Init+0x90>)
 8004d62:	f00d fa9e 	bl	80122a2 <HAL_UARTEx_DisableFifoMode>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004d6c:	f7fe fb6e 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d70:	bf00      	nop
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	240010b4 	.word	0x240010b4
 8004d78:	40004400 	.word	0x40004400

08004d7c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0bc      	sub	sp, #240	@ 0xf0
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004d82:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8004d86:	2220      	movs	r2, #32
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f013 fa9c 	bl	80182c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
 8004da0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004da2:	463b      	mov	r3, r7
 8004da4:	22b8      	movs	r2, #184	@ 0xb8
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f013 fa8d 	bl	80182c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004dae:	f04f 0201 	mov.w	r2, #1
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f007 fa35 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8004dcc:	f7fe fb3e 	bl	800344c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004dd0:	2020      	movs	r0, #32
 8004dd2:	f7ff fed3 	bl	8004b7c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8004dd6:	2004      	movs	r0, #4
 8004dd8:	f7ff feb4 	bl	8004b44 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004ddc:	23c0      	movs	r3, #192	@ 0xc0
 8004dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004de2:	2302      	movs	r3, #2
 8004de4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004dfa:	2307      	movs	r3, #7
 8004dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e00:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004e04:	4619      	mov	r1, r3
 8004e06:	482a      	ldr	r0, [pc, #168]	@ (8004eb0 <MX_USART6_UART_Init+0x134>)
 8004e08:	f00d fc28 	bl	801265c <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004e0c:	f7ff fd64 	bl	80048d8 <__NVIC_GetPriorityGrouping>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2200      	movs	r2, #0
 8004e14:	2105      	movs	r1, #5
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fdb4 	bl	8004984 <NVIC_EncodePriority>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4619      	mov	r1, r3
 8004e20:	2047      	movs	r0, #71	@ 0x47
 8004e22:	f7ff fd85 	bl	8004930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004e26:	2047      	movs	r0, #71	@ 0x47
 8004e28:	f7ff fd64 	bl	80048f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 8004e32:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 8004e5e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8004e62:	4619      	mov	r1, r3
 8004e64:	4813      	ldr	r0, [pc, #76]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e66:	f00e fff3 	bl	8013e50 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4811      	ldr	r0, [pc, #68]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e6e:	f7ff fddc 	bl	8004a2a <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8004e72:	2100      	movs	r1, #0
 8004e74:	480f      	ldr	r0, [pc, #60]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e76:	f7ff fdff 	bl	8004a78 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8004e7a:	480e      	ldr	r0, [pc, #56]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e7c:	f7ff fdc5 	bl	8004a0a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8004e80:	480c      	ldr	r0, [pc, #48]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e82:	f7ff fe20 	bl	8004ac6 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8004e86:	480b      	ldr	r0, [pc, #44]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e88:	f7ff fdaf 	bl	80049ea <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8004e8c:	bf00      	nop
 8004e8e:	4809      	ldr	r0, [pc, #36]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e90:	f7ff fe2f 	bl	8004af2 <LL_USART_IsActiveFlag_TEACK>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f9      	beq.n	8004e8e <MX_USART6_UART_Init+0x112>
 8004e9a:	4806      	ldr	r0, [pc, #24]	@ (8004eb4 <MX_USART6_UART_Init+0x138>)
 8004e9c:	f7ff fe3d 	bl	8004b1a <LL_USART_IsActiveFlag_REACK>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f3      	beq.n	8004e8e <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	37f0      	adds	r7, #240	@ 0xf0
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58020800 	.word	0x58020800
 8004eb4:	40011400 	.word	0x40011400

08004eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b0bc      	sub	sp, #240	@ 0xf0
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ed0:	f107 0320 	add.w	r3, r7, #32
 8004ed4:	22b8      	movs	r2, #184	@ 0xb8
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f013 f9f5 	bl	80182c8 <memset>
  if(uartHandle->Instance==UART4)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80050cc <HAL_UART_MspInit+0x214>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d14e      	bne.n	8004f86 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004ee8:	f04f 0202 	mov.w	r2, #2
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004efa:	f107 0320 	add.w	r3, r7, #32
 8004efe:	4618      	mov	r0, r3
 8004f00:	f007 f996 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004f0a:	f7fe fa9f 	bl	800344c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f14:	4a6e      	ldr	r2, [pc, #440]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f2c:	4b68      	ldr	r3, [pc, #416]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f32:	4a67      	ldr	r2, [pc, #412]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f34:	f043 0308 	orr.w	r3, r3, #8
 8004f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f3c:	4b64      	ldr	r3, [pc, #400]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f50:	2302      	movs	r3, #2
 8004f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004f62:	2308      	movs	r3, #8
 8004f64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4859      	ldr	r0, [pc, #356]	@ (80050d4 <HAL_UART_MspInit+0x21c>)
 8004f70:	f003 f90e 	bl	8008190 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004f74:	2200      	movs	r2, #0
 8004f76:	2105      	movs	r1, #5
 8004f78:	2034      	movs	r0, #52	@ 0x34
 8004f7a:	f000 fa17 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004f7e:	2034      	movs	r0, #52	@ 0x34
 8004f80:	f000 fa2e 	bl	80053e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004f84:	e09e      	b.n	80050c4 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==UART7)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a53      	ldr	r2, [pc, #332]	@ (80050d8 <HAL_UART_MspInit+0x220>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d14e      	bne.n	800502e <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004f90:	f04f 0202 	mov.w	r2, #2
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fa2:	f107 0320 	add.w	r3, r7, #32
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f007 f942 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8004fb2:	f7fe fa4b 	bl	800344c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004fb6:	4b46      	ldr	r3, [pc, #280]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fbc:	4a44      	ldr	r2, [pc, #272]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fc6:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fda:	4a3d      	ldr	r2, [pc, #244]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8004fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004ff2:	2318      	movs	r3, #24
 8004ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800500a:	230b      	movs	r3, #11
 800500c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005014:	4619      	mov	r1, r3
 8005016:	4831      	ldr	r0, [pc, #196]	@ (80050dc <HAL_UART_MspInit+0x224>)
 8005018:	f003 f8ba 	bl	8008190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800501c:	2200      	movs	r2, #0
 800501e:	2105      	movs	r1, #5
 8005020:	2052      	movs	r0, #82	@ 0x52
 8005022:	f000 f9c3 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005026:	2052      	movs	r0, #82	@ 0x52
 8005028:	f000 f9da 	bl	80053e0 <HAL_NVIC_EnableIRQ>
}
 800502c:	e04a      	b.n	80050c4 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==USART2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <HAL_UART_MspInit+0x228>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d145      	bne.n	80050c4 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005038:	f04f 0202 	mov.w	r2, #2
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800504a:	f107 0320 	add.w	r3, r7, #32
 800504e:	4618      	mov	r0, r3
 8005050:	f007 f8ee 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800505a:	f7fe f9f7 	bl	800344c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800505e:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8005060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005064:	4a1a      	ldr	r2, [pc, #104]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8005066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800506a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800506e:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8005070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005082:	4a13      	ldr	r2, [pc, #76]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800508c:	4b10      	ldr	r3, [pc, #64]	@ (80050d0 <HAL_UART_MspInit+0x218>)
 800508e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800509a:	2360      	movs	r3, #96	@ 0x60
 800509c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050b2:	2307      	movs	r3, #7
 80050b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80050bc:	4619      	mov	r1, r3
 80050be:	4805      	ldr	r0, [pc, #20]	@ (80050d4 <HAL_UART_MspInit+0x21c>)
 80050c0:	f003 f866 	bl	8008190 <HAL_GPIO_Init>
}
 80050c4:	bf00      	nop
 80050c6:	37f0      	adds	r7, #240	@ 0xf0
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40004c00 	.word	0x40004c00
 80050d0:	58024400 	.word	0x58024400
 80050d4:	58020c00 	.word	0x58020c00
 80050d8:	40007800 	.word	0x40007800
 80050dc:	58020400 	.word	0x58020400
 80050e0:	40004400 	.word	0x40004400

080050e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005120 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80050e8:	f7ff f802 	bl	80040f0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80050ec:	f7fe ff70 	bl	8003fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f0:	480c      	ldr	r0, [pc, #48]	@ (8005124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050f2:	490d      	ldr	r1, [pc, #52]	@ (8005128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050f4:	4a0d      	ldr	r2, [pc, #52]	@ (800512c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f8:	e002      	b.n	8005100 <LoopCopyDataInit>

080050fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fe:	3304      	adds	r3, #4

08005100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005104:	d3f9      	bcc.n	80050fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005108:	4c0a      	ldr	r4, [pc, #40]	@ (8005134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800510c:	e001      	b.n	8005112 <LoopFillZerobss>

0800510e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005110:	3204      	adds	r2, #4

08005112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005114:	d3fb      	bcc.n	800510e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005116:	f013 f98d 	bl	8018434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7fd fb81 	bl	8002820 <main>
  bx  lr
 800511e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005120:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005124:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005128:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800512c:	0801b284 	.word	0x0801b284
  ldr r2, =_sbss
 8005130:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8005134:	24005c80 	.word	0x24005c80

08005138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC3_IRQHandler>
	...

0800513c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005142:	2003      	movs	r0, #3
 8005144:	f000 f927 	bl	8005396 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005148:	f006 fe5a 	bl	800be00 <HAL_RCC_GetSysClockFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <HAL_Init+0x68>)
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4913      	ldr	r1, [pc, #76]	@ (80051a8 <HAL_Init+0x6c>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005166:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <HAL_Init+0x68>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <HAL_Init+0x6c>)
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	4a0b      	ldr	r2, [pc, #44]	@ (80051ac <HAL_Init+0x70>)
 800517e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005180:	4a0b      	ldr	r2, [pc, #44]	@ (80051b0 <HAL_Init+0x74>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005186:	200f      	movs	r0, #15
 8005188:	f7fe fbea 	bl	8003960 <HAL_InitTick>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e002      	b.n	800519c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005196:	f7fe fbc5 	bl	8003924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	58024400 	.word	0x58024400
 80051a8:	0801ae64 	.word	0x0801ae64
 80051ac:	24000014 	.word	0x24000014
 80051b0:	24000010 	.word	0x24000010

080051b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051b8:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <HAL_IncTick+0x20>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_IncTick+0x24>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4413      	add	r3, r2
 80051c4:	4a04      	ldr	r2, [pc, #16]	@ (80051d8 <HAL_IncTick+0x24>)
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2400001c 	.word	0x2400001c
 80051d8:	24001148 	.word	0x24001148

080051dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return uwTick;
 80051e0:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <HAL_GetTick+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	24001148 	.word	0x24001148

080051f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051fc:	f7ff ffee 	bl	80051dc <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800520c:	d005      	beq.n	800521a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <HAL_Delay+0x44>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800521a:	bf00      	nop
 800521c:	f7ff ffde 	bl	80051dc <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d8f7      	bhi.n	800521c <HAL_Delay+0x28>
  {
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2400001c 	.word	0x2400001c

0800523c <__NVIC_SetPriorityGrouping>:
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <__NVIC_SetPriorityGrouping+0x40>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005258:	4013      	ands	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <__NVIC_SetPriorityGrouping+0x44>)
 8005266:	4313      	orrs	r3, r2
 8005268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <__NVIC_SetPriorityGrouping+0x40>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	60d3      	str	r3, [r2, #12]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000ed00 	.word	0xe000ed00
 8005280:	05fa0000 	.word	0x05fa0000

08005284 <__NVIC_GetPriorityGrouping>:
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <__NVIC_GetPriorityGrouping+0x18>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	f003 0307 	and.w	r3, r3, #7
}
 8005292:	4618      	mov	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <__NVIC_EnableIRQ>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	db0b      	blt.n	80052ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	f003 021f 	and.w	r2, r3, #31
 80052b8:	4907      	ldr	r1, [pc, #28]	@ (80052d8 <__NVIC_EnableIRQ+0x38>)
 80052ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2001      	movs	r0, #1
 80052c2:	fa00 f202 	lsl.w	r2, r0, r2
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	e000e100 	.word	0xe000e100

080052dc <__NVIC_SetPriority>:
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	6039      	str	r1, [r7, #0]
 80052e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db0a      	blt.n	8005306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	490c      	ldr	r1, [pc, #48]	@ (8005328 <__NVIC_SetPriority+0x4c>)
 80052f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052fa:	0112      	lsls	r2, r2, #4
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	440b      	add	r3, r1
 8005300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005304:	e00a      	b.n	800531c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4908      	ldr	r1, [pc, #32]	@ (800532c <__NVIC_SetPriority+0x50>)
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	3b04      	subs	r3, #4
 8005314:	0112      	lsls	r2, r2, #4
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	440b      	add	r3, r1
 800531a:	761a      	strb	r2, [r3, #24]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	e000e100 	.word	0xe000e100
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <NVIC_EncodePriority>:
{
 8005330:	b480      	push	{r7}
 8005332:	b089      	sub	sp, #36	@ 0x24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f1c3 0307 	rsb	r3, r3, #7
 800534a:	2b04      	cmp	r3, #4
 800534c:	bf28      	it	cs
 800534e:	2304      	movcs	r3, #4
 8005350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3304      	adds	r3, #4
 8005356:	2b06      	cmp	r3, #6
 8005358:	d902      	bls.n	8005360 <NVIC_EncodePriority+0x30>
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3b03      	subs	r3, #3
 800535e:	e000      	b.n	8005362 <NVIC_EncodePriority+0x32>
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	401a      	ands	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005378:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa01 f303 	lsl.w	r3, r1, r3
 8005382:	43d9      	mvns	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005388:	4313      	orrs	r3, r2
}
 800538a:	4618      	mov	r0, r3
 800538c:	3724      	adds	r7, #36	@ 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff4c 	bl	800523c <__NVIC_SetPriorityGrouping>
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053ba:	f7ff ff63 	bl	8005284 <__NVIC_GetPriorityGrouping>
 80053be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	f7ff ffb3 	bl	8005330 <NVIC_EncodePriority>
 80053ca:	4602      	mov	r2, r0
 80053cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff ff82 	bl	80052dc <__NVIC_SetPriority>
}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff ff56 	bl	80052a0 <__NVIC_EnableIRQ>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005400:	f3bf 8f5f 	dmb	sy
}
 8005404:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005406:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <HAL_MPU_Disable+0x28>)
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	4a06      	ldr	r2, [pc, #24]	@ (8005424 <HAL_MPU_Disable+0x28>)
 800540c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005410:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_MPU_Disable+0x2c>)
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000ed00 	.word	0xe000ed00
 8005428:	e000ed90 	.word	0xe000ed90

0800542c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005434:	4a0b      	ldr	r2, [pc, #44]	@ (8005464 <HAL_MPU_Enable+0x38>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800543e:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <HAL_MPU_Enable+0x3c>)
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <HAL_MPU_Enable+0x3c>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800544a:	f3bf 8f4f 	dsb	sy
}
 800544e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005450:	f3bf 8f6f 	isb	sy
}
 8005454:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000ed90 	.word	0xe000ed90
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	785a      	ldrb	r2, [r3, #1]
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <HAL_MPU_ConfigRegion+0x7c>)
 800547a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800547c:	4b1a      	ldr	r3, [pc, #104]	@ (80054e8 <HAL_MPU_ConfigRegion+0x7c>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <HAL_MPU_ConfigRegion+0x7c>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005488:	4a17      	ldr	r2, [pc, #92]	@ (80054e8 <HAL_MPU_ConfigRegion+0x7c>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7b1b      	ldrb	r3, [r3, #12]
 8005494:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7adb      	ldrb	r3, [r3, #11]
 800549a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800549c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7a9b      	ldrb	r3, [r3, #10]
 80054a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80054a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7b5b      	ldrb	r3, [r3, #13]
 80054aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80054ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7b9b      	ldrb	r3, [r3, #14]
 80054b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7bdb      	ldrb	r3, [r3, #15]
 80054ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80054bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7a5b      	ldrb	r3, [r3, #9]
 80054c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80054c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7a1b      	ldrb	r3, [r3, #8]
 80054ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80054cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054d4:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80054d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054d8:	6113      	str	r3, [r2, #16]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	e000ed90 	.word	0xe000ed90

080054ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7ff fe72 	bl	80051dc <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e312      	b.n	8005b2a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a66      	ldr	r2, [pc, #408]	@ (80056a4 <HAL_DMA_Init+0x1b8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d04a      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a65      	ldr	r2, [pc, #404]	@ (80056a8 <HAL_DMA_Init+0x1bc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d045      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a63      	ldr	r2, [pc, #396]	@ (80056ac <HAL_DMA_Init+0x1c0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d040      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a62      	ldr	r2, [pc, #392]	@ (80056b0 <HAL_DMA_Init+0x1c4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d03b      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a60      	ldr	r2, [pc, #384]	@ (80056b4 <HAL_DMA_Init+0x1c8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d036      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5f      	ldr	r2, [pc, #380]	@ (80056b8 <HAL_DMA_Init+0x1cc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d031      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a5d      	ldr	r2, [pc, #372]	@ (80056bc <HAL_DMA_Init+0x1d0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d02c      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a5c      	ldr	r2, [pc, #368]	@ (80056c0 <HAL_DMA_Init+0x1d4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d027      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a5a      	ldr	r2, [pc, #360]	@ (80056c4 <HAL_DMA_Init+0x1d8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a59      	ldr	r2, [pc, #356]	@ (80056c8 <HAL_DMA_Init+0x1dc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d01d      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a57      	ldr	r2, [pc, #348]	@ (80056cc <HAL_DMA_Init+0x1e0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a56      	ldr	r2, [pc, #344]	@ (80056d0 <HAL_DMA_Init+0x1e4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a54      	ldr	r2, [pc, #336]	@ (80056d4 <HAL_DMA_Init+0x1e8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a53      	ldr	r2, [pc, #332]	@ (80056d8 <HAL_DMA_Init+0x1ec>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a51      	ldr	r2, [pc, #324]	@ (80056dc <HAL_DMA_Init+0x1f0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_DMA_Init+0xb8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a50      	ldr	r2, [pc, #320]	@ (80056e0 <HAL_DMA_Init+0x1f4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_DMA_Init+0xbc>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_DMA_Init+0xbe>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 813c 	beq.w	8005828 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a37      	ldr	r2, [pc, #220]	@ (80056a4 <HAL_DMA_Init+0x1b8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d04a      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a36      	ldr	r2, [pc, #216]	@ (80056a8 <HAL_DMA_Init+0x1bc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d045      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a34      	ldr	r2, [pc, #208]	@ (80056ac <HAL_DMA_Init+0x1c0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d040      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a33      	ldr	r2, [pc, #204]	@ (80056b0 <HAL_DMA_Init+0x1c4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d03b      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a31      	ldr	r2, [pc, #196]	@ (80056b4 <HAL_DMA_Init+0x1c8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d036      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <HAL_DMA_Init+0x1cc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d031      	beq.n	8005660 <HAL_DMA_Init+0x174>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2e      	ldr	r2, [pc, #184]	@ (80056bc <HAL_DMA_Init+0x1d0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d02c      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2d      	ldr	r2, [pc, #180]	@ (80056c0 <HAL_DMA_Init+0x1d4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d027      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2b      	ldr	r2, [pc, #172]	@ (80056c4 <HAL_DMA_Init+0x1d8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d022      	beq.n	8005660 <HAL_DMA_Init+0x174>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2a      	ldr	r2, [pc, #168]	@ (80056c8 <HAL_DMA_Init+0x1dc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d01d      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a28      	ldr	r2, [pc, #160]	@ (80056cc <HAL_DMA_Init+0x1e0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_DMA_Init+0x174>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a27      	ldr	r2, [pc, #156]	@ (80056d0 <HAL_DMA_Init+0x1e4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a25      	ldr	r2, [pc, #148]	@ (80056d4 <HAL_DMA_Init+0x1e8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a24      	ldr	r2, [pc, #144]	@ (80056d8 <HAL_DMA_Init+0x1ec>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_DMA_Init+0x174>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a22      	ldr	r2, [pc, #136]	@ (80056dc <HAL_DMA_Init+0x1f0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_DMA_Init+0x174>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <HAL_DMA_Init+0x1f4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <HAL_DMA_Init+0x186>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e007      	b.n	8005682 <HAL_DMA_Init+0x196>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005682:	e02f      	b.n	80056e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005684:	f7ff fdaa 	bl	80051dc <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b05      	cmp	r3, #5
 8005690:	d928      	bls.n	80056e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2203      	movs	r2, #3
 800569c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e242      	b.n	8005b2a <HAL_DMA_Init+0x63e>
 80056a4:	40020010 	.word	0x40020010
 80056a8:	40020028 	.word	0x40020028
 80056ac:	40020040 	.word	0x40020040
 80056b0:	40020058 	.word	0x40020058
 80056b4:	40020070 	.word	0x40020070
 80056b8:	40020088 	.word	0x40020088
 80056bc:	400200a0 	.word	0x400200a0
 80056c0:	400200b8 	.word	0x400200b8
 80056c4:	40020410 	.word	0x40020410
 80056c8:	40020428 	.word	0x40020428
 80056cc:	40020440 	.word	0x40020440
 80056d0:	40020458 	.word	0x40020458
 80056d4:	40020470 	.word	0x40020470
 80056d8:	40020488 	.word	0x40020488
 80056dc:	400204a0 	.word	0x400204a0
 80056e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c8      	bne.n	8005684 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4b83      	ldr	r3, [pc, #524]	@ (800590c <HAL_DMA_Init+0x420>)
 80056fe:	4013      	ands	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800570a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	2b04      	cmp	r3, #4
 8005736:	d107      	bne.n	8005748 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	4313      	orrs	r3, r2
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b28      	cmp	r3, #40	@ 0x28
 800574e:	d903      	bls.n	8005758 <HAL_DMA_Init+0x26c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b2e      	cmp	r3, #46	@ 0x2e
 8005756:	d91f      	bls.n	8005798 <HAL_DMA_Init+0x2ac>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b3e      	cmp	r3, #62	@ 0x3e
 800575e:	d903      	bls.n	8005768 <HAL_DMA_Init+0x27c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b42      	cmp	r3, #66	@ 0x42
 8005766:	d917      	bls.n	8005798 <HAL_DMA_Init+0x2ac>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b46      	cmp	r3, #70	@ 0x46
 800576e:	d903      	bls.n	8005778 <HAL_DMA_Init+0x28c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b48      	cmp	r3, #72	@ 0x48
 8005776:	d90f      	bls.n	8005798 <HAL_DMA_Init+0x2ac>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b4e      	cmp	r3, #78	@ 0x4e
 800577e:	d903      	bls.n	8005788 <HAL_DMA_Init+0x29c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b52      	cmp	r3, #82	@ 0x52
 8005786:	d907      	bls.n	8005798 <HAL_DMA_Init+0x2ac>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b73      	cmp	r3, #115	@ 0x73
 800578e:	d905      	bls.n	800579c <HAL_DMA_Init+0x2b0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b77      	cmp	r3, #119	@ 0x77
 8005796:	d801      	bhi.n	800579c <HAL_DMA_Init+0x2b0>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_DMA_Init+0x2b2>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d117      	bne.n	8005804 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f002 fb48 	bl	8007e7c <DMA_CheckFifoParam>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2240      	movs	r2, #64	@ 0x40
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e192      	b.n	8005b2a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 fa83 	bl	8007d18 <DMA_CalcBaseAndBitshift>
 8005812:	4603      	mov	r3, r0
 8005814:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	223f      	movs	r2, #63	@ 0x3f
 8005820:	409a      	lsls	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	e0c8      	b.n	80059ba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a38      	ldr	r2, [pc, #224]	@ (8005910 <HAL_DMA_Init+0x424>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <HAL_DMA_Init+0x428>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a35      	ldr	r2, [pc, #212]	@ (8005918 <HAL_DMA_Init+0x42c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a34      	ldr	r2, [pc, #208]	@ (800591c <HAL_DMA_Init+0x430>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a32      	ldr	r2, [pc, #200]	@ (8005920 <HAL_DMA_Init+0x434>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a31      	ldr	r2, [pc, #196]	@ (8005924 <HAL_DMA_Init+0x438>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2f      	ldr	r2, [pc, #188]	@ (8005928 <HAL_DMA_Init+0x43c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Init+0x38c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2e      	ldr	r2, [pc, #184]	@ (800592c <HAL_DMA_Init+0x440>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_DMA_Init+0x390>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_DMA_Init+0x392>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8092 	beq.w	80059a8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a21      	ldr	r2, [pc, #132]	@ (8005910 <HAL_DMA_Init+0x424>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d021      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a20      	ldr	r2, [pc, #128]	@ (8005914 <HAL_DMA_Init+0x428>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d01c      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <HAL_DMA_Init+0x42c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <HAL_DMA_Init+0x430>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d012      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <HAL_DMA_Init+0x434>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00d      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <HAL_DMA_Init+0x438>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d008      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a18      	ldr	r2, [pc, #96]	@ (8005928 <HAL_DMA_Init+0x43c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <HAL_DMA_Init+0x3e6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a17      	ldr	r2, [pc, #92]	@ (800592c <HAL_DMA_Init+0x440>)
 80058d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <HAL_DMA_Init+0x444>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b40      	cmp	r3, #64	@ 0x40
 80058f8:	d01c      	beq.n	8005934 <HAL_DMA_Init+0x448>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d102      	bne.n	8005908 <HAL_DMA_Init+0x41c>
 8005902:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005906:	e016      	b.n	8005936 <HAL_DMA_Init+0x44a>
 8005908:	2300      	movs	r3, #0
 800590a:	e014      	b.n	8005936 <HAL_DMA_Init+0x44a>
 800590c:	fe10803f 	.word	0xfe10803f
 8005910:	58025408 	.word	0x58025408
 8005914:	5802541c 	.word	0x5802541c
 8005918:	58025430 	.word	0x58025430
 800591c:	58025444 	.word	0x58025444
 8005920:	58025458 	.word	0x58025458
 8005924:	5802546c 	.word	0x5802546c
 8005928:	58025480 	.word	0x58025480
 800592c:	58025494 	.word	0x58025494
 8005930:	fffe000f 	.word	0xfffe000f
 8005934:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	68d2      	ldr	r2, [r2, #12]
 800593a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800593c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800594c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800595c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005964:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	4b6e      	ldr	r3, [pc, #440]	@ (8005b34 <HAL_DMA_Init+0x648>)
 800597c:	4413      	add	r3, r2
 800597e:	4a6e      	ldr	r2, [pc, #440]	@ (8005b38 <HAL_DMA_Init+0x64c>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	009a      	lsls	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f002 f9c3 	bl	8007d18 <DMA_CalcBaseAndBitshift>
 8005992:	4603      	mov	r3, r0
 8005994:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e008      	b.n	80059ba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0b7      	b.n	8005b2a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5f      	ldr	r2, [pc, #380]	@ (8005b3c <HAL_DMA_Init+0x650>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d072      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005b40 <HAL_DMA_Init+0x654>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d06d      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005b44 <HAL_DMA_Init+0x658>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d068      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005b48 <HAL_DMA_Init+0x65c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d063      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a59      	ldr	r2, [pc, #356]	@ (8005b4c <HAL_DMA_Init+0x660>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d05e      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a57      	ldr	r2, [pc, #348]	@ (8005b50 <HAL_DMA_Init+0x664>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d059      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a56      	ldr	r2, [pc, #344]	@ (8005b54 <HAL_DMA_Init+0x668>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d054      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a54      	ldr	r2, [pc, #336]	@ (8005b58 <HAL_DMA_Init+0x66c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04f      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a53      	ldr	r2, [pc, #332]	@ (8005b5c <HAL_DMA_Init+0x670>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a51      	ldr	r2, [pc, #324]	@ (8005b60 <HAL_DMA_Init+0x674>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a50      	ldr	r2, [pc, #320]	@ (8005b64 <HAL_DMA_Init+0x678>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005b68 <HAL_DMA_Init+0x67c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a4d      	ldr	r2, [pc, #308]	@ (8005b6c <HAL_DMA_Init+0x680>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a4b      	ldr	r2, [pc, #300]	@ (8005b70 <HAL_DMA_Init+0x684>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b74 <HAL_DMA_Init+0x688>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a48      	ldr	r2, [pc, #288]	@ (8005b78 <HAL_DMA_Init+0x68c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a47      	ldr	r2, [pc, #284]	@ (8005b7c <HAL_DMA_Init+0x690>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a45      	ldr	r2, [pc, #276]	@ (8005b80 <HAL_DMA_Init+0x694>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a44      	ldr	r2, [pc, #272]	@ (8005b84 <HAL_DMA_Init+0x698>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a42      	ldr	r2, [pc, #264]	@ (8005b88 <HAL_DMA_Init+0x69c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a41      	ldr	r2, [pc, #260]	@ (8005b8c <HAL_DMA_Init+0x6a0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a3f      	ldr	r2, [pc, #252]	@ (8005b90 <HAL_DMA_Init+0x6a4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b94 <HAL_DMA_Init+0x6a8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMA_Init+0x5be>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8005b98 <HAL_DMA_Init+0x6ac>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA_Init+0x5c2>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_DMA_Init+0x5c4>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d032      	beq.n	8005b1a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 fa5d 	bl	8007f74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b80      	cmp	r3, #128	@ 0x80
 8005ac0:	d102      	bne.n	8005ac8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005adc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <HAL_DMA_Init+0x61c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d80c      	bhi.n	8005b08 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f002 fada 	bl	80080a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	e008      	b.n	8005b1a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	a7fdabf8 	.word	0xa7fdabf8
 8005b38:	cccccccd 	.word	0xcccccccd
 8005b3c:	40020010 	.word	0x40020010
 8005b40:	40020028 	.word	0x40020028
 8005b44:	40020040 	.word	0x40020040
 8005b48:	40020058 	.word	0x40020058
 8005b4c:	40020070 	.word	0x40020070
 8005b50:	40020088 	.word	0x40020088
 8005b54:	400200a0 	.word	0x400200a0
 8005b58:	400200b8 	.word	0x400200b8
 8005b5c:	40020410 	.word	0x40020410
 8005b60:	40020428 	.word	0x40020428
 8005b64:	40020440 	.word	0x40020440
 8005b68:	40020458 	.word	0x40020458
 8005b6c:	40020470 	.word	0x40020470
 8005b70:	40020488 	.word	0x40020488
 8005b74:	400204a0 	.word	0x400204a0
 8005b78:	400204b8 	.word	0x400204b8
 8005b7c:	58025408 	.word	0x58025408
 8005b80:	5802541c 	.word	0x5802541c
 8005b84:	58025430 	.word	0x58025430
 8005b88:	58025444 	.word	0x58025444
 8005b8c:	58025458 	.word	0x58025458
 8005b90:	5802546c 	.word	0x5802546c
 8005b94:	58025480 	.word	0x58025480
 8005b98:	58025494 	.word	0x58025494

08005b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e226      	b.n	8006006 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Start_IT+0x2a>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e21f      	b.n	8006006 <HAL_DMA_Start_IT+0x46a>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f040 820a 	bne.w	8005ff0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a68      	ldr	r2, [pc, #416]	@ (8005d90 <HAL_DMA_Start_IT+0x1f4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d04a      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a66      	ldr	r2, [pc, #408]	@ (8005d94 <HAL_DMA_Start_IT+0x1f8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d045      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a65      	ldr	r2, [pc, #404]	@ (8005d98 <HAL_DMA_Start_IT+0x1fc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d040      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a63      	ldr	r2, [pc, #396]	@ (8005d9c <HAL_DMA_Start_IT+0x200>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03b      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a62      	ldr	r2, [pc, #392]	@ (8005da0 <HAL_DMA_Start_IT+0x204>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d036      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a60      	ldr	r2, [pc, #384]	@ (8005da4 <HAL_DMA_Start_IT+0x208>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d031      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8005da8 <HAL_DMA_Start_IT+0x20c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d02c      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5d      	ldr	r2, [pc, #372]	@ (8005dac <HAL_DMA_Start_IT+0x210>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d027      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8005db0 <HAL_DMA_Start_IT+0x214>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5a      	ldr	r2, [pc, #360]	@ (8005db4 <HAL_DMA_Start_IT+0x218>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a59      	ldr	r2, [pc, #356]	@ (8005db8 <HAL_DMA_Start_IT+0x21c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a57      	ldr	r2, [pc, #348]	@ (8005dbc <HAL_DMA_Start_IT+0x220>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a56      	ldr	r2, [pc, #344]	@ (8005dc0 <HAL_DMA_Start_IT+0x224>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a54      	ldr	r2, [pc, #336]	@ (8005dc4 <HAL_DMA_Start_IT+0x228>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a53      	ldr	r2, [pc, #332]	@ (8005dc8 <HAL_DMA_Start_IT+0x22c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Start_IT+0xee>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a51      	ldr	r2, [pc, #324]	@ (8005dcc <HAL_DMA_Start_IT+0x230>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d108      	bne.n	8005c9c <HAL_DMA_Start_IT+0x100>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <HAL_DMA_Start_IT+0x110>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f001 fe84 	bl	80079c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a34      	ldr	r2, [pc, #208]	@ (8005d90 <HAL_DMA_Start_IT+0x1f4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a33      	ldr	r2, [pc, #204]	@ (8005d94 <HAL_DMA_Start_IT+0x1f8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a31      	ldr	r2, [pc, #196]	@ (8005d98 <HAL_DMA_Start_IT+0x1fc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a30      	ldr	r2, [pc, #192]	@ (8005d9c <HAL_DMA_Start_IT+0x200>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8005da0 <HAL_DMA_Start_IT+0x204>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2d      	ldr	r2, [pc, #180]	@ (8005da4 <HAL_DMA_Start_IT+0x208>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8005da8 <HAL_DMA_Start_IT+0x20c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2a      	ldr	r2, [pc, #168]	@ (8005dac <HAL_DMA_Start_IT+0x210>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a28      	ldr	r2, [pc, #160]	@ (8005db0 <HAL_DMA_Start_IT+0x214>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a27      	ldr	r2, [pc, #156]	@ (8005db4 <HAL_DMA_Start_IT+0x218>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a25      	ldr	r2, [pc, #148]	@ (8005db8 <HAL_DMA_Start_IT+0x21c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a24      	ldr	r2, [pc, #144]	@ (8005dbc <HAL_DMA_Start_IT+0x220>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a22      	ldr	r2, [pc, #136]	@ (8005dc0 <HAL_DMA_Start_IT+0x224>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a21      	ldr	r2, [pc, #132]	@ (8005dc4 <HAL_DMA_Start_IT+0x228>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <HAL_DMA_Start_IT+0x22c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_Start_IT+0x1bc>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1e      	ldr	r2, [pc, #120]	@ (8005dcc <HAL_DMA_Start_IT+0x230>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d101      	bne.n	8005d5c <HAL_DMA_Start_IT+0x1c0>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_DMA_Start_IT+0x1c2>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d036      	beq.n	8005dd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 021e 	bic.w	r2, r3, #30
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0216 	orr.w	r2, r2, #22
 8005d74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d03e      	beq.n	8005dfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0208 	orr.w	r2, r2, #8
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e035      	b.n	8005dfc <HAL_DMA_Start_IT+0x260>
 8005d90:	40020010 	.word	0x40020010
 8005d94:	40020028 	.word	0x40020028
 8005d98:	40020040 	.word	0x40020040
 8005d9c:	40020058 	.word	0x40020058
 8005da0:	40020070 	.word	0x40020070
 8005da4:	40020088 	.word	0x40020088
 8005da8:	400200a0 	.word	0x400200a0
 8005dac:	400200b8 	.word	0x400200b8
 8005db0:	40020410 	.word	0x40020410
 8005db4:	40020428 	.word	0x40020428
 8005db8:	40020440 	.word	0x40020440
 8005dbc:	40020458 	.word	0x40020458
 8005dc0:	40020470 	.word	0x40020470
 8005dc4:	40020488 	.word	0x40020488
 8005dc8:	400204a0 	.word	0x400204a0
 8005dcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 020e 	bic.w	r2, r3, #14
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 020a 	orr.w	r2, r2, #10
 8005de2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0204 	orr.w	r2, r2, #4
 8005dfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a83      	ldr	r2, [pc, #524]	@ (8006010 <HAL_DMA_Start_IT+0x474>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d072      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a82      	ldr	r2, [pc, #520]	@ (8006014 <HAL_DMA_Start_IT+0x478>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d06d      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a80      	ldr	r2, [pc, #512]	@ (8006018 <HAL_DMA_Start_IT+0x47c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d068      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800601c <HAL_DMA_Start_IT+0x480>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d063      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a7d      	ldr	r2, [pc, #500]	@ (8006020 <HAL_DMA_Start_IT+0x484>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d05e      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7c      	ldr	r2, [pc, #496]	@ (8006024 <HAL_DMA_Start_IT+0x488>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d059      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a7a      	ldr	r2, [pc, #488]	@ (8006028 <HAL_DMA_Start_IT+0x48c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d054      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a79      	ldr	r2, [pc, #484]	@ (800602c <HAL_DMA_Start_IT+0x490>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d04f      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a77      	ldr	r2, [pc, #476]	@ (8006030 <HAL_DMA_Start_IT+0x494>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d04a      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a76      	ldr	r2, [pc, #472]	@ (8006034 <HAL_DMA_Start_IT+0x498>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d045      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a74      	ldr	r2, [pc, #464]	@ (8006038 <HAL_DMA_Start_IT+0x49c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d040      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	@ (800603c <HAL_DMA_Start_IT+0x4a0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d03b      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a71      	ldr	r2, [pc, #452]	@ (8006040 <HAL_DMA_Start_IT+0x4a4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d036      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a70      	ldr	r2, [pc, #448]	@ (8006044 <HAL_DMA_Start_IT+0x4a8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d031      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8006048 <HAL_DMA_Start_IT+0x4ac>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02c      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a6d      	ldr	r2, [pc, #436]	@ (800604c <HAL_DMA_Start_IT+0x4b0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d027      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6b      	ldr	r2, [pc, #428]	@ (8006050 <HAL_DMA_Start_IT+0x4b4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d022      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8006054 <HAL_DMA_Start_IT+0x4b8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d01d      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a68      	ldr	r2, [pc, #416]	@ (8006058 <HAL_DMA_Start_IT+0x4bc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d018      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a67      	ldr	r2, [pc, #412]	@ (800605c <HAL_DMA_Start_IT+0x4c0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a65      	ldr	r2, [pc, #404]	@ (8006060 <HAL_DMA_Start_IT+0x4c4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00e      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a64      	ldr	r2, [pc, #400]	@ (8006064 <HAL_DMA_Start_IT+0x4c8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a62      	ldr	r2, [pc, #392]	@ (8006068 <HAL_DMA_Start_IT+0x4cc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_DMA_Start_IT+0x350>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a61      	ldr	r2, [pc, #388]	@ (800606c <HAL_DMA_Start_IT+0x4d0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <HAL_DMA_Start_IT+0x354>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_DMA_Start_IT+0x356>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01a      	beq.n	8005f2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a37      	ldr	r2, [pc, #220]	@ (8006010 <HAL_DMA_Start_IT+0x474>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04a      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a36      	ldr	r2, [pc, #216]	@ (8006014 <HAL_DMA_Start_IT+0x478>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d045      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a34      	ldr	r2, [pc, #208]	@ (8006018 <HAL_DMA_Start_IT+0x47c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d040      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a33      	ldr	r2, [pc, #204]	@ (800601c <HAL_DMA_Start_IT+0x480>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d03b      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a31      	ldr	r2, [pc, #196]	@ (8006020 <HAL_DMA_Start_IT+0x484>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d036      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a30      	ldr	r2, [pc, #192]	@ (8006024 <HAL_DMA_Start_IT+0x488>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d031      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8006028 <HAL_DMA_Start_IT+0x48c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2d      	ldr	r2, [pc, #180]	@ (800602c <HAL_DMA_Start_IT+0x490>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2b      	ldr	r2, [pc, #172]	@ (8006030 <HAL_DMA_Start_IT+0x494>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006034 <HAL_DMA_Start_IT+0x498>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a28      	ldr	r2, [pc, #160]	@ (8006038 <HAL_DMA_Start_IT+0x49c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a27      	ldr	r2, [pc, #156]	@ (800603c <HAL_DMA_Start_IT+0x4a0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a25      	ldr	r2, [pc, #148]	@ (8006040 <HAL_DMA_Start_IT+0x4a4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a24      	ldr	r2, [pc, #144]	@ (8006044 <HAL_DMA_Start_IT+0x4a8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	@ (8006048 <HAL_DMA_Start_IT+0x4ac>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Start_IT+0x430>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a21      	ldr	r2, [pc, #132]	@ (800604c <HAL_DMA_Start_IT+0x4b0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d108      	bne.n	8005fde <HAL_DMA_Start_IT+0x442>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e012      	b.n	8006004 <HAL_DMA_Start_IT+0x468>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e009      	b.n	8006004 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494

08006070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006078:	f7ff f8b0 	bl	80051dc <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e2dc      	b.n	8006642 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d008      	beq.n	80060a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2280      	movs	r2, #128	@ 0x80
 8006098:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e2cd      	b.n	8006642 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a76      	ldr	r2, [pc, #472]	@ (8006284 <HAL_DMA_Abort+0x214>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d04a      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a74      	ldr	r2, [pc, #464]	@ (8006288 <HAL_DMA_Abort+0x218>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d045      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a73      	ldr	r2, [pc, #460]	@ (800628c <HAL_DMA_Abort+0x21c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d040      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a71      	ldr	r2, [pc, #452]	@ (8006290 <HAL_DMA_Abort+0x220>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d03b      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a70      	ldr	r2, [pc, #448]	@ (8006294 <HAL_DMA_Abort+0x224>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d036      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006298 <HAL_DMA_Abort+0x228>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d031      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a6d      	ldr	r2, [pc, #436]	@ (800629c <HAL_DMA_Abort+0x22c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d02c      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a6b      	ldr	r2, [pc, #428]	@ (80062a0 <HAL_DMA_Abort+0x230>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d027      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6a      	ldr	r2, [pc, #424]	@ (80062a4 <HAL_DMA_Abort+0x234>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d022      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a68      	ldr	r2, [pc, #416]	@ (80062a8 <HAL_DMA_Abort+0x238>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01d      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a67      	ldr	r2, [pc, #412]	@ (80062ac <HAL_DMA_Abort+0x23c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a65      	ldr	r2, [pc, #404]	@ (80062b0 <HAL_DMA_Abort+0x240>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a64      	ldr	r2, [pc, #400]	@ (80062b4 <HAL_DMA_Abort+0x244>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a62      	ldr	r2, [pc, #392]	@ (80062b8 <HAL_DMA_Abort+0x248>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a61      	ldr	r2, [pc, #388]	@ (80062bc <HAL_DMA_Abort+0x24c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_DMA_Abort+0xd6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a5f      	ldr	r2, [pc, #380]	@ (80062c0 <HAL_DMA_Abort+0x250>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <HAL_DMA_Abort+0xda>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <HAL_DMA_Abort+0xdc>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d013      	beq.n	8006178 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 021e 	bic.w	r2, r2, #30
 800615e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800616e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e00a      	b.n	800618e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 020e 	bic.w	r2, r2, #14
 8006186:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a3c      	ldr	r2, [pc, #240]	@ (8006284 <HAL_DMA_Abort+0x214>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d072      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3a      	ldr	r2, [pc, #232]	@ (8006288 <HAL_DMA_Abort+0x218>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d06d      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a39      	ldr	r2, [pc, #228]	@ (800628c <HAL_DMA_Abort+0x21c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d068      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a37      	ldr	r2, [pc, #220]	@ (8006290 <HAL_DMA_Abort+0x220>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d063      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a36      	ldr	r2, [pc, #216]	@ (8006294 <HAL_DMA_Abort+0x224>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d05e      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a34      	ldr	r2, [pc, #208]	@ (8006298 <HAL_DMA_Abort+0x228>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d059      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a33      	ldr	r2, [pc, #204]	@ (800629c <HAL_DMA_Abort+0x22c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d054      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a31      	ldr	r2, [pc, #196]	@ (80062a0 <HAL_DMA_Abort+0x230>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04f      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a30      	ldr	r2, [pc, #192]	@ (80062a4 <HAL_DMA_Abort+0x234>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2e      	ldr	r2, [pc, #184]	@ (80062a8 <HAL_DMA_Abort+0x238>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2d      	ldr	r2, [pc, #180]	@ (80062ac <HAL_DMA_Abort+0x23c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2b      	ldr	r2, [pc, #172]	@ (80062b0 <HAL_DMA_Abort+0x240>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <HAL_DMA_Abort+0x244>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a28      	ldr	r2, [pc, #160]	@ (80062b8 <HAL_DMA_Abort+0x248>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a27      	ldr	r2, [pc, #156]	@ (80062bc <HAL_DMA_Abort+0x24c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a25      	ldr	r2, [pc, #148]	@ (80062c0 <HAL_DMA_Abort+0x250>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a24      	ldr	r2, [pc, #144]	@ (80062c4 <HAL_DMA_Abort+0x254>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a22      	ldr	r2, [pc, #136]	@ (80062c8 <HAL_DMA_Abort+0x258>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a21      	ldr	r2, [pc, #132]	@ (80062cc <HAL_DMA_Abort+0x25c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1f      	ldr	r2, [pc, #124]	@ (80062d0 <HAL_DMA_Abort+0x260>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <HAL_DMA_Abort+0x264>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <HAL_DMA_Abort+0x268>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <HAL_DMA_Abort+0x26c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_Abort+0x20e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	@ (80062e0 <HAL_DMA_Abort+0x270>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d132      	bne.n	80062e4 <HAL_DMA_Abort+0x274>
 800627e:	2301      	movs	r3, #1
 8006280:	e031      	b.n	80062e6 <HAL_DMA_Abort+0x276>
 8006282:	bf00      	nop
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8
 80062c4:	58025408 	.word	0x58025408
 80062c8:	5802541c 	.word	0x5802541c
 80062cc:	58025430 	.word	0x58025430
 80062d0:	58025444 	.word	0x58025444
 80062d4:	58025458 	.word	0x58025458
 80062d8:	5802546c 	.word	0x5802546c
 80062dc:	58025480 	.word	0x58025480
 80062e0:	58025494 	.word	0x58025494
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6d      	ldr	r2, [pc, #436]	@ (80064b4 <HAL_DMA_Abort+0x444>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d04a      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6b      	ldr	r2, [pc, #428]	@ (80064b8 <HAL_DMA_Abort+0x448>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d045      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6a      	ldr	r2, [pc, #424]	@ (80064bc <HAL_DMA_Abort+0x44c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d040      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a68      	ldr	r2, [pc, #416]	@ (80064c0 <HAL_DMA_Abort+0x450>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d03b      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a67      	ldr	r2, [pc, #412]	@ (80064c4 <HAL_DMA_Abort+0x454>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d036      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a65      	ldr	r2, [pc, #404]	@ (80064c8 <HAL_DMA_Abort+0x458>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d031      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a64      	ldr	r2, [pc, #400]	@ (80064cc <HAL_DMA_Abort+0x45c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d02c      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a62      	ldr	r2, [pc, #392]	@ (80064d0 <HAL_DMA_Abort+0x460>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a61      	ldr	r2, [pc, #388]	@ (80064d4 <HAL_DMA_Abort+0x464>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5f      	ldr	r2, [pc, #380]	@ (80064d8 <HAL_DMA_Abort+0x468>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5e      	ldr	r2, [pc, #376]	@ (80064dc <HAL_DMA_Abort+0x46c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5c      	ldr	r2, [pc, #368]	@ (80064e0 <HAL_DMA_Abort+0x470>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5b      	ldr	r2, [pc, #364]	@ (80064e4 <HAL_DMA_Abort+0x474>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a59      	ldr	r2, [pc, #356]	@ (80064e8 <HAL_DMA_Abort+0x478>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a58      	ldr	r2, [pc, #352]	@ (80064ec <HAL_DMA_Abort+0x47c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_DMA_Abort+0x32a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a56      	ldr	r2, [pc, #344]	@ (80064f0 <HAL_DMA_Abort+0x480>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <HAL_DMA_Abort+0x33c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e007      	b.n	80063bc <HAL_DMA_Abort+0x34c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063bc:	e013      	b.n	80063e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063be:	f7fe ff0d 	bl	80051dc <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d90c      	bls.n	80063e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2203      	movs	r2, #3
 80063d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e12d      	b.n	8006642 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	@ (80064b4 <HAL_DMA_Abort+0x444>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <HAL_DMA_Abort+0x448>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <HAL_DMA_Abort+0x44c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <HAL_DMA_Abort+0x450>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <HAL_DMA_Abort+0x454>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a27      	ldr	r2, [pc, #156]	@ (80064c8 <HAL_DMA_Abort+0x458>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a26      	ldr	r2, [pc, #152]	@ (80064cc <HAL_DMA_Abort+0x45c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a24      	ldr	r2, [pc, #144]	@ (80064d0 <HAL_DMA_Abort+0x460>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a23      	ldr	r2, [pc, #140]	@ (80064d4 <HAL_DMA_Abort+0x464>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a21      	ldr	r2, [pc, #132]	@ (80064d8 <HAL_DMA_Abort+0x468>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a20      	ldr	r2, [pc, #128]	@ (80064dc <HAL_DMA_Abort+0x46c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1e      	ldr	r2, [pc, #120]	@ (80064e0 <HAL_DMA_Abort+0x470>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1d      	ldr	r2, [pc, #116]	@ (80064e4 <HAL_DMA_Abort+0x474>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <HAL_DMA_Abort+0x478>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1a      	ldr	r2, [pc, #104]	@ (80064ec <HAL_DMA_Abort+0x47c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_Abort+0x422>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a18      	ldr	r2, [pc, #96]	@ (80064f0 <HAL_DMA_Abort+0x480>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_DMA_Abort+0x426>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_DMA_Abort+0x428>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02b      	beq.n	80064f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	223f      	movs	r2, #63	@ 0x3f
 80064ac:	409a      	lsls	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	609a      	str	r2, [r3, #8]
 80064b2:	e02a      	b.n	800650a <HAL_DMA_Abort+0x49a>
 80064b4:	40020010 	.word	0x40020010
 80064b8:	40020028 	.word	0x40020028
 80064bc:	40020040 	.word	0x40020040
 80064c0:	40020058 	.word	0x40020058
 80064c4:	40020070 	.word	0x40020070
 80064c8:	40020088 	.word	0x40020088
 80064cc:	400200a0 	.word	0x400200a0
 80064d0:	400200b8 	.word	0x400200b8
 80064d4:	40020410 	.word	0x40020410
 80064d8:	40020428 	.word	0x40020428
 80064dc:	40020440 	.word	0x40020440
 80064e0:	40020458 	.word	0x40020458
 80064e4:	40020470 	.word	0x40020470
 80064e8:	40020488 	.word	0x40020488
 80064ec:	400204a0 	.word	0x400204a0
 80064f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2201      	movs	r2, #1
 8006504:	409a      	lsls	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a4f      	ldr	r2, [pc, #316]	@ (800664c <HAL_DMA_Abort+0x5dc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d072      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a4d      	ldr	r2, [pc, #308]	@ (8006650 <HAL_DMA_Abort+0x5e0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d06d      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a4c      	ldr	r2, [pc, #304]	@ (8006654 <HAL_DMA_Abort+0x5e4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d068      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a4a      	ldr	r2, [pc, #296]	@ (8006658 <HAL_DMA_Abort+0x5e8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d063      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a49      	ldr	r2, [pc, #292]	@ (800665c <HAL_DMA_Abort+0x5ec>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d05e      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a47      	ldr	r2, [pc, #284]	@ (8006660 <HAL_DMA_Abort+0x5f0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d059      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a46      	ldr	r2, [pc, #280]	@ (8006664 <HAL_DMA_Abort+0x5f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d054      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a44      	ldr	r2, [pc, #272]	@ (8006668 <HAL_DMA_Abort+0x5f8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04f      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a43      	ldr	r2, [pc, #268]	@ (800666c <HAL_DMA_Abort+0x5fc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d04a      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a41      	ldr	r2, [pc, #260]	@ (8006670 <HAL_DMA_Abort+0x600>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d045      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a40      	ldr	r2, [pc, #256]	@ (8006674 <HAL_DMA_Abort+0x604>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d040      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3e      	ldr	r2, [pc, #248]	@ (8006678 <HAL_DMA_Abort+0x608>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d03b      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3d      	ldr	r2, [pc, #244]	@ (800667c <HAL_DMA_Abort+0x60c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d036      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3b      	ldr	r2, [pc, #236]	@ (8006680 <HAL_DMA_Abort+0x610>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d031      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3a      	ldr	r2, [pc, #232]	@ (8006684 <HAL_DMA_Abort+0x614>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d02c      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a38      	ldr	r2, [pc, #224]	@ (8006688 <HAL_DMA_Abort+0x618>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d027      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a37      	ldr	r2, [pc, #220]	@ (800668c <HAL_DMA_Abort+0x61c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <HAL_DMA_Abort+0x620>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01d      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a34      	ldr	r2, [pc, #208]	@ (8006694 <HAL_DMA_Abort+0x624>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a32      	ldr	r2, [pc, #200]	@ (8006698 <HAL_DMA_Abort+0x628>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a31      	ldr	r2, [pc, #196]	@ (800669c <HAL_DMA_Abort+0x62c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2f      	ldr	r2, [pc, #188]	@ (80066a0 <HAL_DMA_Abort+0x630>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2e      	ldr	r2, [pc, #184]	@ (80066a4 <HAL_DMA_Abort+0x634>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_DMA_Abort+0x58a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2c      	ldr	r2, [pc, #176]	@ (80066a8 <HAL_DMA_Abort+0x638>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_DMA_Abort+0x58e>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_DMA_Abort+0x590>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800660c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006624:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800662e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40020010 	.word	0x40020010
 8006650:	40020028 	.word	0x40020028
 8006654:	40020040 	.word	0x40020040
 8006658:	40020058 	.word	0x40020058
 800665c:	40020070 	.word	0x40020070
 8006660:	40020088 	.word	0x40020088
 8006664:	400200a0 	.word	0x400200a0
 8006668:	400200b8 	.word	0x400200b8
 800666c:	40020410 	.word	0x40020410
 8006670:	40020428 	.word	0x40020428
 8006674:	40020440 	.word	0x40020440
 8006678:	40020458 	.word	0x40020458
 800667c:	40020470 	.word	0x40020470
 8006680:	40020488 	.word	0x40020488
 8006684:	400204a0 	.word	0x400204a0
 8006688:	400204b8 	.word	0x400204b8
 800668c:	58025408 	.word	0x58025408
 8006690:	5802541c 	.word	0x5802541c
 8006694:	58025430 	.word	0x58025430
 8006698:	58025444 	.word	0x58025444
 800669c:	58025458 	.word	0x58025458
 80066a0:	5802546c 	.word	0x5802546c
 80066a4:	58025480 	.word	0x58025480
 80066a8:	58025494 	.word	0x58025494

080066ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e237      	b.n	8006b2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d004      	beq.n	80066d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2280      	movs	r2, #128	@ 0x80
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e22c      	b.n	8006b2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a5c      	ldr	r2, [pc, #368]	@ (800684c <HAL_DMA_Abort_IT+0x1a0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006850 <HAL_DMA_Abort_IT+0x1a4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a59      	ldr	r2, [pc, #356]	@ (8006854 <HAL_DMA_Abort_IT+0x1a8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a58      	ldr	r2, [pc, #352]	@ (8006858 <HAL_DMA_Abort_IT+0x1ac>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a56      	ldr	r2, [pc, #344]	@ (800685c <HAL_DMA_Abort_IT+0x1b0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a55      	ldr	r2, [pc, #340]	@ (8006860 <HAL_DMA_Abort_IT+0x1b4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a53      	ldr	r2, [pc, #332]	@ (8006864 <HAL_DMA_Abort_IT+0x1b8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a52      	ldr	r2, [pc, #328]	@ (8006868 <HAL_DMA_Abort_IT+0x1bc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a50      	ldr	r2, [pc, #320]	@ (800686c <HAL_DMA_Abort_IT+0x1c0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a4f      	ldr	r2, [pc, #316]	@ (8006870 <HAL_DMA_Abort_IT+0x1c4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a4d      	ldr	r2, [pc, #308]	@ (8006874 <HAL_DMA_Abort_IT+0x1c8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4c      	ldr	r2, [pc, #304]	@ (8006878 <HAL_DMA_Abort_IT+0x1cc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a4a      	ldr	r2, [pc, #296]	@ (800687c <HAL_DMA_Abort_IT+0x1d0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a49      	ldr	r2, [pc, #292]	@ (8006880 <HAL_DMA_Abort_IT+0x1d4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a47      	ldr	r2, [pc, #284]	@ (8006884 <HAL_DMA_Abort_IT+0x1d8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_Abort_IT+0xc8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a46      	ldr	r2, [pc, #280]	@ (8006888 <HAL_DMA_Abort_IT+0x1dc>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_DMA_Abort_IT+0xcc>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_DMA_Abort_IT+0xce>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8086 	beq.w	800688c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2204      	movs	r2, #4
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2f      	ldr	r2, [pc, #188]	@ (800684c <HAL_DMA_Abort_IT+0x1a0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d04a      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2e      	ldr	r2, [pc, #184]	@ (8006850 <HAL_DMA_Abort_IT+0x1a4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d045      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006854 <HAL_DMA_Abort_IT+0x1a8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d040      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006858 <HAL_DMA_Abort_IT+0x1ac>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d03b      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a29      	ldr	r2, [pc, #164]	@ (800685c <HAL_DMA_Abort_IT+0x1b0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d036      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a28      	ldr	r2, [pc, #160]	@ (8006860 <HAL_DMA_Abort_IT+0x1b4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d031      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a26      	ldr	r2, [pc, #152]	@ (8006864 <HAL_DMA_Abort_IT+0x1b8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02c      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a25      	ldr	r2, [pc, #148]	@ (8006868 <HAL_DMA_Abort_IT+0x1bc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d027      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a23      	ldr	r2, [pc, #140]	@ (800686c <HAL_DMA_Abort_IT+0x1c0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a22      	ldr	r2, [pc, #136]	@ (8006870 <HAL_DMA_Abort_IT+0x1c4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <HAL_DMA_Abort_IT+0x1c8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <HAL_DMA_Abort_IT+0x1cc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <HAL_DMA_Abort_IT+0x1d0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <HAL_DMA_Abort_IT+0x1d4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <HAL_DMA_Abort_IT+0x1d8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_DMA_Abort_IT+0x17c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a19      	ldr	r2, [pc, #100]	@ (8006888 <HAL_DMA_Abort_IT+0x1dc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d108      	bne.n	800683a <HAL_DMA_Abort_IT+0x18e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e178      	b.n	8006b2c <HAL_DMA_Abort_IT+0x480>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e16f      	b.n	8006b2c <HAL_DMA_Abort_IT+0x480>
 800684c:	40020010 	.word	0x40020010
 8006850:	40020028 	.word	0x40020028
 8006854:	40020040 	.word	0x40020040
 8006858:	40020058 	.word	0x40020058
 800685c:	40020070 	.word	0x40020070
 8006860:	40020088 	.word	0x40020088
 8006864:	400200a0 	.word	0x400200a0
 8006868:	400200b8 	.word	0x400200b8
 800686c:	40020410 	.word	0x40020410
 8006870:	40020428 	.word	0x40020428
 8006874:	40020440 	.word	0x40020440
 8006878:	40020458 	.word	0x40020458
 800687c:	40020470 	.word	0x40020470
 8006880:	40020488 	.word	0x40020488
 8006884:	400204a0 	.word	0x400204a0
 8006888:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 020e 	bic.w	r2, r2, #14
 800689a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a6c      	ldr	r2, [pc, #432]	@ (8006a54 <HAL_DMA_Abort_IT+0x3a8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04a      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006a58 <HAL_DMA_Abort_IT+0x3ac>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d045      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a69      	ldr	r2, [pc, #420]	@ (8006a5c <HAL_DMA_Abort_IT+0x3b0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a68      	ldr	r2, [pc, #416]	@ (8006a60 <HAL_DMA_Abort_IT+0x3b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03b      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a66      	ldr	r2, [pc, #408]	@ (8006a64 <HAL_DMA_Abort_IT+0x3b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d036      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a65      	ldr	r2, [pc, #404]	@ (8006a68 <HAL_DMA_Abort_IT+0x3bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d031      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a63      	ldr	r2, [pc, #396]	@ (8006a6c <HAL_DMA_Abort_IT+0x3c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d02c      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a62      	ldr	r2, [pc, #392]	@ (8006a70 <HAL_DMA_Abort_IT+0x3c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d027      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a60      	ldr	r2, [pc, #384]	@ (8006a74 <HAL_DMA_Abort_IT+0x3c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a5f      	ldr	r2, [pc, #380]	@ (8006a78 <HAL_DMA_Abort_IT+0x3cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5d      	ldr	r2, [pc, #372]	@ (8006a7c <HAL_DMA_Abort_IT+0x3d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a5c      	ldr	r2, [pc, #368]	@ (8006a80 <HAL_DMA_Abort_IT+0x3d4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a5a      	ldr	r2, [pc, #360]	@ (8006a84 <HAL_DMA_Abort_IT+0x3d8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a59      	ldr	r2, [pc, #356]	@ (8006a88 <HAL_DMA_Abort_IT+0x3dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a57      	ldr	r2, [pc, #348]	@ (8006a8c <HAL_DMA_Abort_IT+0x3e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_DMA_Abort_IT+0x290>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a56      	ldr	r2, [pc, #344]	@ (8006a90 <HAL_DMA_Abort_IT+0x3e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <HAL_DMA_Abort_IT+0x2a2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e007      	b.n	800695e <HAL_DMA_Abort_IT+0x2b2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a3c      	ldr	r2, [pc, #240]	@ (8006a54 <HAL_DMA_Abort_IT+0x3a8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d072      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a58 <HAL_DMA_Abort_IT+0x3ac>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d06d      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a39      	ldr	r2, [pc, #228]	@ (8006a5c <HAL_DMA_Abort_IT+0x3b0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d068      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <HAL_DMA_Abort_IT+0x3b4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d063      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a36      	ldr	r2, [pc, #216]	@ (8006a64 <HAL_DMA_Abort_IT+0x3b8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d05e      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a34      	ldr	r2, [pc, #208]	@ (8006a68 <HAL_DMA_Abort_IT+0x3bc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d059      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a33      	ldr	r2, [pc, #204]	@ (8006a6c <HAL_DMA_Abort_IT+0x3c0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d054      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a31      	ldr	r2, [pc, #196]	@ (8006a70 <HAL_DMA_Abort_IT+0x3c4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d04f      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a30      	ldr	r2, [pc, #192]	@ (8006a74 <HAL_DMA_Abort_IT+0x3c8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04a      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006a78 <HAL_DMA_Abort_IT+0x3cc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d045      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2d      	ldr	r2, [pc, #180]	@ (8006a7c <HAL_DMA_Abort_IT+0x3d0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d040      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a80 <HAL_DMA_Abort_IT+0x3d4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03b      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2a      	ldr	r2, [pc, #168]	@ (8006a84 <HAL_DMA_Abort_IT+0x3d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d036      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a28      	ldr	r2, [pc, #160]	@ (8006a88 <HAL_DMA_Abort_IT+0x3dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a27      	ldr	r2, [pc, #156]	@ (8006a8c <HAL_DMA_Abort_IT+0x3e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d02c      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a25      	ldr	r2, [pc, #148]	@ (8006a90 <HAL_DMA_Abort_IT+0x3e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d027      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a24      	ldr	r2, [pc, #144]	@ (8006a94 <HAL_DMA_Abort_IT+0x3e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a22      	ldr	r2, [pc, #136]	@ (8006a98 <HAL_DMA_Abort_IT+0x3ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a21      	ldr	r2, [pc, #132]	@ (8006a9c <HAL_DMA_Abort_IT+0x3f0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa0 <HAL_DMA_Abort_IT+0x3f4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <HAL_DMA_Abort_IT+0x3f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <HAL_DMA_Abort_IT+0x3fc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_DMA_Abort_IT+0x400>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_DMA_Abort_IT+0x3a2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a19      	ldr	r2, [pc, #100]	@ (8006ab0 <HAL_DMA_Abort_IT+0x404>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d132      	bne.n	8006ab4 <HAL_DMA_Abort_IT+0x408>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e031      	b.n	8006ab6 <HAL_DMA_Abort_IT+0x40a>
 8006a52:	bf00      	nop
 8006a54:	40020010 	.word	0x40020010
 8006a58:	40020028 	.word	0x40020028
 8006a5c:	40020040 	.word	0x40020040
 8006a60:	40020058 	.word	0x40020058
 8006a64:	40020070 	.word	0x40020070
 8006a68:	40020088 	.word	0x40020088
 8006a6c:	400200a0 	.word	0x400200a0
 8006a70:	400200b8 	.word	0x400200b8
 8006a74:	40020410 	.word	0x40020410
 8006a78:	40020428 	.word	0x40020428
 8006a7c:	40020440 	.word	0x40020440
 8006a80:	40020458 	.word	0x40020458
 8006a84:	40020470 	.word	0x40020470
 8006a88:	40020488 	.word	0x40020488
 8006a8c:	400204a0 	.word	0x400204a0
 8006a90:	400204b8 	.word	0x400204b8
 8006a94:	58025408 	.word	0x58025408
 8006a98:	5802541c 	.word	0x5802541c
 8006a9c:	58025430 	.word	0x58025430
 8006aa0:	58025444 	.word	0x58025444
 8006aa4:	58025458 	.word	0x58025458
 8006aa8:	5802546c 	.word	0x5802546c
 8006aac:	58025480 	.word	0x58025480
 8006ab0:	58025494 	.word	0x58025494
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d028      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ac8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ae8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop

08006b38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	@ 0x28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b44:	4b67      	ldr	r3, [pc, #412]	@ (8006ce4 <HAL_DMA_IRQHandler+0x1ac>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a67      	ldr	r2, [pc, #412]	@ (8006ce8 <HAL_DMA_IRQHandler+0x1b0>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	0a9b      	lsrs	r3, r3, #10
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8006cec <HAL_DMA_IRQHandler+0x1b4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a5d      	ldr	r2, [pc, #372]	@ (8006cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d045      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a5c      	ldr	r2, [pc, #368]	@ (8006cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8006cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d03b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a59      	ldr	r2, [pc, #356]	@ (8006cfc <HAL_DMA_IRQHandler+0x1c4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d036      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a57      	ldr	r2, [pc, #348]	@ (8006d00 <HAL_DMA_IRQHandler+0x1c8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a56      	ldr	r2, [pc, #344]	@ (8006d04 <HAL_DMA_IRQHandler+0x1cc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d02c      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a54      	ldr	r2, [pc, #336]	@ (8006d08 <HAL_DMA_IRQHandler+0x1d0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d027      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a53      	ldr	r2, [pc, #332]	@ (8006d0c <HAL_DMA_IRQHandler+0x1d4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a51      	ldr	r2, [pc, #324]	@ (8006d10 <HAL_DMA_IRQHandler+0x1d8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a50      	ldr	r2, [pc, #320]	@ (8006d14 <HAL_DMA_IRQHandler+0x1dc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8006d18 <HAL_DMA_IRQHandler+0x1e0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a4d      	ldr	r2, [pc, #308]	@ (8006d1c <HAL_DMA_IRQHandler+0x1e4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8006d20 <HAL_DMA_IRQHandler+0x1e8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8006d24 <HAL_DMA_IRQHandler+0x1ec>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xd2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a48      	ldr	r2, [pc, #288]	@ (8006d28 <HAL_DMA_IRQHandler+0x1f0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_DMA_IRQHandler+0xd6>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_DMA_IRQHandler+0xd8>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 842b 	beq.w	800746c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2208      	movs	r2, #8
 8006c20:	409a      	lsls	r2, r3
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80a2 	beq.w	8006d70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2e      	ldr	r2, [pc, #184]	@ (8006cec <HAL_DMA_IRQHandler+0x1b4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d04a      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d045      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d040      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d03b      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a28      	ldr	r2, [pc, #160]	@ (8006cfc <HAL_DMA_IRQHandler+0x1c4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d036      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a27      	ldr	r2, [pc, #156]	@ (8006d00 <HAL_DMA_IRQHandler+0x1c8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d031      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a25      	ldr	r2, [pc, #148]	@ (8006d04 <HAL_DMA_IRQHandler+0x1cc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d02c      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a24      	ldr	r2, [pc, #144]	@ (8006d08 <HAL_DMA_IRQHandler+0x1d0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d027      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <HAL_DMA_IRQHandler+0x1d4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d022      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a21      	ldr	r2, [pc, #132]	@ (8006d10 <HAL_DMA_IRQHandler+0x1d8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d01d      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1f      	ldr	r2, [pc, #124]	@ (8006d14 <HAL_DMA_IRQHandler+0x1dc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d018      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d18 <HAL_DMA_IRQHandler+0x1e0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <HAL_DMA_IRQHandler+0x1e4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00e      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d20 <HAL_DMA_IRQHandler+0x1e8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	@ (8006d24 <HAL_DMA_IRQHandler+0x1ec>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x194>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	@ (8006d28 <HAL_DMA_IRQHandler+0x1f0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d12f      	bne.n	8006d2c <HAL_DMA_IRQHandler+0x1f4>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bf14      	ite	ne
 8006cda:	2301      	movne	r3, #1
 8006cdc:	2300      	moveq	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	e02e      	b.n	8006d40 <HAL_DMA_IRQHandler+0x208>
 8006ce2:	bf00      	nop
 8006ce4:	24000010 	.word	0x24000010
 8006ce8:	1b4e81b5 	.word	0x1b4e81b5
 8006cec:	40020010 	.word	0x40020010
 8006cf0:	40020028 	.word	0x40020028
 8006cf4:	40020040 	.word	0x40020040
 8006cf8:	40020058 	.word	0x40020058
 8006cfc:	40020070 	.word	0x40020070
 8006d00:	40020088 	.word	0x40020088
 8006d04:	400200a0 	.word	0x400200a0
 8006d08:	400200b8 	.word	0x400200b8
 8006d0c:	40020410 	.word	0x40020410
 8006d10:	40020428 	.word	0x40020428
 8006d14:	40020440 	.word	0x40020440
 8006d18:	40020458 	.word	0x40020458
 8006d1c:	40020470 	.word	0x40020470
 8006d20:	40020488 	.word	0x40020488
 8006d24:	400204a0 	.word	0x400204a0
 8006d28:	400204b8 	.word	0x400204b8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d015      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0204 	bic.w	r2, r2, #4
 8006d52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d68:	f043 0201 	orr.w	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d06e      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a69      	ldr	r2, [pc, #420]	@ (8006f30 <HAL_DMA_IRQHandler+0x3f8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04a      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a67      	ldr	r2, [pc, #412]	@ (8006f34 <HAL_DMA_IRQHandler+0x3fc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d045      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a66      	ldr	r2, [pc, #408]	@ (8006f38 <HAL_DMA_IRQHandler+0x400>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d040      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a64      	ldr	r2, [pc, #400]	@ (8006f3c <HAL_DMA_IRQHandler+0x404>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a63      	ldr	r2, [pc, #396]	@ (8006f40 <HAL_DMA_IRQHandler+0x408>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d036      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a61      	ldr	r2, [pc, #388]	@ (8006f44 <HAL_DMA_IRQHandler+0x40c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a60      	ldr	r2, [pc, #384]	@ (8006f48 <HAL_DMA_IRQHandler+0x410>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d02c      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f4c <HAL_DMA_IRQHandler+0x414>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d027      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a5d      	ldr	r2, [pc, #372]	@ (8006f50 <HAL_DMA_IRQHandler+0x418>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a5b      	ldr	r2, [pc, #364]	@ (8006f54 <HAL_DMA_IRQHandler+0x41c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5a      	ldr	r2, [pc, #360]	@ (8006f58 <HAL_DMA_IRQHandler+0x420>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a58      	ldr	r2, [pc, #352]	@ (8006f5c <HAL_DMA_IRQHandler+0x424>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a57      	ldr	r2, [pc, #348]	@ (8006f60 <HAL_DMA_IRQHandler+0x428>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a55      	ldr	r2, [pc, #340]	@ (8006f64 <HAL_DMA_IRQHandler+0x42c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a54      	ldr	r2, [pc, #336]	@ (8006f68 <HAL_DMA_IRQHandler+0x430>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x2ee>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a52      	ldr	r2, [pc, #328]	@ (8006f6c <HAL_DMA_IRQHandler+0x434>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10a      	bne.n	8006e3c <HAL_DMA_IRQHandler+0x304>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e003      	b.n	8006e44 <HAL_DMA_IRQHandler+0x30c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00d      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2201      	movs	r2, #1
 8006e52:	409a      	lsls	r2, r3
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5c:	f043 0202 	orr.w	r2, r3, #2
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 808f 	beq.w	8006f98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f30 <HAL_DMA_IRQHandler+0x3f8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d04a      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a2a      	ldr	r2, [pc, #168]	@ (8006f34 <HAL_DMA_IRQHandler+0x3fc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d045      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a29      	ldr	r2, [pc, #164]	@ (8006f38 <HAL_DMA_IRQHandler+0x400>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d040      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	@ (8006f3c <HAL_DMA_IRQHandler+0x404>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d03b      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	@ (8006f40 <HAL_DMA_IRQHandler+0x408>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d036      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	@ (8006f44 <HAL_DMA_IRQHandler+0x40c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d031      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a23      	ldr	r2, [pc, #140]	@ (8006f48 <HAL_DMA_IRQHandler+0x410>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d02c      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a21      	ldr	r2, [pc, #132]	@ (8006f4c <HAL_DMA_IRQHandler+0x414>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d027      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a20      	ldr	r2, [pc, #128]	@ (8006f50 <HAL_DMA_IRQHandler+0x418>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f54 <HAL_DMA_IRQHandler+0x41c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <HAL_DMA_IRQHandler+0x420>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	@ (8006f5c <HAL_DMA_IRQHandler+0x424>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <HAL_DMA_IRQHandler+0x428>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	@ (8006f64 <HAL_DMA_IRQHandler+0x42c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	@ (8006f68 <HAL_DMA_IRQHandler+0x430>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x3e2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <HAL_DMA_IRQHandler+0x434>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d12a      	bne.n	8006f70 <HAL_DMA_IRQHandler+0x438>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	e023      	b.n	8006f78 <HAL_DMA_IRQHandler+0x440>
 8006f30:	40020010 	.word	0x40020010
 8006f34:	40020028 	.word	0x40020028
 8006f38:	40020040 	.word	0x40020040
 8006f3c:	40020058 	.word	0x40020058
 8006f40:	40020070 	.word	0x40020070
 8006f44:	40020088 	.word	0x40020088
 8006f48:	400200a0 	.word	0x400200a0
 8006f4c:	400200b8 	.word	0x400200b8
 8006f50:	40020410 	.word	0x40020410
 8006f54:	40020428 	.word	0x40020428
 8006f58:	40020440 	.word	0x40020440
 8006f5c:	40020458 	.word	0x40020458
 8006f60:	40020470 	.word	0x40020470
 8006f64:	40020488 	.word	0x40020488
 8006f68:	400204a0 	.word	0x400204a0
 8006f6c:	400204b8 	.word	0x400204b8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f80:	f003 031f 	and.w	r3, r3, #31
 8006f84:	2204      	movs	r2, #4
 8006f86:	409a      	lsls	r2, r3
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	f043 0204 	orr.w	r2, r3, #4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	2210      	movs	r2, #16
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a6 	beq.w	80070fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a85      	ldr	r2, [pc, #532]	@ (80071c8 <HAL_DMA_IRQHandler+0x690>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d04a      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a83      	ldr	r2, [pc, #524]	@ (80071cc <HAL_DMA_IRQHandler+0x694>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d045      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a82      	ldr	r2, [pc, #520]	@ (80071d0 <HAL_DMA_IRQHandler+0x698>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d040      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a80      	ldr	r2, [pc, #512]	@ (80071d4 <HAL_DMA_IRQHandler+0x69c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d03b      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7f      	ldr	r2, [pc, #508]	@ (80071d8 <HAL_DMA_IRQHandler+0x6a0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d036      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80071dc <HAL_DMA_IRQHandler+0x6a4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a7c      	ldr	r2, [pc, #496]	@ (80071e0 <HAL_DMA_IRQHandler+0x6a8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d02c      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80071e4 <HAL_DMA_IRQHandler+0x6ac>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a79      	ldr	r2, [pc, #484]	@ (80071e8 <HAL_DMA_IRQHandler+0x6b0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	@ (80071ec <HAL_DMA_IRQHandler+0x6b4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01d      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a76      	ldr	r2, [pc, #472]	@ (80071f0 <HAL_DMA_IRQHandler+0x6b8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a74      	ldr	r2, [pc, #464]	@ (80071f4 <HAL_DMA_IRQHandler+0x6bc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a73      	ldr	r2, [pc, #460]	@ (80071f8 <HAL_DMA_IRQHandler+0x6c0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a71      	ldr	r2, [pc, #452]	@ (80071fc <HAL_DMA_IRQHandler+0x6c4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a70      	ldr	r2, [pc, #448]	@ (8007200 <HAL_DMA_IRQHandler+0x6c8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_DMA_IRQHandler+0x516>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6e      	ldr	r2, [pc, #440]	@ (8007204 <HAL_DMA_IRQHandler+0x6cc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d10a      	bne.n	8007064 <HAL_DMA_IRQHandler+0x52c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	bf14      	ite	ne
 800705c:	2301      	movne	r3, #1
 800705e:	2300      	moveq	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e009      	b.n	8007078 <HAL_DMA_IRQHandler+0x540>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf14      	ite	ne
 8007072:	2301      	movne	r3, #1
 8007074:	2300      	moveq	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d03e      	beq.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	2210      	movs	r2, #16
 8007086:	409a      	lsls	r2, r3
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d018      	beq.n	80070cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d024      	beq.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
 80070b8:	e01f      	b.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01b      	beq.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
 80070ca:	e016      	b.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0208 	bic.w	r2, r2, #8
 80070e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	2220      	movs	r2, #32
 8007104:	409a      	lsls	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8110 	beq.w	8007330 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <HAL_DMA_IRQHandler+0x690>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d04a      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2b      	ldr	r2, [pc, #172]	@ (80071cc <HAL_DMA_IRQHandler+0x694>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d045      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a29      	ldr	r2, [pc, #164]	@ (80071d0 <HAL_DMA_IRQHandler+0x698>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d040      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a28      	ldr	r2, [pc, #160]	@ (80071d4 <HAL_DMA_IRQHandler+0x69c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d03b      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a26      	ldr	r2, [pc, #152]	@ (80071d8 <HAL_DMA_IRQHandler+0x6a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d036      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a25      	ldr	r2, [pc, #148]	@ (80071dc <HAL_DMA_IRQHandler+0x6a4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d031      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a23      	ldr	r2, [pc, #140]	@ (80071e0 <HAL_DMA_IRQHandler+0x6a8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d02c      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a22      	ldr	r2, [pc, #136]	@ (80071e4 <HAL_DMA_IRQHandler+0x6ac>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d027      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a20      	ldr	r2, [pc, #128]	@ (80071e8 <HAL_DMA_IRQHandler+0x6b0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1f      	ldr	r2, [pc, #124]	@ (80071ec <HAL_DMA_IRQHandler+0x6b4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01d      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1d      	ldr	r2, [pc, #116]	@ (80071f0 <HAL_DMA_IRQHandler+0x6b8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1c      	ldr	r2, [pc, #112]	@ (80071f4 <HAL_DMA_IRQHandler+0x6bc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1a      	ldr	r2, [pc, #104]	@ (80071f8 <HAL_DMA_IRQHandler+0x6c0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a19      	ldr	r2, [pc, #100]	@ (80071fc <HAL_DMA_IRQHandler+0x6c4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a17      	ldr	r2, [pc, #92]	@ (8007200 <HAL_DMA_IRQHandler+0x6c8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x678>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a16      	ldr	r2, [pc, #88]	@ (8007204 <HAL_DMA_IRQHandler+0x6cc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d12b      	bne.n	8007208 <HAL_DMA_IRQHandler+0x6d0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf14      	ite	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	2300      	moveq	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e02a      	b.n	800721c <HAL_DMA_IRQHandler+0x6e4>
 80071c6:	bf00      	nop
 80071c8:	40020010 	.word	0x40020010
 80071cc:	40020028 	.word	0x40020028
 80071d0:	40020040 	.word	0x40020040
 80071d4:	40020058 	.word	0x40020058
 80071d8:	40020070 	.word	0x40020070
 80071dc:	40020088 	.word	0x40020088
 80071e0:	400200a0 	.word	0x400200a0
 80071e4:	400200b8 	.word	0x400200b8
 80071e8:	40020410 	.word	0x40020410
 80071ec:	40020428 	.word	0x40020428
 80071f0:	40020440 	.word	0x40020440
 80071f4:	40020458 	.word	0x40020458
 80071f8:	40020470 	.word	0x40020470
 80071fc:	40020488 	.word	0x40020488
 8007200:	400204a0 	.word	0x400204a0
 8007204:	400204b8 	.word	0x400204b8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	bf14      	ite	ne
 8007216:	2301      	movne	r3, #1
 8007218:	2300      	moveq	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8087 	beq.w	8007330 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2220      	movs	r2, #32
 800722c:	409a      	lsls	r2, r3
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b04      	cmp	r3, #4
 800723c:	d139      	bne.n	80072b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0216 	bic.w	r2, r2, #22
 800724c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695a      	ldr	r2, [r3, #20]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800725c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <HAL_DMA_IRQHandler+0x736>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0208 	bic.w	r2, r2, #8
 800727c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	223f      	movs	r2, #63	@ 0x3f
 8007288:	409a      	lsls	r2, r3
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 834a 	beq.w	800793c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
          }
          return;
 80072b0:	e344      	b.n	800793c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d018      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d108      	bne.n	80072e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d02c      	beq.n	8007330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
 80072de:	e027      	b.n	8007330 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d023      	beq.n	8007330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 80072f0:	e01e      	b.n	8007330 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10f      	bne.n	8007320 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0210 	bic.w	r2, r2, #16
 800730e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8306 	beq.w	8007946 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8088 	beq.w	8007458 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2204      	movs	r2, #4
 800734c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a7a      	ldr	r2, [pc, #488]	@ (8007540 <HAL_DMA_IRQHandler+0xa08>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d04a      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a79      	ldr	r2, [pc, #484]	@ (8007544 <HAL_DMA_IRQHandler+0xa0c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d045      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a77      	ldr	r2, [pc, #476]	@ (8007548 <HAL_DMA_IRQHandler+0xa10>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d040      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a76      	ldr	r2, [pc, #472]	@ (800754c <HAL_DMA_IRQHandler+0xa14>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d03b      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a74      	ldr	r2, [pc, #464]	@ (8007550 <HAL_DMA_IRQHandler+0xa18>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d036      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a73      	ldr	r2, [pc, #460]	@ (8007554 <HAL_DMA_IRQHandler+0xa1c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d031      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a71      	ldr	r2, [pc, #452]	@ (8007558 <HAL_DMA_IRQHandler+0xa20>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d02c      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a70      	ldr	r2, [pc, #448]	@ (800755c <HAL_DMA_IRQHandler+0xa24>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d027      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007560 <HAL_DMA_IRQHandler+0xa28>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d022      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007564 <HAL_DMA_IRQHandler+0xa2c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d01d      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007568 <HAL_DMA_IRQHandler+0xa30>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d018      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a6a      	ldr	r2, [pc, #424]	@ (800756c <HAL_DMA_IRQHandler+0xa34>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d013      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a68      	ldr	r2, [pc, #416]	@ (8007570 <HAL_DMA_IRQHandler+0xa38>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00e      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a67      	ldr	r2, [pc, #412]	@ (8007574 <HAL_DMA_IRQHandler+0xa3c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d009      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a65      	ldr	r2, [pc, #404]	@ (8007578 <HAL_DMA_IRQHandler+0xa40>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d004      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x8b8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a64      	ldr	r2, [pc, #400]	@ (800757c <HAL_DMA_IRQHandler+0xa44>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <HAL_DMA_IRQHandler+0x8ca>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e007      	b.n	8007412 <HAL_DMA_IRQHandler+0x8da>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800741a:	429a      	cmp	r2, r3
 800741c:	d307      	bcc.n	800742e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f2      	bne.n	8007412 <HAL_DMA_IRQHandler+0x8da>
 800742c:	e000      	b.n	8007430 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800742e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007446:	e003      	b.n	8007450 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8272 	beq.w	8007946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
 800746a:	e26c      	b.n	8007946 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a43      	ldr	r2, [pc, #268]	@ (8007580 <HAL_DMA_IRQHandler+0xa48>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a42      	ldr	r2, [pc, #264]	@ (8007584 <HAL_DMA_IRQHandler+0xa4c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a40      	ldr	r2, [pc, #256]	@ (8007588 <HAL_DMA_IRQHandler+0xa50>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a3f      	ldr	r2, [pc, #252]	@ (800758c <HAL_DMA_IRQHandler+0xa54>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3d      	ldr	r2, [pc, #244]	@ (8007590 <HAL_DMA_IRQHandler+0xa58>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3c      	ldr	r2, [pc, #240]	@ (8007594 <HAL_DMA_IRQHandler+0xa5c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007598 <HAL_DMA_IRQHandler+0xa60>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_DMA_IRQHandler+0x984>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a39      	ldr	r2, [pc, #228]	@ (800759c <HAL_DMA_IRQHandler+0xa64>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d101      	bne.n	80074c0 <HAL_DMA_IRQHandler+0x988>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_DMA_IRQHandler+0x98a>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 823f 	beq.w	8007946 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2204      	movs	r2, #4
 80074da:	409a      	lsls	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80cd 	beq.w	8007680 <HAL_DMA_IRQHandler+0xb48>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80c7 	beq.w	8007680 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2204      	movs	r2, #4
 80074fc:	409a      	lsls	r2, r3
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d049      	beq.n	80075a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8210 	beq.w	8007940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007528:	e20a      	b.n	8007940 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8206 	beq.w	8007940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800753c:	e200      	b.n	8007940 <HAL_DMA_IRQHandler+0xe08>
 800753e:	bf00      	nop
 8007540:	40020010 	.word	0x40020010
 8007544:	40020028 	.word	0x40020028
 8007548:	40020040 	.word	0x40020040
 800754c:	40020058 	.word	0x40020058
 8007550:	40020070 	.word	0x40020070
 8007554:	40020088 	.word	0x40020088
 8007558:	400200a0 	.word	0x400200a0
 800755c:	400200b8 	.word	0x400200b8
 8007560:	40020410 	.word	0x40020410
 8007564:	40020428 	.word	0x40020428
 8007568:	40020440 	.word	0x40020440
 800756c:	40020458 	.word	0x40020458
 8007570:	40020470 	.word	0x40020470
 8007574:	40020488 	.word	0x40020488
 8007578:	400204a0 	.word	0x400204a0
 800757c:	400204b8 	.word	0x400204b8
 8007580:	58025408 	.word	0x58025408
 8007584:	5802541c 	.word	0x5802541c
 8007588:	58025430 	.word	0x58025430
 800758c:	58025444 	.word	0x58025444
 8007590:	58025458 	.word	0x58025458
 8007594:	5802546c 	.word	0x5802546c
 8007598:	58025480 	.word	0x58025480
 800759c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d160      	bne.n	800766c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7f      	ldr	r2, [pc, #508]	@ (80077ac <HAL_DMA_IRQHandler+0xc74>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d04a      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a7d      	ldr	r2, [pc, #500]	@ (80077b0 <HAL_DMA_IRQHandler+0xc78>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d045      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7c      	ldr	r2, [pc, #496]	@ (80077b4 <HAL_DMA_IRQHandler+0xc7c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d040      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a7a      	ldr	r2, [pc, #488]	@ (80077b8 <HAL_DMA_IRQHandler+0xc80>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d03b      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a79      	ldr	r2, [pc, #484]	@ (80077bc <HAL_DMA_IRQHandler+0xc84>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d036      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a77      	ldr	r2, [pc, #476]	@ (80077c0 <HAL_DMA_IRQHandler+0xc88>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d031      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a76      	ldr	r2, [pc, #472]	@ (80077c4 <HAL_DMA_IRQHandler+0xc8c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d02c      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a74      	ldr	r2, [pc, #464]	@ (80077c8 <HAL_DMA_IRQHandler+0xc90>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d027      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a73      	ldr	r2, [pc, #460]	@ (80077cc <HAL_DMA_IRQHandler+0xc94>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d022      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a71      	ldr	r2, [pc, #452]	@ (80077d0 <HAL_DMA_IRQHandler+0xc98>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a70      	ldr	r2, [pc, #448]	@ (80077d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d018      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6e      	ldr	r2, [pc, #440]	@ (80077d8 <HAL_DMA_IRQHandler+0xca0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a6d      	ldr	r2, [pc, #436]	@ (80077dc <HAL_DMA_IRQHandler+0xca4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a6b      	ldr	r2, [pc, #428]	@ (80077e0 <HAL_DMA_IRQHandler+0xca8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a6a      	ldr	r2, [pc, #424]	@ (80077e4 <HAL_DMA_IRQHandler+0xcac>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_DMA_IRQHandler+0xb12>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a68      	ldr	r2, [pc, #416]	@ (80077e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d108      	bne.n	800765c <HAL_DMA_IRQHandler+0xb24>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0208 	bic.w	r2, r2, #8
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e007      	b.n	800766c <HAL_DMA_IRQHandler+0xb34>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0204 	bic.w	r2, r2, #4
 800766a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8165 	beq.w	8007940 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800767e:	e15f      	b.n	8007940 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2202      	movs	r2, #2
 800768a:	409a      	lsls	r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80c5 	beq.w	8007820 <HAL_DMA_IRQHandler+0xce8>
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80bf 	beq.w	8007820 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2202      	movs	r2, #2
 80076ac:	409a      	lsls	r2, r3
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d018      	beq.n	80076ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 813a 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076d8:	e134      	b.n	8007944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8130 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ec:	e12a      	b.n	8007944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 8089 	bne.w	800780c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a2b      	ldr	r2, [pc, #172]	@ (80077ac <HAL_DMA_IRQHandler+0xc74>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d04a      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a29      	ldr	r2, [pc, #164]	@ (80077b0 <HAL_DMA_IRQHandler+0xc78>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d045      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a28      	ldr	r2, [pc, #160]	@ (80077b4 <HAL_DMA_IRQHandler+0xc7c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d040      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a26      	ldr	r2, [pc, #152]	@ (80077b8 <HAL_DMA_IRQHandler+0xc80>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d03b      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a25      	ldr	r2, [pc, #148]	@ (80077bc <HAL_DMA_IRQHandler+0xc84>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d036      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a23      	ldr	r2, [pc, #140]	@ (80077c0 <HAL_DMA_IRQHandler+0xc88>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d031      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a22      	ldr	r2, [pc, #136]	@ (80077c4 <HAL_DMA_IRQHandler+0xc8c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d02c      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a20      	ldr	r2, [pc, #128]	@ (80077c8 <HAL_DMA_IRQHandler+0xc90>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d027      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1f      	ldr	r2, [pc, #124]	@ (80077cc <HAL_DMA_IRQHandler+0xc94>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d022      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <HAL_DMA_IRQHandler+0xc98>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01d      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1c      	ldr	r2, [pc, #112]	@ (80077d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d018      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1a      	ldr	r2, [pc, #104]	@ (80077d8 <HAL_DMA_IRQHandler+0xca0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a19      	ldr	r2, [pc, #100]	@ (80077dc <HAL_DMA_IRQHandler+0xca4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <HAL_DMA_IRQHandler+0xca8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a16      	ldr	r2, [pc, #88]	@ (80077e4 <HAL_DMA_IRQHandler+0xcac>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_DMA_IRQHandler+0xc62>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a14      	ldr	r2, [pc, #80]	@ (80077e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d128      	bne.n	80077ec <HAL_DMA_IRQHandler+0xcb4>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0214 	bic.w	r2, r2, #20
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e027      	b.n	80077fc <HAL_DMA_IRQHandler+0xcc4>
 80077ac:	40020010 	.word	0x40020010
 80077b0:	40020028 	.word	0x40020028
 80077b4:	40020040 	.word	0x40020040
 80077b8:	40020058 	.word	0x40020058
 80077bc:	40020070 	.word	0x40020070
 80077c0:	40020088 	.word	0x40020088
 80077c4:	400200a0 	.word	0x400200a0
 80077c8:	400200b8 	.word	0x400200b8
 80077cc:	40020410 	.word	0x40020410
 80077d0:	40020428 	.word	0x40020428
 80077d4:	40020440 	.word	0x40020440
 80077d8:	40020458 	.word	0x40020458
 80077dc:	40020470 	.word	0x40020470
 80077e0:	40020488 	.word	0x40020488
 80077e4:	400204a0 	.word	0x400204a0
 80077e8:	400204b8 	.word	0x400204b8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 020a 	bic.w	r2, r2, #10
 80077fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8097 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800781e:	e091      	b.n	8007944 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2208      	movs	r2, #8
 800782a:	409a      	lsls	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4013      	ands	r3, r2
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8088 	beq.w	8007946 <HAL_DMA_IRQHandler+0xe0e>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8082 	beq.w	8007946 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a41      	ldr	r2, [pc, #260]	@ (800794c <HAL_DMA_IRQHandler+0xe14>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d04a      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a3f      	ldr	r2, [pc, #252]	@ (8007950 <HAL_DMA_IRQHandler+0xe18>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d045      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3e      	ldr	r2, [pc, #248]	@ (8007954 <HAL_DMA_IRQHandler+0xe1c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d040      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a3c      	ldr	r2, [pc, #240]	@ (8007958 <HAL_DMA_IRQHandler+0xe20>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d03b      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a3b      	ldr	r2, [pc, #236]	@ (800795c <HAL_DMA_IRQHandler+0xe24>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d036      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a39      	ldr	r2, [pc, #228]	@ (8007960 <HAL_DMA_IRQHandler+0xe28>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d031      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a38      	ldr	r2, [pc, #224]	@ (8007964 <HAL_DMA_IRQHandler+0xe2c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d02c      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a36      	ldr	r2, [pc, #216]	@ (8007968 <HAL_DMA_IRQHandler+0xe30>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d027      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a35      	ldr	r2, [pc, #212]	@ (800796c <HAL_DMA_IRQHandler+0xe34>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d022      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a33      	ldr	r2, [pc, #204]	@ (8007970 <HAL_DMA_IRQHandler+0xe38>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d01d      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a32      	ldr	r2, [pc, #200]	@ (8007974 <HAL_DMA_IRQHandler+0xe3c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a30      	ldr	r2, [pc, #192]	@ (8007978 <HAL_DMA_IRQHandler+0xe40>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a2f      	ldr	r2, [pc, #188]	@ (800797c <HAL_DMA_IRQHandler+0xe44>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007980 <HAL_DMA_IRQHandler+0xe48>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007984 <HAL_DMA_IRQHandler+0xe4c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_DMA_IRQHandler+0xdaa>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007988 <HAL_DMA_IRQHandler+0xe50>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d108      	bne.n	80078f4 <HAL_DMA_IRQHandler+0xdbc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 021c 	bic.w	r2, r2, #28
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e007      	b.n	8007904 <HAL_DMA_IRQHandler+0xdcc>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 020e 	bic.w	r2, r2, #14
 8007902:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2201      	movs	r2, #1
 800790e:	409a      	lsls	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
 800793a:	e004      	b.n	8007946 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800793c:	bf00      	nop
 800793e:	e002      	b.n	8007946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007940:	bf00      	nop
 8007942:	e000      	b.n	8007946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007944:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007946:	3728      	adds	r7, #40	@ 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40020010 	.word	0x40020010
 8007950:	40020028 	.word	0x40020028
 8007954:	40020040 	.word	0x40020040
 8007958:	40020058 	.word	0x40020058
 800795c:	40020070 	.word	0x40020070
 8007960:	40020088 	.word	0x40020088
 8007964:	400200a0 	.word	0x400200a0
 8007968:	400200b8 	.word	0x400200b8
 800796c:	40020410 	.word	0x40020410
 8007970:	40020428 	.word	0x40020428
 8007974:	40020440 	.word	0x40020440
 8007978:	40020458 	.word	0x40020458
 800797c:	40020470 	.word	0x40020470
 8007980:	40020488 	.word	0x40020488
 8007984:	400204a0 	.word	0x400204a0
 8007988:	400204b8 	.word	0x400204b8

0800798c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800799a:	b2db      	uxtb	r3, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a7f      	ldr	r2, [pc, #508]	@ (8007bdc <DMA_SetConfig+0x21c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d072      	beq.n	8007aca <DMA_SetConfig+0x10a>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a7d      	ldr	r2, [pc, #500]	@ (8007be0 <DMA_SetConfig+0x220>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d06d      	beq.n	8007aca <DMA_SetConfig+0x10a>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a7c      	ldr	r2, [pc, #496]	@ (8007be4 <DMA_SetConfig+0x224>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d068      	beq.n	8007aca <DMA_SetConfig+0x10a>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7a      	ldr	r2, [pc, #488]	@ (8007be8 <DMA_SetConfig+0x228>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d063      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a79      	ldr	r2, [pc, #484]	@ (8007bec <DMA_SetConfig+0x22c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d05e      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a77      	ldr	r2, [pc, #476]	@ (8007bf0 <DMA_SetConfig+0x230>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d059      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a76      	ldr	r2, [pc, #472]	@ (8007bf4 <DMA_SetConfig+0x234>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d054      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a74      	ldr	r2, [pc, #464]	@ (8007bf8 <DMA_SetConfig+0x238>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d04f      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a73      	ldr	r2, [pc, #460]	@ (8007bfc <DMA_SetConfig+0x23c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d04a      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a71      	ldr	r2, [pc, #452]	@ (8007c00 <DMA_SetConfig+0x240>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d045      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a70      	ldr	r2, [pc, #448]	@ (8007c04 <DMA_SetConfig+0x244>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d040      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007c08 <DMA_SetConfig+0x248>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d03b      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a6d      	ldr	r2, [pc, #436]	@ (8007c0c <DMA_SetConfig+0x24c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d036      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6b      	ldr	r2, [pc, #428]	@ (8007c10 <DMA_SetConfig+0x250>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d031      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8007c14 <DMA_SetConfig+0x254>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d02c      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a68      	ldr	r2, [pc, #416]	@ (8007c18 <DMA_SetConfig+0x258>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d027      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a67      	ldr	r2, [pc, #412]	@ (8007c1c <DMA_SetConfig+0x25c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a65      	ldr	r2, [pc, #404]	@ (8007c20 <DMA_SetConfig+0x260>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01d      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a64      	ldr	r2, [pc, #400]	@ (8007c24 <DMA_SetConfig+0x264>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a62      	ldr	r2, [pc, #392]	@ (8007c28 <DMA_SetConfig+0x268>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a61      	ldr	r2, [pc, #388]	@ (8007c2c <DMA_SetConfig+0x26c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8007c30 <DMA_SetConfig+0x270>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a5e      	ldr	r2, [pc, #376]	@ (8007c34 <DMA_SetConfig+0x274>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <DMA_SetConfig+0x10a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a5c      	ldr	r2, [pc, #368]	@ (8007c38 <DMA_SetConfig+0x278>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d101      	bne.n	8007ace <DMA_SetConfig+0x10e>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <DMA_SetConfig+0x110>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007adc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007aee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a39      	ldr	r2, [pc, #228]	@ (8007bdc <DMA_SetConfig+0x21c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d04a      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a38      	ldr	r2, [pc, #224]	@ (8007be0 <DMA_SetConfig+0x220>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d045      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a36      	ldr	r2, [pc, #216]	@ (8007be4 <DMA_SetConfig+0x224>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d040      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a35      	ldr	r2, [pc, #212]	@ (8007be8 <DMA_SetConfig+0x228>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d03b      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a33      	ldr	r2, [pc, #204]	@ (8007bec <DMA_SetConfig+0x22c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d036      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a32      	ldr	r2, [pc, #200]	@ (8007bf0 <DMA_SetConfig+0x230>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d031      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a30      	ldr	r2, [pc, #192]	@ (8007bf4 <DMA_SetConfig+0x234>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d02c      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007bf8 <DMA_SetConfig+0x238>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d027      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a2d      	ldr	r2, [pc, #180]	@ (8007bfc <DMA_SetConfig+0x23c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d022      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c00 <DMA_SetConfig+0x240>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d01d      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a2a      	ldr	r2, [pc, #168]	@ (8007c04 <DMA_SetConfig+0x244>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d018      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a29      	ldr	r2, [pc, #164]	@ (8007c08 <DMA_SetConfig+0x248>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d013      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a27      	ldr	r2, [pc, #156]	@ (8007c0c <DMA_SetConfig+0x24c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00e      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a26      	ldr	r2, [pc, #152]	@ (8007c10 <DMA_SetConfig+0x250>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d009      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a24      	ldr	r2, [pc, #144]	@ (8007c14 <DMA_SetConfig+0x254>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d004      	beq.n	8007b90 <DMA_SetConfig+0x1d0>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a23      	ldr	r2, [pc, #140]	@ (8007c18 <DMA_SetConfig+0x258>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d101      	bne.n	8007b94 <DMA_SetConfig+0x1d4>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <DMA_SetConfig+0x1d6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d059      	beq.n	8007c4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	223f      	movs	r2, #63	@ 0x3f
 8007ba4:	409a      	lsls	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007bb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d138      	bne.n	8007c3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007bda:	e086      	b.n	8007cea <DMA_SetConfig+0x32a>
 8007bdc:	40020010 	.word	0x40020010
 8007be0:	40020028 	.word	0x40020028
 8007be4:	40020040 	.word	0x40020040
 8007be8:	40020058 	.word	0x40020058
 8007bec:	40020070 	.word	0x40020070
 8007bf0:	40020088 	.word	0x40020088
 8007bf4:	400200a0 	.word	0x400200a0
 8007bf8:	400200b8 	.word	0x400200b8
 8007bfc:	40020410 	.word	0x40020410
 8007c00:	40020428 	.word	0x40020428
 8007c04:	40020440 	.word	0x40020440
 8007c08:	40020458 	.word	0x40020458
 8007c0c:	40020470 	.word	0x40020470
 8007c10:	40020488 	.word	0x40020488
 8007c14:	400204a0 	.word	0x400204a0
 8007c18:	400204b8 	.word	0x400204b8
 8007c1c:	58025408 	.word	0x58025408
 8007c20:	5802541c 	.word	0x5802541c
 8007c24:	58025430 	.word	0x58025430
 8007c28:	58025444 	.word	0x58025444
 8007c2c:	58025458 	.word	0x58025458
 8007c30:	5802546c 	.word	0x5802546c
 8007c34:	58025480 	.word	0x58025480
 8007c38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	60da      	str	r2, [r3, #12]
}
 8007c4c:	e04d      	b.n	8007cea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a29      	ldr	r2, [pc, #164]	@ (8007cf8 <DMA_SetConfig+0x338>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d022      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a27      	ldr	r2, [pc, #156]	@ (8007cfc <DMA_SetConfig+0x33c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a26      	ldr	r2, [pc, #152]	@ (8007d00 <DMA_SetConfig+0x340>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d018      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a24      	ldr	r2, [pc, #144]	@ (8007d04 <DMA_SetConfig+0x344>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a23      	ldr	r2, [pc, #140]	@ (8007d08 <DMA_SetConfig+0x348>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00e      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a21      	ldr	r2, [pc, #132]	@ (8007d0c <DMA_SetConfig+0x34c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d009      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a20      	ldr	r2, [pc, #128]	@ (8007d10 <DMA_SetConfig+0x350>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <DMA_SetConfig+0x2de>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1e      	ldr	r2, [pc, #120]	@ (8007d14 <DMA_SetConfig+0x354>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d101      	bne.n	8007ca2 <DMA_SetConfig+0x2e2>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <DMA_SetConfig+0x2e4>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d020      	beq.n	8007cea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b40      	cmp	r3, #64	@ 0x40
 8007cc6:	d108      	bne.n	8007cda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	60da      	str	r2, [r3, #12]
}
 8007cd8:	e007      	b.n	8007cea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	58025408 	.word	0x58025408
 8007cfc:	5802541c 	.word	0x5802541c
 8007d00:	58025430 	.word	0x58025430
 8007d04:	58025444 	.word	0x58025444
 8007d08:	58025458 	.word	0x58025458
 8007d0c:	5802546c 	.word	0x5802546c
 8007d10:	58025480 	.word	0x58025480
 8007d14:	58025494 	.word	0x58025494

08007d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a42      	ldr	r2, [pc, #264]	@ (8007e30 <DMA_CalcBaseAndBitshift+0x118>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d04a      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a41      	ldr	r2, [pc, #260]	@ (8007e34 <DMA_CalcBaseAndBitshift+0x11c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d045      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3f      	ldr	r2, [pc, #252]	@ (8007e38 <DMA_CalcBaseAndBitshift+0x120>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d040      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3e      	ldr	r2, [pc, #248]	@ (8007e3c <DMA_CalcBaseAndBitshift+0x124>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d03b      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e40 <DMA_CalcBaseAndBitshift+0x128>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d036      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a3b      	ldr	r2, [pc, #236]	@ (8007e44 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d031      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a39      	ldr	r2, [pc, #228]	@ (8007e48 <DMA_CalcBaseAndBitshift+0x130>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d02c      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a38      	ldr	r2, [pc, #224]	@ (8007e4c <DMA_CalcBaseAndBitshift+0x134>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d027      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a36      	ldr	r2, [pc, #216]	@ (8007e50 <DMA_CalcBaseAndBitshift+0x138>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d022      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a35      	ldr	r2, [pc, #212]	@ (8007e54 <DMA_CalcBaseAndBitshift+0x13c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d01d      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <DMA_CalcBaseAndBitshift+0x140>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d018      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a32      	ldr	r2, [pc, #200]	@ (8007e5c <DMA_CalcBaseAndBitshift+0x144>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d013      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a30      	ldr	r2, [pc, #192]	@ (8007e60 <DMA_CalcBaseAndBitshift+0x148>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00e      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2f      	ldr	r2, [pc, #188]	@ (8007e64 <DMA_CalcBaseAndBitshift+0x14c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d009      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e68 <DMA_CalcBaseAndBitshift+0x150>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d004      	beq.n	8007dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a2c      	ldr	r2, [pc, #176]	@ (8007e6c <DMA_CalcBaseAndBitshift+0x154>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d101      	bne.n	8007dc4 <DMA_CalcBaseAndBitshift+0xac>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <DMA_CalcBaseAndBitshift+0xae>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d024      	beq.n	8007e14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3b10      	subs	r3, #16
 8007dd2:	4a27      	ldr	r2, [pc, #156]	@ (8007e70 <DMA_CalcBaseAndBitshift+0x158>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	4a24      	ldr	r2, [pc, #144]	@ (8007e74 <DMA_CalcBaseAndBitshift+0x15c>)
 8007de4:	5cd3      	ldrb	r3, [r2, r3]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d908      	bls.n	8007e04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e78 <DMA_CalcBaseAndBitshift+0x160>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	1d1a      	adds	r2, r3, #4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e02:	e00d      	b.n	8007e20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e78 <DMA_CalcBaseAndBitshift+0x160>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e12:	e005      	b.n	8007e20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40020010 	.word	0x40020010
 8007e34:	40020028 	.word	0x40020028
 8007e38:	40020040 	.word	0x40020040
 8007e3c:	40020058 	.word	0x40020058
 8007e40:	40020070 	.word	0x40020070
 8007e44:	40020088 	.word	0x40020088
 8007e48:	400200a0 	.word	0x400200a0
 8007e4c:	400200b8 	.word	0x400200b8
 8007e50:	40020410 	.word	0x40020410
 8007e54:	40020428 	.word	0x40020428
 8007e58:	40020440 	.word	0x40020440
 8007e5c:	40020458 	.word	0x40020458
 8007e60:	40020470 	.word	0x40020470
 8007e64:	40020488 	.word	0x40020488
 8007e68:	400204a0 	.word	0x400204a0
 8007e6c:	400204b8 	.word	0x400204b8
 8007e70:	aaaaaaab 	.word	0xaaaaaaab
 8007e74:	0801ae8c 	.word	0x0801ae8c
 8007e78:	fffffc00 	.word	0xfffffc00

08007e7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d120      	bne.n	8007ed2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d858      	bhi.n	8007f4a <DMA_CheckFifoParam+0xce>
 8007e98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <DMA_CheckFifoParam+0x24>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007eb1 	.word	0x08007eb1
 8007eac:	08007f4b 	.word	0x08007f4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d048      	beq.n	8007f4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ec0:	e045      	b.n	8007f4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007eca:	d142      	bne.n	8007f52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ed0:	e03f      	b.n	8007f52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eda:	d123      	bne.n	8007f24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d838      	bhi.n	8007f56 <DMA_CheckFifoParam+0xda>
 8007ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <DMA_CheckFifoParam+0x70>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f03 	.word	0x08007f03
 8007ef4:	08007efd 	.word	0x08007efd
 8007ef8:	08007f15 	.word	0x08007f15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
        break;
 8007f00:	e030      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d025      	beq.n	8007f5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f12:	e022      	b.n	8007f5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f1c:	d11f      	bne.n	8007f5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f22:	e01c      	b.n	8007f5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d902      	bls.n	8007f32 <DMA_CheckFifoParam+0xb6>
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d003      	beq.n	8007f38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f30:	e018      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
        break;
 8007f36:	e015      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00e      	beq.n	8007f62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
    break;
 8007f48:	e00b      	b.n	8007f62 <DMA_CheckFifoParam+0xe6>
        break;
 8007f4a:	bf00      	nop
 8007f4c:	e00a      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        break;
 8007f4e:	bf00      	nop
 8007f50:	e008      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        break;
 8007f52:	bf00      	nop
 8007f54:	e006      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        break;
 8007f56:	bf00      	nop
 8007f58:	e004      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        break;
 8007f5a:	bf00      	nop
 8007f5c:	e002      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
        break;
 8007f5e:	bf00      	nop
 8007f60:	e000      	b.n	8007f64 <DMA_CheckFifoParam+0xe8>
    break;
 8007f62:	bf00      	nop
    }
  }

  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop

08007f74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a38      	ldr	r2, [pc, #224]	@ (8008068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d022      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a36      	ldr	r2, [pc, #216]	@ (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01d      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a35      	ldr	r2, [pc, #212]	@ (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d018      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a33      	ldr	r2, [pc, #204]	@ (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a32      	ldr	r2, [pc, #200]	@ (8008078 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a30      	ldr	r2, [pc, #192]	@ (800807c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8008080 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d101      	bne.n	8007fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01a      	beq.n	8008012 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	3b08      	subs	r3, #8
 8007fe4:	4a28      	ldr	r2, [pc, #160]	@ (8008088 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4b26      	ldr	r3, [pc, #152]	@ (800808c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a24      	ldr	r2, [pc, #144]	@ (8008090 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 031f 	and.w	r3, r3, #31
 8008008:	2201      	movs	r2, #1
 800800a:	409a      	lsls	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008010:	e024      	b.n	800805c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	3b10      	subs	r3, #16
 800801a:	4a1e      	ldr	r2, [pc, #120]	@ (8008094 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	091b      	lsrs	r3, r3, #4
 8008022:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a1c      	ldr	r2, [pc, #112]	@ (8008098 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d806      	bhi.n	800803a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4a1b      	ldr	r2, [pc, #108]	@ (800809c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d902      	bls.n	800803a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3308      	adds	r3, #8
 8008038:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4b18      	ldr	r3, [pc, #96]	@ (80080a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	461a      	mov	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a16      	ldr	r2, [pc, #88]	@ (80080a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800804c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2201      	movs	r2, #1
 8008056:	409a      	lsls	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	58025408 	.word	0x58025408
 800806c:	5802541c 	.word	0x5802541c
 8008070:	58025430 	.word	0x58025430
 8008074:	58025444 	.word	0x58025444
 8008078:	58025458 	.word	0x58025458
 800807c:	5802546c 	.word	0x5802546c
 8008080:	58025480 	.word	0x58025480
 8008084:	58025494 	.word	0x58025494
 8008088:	cccccccd 	.word	0xcccccccd
 800808c:	16009600 	.word	0x16009600
 8008090:	58025880 	.word	0x58025880
 8008094:	aaaaaaab 	.word	0xaaaaaaab
 8008098:	400204b8 	.word	0x400204b8
 800809c:	4002040f 	.word	0x4002040f
 80080a0:	10008200 	.word	0x10008200
 80080a4:	40020880 	.word	0x40020880

080080a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d04a      	beq.n	8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d847      	bhi.n	8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a25      	ldr	r2, [pc, #148]	@ (8008160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d022      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a24      	ldr	r2, [pc, #144]	@ (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d01d      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a22      	ldr	r2, [pc, #136]	@ (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a21      	ldr	r2, [pc, #132]	@ (800816c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d013      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00e      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1c      	ldr	r2, [pc, #112]	@ (8008178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1b      	ldr	r2, [pc, #108]	@ (800817c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d101      	bne.n	8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4b17      	ldr	r3, [pc, #92]	@ (8008180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a15      	ldr	r2, [pc, #84]	@ (8008184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008130:	671a      	str	r2, [r3, #112]	@ 0x70
 8008132:	e009      	b.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a11      	ldr	r2, [pc, #68]	@ (800818c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008146:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	2201      	movs	r2, #1
 800814e:	409a      	lsls	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	58025408 	.word	0x58025408
 8008164:	5802541c 	.word	0x5802541c
 8008168:	58025430 	.word	0x58025430
 800816c:	58025444 	.word	0x58025444
 8008170:	58025458 	.word	0x58025458
 8008174:	5802546c 	.word	0x5802546c
 8008178:	58025480 	.word	0x58025480
 800817c:	58025494 	.word	0x58025494
 8008180:	1600963f 	.word	0x1600963f
 8008184:	58025940 	.word	0x58025940
 8008188:	1000823f 	.word	0x1000823f
 800818c:	40020940 	.word	0x40020940

08008190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008190:	b480      	push	{r7}
 8008192:	b089      	sub	sp, #36	@ 0x24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800819a:	2300      	movs	r3, #0
 800819c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800819e:	4b86      	ldr	r3, [pc, #536]	@ (80083b8 <HAL_GPIO_Init+0x228>)
 80081a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a2:	e18c      	b.n	80084be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	2101      	movs	r1, #1
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	fa01 f303 	lsl.w	r3, r1, r3
 80081b0:	4013      	ands	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 817e 	beq.w	80084b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d005      	beq.n	80081d4 <HAL_GPIO_Init+0x44>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d130      	bne.n	8008236 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	2203      	movs	r2, #3
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43db      	mvns	r3, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4013      	ands	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800820a:	2201      	movs	r2, #1
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	091b      	lsrs	r3, r3, #4
 8008220:	f003 0201 	and.w	r2, r3, #1
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	fa02 f303 	lsl.w	r3, r2, r3
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4313      	orrs	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d017      	beq.n	8008272 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	2203      	movs	r2, #3
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43db      	mvns	r3, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4013      	ands	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d123      	bne.n	80082c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	08da      	lsrs	r2, r3, #3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3208      	adds	r2, #8
 8008286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	220f      	movs	r2, #15
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	43db      	mvns	r3, r3
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4013      	ands	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	08da      	lsrs	r2, r3, #3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3208      	adds	r2, #8
 80082c0:	69b9      	ldr	r1, [r7, #24]
 80082c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	2203      	movs	r2, #3
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	4013      	ands	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 0203 	and.w	r2, r3, #3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80d8 	beq.w	80084b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008308:	4b2c      	ldr	r3, [pc, #176]	@ (80083bc <HAL_GPIO_Init+0x22c>)
 800830a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800830e:	4a2b      	ldr	r2, [pc, #172]	@ (80083bc <HAL_GPIO_Init+0x22c>)
 8008310:	f043 0302 	orr.w	r3, r3, #2
 8008314:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008318:	4b28      	ldr	r3, [pc, #160]	@ (80083bc <HAL_GPIO_Init+0x22c>)
 800831a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008326:	4a26      	ldr	r2, [pc, #152]	@ (80083c0 <HAL_GPIO_Init+0x230>)
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	3302      	adds	r3, #2
 800832e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	220f      	movs	r2, #15
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	43db      	mvns	r3, r3
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	4013      	ands	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1d      	ldr	r2, [pc, #116]	@ (80083c4 <HAL_GPIO_Init+0x234>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d04a      	beq.n	80083e8 <HAL_GPIO_Init+0x258>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1c      	ldr	r2, [pc, #112]	@ (80083c8 <HAL_GPIO_Init+0x238>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d02b      	beq.n	80083b2 <HAL_GPIO_Init+0x222>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1b      	ldr	r2, [pc, #108]	@ (80083cc <HAL_GPIO_Init+0x23c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d025      	beq.n	80083ae <HAL_GPIO_Init+0x21e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a1a      	ldr	r2, [pc, #104]	@ (80083d0 <HAL_GPIO_Init+0x240>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d01f      	beq.n	80083aa <HAL_GPIO_Init+0x21a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a19      	ldr	r2, [pc, #100]	@ (80083d4 <HAL_GPIO_Init+0x244>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d019      	beq.n	80083a6 <HAL_GPIO_Init+0x216>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <HAL_GPIO_Init+0x248>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_GPIO_Init+0x212>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <HAL_GPIO_Init+0x24c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00d      	beq.n	800839e <HAL_GPIO_Init+0x20e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <HAL_GPIO_Init+0x250>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d007      	beq.n	800839a <HAL_GPIO_Init+0x20a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <HAL_GPIO_Init+0x254>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <HAL_GPIO_Init+0x206>
 8008392:	2309      	movs	r3, #9
 8008394:	e029      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 8008396:	230a      	movs	r3, #10
 8008398:	e027      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 800839a:	2307      	movs	r3, #7
 800839c:	e025      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 800839e:	2306      	movs	r3, #6
 80083a0:	e023      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083a2:	2305      	movs	r3, #5
 80083a4:	e021      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083a6:	2304      	movs	r3, #4
 80083a8:	e01f      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083aa:	2303      	movs	r3, #3
 80083ac:	e01d      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e01b      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e019      	b.n	80083ea <HAL_GPIO_Init+0x25a>
 80083b6:	bf00      	nop
 80083b8:	58000080 	.word	0x58000080
 80083bc:	58024400 	.word	0x58024400
 80083c0:	58000400 	.word	0x58000400
 80083c4:	58020000 	.word	0x58020000
 80083c8:	58020400 	.word	0x58020400
 80083cc:	58020800 	.word	0x58020800
 80083d0:	58020c00 	.word	0x58020c00
 80083d4:	58021000 	.word	0x58021000
 80083d8:	58021400 	.word	0x58021400
 80083dc:	58021800 	.word	0x58021800
 80083e0:	58021c00 	.word	0x58021c00
 80083e4:	58022400 	.word	0x58022400
 80083e8:	2300      	movs	r3, #0
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	f002 0203 	and.w	r2, r2, #3
 80083f0:	0092      	lsls	r2, r2, #2
 80083f2:	4093      	lsls	r3, r2
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083fa:	4938      	ldr	r1, [pc, #224]	@ (80084dc <HAL_GPIO_Init+0x34c>)
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	3302      	adds	r3, #2
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	43db      	mvns	r3, r3
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	4013      	ands	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4313      	orrs	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800842e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	43db      	mvns	r3, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4013      	ands	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800845c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	43db      	mvns	r3, r3
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4013      	ands	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	43db      	mvns	r3, r3
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	4013      	ands	r3, r2
 800849c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	3301      	adds	r3, #1
 80084bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f47f ae6b 	bne.w	80081a4 <HAL_GPIO_Init+0x14>
  }
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	3724      	adds	r7, #36	@ 0x24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	58000400 	.word	0x58000400

080084e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	807b      	strh	r3, [r7, #2]
 80084ec:	4613      	mov	r3, r2
 80084ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084f0:	787b      	ldrb	r3, [r7, #1]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084f6:	887a      	ldrh	r2, [r7, #2]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80084fc:	e003      	b.n	8008506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084fe:	887b      	ldrh	r3, [r7, #2]
 8008500:	041a      	lsls	r2, r3, #16
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	619a      	str	r2, [r3, #24]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008524:	887a      	ldrh	r2, [r7, #2]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4013      	ands	r3, r2
 800852a:	041a      	lsls	r2, r3, #16
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	43d9      	mvns	r1, r3
 8008530:	887b      	ldrh	r3, [r7, #2]
 8008532:	400b      	ands	r3, r1
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	619a      	str	r2, [r3, #24]
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e08b      	b.n	8008672 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7f9 feda 	bl	8002328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2224      	movs	r2, #36	@ 0x24
 8008578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d107      	bne.n	80085c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	e006      	b.n	80085d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80085ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d108      	bne.n	80085ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085e6:	605a      	str	r2, [r3, #4]
 80085e8:	e007      	b.n	80085fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6859      	ldr	r1, [r3, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	4b1d      	ldr	r3, [pc, #116]	@ (800867c <HAL_I2C_Init+0x134>)
 8008606:	430b      	orrs	r3, r1
 8008608:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008618:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691a      	ldr	r2, [r3, #16]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1a      	ldr	r2, [r3, #32]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	02008000 	.word	0x02008000

08008680 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	461a      	mov	r2, r3
 800868c:	460b      	mov	r3, r1
 800868e:	817b      	strh	r3, [r7, #10]
 8008690:	4613      	mov	r3, r2
 8008692:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b20      	cmp	r3, #32
 800869e:	f040 80fd 	bne.w	800889c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_I2C_Master_Transmit+0x30>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0f6      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086b8:	f7fc fd90 	bl	80051dc <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2319      	movs	r3, #25
 80086c4:	2201      	movs	r2, #1
 80086c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f001 f891 	bl	80097f2 <I2C_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e0e1      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2221      	movs	r2, #33	@ 0x21
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2210      	movs	r2, #16
 80086e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	893a      	ldrh	r2, [r7, #8]
 80086fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2bff      	cmp	r3, #255	@ 0xff
 800870a:	d906      	bls.n	800871a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22ff      	movs	r2, #255	@ 0xff
 8008710:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e007      	b.n	800872a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008728:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d024      	beq.n	800877c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008766:	b2db      	uxtb	r3, r3
 8008768:	3301      	adds	r3, #1
 800876a:	b2da      	uxtb	r2, r3
 800876c:	8979      	ldrh	r1, [r7, #10]
 800876e:	4b4e      	ldr	r3, [pc, #312]	@ (80088a8 <HAL_I2C_Master_Transmit+0x228>)
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 fa8b 	bl	8009c90 <I2C_TransferConfig>
 800877a:	e066      	b.n	800884a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008780:	b2da      	uxtb	r2, r3
 8008782:	8979      	ldrh	r1, [r7, #10]
 8008784:	4b48      	ldr	r3, [pc, #288]	@ (80088a8 <HAL_I2C_Master_Transmit+0x228>)
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f001 fa80 	bl	8009c90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008790:	e05b      	b.n	800884a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	6a39      	ldr	r1, [r7, #32]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f001 f884 	bl	80098a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e07b      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087aa:	781a      	ldrb	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d034      	beq.n	800884a <HAL_I2C_Master_Transmit+0x1ca>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d130      	bne.n	800884a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	2200      	movs	r2, #0
 80087f0:	2180      	movs	r1, #128	@ 0x80
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fffd 	bl	80097f2 <I2C_WaitOnFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e04d      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008806:	b29b      	uxth	r3, r3
 8008808:	2bff      	cmp	r3, #255	@ 0xff
 800880a:	d90e      	bls.n	800882a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	22ff      	movs	r2, #255	@ 0xff
 8008810:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008816:	b2da      	uxtb	r2, r3
 8008818:	8979      	ldrh	r1, [r7, #10]
 800881a:	2300      	movs	r3, #0
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f001 fa34 	bl	8009c90 <I2C_TransferConfig>
 8008828:	e00f      	b.n	800884a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008838:	b2da      	uxtb	r2, r3
 800883a:	8979      	ldrh	r1, [r7, #10]
 800883c:	2300      	movs	r3, #0
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f001 fa23 	bl	8009c90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800884e:	b29b      	uxth	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d19e      	bne.n	8008792 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	6a39      	ldr	r1, [r7, #32]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 f86a 	bl	8009932 <I2C_WaitOnSTOPFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e01a      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2220      	movs	r2, #32
 800886e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6859      	ldr	r1, [r3, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <HAL_I2C_Master_Transmit+0x22c>)
 800887c:	400b      	ands	r3, r1
 800887e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e000      	b.n	800889e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	80002000 	.word	0x80002000
 80088ac:	fe00e800 	.word	0xfe00e800

080088b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	461a      	mov	r2, r3
 80088bc:	460b      	mov	r3, r1
 80088be:	817b      	strh	r3, [r7, #10]
 80088c0:	4613      	mov	r3, r2
 80088c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	f040 80db 	bne.w	8008a88 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_I2C_Master_Receive+0x30>
 80088dc:	2302      	movs	r3, #2
 80088de:	e0d4      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088e8:	f7fc fc78 	bl	80051dc <HAL_GetTick>
 80088ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2319      	movs	r3, #25
 80088f4:	2201      	movs	r2, #1
 80088f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 ff79 	bl	80097f2 <I2C_WaitOnFlagUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e0bf      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2222      	movs	r2, #34	@ 0x22
 800890e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2210      	movs	r2, #16
 8008916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	893a      	ldrh	r2, [r7, #8]
 800892a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008936:	b29b      	uxth	r3, r3
 8008938:	2bff      	cmp	r3, #255	@ 0xff
 800893a:	d90e      	bls.n	800895a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	22ff      	movs	r2, #255	@ 0xff
 8008940:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008946:	b2da      	uxtb	r2, r3
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	4b52      	ldr	r3, [pc, #328]	@ (8008a94 <HAL_I2C_Master_Receive+0x1e4>)
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f001 f99c 	bl	8009c90 <I2C_TransferConfig>
 8008958:	e06d      	b.n	8008a36 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008968:	b2da      	uxtb	r2, r3
 800896a:	8979      	ldrh	r1, [r7, #10]
 800896c:	4b49      	ldr	r3, [pc, #292]	@ (8008a94 <HAL_I2C_Master_Receive+0x1e4>)
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 f98b 	bl	8009c90 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800897a:	e05c      	b.n	8008a36 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	6a39      	ldr	r1, [r7, #32]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f001 f819 	bl	80099b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e07c      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d034      	beq.n	8008a36 <HAL_I2C_Master_Receive+0x186>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d130      	bne.n	8008a36 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	2200      	movs	r2, #0
 80089dc:	2180      	movs	r1, #128	@ 0x80
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 ff07 	bl	80097f2 <I2C_WaitOnFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e04d      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2bff      	cmp	r3, #255	@ 0xff
 80089f6:	d90e      	bls.n	8008a16 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	22ff      	movs	r2, #255	@ 0xff
 80089fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	8979      	ldrh	r1, [r7, #10]
 8008a06:	2300      	movs	r3, #0
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f001 f93e 	bl	8009c90 <I2C_TransferConfig>
 8008a14:	e00f      	b.n	8008a36 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	8979      	ldrh	r1, [r7, #10]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f001 f92d 	bl	8009c90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d19d      	bne.n	800897c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	6a39      	ldr	r1, [r7, #32]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 ff74 	bl	8009932 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e01a      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6859      	ldr	r1, [r3, #4]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b0c      	ldr	r3, [pc, #48]	@ (8008a98 <HAL_I2C_Master_Receive+0x1e8>)
 8008a68:	400b      	ands	r3, r1
 8008a6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e000      	b.n	8008a8a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
  }
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	80002400 	.word	0x80002400
 8008a98:	fe00e800 	.word	0xfe00e800

08008a9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
  }
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d010      	beq.n	8008b16 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	09db      	lsrs	r3, r3, #7
 8008af8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b04:	f043 0201 	orr.w	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	0a9b      	lsrs	r3, r3, #10
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d010      	beq.n	8008b44 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	09db      	lsrs	r3, r3, #7
 8008b26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	f043 0208 	orr.w	r2, r3, #8
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	0a5b      	lsrs	r3, r3, #9
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d010      	beq.n	8008b72 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	09db      	lsrs	r3, r3, #7
 8008b54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b60:	f043 0202 	orr.w	r2, r3, #2
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b70:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 030b 	and.w	r3, r3, #11
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008b82:	68f9      	ldr	r1, [r7, #12]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fcdb 	bl	8009540 <I2C_ITError>
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <I2C_Slave_ISR_IT+0x24>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e0ed      	b.n	8008e12 <I2C_Slave_ISR_IT+0x200>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008c56:	6939      	ldr	r1, [r7, #16]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f9c1 	bl	8008fe0 <I2C_ITSlaveCplt>
 8008c5e:	e0d3      	b.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d04d      	beq.n	8008d08 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	091b      	lsrs	r3, r3, #4
 8008c70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d047      	beq.n	8008d08 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d128      	bne.n	8008cd4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b28      	cmp	r3, #40	@ 0x28
 8008c8c:	d108      	bne.n	8008ca0 <I2C_Slave_ISR_IT+0x8e>
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c94:	d104      	bne.n	8008ca0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008c96:	6939      	ldr	r1, [r7, #16]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fbfb 	bl	8009494 <I2C_ITListenCplt>
 8008c9e:	e032      	b.n	8008d06 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b29      	cmp	r3, #41	@ 0x29
 8008caa:	d10e      	bne.n	8008cca <I2C_Slave_ISR_IT+0xb8>
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008cb2:	d00a      	beq.n	8008cca <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2210      	movs	r2, #16
 8008cba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fd56 	bl	800976e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 f92d 	bl	8008f22 <I2C_ITSlaveSeqCplt>
 8008cc8:	e01d      	b.n	8008d06 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2210      	movs	r2, #16
 8008cd0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008cd2:	e096      	b.n	8008e02 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2210      	movs	r2, #16
 8008cda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce0:	f043 0204 	orr.w	r2, r3, #4
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <I2C_Slave_ISR_IT+0xe6>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cf4:	f040 8085 	bne.w	8008e02 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fc1e 	bl	8009540 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008d04:	e07d      	b.n	8008e02 <I2C_Slave_ISR_IT+0x1f0>
 8008d06:	e07c      	b.n	8008e02 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d030      	beq.n	8008d76 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	089b      	lsrs	r3, r3, #2
 8008d18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d02a      	beq.n	8008d76 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14f      	bne.n	8008e06 <I2C_Slave_ISR_IT+0x1f4>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d6c:	d04b      	beq.n	8008e06 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f8d7 	bl	8008f22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008d74:	e047      	b.n	8008e06 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008d8e:	6939      	ldr	r1, [r7, #16]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f842 	bl	8008e1a <I2C_ITAddrCplt>
 8008d96:	e037      	b.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d031      	beq.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d02b      	beq.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d018      	beq.n	8008dec <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008dea:	e00d      	b.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008df2:	d002      	beq.n	8008dfa <I2C_Slave_ISR_IT+0x1e8>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f891 	bl	8008f22 <I2C_ITSlaveSeqCplt>
 8008e00:	e002      	b.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008e06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e30:	2b28      	cmp	r3, #40	@ 0x28
 8008e32:	d16a      	bne.n	8008f0a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	0c1b      	lsrs	r3, r3, #16
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	0c1b      	lsrs	r3, r3, #16
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008e52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008e6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d138      	bne.n	8008eea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008e78:	897b      	ldrh	r3, [r7, #10]
 8008e7a:	09db      	lsrs	r3, r3, #7
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	89bb      	ldrh	r3, [r7, #12]
 8008e80:	4053      	eors	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f003 0306 	and.w	r3, r3, #6
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11c      	bne.n	8008ec6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008e8c:	897b      	ldrh	r3, [r7, #10]
 8008e8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d13b      	bne.n	8008f1a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2208      	movs	r2, #8
 8008eae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eb8:	89ba      	ldrh	r2, [r7, #12]
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fe7b 	bl	8008bba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ec4:	e029      	b.n	8008f1a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008ec6:	893b      	ldrh	r3, [r7, #8]
 8008ec8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008eca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 ff10 	bl	8009cf4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008edc:	89ba      	ldrh	r2, [r7, #12]
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fe69 	bl	8008bba <HAL_I2C_AddrCallback>
}
 8008ee8:	e017      	b.n	8008f1a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008eea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 ff00 	bl	8009cf4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008efc:	89ba      	ldrh	r2, [r7, #12]
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fe59 	bl	8008bba <HAL_I2C_AddrCallback>
}
 8008f08:	e007      	b.n	8008f1a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2208      	movs	r2, #8
 8008f10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	0b9b      	lsrs	r3, r3, #14
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e00d      	b.n	8008f74 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	0bdb      	lsrs	r3, r3, #15
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f72:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b29      	cmp	r3, #41	@ 0x29
 8008f7e:	d112      	bne.n	8008fa6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2228      	movs	r2, #40	@ 0x28
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2221      	movs	r2, #33	@ 0x21
 8008f8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f8e:	2101      	movs	r1, #1
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 feaf 	bl	8009cf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fdf7 	bl	8008b92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fa4:	e017      	b.n	8008fd6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fb0:	d111      	bne.n	8008fd6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2228      	movs	r2, #40	@ 0x28
 8008fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2222      	movs	r2, #34	@ 0x22
 8008fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fc0:	2102      	movs	r1, #2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fe96 	bl	8009cf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff fde8 	bl	8008ba6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009002:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2220      	movs	r2, #32
 800900a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	2b21      	cmp	r3, #33	@ 0x21
 8009010:	d002      	beq.n	8009018 <I2C_ITSlaveCplt+0x38>
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	2b29      	cmp	r3, #41	@ 0x29
 8009016:	d108      	bne.n	800902a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009018:	f248 0101 	movw	r1, #32769	@ 0x8001
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fe69 	bl	8009cf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2221      	movs	r2, #33	@ 0x21
 8009026:	631a      	str	r2, [r3, #48]	@ 0x30
 8009028:	e019      	b.n	800905e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	2b22      	cmp	r3, #34	@ 0x22
 800902e:	d002      	beq.n	8009036 <I2C_ITSlaveCplt+0x56>
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	2b2a      	cmp	r3, #42	@ 0x2a
 8009034:	d108      	bne.n	8009048 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009036:	f248 0102 	movw	r1, #32770	@ 0x8002
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fe5a 	bl	8009cf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2222      	movs	r2, #34	@ 0x22
 8009044:	631a      	str	r2, [r3, #48]	@ 0x30
 8009046:	e00a      	b.n	800905e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	2b28      	cmp	r3, #40	@ 0x28
 800904c:	d107      	bne.n	800905e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800904e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fe4e 	bl	8009cf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800906c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6859      	ldr	r1, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b80      	ldr	r3, [pc, #512]	@ (800927c <I2C_ITSlaveCplt+0x29c>)
 800907a:	400b      	ands	r3, r1
 800907c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fb75 	bl	800976e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	0b9b      	lsrs	r3, r3, #14
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d07a      	beq.n	8009186 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800909e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8112 	beq.w	80092ce <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a73      	ldr	r2, [pc, #460]	@ (8009280 <I2C_ITSlaveCplt+0x2a0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d059      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a71      	ldr	r2, [pc, #452]	@ (8009284 <I2C_ITSlaveCplt+0x2a4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d053      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a6f      	ldr	r2, [pc, #444]	@ (8009288 <I2C_ITSlaveCplt+0x2a8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d04d      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a6d      	ldr	r2, [pc, #436]	@ (800928c <I2C_ITSlaveCplt+0x2ac>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d047      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a6b      	ldr	r2, [pc, #428]	@ (8009290 <I2C_ITSlaveCplt+0x2b0>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d041      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a69      	ldr	r2, [pc, #420]	@ (8009294 <I2C_ITSlaveCplt+0x2b4>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d03b      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a67      	ldr	r2, [pc, #412]	@ (8009298 <I2C_ITSlaveCplt+0x2b8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d035      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a65      	ldr	r2, [pc, #404]	@ (800929c <I2C_ITSlaveCplt+0x2bc>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d02f      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a63      	ldr	r2, [pc, #396]	@ (80092a0 <I2C_ITSlaveCplt+0x2c0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d029      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a61      	ldr	r2, [pc, #388]	@ (80092a4 <I2C_ITSlaveCplt+0x2c4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d023      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a5f      	ldr	r2, [pc, #380]	@ (80092a8 <I2C_ITSlaveCplt+0x2c8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01d      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a5d      	ldr	r2, [pc, #372]	@ (80092ac <I2C_ITSlaveCplt+0x2cc>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d017      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a5b      	ldr	r2, [pc, #364]	@ (80092b0 <I2C_ITSlaveCplt+0x2d0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d011      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a59      	ldr	r2, [pc, #356]	@ (80092b4 <I2C_ITSlaveCplt+0x2d4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00b      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a57      	ldr	r2, [pc, #348]	@ (80092b8 <I2C_ITSlaveCplt+0x2d8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d005      	beq.n	800916a <I2C_ITSlaveCplt+0x18a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a55      	ldr	r2, [pc, #340]	@ (80092bc <I2C_ITSlaveCplt+0x2dc>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d105      	bne.n	8009176 <I2C_ITSlaveCplt+0x196>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b29b      	uxth	r3, r3
 8009174:	e004      	b.n	8009180 <I2C_ITSlaveCplt+0x1a0>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b29b      	uxth	r3, r3
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8009184:	e0a3      	b.n	80092ce <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	0bdb      	lsrs	r3, r3, #15
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 809d 	beq.w	80092ce <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8090 	beq.w	80092ce <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a32      	ldr	r2, [pc, #200]	@ (8009280 <I2C_ITSlaveCplt+0x2a0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d059      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a30      	ldr	r2, [pc, #192]	@ (8009284 <I2C_ITSlaveCplt+0x2a4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d053      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a2e      	ldr	r2, [pc, #184]	@ (8009288 <I2C_ITSlaveCplt+0x2a8>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d04d      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2c      	ldr	r2, [pc, #176]	@ (800928c <I2C_ITSlaveCplt+0x2ac>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d047      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009290 <I2C_ITSlaveCplt+0x2b0>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d041      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a28      	ldr	r2, [pc, #160]	@ (8009294 <I2C_ITSlaveCplt+0x2b4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d03b      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a26      	ldr	r2, [pc, #152]	@ (8009298 <I2C_ITSlaveCplt+0x2b8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d035      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a24      	ldr	r2, [pc, #144]	@ (800929c <I2C_ITSlaveCplt+0x2bc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d02f      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a22      	ldr	r2, [pc, #136]	@ (80092a0 <I2C_ITSlaveCplt+0x2c0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d029      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a20      	ldr	r2, [pc, #128]	@ (80092a4 <I2C_ITSlaveCplt+0x2c4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d023      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1e      	ldr	r2, [pc, #120]	@ (80092a8 <I2C_ITSlaveCplt+0x2c8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01d      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a1c      	ldr	r2, [pc, #112]	@ (80092ac <I2C_ITSlaveCplt+0x2cc>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d017      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1a      	ldr	r2, [pc, #104]	@ (80092b0 <I2C_ITSlaveCplt+0x2d0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d011      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a18      	ldr	r2, [pc, #96]	@ (80092b4 <I2C_ITSlaveCplt+0x2d4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00b      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a16      	ldr	r2, [pc, #88]	@ (80092b8 <I2C_ITSlaveCplt+0x2d8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d005      	beq.n	800926e <I2C_ITSlaveCplt+0x28e>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a14      	ldr	r2, [pc, #80]	@ (80092bc <I2C_ITSlaveCplt+0x2dc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d128      	bne.n	80092c0 <I2C_ITSlaveCplt+0x2e0>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b29b      	uxth	r3, r3
 8009278:	e027      	b.n	80092ca <I2C_ITSlaveCplt+0x2ea>
 800927a:	bf00      	nop
 800927c:	fe00e800 	.word	0xfe00e800
 8009280:	40020010 	.word	0x40020010
 8009284:	40020028 	.word	0x40020028
 8009288:	40020040 	.word	0x40020040
 800928c:	40020058 	.word	0x40020058
 8009290:	40020070 	.word	0x40020070
 8009294:	40020088 	.word	0x40020088
 8009298:	400200a0 	.word	0x400200a0
 800929c:	400200b8 	.word	0x400200b8
 80092a0:	40020410 	.word	0x40020410
 80092a4:	40020428 	.word	0x40020428
 80092a8:	40020440 	.word	0x40020440
 80092ac:	40020458 	.word	0x40020458
 80092b0:	40020470 	.word	0x40020470
 80092b4:	40020488 	.word	0x40020488
 80092b8:	400204a0 	.word	0x400204a0
 80092bc:	400204b8 	.word	0x400204b8
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	089b      	lsrs	r3, r3, #2
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d020      	beq.n	800931c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f023 0304 	bic.w	r3, r3, #4
 80092e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00c      	beq.n	800931c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800932a:	f043 0204 	orr.w	r2, r3, #4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	091b      	lsrs	r3, r3, #4
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d04a      	beq.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	091b      	lsrs	r3, r3, #4
 8009342:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009346:	2b00      	cmp	r3, #0
 8009348:	d044      	beq.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d128      	bne.n	80093a6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b28      	cmp	r3, #40	@ 0x28
 800935e:	d108      	bne.n	8009372 <I2C_ITSlaveCplt+0x392>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009366:	d104      	bne.n	8009372 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009368:	6979      	ldr	r1, [r7, #20]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f892 	bl	8009494 <I2C_ITListenCplt>
 8009370:	e030      	b.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b29      	cmp	r3, #41	@ 0x29
 800937c:	d10e      	bne.n	800939c <I2C_ITSlaveCplt+0x3bc>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009384:	d00a      	beq.n	800939c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2210      	movs	r2, #16
 800938c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9ed 	bl	800976e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fdc4 	bl	8008f22 <I2C_ITSlaveSeqCplt>
 800939a:	e01b      	b.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2210      	movs	r2, #16
 80093a2:	61da      	str	r2, [r3, #28]
 80093a4:	e016      	b.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2210      	movs	r2, #16
 80093ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b2:	f043 0204 	orr.w	r2, r3, #4
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <I2C_ITSlaveCplt+0x3e8>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093c6:	d105      	bne.n	80093d4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8b6 	bl	8009540 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d010      	beq.n	800940c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8a5 	bl	8009540 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b28      	cmp	r3, #40	@ 0x28
 8009400:	d141      	bne.n	8009486 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f845 	bl	8009494 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800940a:	e03c      	b.n	8009486 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009414:	d014      	beq.n	8009440 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff fd83 	bl	8008f22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1c      	ldr	r2, [pc, #112]	@ (8009490 <I2C_ITSlaveCplt+0x4b0>)
 8009420:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fbcc 	bl	8008bd6 <HAL_I2C_ListenCpltCallback>
}
 800943e:	e022      	b.n	8009486 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b22      	cmp	r3, #34	@ 0x22
 800944a:	d10e      	bne.n	800946a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fb9f 	bl	8008ba6 <HAL_I2C_SlaveRxCpltCallback>
}
 8009468:	e00d      	b.n	8009486 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff fb86 	bl	8008b92 <HAL_I2C_SlaveTxCpltCallback>
}
 8009486:	bf00      	nop
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	ffff0000 	.word	0xffff0000

08009494 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a26      	ldr	r2, [pc, #152]	@ (800953c <I2C_ITListenCplt+0xa8>)
 80094a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	089b      	lsrs	r3, r3, #2
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d022      	beq.n	8009512 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d012      	beq.n	8009512 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950a:	f043 0204 	orr.w	r2, r3, #4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009512:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fbec 	bl	8009cf4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2210      	movs	r2, #16
 8009522:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff fb52 	bl	8008bd6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	ffff0000 	.word	0xffff0000

08009540 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009550:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a6d      	ldr	r2, [pc, #436]	@ (8009714 <I2C_ITError+0x1d4>)
 800955e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b28      	cmp	r3, #40	@ 0x28
 8009576:	d005      	beq.n	8009584 <I2C_ITError+0x44>
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b29      	cmp	r3, #41	@ 0x29
 800957c:	d002      	beq.n	8009584 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	2b2a      	cmp	r3, #42	@ 0x2a
 8009582:	d10b      	bne.n	800959c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009584:	2103      	movs	r1, #3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fbb4 	bl	8009cf4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2228      	movs	r2, #40	@ 0x28
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a60      	ldr	r2, [pc, #384]	@ (8009718 <I2C_ITError+0x1d8>)
 8009598:	635a      	str	r2, [r3, #52]	@ 0x34
 800959a:	e030      	b.n	80095fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800959c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fba7 	bl	8009cf4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8e1 	bl	800976e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b60      	cmp	r3, #96	@ 0x60
 80095b6:	d01f      	beq.n	80095f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d114      	bne.n	80095f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	2b10      	cmp	r3, #16
 80095da:	d109      	bne.n	80095f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2210      	movs	r2, #16
 80095e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e8:	f043 0204 	orr.w	r2, r3, #4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2220      	movs	r2, #32
 80095f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009602:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d039      	beq.n	8009680 <I2C_ITError+0x140>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b11      	cmp	r3, #17
 8009610:	d002      	beq.n	8009618 <I2C_ITError+0xd8>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b21      	cmp	r3, #33	@ 0x21
 8009616:	d133      	bne.n	8009680 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009626:	d107      	bne.n	8009638 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009636:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe f9a5 	bl	800798c <HAL_DMA_GetState>
 8009642:	4603      	mov	r3, r0
 8009644:	2b01      	cmp	r3, #1
 8009646:	d017      	beq.n	8009678 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964c:	4a33      	ldr	r2, [pc, #204]	@ (800971c <I2C_ITError+0x1dc>)
 800964e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd f825 	bl	80066ac <HAL_DMA_Abort_IT>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d04d      	beq.n	8009704 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009672:	4610      	mov	r0, r2
 8009674:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009676:	e045      	b.n	8009704 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f851 	bl	8009720 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800967e:	e041      	b.n	8009704 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d039      	beq.n	80096fc <I2C_ITError+0x1bc>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b12      	cmp	r3, #18
 800968c:	d002      	beq.n	8009694 <I2C_ITError+0x154>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b22      	cmp	r3, #34	@ 0x22
 8009692:	d133      	bne.n	80096fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800969e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096a2:	d107      	bne.n	80096b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe f967 	bl	800798c <HAL_DMA_GetState>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d017      	beq.n	80096f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c8:	4a14      	ldr	r2, [pc, #80]	@ (800971c <I2C_ITError+0x1dc>)
 80096ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fc ffe7 	bl	80066ac <HAL_DMA_Abort_IT>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d011      	beq.n	8009708 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80096ee:	4610      	mov	r0, r2
 80096f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096f2:	e009      	b.n	8009708 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f813 	bl	8009720 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096fa:	e005      	b.n	8009708 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f80f 	bl	8009720 <I2C_TreatErrorCallback>
  }
}
 8009702:	e002      	b.n	800970a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009704:	bf00      	nop
 8009706:	e000      	b.n	800970a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009708:	bf00      	nop
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	ffff0000 	.word	0xffff0000
 8009718:	08008c13 	.word	0x08008c13
 800971c:	080097b7 	.word	0x080097b7

08009720 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b60      	cmp	r3, #96	@ 0x60
 8009732:	d10e      	bne.n	8009752 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2220      	movs	r2, #32
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fa57 	bl	8008bfe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009750:	e009      	b.n	8009766 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fa42 	bl	8008bea <HAL_I2C_ErrorCallback>
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b02      	cmp	r3, #2
 8009782:	d103      	bne.n	800978c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2200      	movs	r2, #0
 800978a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b01      	cmp	r3, #1
 8009798:	d007      	beq.n	80097aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	619a      	str	r2, [r3, #24]
  }
}
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	2200      	movs	r2, #0
 80097d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e0:	2200      	movs	r2, #0
 80097e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff ff9b 	bl	8009720 <I2C_TreatErrorCallback>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	603b      	str	r3, [r7, #0]
 80097fe:	4613      	mov	r3, r2
 8009800:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009802:	e03b      	b.n	800987c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f961 	bl	8009ad0 <I2C_IsErrorOccurred>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e041      	b.n	800989c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800981e:	d02d      	beq.n	800987c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009820:	f7fb fcdc 	bl	80051dc <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	429a      	cmp	r2, r3
 800982e:	d302      	bcc.n	8009836 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d122      	bne.n	800987c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699a      	ldr	r2, [r3, #24]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4013      	ands	r3, r2
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	429a      	cmp	r2, r3
 8009844:	bf0c      	ite	eq
 8009846:	2301      	moveq	r3, #1
 8009848:	2300      	movne	r3, #0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	461a      	mov	r2, r3
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	429a      	cmp	r2, r3
 8009852:	d113      	bne.n	800987c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009858:	f043 0220 	orr.w	r2, r3, #32
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e00f      	b.n	800989c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699a      	ldr	r2, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4013      	ands	r3, r2
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	bf0c      	ite	eq
 800988c:	2301      	moveq	r3, #1
 800988e:	2300      	movne	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	429a      	cmp	r2, r3
 8009898:	d0b4      	beq.n	8009804 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098b0:	e033      	b.n	800991a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 f90a 	bl	8009ad0 <I2C_IsErrorOccurred>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e031      	b.n	800992a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098cc:	d025      	beq.n	800991a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ce:	f7fb fc85 	bl	80051dc <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d302      	bcc.n	80098e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11a      	bne.n	800991a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d013      	beq.n	800991a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f6:	f043 0220 	orr.w	r2, r3, #32
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e007      	b.n	800992a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b02      	cmp	r3, #2
 8009926:	d1c4      	bne.n	80098b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800993e:	e02f      	b.n	80099a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f8c3 	bl	8009ad0 <I2C_IsErrorOccurred>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e02d      	b.n	80099b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009954:	f7fb fc42 	bl	80051dc <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	d302      	bcc.n	800996a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d11a      	bne.n	80099a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b20      	cmp	r3, #32
 8009976:	d013      	beq.n	80099a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997c:	f043 0220 	orr.w	r2, r3, #32
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e007      	b.n	80099b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d1c8      	bne.n	8009940 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80099c8:	e071      	b.n	8009aae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f87e 	bl	8009ad0 <I2C_IsErrorOccurred>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d13b      	bne.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d138      	bne.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d105      	bne.n	8009a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d121      	bne.n	8009a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2210      	movs	r2, #16
 8009a20:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2204      	movs	r2, #4
 8009a26:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6859      	ldr	r1, [r3, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b24      	ldr	r3, [pc, #144]	@ (8009acc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009a3c:	400b      	ands	r3, r1
 8009a3e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	75fb      	strb	r3, [r7, #23]
 8009a5c:	e002      	b.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009a64:	f7fb fbba 	bl	80051dc <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d119      	bne.n	8009aae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d116      	bne.n	8009aae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d00f      	beq.n	8009aae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a92:	f043 0220 	orr.w	r2, r3, #32
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d002      	beq.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d083      	beq.n	80099ca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	fe00e800 	.word	0xfe00e800

08009ad0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	@ 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d068      	beq.n	8009bce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2210      	movs	r2, #16
 8009b02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b04:	e049      	b.n	8009b9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b0c:	d045      	beq.n	8009b9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b0e:	f7fb fb65 	bl	80051dc <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <I2C_IsErrorOccurred+0x54>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d13a      	bne.n	8009b9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b46:	d121      	bne.n	8009b8c <I2C_IsErrorOccurred+0xbc>
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b4e:	d01d      	beq.n	8009b8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b50:	7cfb      	ldrb	r3, [r7, #19]
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d01a      	beq.n	8009b8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b66:	f7fb fb39 	bl	80051dc <HAL_GetTick>
 8009b6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b6c:	e00e      	b.n	8009b8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b6e:	f7fb fb35 	bl	80051dc <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b19      	cmp	r3, #25
 8009b7a:	d907      	bls.n	8009b8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	f043 0320 	orr.w	r3, r3, #32
 8009b82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009b8a:	e006      	b.n	8009b9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d1e9      	bne.n	8009b6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d003      	beq.n	8009bb0 <I2C_IsErrorOccurred+0xe0>
 8009ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0aa      	beq.n	8009b06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d103      	bne.n	8009bc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	f043 0304 	orr.w	r3, r3, #4
 8009bc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	f043 0308 	orr.w	r3, r3, #8
 8009c08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00b      	beq.n	8009c3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	f043 0302 	orr.w	r3, r3, #2
 8009c2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01c      	beq.n	8009c7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fd92 	bl	800976e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <I2C_IsErrorOccurred+0x1bc>)
 8009c56:	400b      	ands	r3, r1
 8009c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3728      	adds	r7, #40	@ 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	fe00e800 	.word	0xfe00e800

08009c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	607b      	str	r3, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	817b      	strh	r3, [r7, #10]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ca2:	897b      	ldrh	r3, [r7, #10]
 8009ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ca8:	7a7b      	ldrb	r3, [r7, #9]
 8009caa:	041b      	lsls	r3, r3, #16
 8009cac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cb0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009cbe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	0d5b      	lsrs	r3, r3, #21
 8009cca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009cce:	4b08      	ldr	r3, [pc, #32]	@ (8009cf0 <I2C_TransferConfig+0x60>)
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	43db      	mvns	r3, r3
 8009cd4:	ea02 0103 	and.w	r1, r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	03ff63ff 	.word	0x03ff63ff

08009cf4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d04:	887b      	ldrh	r3, [r7, #2]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00f      	beq.n	8009d2e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009d14:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d22:	2b28      	cmp	r3, #40	@ 0x28
 8009d24:	d003      	beq.n	8009d2e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d2e:	887b      	ldrh	r3, [r7, #2]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00f      	beq.n	8009d58 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009d3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d4c:	2b28      	cmp	r3, #40	@ 0x28
 8009d4e:	d003      	beq.n	8009d58 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d56:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da03      	bge.n	8009d68 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009d66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009d68:	887b      	ldrh	r3, [r7, #2]
 8009d6a:	2b10      	cmp	r3, #16
 8009d6c:	d103      	bne.n	8009d76 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009d74:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d76:	887b      	ldrh	r3, [r7, #2]
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d103      	bne.n	8009d84 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f043 0320 	orr.w	r3, r3, #32
 8009d82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009d84:	887b      	ldrh	r3, [r7, #2]
 8009d86:	2b40      	cmp	r3, #64	@ 0x40
 8009d88:	d103      	bne.n	8009d92 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d90:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6819      	ldr	r1, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	43da      	mvns	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	400a      	ands	r2, r1
 8009da2:	601a      	str	r2, [r3, #0]
}
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d138      	bne.n	8009e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	e032      	b.n	8009e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2224      	movs	r2, #36	@ 0x24
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6819      	ldr	r1, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	e000      	b.n	8009e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e38:	2302      	movs	r3, #2
  }
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d139      	bne.n	8009ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e033      	b.n	8009ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2224      	movs	r2, #36	@ 0x24
 8009e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0201 	bic.w	r2, r2, #1
 8009e88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009e98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009eec:	f7fb f976 	bl	80051dc <HAL_GetTick>
 8009ef0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d102      	bne.n	8009efe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
 8009efc:	e0a5      	b.n	800a04a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 809e 	bne.w	800a04a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f9 fb02 	bl	8003518 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009f14:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa40 	bl	800a39e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	4b4b      	ldr	r3, [pc, #300]	@ (800a054 <HAL_OSPI_Init+0x174>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	68d1      	ldr	r1, [r2, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6912      	ldr	r2, [r2, #16]
 8009f30:	3a01      	subs	r2, #1
 8009f32:	0412      	lsls	r2, r2, #16
 8009f34:	4311      	orrs	r1, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6952      	ldr	r2, [r2, #20]
 8009f3a:	3a01      	subs	r2, #1
 8009f3c:	0212      	lsls	r2, r2, #8
 8009f3e:	4311      	orrs	r1, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f44:	4311      	orrs	r1, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	69d2      	ldr	r2, [r2, #28]
 8009f4a:	4311      	orrs	r1, r2
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6812      	ldr	r2, [r2, #0]
 8009f50:	430b      	orrs	r3, r1
 8009f52:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1a      	ldr	r2, [r3, #32]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f84:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	021a      	lsls	r2, r3, #8
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2120      	movs	r1, #32
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fef1 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d146      	bne.n	800a04a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fca:	1e5a      	subs	r2, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009ff2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0201 	orr.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d107      	bne.n	800a032 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0202 	orr.w	r2, r2, #2
 800a030:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a03a:	d103      	bne.n	800a044 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	651a      	str	r2, [r3, #80]	@ 0x50
 800a042:	e002      	b.n	800a04a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	f8e0f8f4 	.word	0xf8e0f8f4

0800a058 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	@ 0x28
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a064:	f7fb f8ba 	bl	80051dc <HAL_GetTick>
 800a068:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a074:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d104      	bne.n	800a086 <HAL_OSPI_Command+0x2e>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a084:	d115      	bne.n	800a0b2 <HAL_OSPI_Command+0x5a>
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b14      	cmp	r3, #20
 800a08a:	d107      	bne.n	800a09c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d00e      	beq.n	800a0b2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d00a      	beq.n	800a0b2 <HAL_OSPI_Command+0x5a>
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b24      	cmp	r3, #36	@ 0x24
 800a0a0:	d15b      	bne.n	800a15a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d003      	beq.n	800a0b2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d153      	bne.n	800a15a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2120      	movs	r1, #32
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 fe69 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a0c6:	7ffb      	ldrb	r3, [r7, #31]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d14c      	bne.n	800a166 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fe95 	bl	800ae04 <OSPI_ConfigCmd>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a0de:	7ffb      	ldrb	r3, [r7, #31]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d140      	bne.n	800a166 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10e      	bne.n	800a10a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	2102      	movs	r1, #2
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fe4c 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2202      	movs	r2, #2
 800a106:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800a108:	e02d      	b.n	800a166 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d103      	bne.n	800a11a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2204      	movs	r2, #4
 800a116:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a118:	e025      	b.n	800a166 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10b      	bne.n	800a13a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a126:	2b24      	cmp	r3, #36	@ 0x24
 800a128:	d103      	bne.n	800a132 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2204      	movs	r2, #4
 800a12e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a130:	e019      	b.n	800a166 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2214      	movs	r2, #20
 800a136:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a138:	e015      	b.n	800a166 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d111      	bne.n	800a166 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a146:	2b14      	cmp	r3, #20
 800a148:	d103      	bne.n	800a152 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2204      	movs	r2, #4
 800a14e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a150:	e009      	b.n	800a166 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2224      	movs	r2, #36	@ 0x24
 800a156:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a158:	e005      	b.n	800a166 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2210      	movs	r2, #16
 800a162:	655a      	str	r2, [r3, #84]	@ 0x54
 800a164:	e000      	b.n	800a168 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a166:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a168:	7ffb      	ldrb	r3, [r7, #31]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b08a      	sub	sp, #40	@ 0x28
 800a176:	af02      	add	r7, sp, #8
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a17e:	f7fb f82d 	bl	80051dc <HAL_GetTick>
 800a182:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3350      	adds	r3, #80	@ 0x50
 800a18a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d105      	bne.n	800a19e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2208      	movs	r2, #8
 800a19a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a19c:	e057      	b.n	800a24e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d14e      	bne.n	800a244 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a1ce:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	2104      	movs	r1, #4
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 fdda 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d113      	bne.n	800a212 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a202:	1e5a      	subs	r2, r3, #1
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1df      	bne.n	800a1d0 <HAL_OSPI_Transmit+0x5e>
 800a210:	e000      	b.n	800a214 <HAL_OSPI_Transmit+0xa2>
          break;
 800a212:	bf00      	nop

      if (status == HAL_OK)
 800a214:	7ffb      	ldrb	r3, [r7, #31]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d119      	bne.n	800a24e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2201      	movs	r2, #1
 800a222:	2102      	movs	r1, #2
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fdb5 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a22a:	4603      	mov	r3, r0
 800a22c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10c      	bne.n	800a24e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2202      	movs	r2, #2
 800a23a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2202      	movs	r2, #2
 800a240:	651a      	str	r2, [r3, #80]	@ 0x50
 800a242:	e004      	b.n	800a24e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2210      	movs	r2, #16
 800a24c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a24e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3720      	adds	r7, #32
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	@ 0x30
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a264:	f7fa ffba 	bl	80051dc <HAL_GetTick>
 800a268:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3350      	adds	r3, #80	@ 0x50
 800a270:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a278:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800a282:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2208      	movs	r2, #8
 800a294:	655a      	str	r2, [r3, #84]	@ 0x54
 800a296:	e07c      	b.n	800a392 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d172      	bne.n	800a386 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a2cc:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2d6:	d104      	bne.n	800a2e2 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	649a      	str	r2, [r3, #72]	@ 0x48
 800a2e0:	e011      	b.n	800a306 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a2ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	649a      	str	r2, [r3, #72]	@ 0x48
 800a2fa:	e004      	b.n	800a306 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	2201      	movs	r2, #1
 800a30e:	2106      	movs	r1, #6
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fd3f 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800a31c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a320:	2b00      	cmp	r3, #0
 800a322:	d114      	bne.n	800a34e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	7812      	ldrb	r2, [r2, #0]
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a33e:	1e5a      	subs	r2, r3, #1
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1dc      	bne.n	800a306 <HAL_OSPI_Receive+0xae>
 800a34c:	e000      	b.n	800a350 <HAL_OSPI_Receive+0xf8>
          break;
 800a34e:	bf00      	nop

      if (status == HAL_OK)
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a354:	2b00      	cmp	r3, #0
 800a356:	d11c      	bne.n	800a392 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	2201      	movs	r2, #1
 800a360:	2102      	movs	r1, #2
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 fd16 	bl	800ad94 <OSPI_WaitFlagStateUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800a36e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10d      	bne.n	800a392 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2202      	movs	r2, #2
 800a37c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2202      	movs	r2, #2
 800a382:	651a      	str	r2, [r3, #80]	@ 0x50
 800a384:	e005      	b.n	800a392 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2210      	movs	r2, #16
 800a390:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a396:	4618      	mov	r0, r3
 800a398:	3728      	adds	r7, #40	@ 0x28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b094      	sub	sp, #80	@ 0x50
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a9d      	ldr	r2, [pc, #628]	@ (800a650 <HAL_OSPIM_Config+0x294>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d105      	bne.n	800a3ea <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800a3e8:	e004      	b.n	800a3f4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3fa:	e01d      	b.n	800a438 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a3fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a400:	3301      	adds	r3, #1
 800a402:	b2d8      	uxtb	r0, r3
 800a404:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a408:	f107 0114 	add.w	r1, r7, #20
 800a40c:	4613      	mov	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	440b      	add	r3, r1
 800a416:	4619      	mov	r1, r3
 800a418:	f000 fe6e 	bl	800b0f8 <OSPIM_GetConfig>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2208      	movs	r2, #8
 800a42c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a42e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a432:	3301      	adds	r3, #1
 800a434:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a438:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d9dd      	bls.n	800a3fc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a440:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 8499 	bne.w	800ad7c <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a44a:	4b81      	ldr	r3, [pc, #516]	@ (800a650 <HAL_OSPIM_Config+0x294>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a456:	4b7e      	ldr	r3, [pc, #504]	@ (800a650 <HAL_OSPIM_Config+0x294>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a7d      	ldr	r2, [pc, #500]	@ (800a650 <HAL_OSPIM_Config+0x294>)
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a462:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a46e:	4b79      	ldr	r3, [pc, #484]	@ (800a654 <HAL_OSPIM_Config+0x298>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00b      	beq.n	800a492 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a47a:	4b76      	ldr	r3, [pc, #472]	@ (800a654 <HAL_OSPIM_Config+0x298>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a75      	ldr	r2, [pc, #468]	@ (800a654 <HAL_OSPIM_Config+0x298>)
 800a480:	f023 0301 	bic.w	r3, r3, #1
 800a484:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a486:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a48a:	f043 0302 	orr.w	r3, r3, #2
 800a48e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a492:	4971      	ldr	r1, [pc, #452]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a496:	4613      	mov	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4413      	add	r3, r2
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	3350      	adds	r3, #80	@ 0x50
 800a4a0:	443b      	add	r3, r7
 800a4a2:	3b34      	subs	r3, #52	@ 0x34
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	6859      	ldr	r1, [r3, #4]
 800a4ae:	486a      	ldr	r0, [pc, #424]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a4b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	3350      	adds	r3, #80	@ 0x50
 800a4bc:	443b      	add	r3, r7
 800a4be:	3b34      	subs	r3, #52	@ 0x34
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4403      	add	r3, r0
 800a4cc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a4ce:	4b62      	ldr	r3, [pc, #392]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 80c0 	beq.w	800a65c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a4dc:	4b5e      	ldr	r3, [pc, #376]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a5d      	ldr	r2, [pc, #372]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a4e8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	f040 8162 	bne.w	800a7b6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a4f2:	4959      	ldr	r1, [pc, #356]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a4f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	3350      	adds	r3, #80	@ 0x50
 800a502:	443b      	add	r3, r7
 800a504:	3b3c      	subs	r3, #60	@ 0x3c
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	6859      	ldr	r1, [r3, #4]
 800a510:	4851      	ldr	r0, [pc, #324]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a512:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	3350      	adds	r3, #80	@ 0x50
 800a520:	443b      	add	r3, r7
 800a522:	3b3c      	subs	r3, #60	@ 0x3c
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3b01      	subs	r3, #1
 800a528:	f041 0202 	orr.w	r2, r1, #2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4403      	add	r3, r0
 800a530:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a532:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	00db      	lsls	r3, r3, #3
 800a53e:	3350      	adds	r3, #80	@ 0x50
 800a540:	443b      	add	r3, r7
 800a542:	3b38      	subs	r3, #56	@ 0x38
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01f      	beq.n	800a58a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a54a:	4943      	ldr	r1, [pc, #268]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a54c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a550:	4613      	mov	r3, r2
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	4413      	add	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	3350      	adds	r3, #80	@ 0x50
 800a55a:	443b      	add	r3, r7
 800a55c:	3b38      	subs	r3, #56	@ 0x38
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3b01      	subs	r3, #1
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	6859      	ldr	r1, [r3, #4]
 800a568:	483b      	ldr	r0, [pc, #236]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a56a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a56e:	4613      	mov	r3, r2
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	4413      	add	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	3350      	adds	r3, #80	@ 0x50
 800a578:	443b      	add	r3, r7
 800a57a:	3b38      	subs	r3, #56	@ 0x38
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3b01      	subs	r3, #1
 800a580:	f041 0220 	orr.w	r2, r1, #32
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4403      	add	r3, r0
 800a588:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a58a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a58e:	4613      	mov	r3, r2
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	4413      	add	r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	3350      	adds	r3, #80	@ 0x50
 800a598:	443b      	add	r3, r7
 800a59a:	3b30      	subs	r3, #48	@ 0x30
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d023      	beq.n	800a5ea <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a5a2:	492d      	ldr	r1, [pc, #180]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a5a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	4413      	add	r3, r2
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	3350      	adds	r3, #80	@ 0x50
 800a5b2:	443b      	add	r3, r7
 800a5b4:	3b30      	subs	r3, #48	@ 0x30
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	6859      	ldr	r1, [r3, #4]
 800a5c4:	4824      	ldr	r0, [pc, #144]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a5c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	4413      	add	r3, r2
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	3350      	adds	r3, #80	@ 0x50
 800a5d4:	443b      	add	r3, r7
 800a5d6:	3b30      	subs	r3, #48	@ 0x30
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4403      	add	r3, r0
 800a5e8:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a5ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	4413      	add	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	3350      	adds	r3, #80	@ 0x50
 800a5f8:	443b      	add	r3, r7
 800a5fa:	3b2c      	subs	r3, #44	@ 0x2c
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80d9 	beq.w	800a7b6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a604:	4914      	ldr	r1, [pc, #80]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a606:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	3350      	adds	r3, #80	@ 0x50
 800a614:	443b      	add	r3, r7
 800a616:	3b2c      	subs	r3, #44	@ 0x2c
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	440b      	add	r3, r1
 800a624:	6859      	ldr	r1, [r3, #4]
 800a626:	480c      	ldr	r0, [pc, #48]	@ (800a658 <HAL_OSPIM_Config+0x29c>)
 800a628:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	3350      	adds	r3, #80	@ 0x50
 800a636:	443b      	add	r3, r7
 800a638:	3b2c      	subs	r3, #44	@ 0x2c
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4403      	add	r3, r0
 800a64a:	605a      	str	r2, [r3, #4]
 800a64c:	e0b3      	b.n	800a7b6 <HAL_OSPIM_Config+0x3fa>
 800a64e:	bf00      	nop
 800a650:	52005000 	.word	0x52005000
 800a654:	5200a000 	.word	0x5200a000
 800a658:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a65c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	3350      	adds	r3, #80	@ 0x50
 800a668:	443b      	add	r3, r7
 800a66a:	3b3c      	subs	r3, #60	@ 0x3c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80a1 	beq.w	800a7b6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a674:	4995      	ldr	r1, [pc, #596]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	3350      	adds	r3, #80	@ 0x50
 800a682:	443b      	add	r3, r7
 800a684:	3b3c      	subs	r3, #60	@ 0x3c
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3b01      	subs	r3, #1
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	6859      	ldr	r1, [r3, #4]
 800a690:	488e      	ldr	r0, [pc, #568]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a694:	4613      	mov	r3, r2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	3350      	adds	r3, #80	@ 0x50
 800a69e:	443b      	add	r3, r7
 800a6a0:	3b3c      	subs	r3, #60	@ 0x3c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	f021 0201 	bic.w	r2, r1, #1
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4403      	add	r3, r0
 800a6ae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a6b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	3350      	adds	r3, #80	@ 0x50
 800a6bc:	443b      	add	r3, r7
 800a6be:	3b38      	subs	r3, #56	@ 0x38
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d01d      	beq.n	800a702 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a6c6:	4981      	ldr	r1, [pc, #516]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a6c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	4413      	add	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	3350      	adds	r3, #80	@ 0x50
 800a6d4:	443b      	add	r3, r7
 800a6d6:	3b38      	subs	r3, #56	@ 0x38
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	6859      	ldr	r1, [r3, #4]
 800a6e2:	487a      	ldr	r0, [pc, #488]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a6e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	3350      	adds	r3, #80	@ 0x50
 800a6f0:	443b      	add	r3, r7
 800a6f2:	3b38      	subs	r3, #56	@ 0x38
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	f021 0210 	bic.w	r2, r1, #16
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4403      	add	r3, r0
 800a700:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a704:	4613      	mov	r3, r2
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	4413      	add	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	3350      	adds	r3, #80	@ 0x50
 800a70e:	443b      	add	r3, r7
 800a710:	3b30      	subs	r3, #48	@ 0x30
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d021      	beq.n	800a75c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a718:	496c      	ldr	r1, [pc, #432]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a71a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	3350      	adds	r3, #80	@ 0x50
 800a726:	443b      	add	r3, r7
 800a728:	3b30      	subs	r3, #48	@ 0x30
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	6859      	ldr	r1, [r3, #4]
 800a738:	4864      	ldr	r0, [pc, #400]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a73a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a73c:	4613      	mov	r3, r2
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	4413      	add	r3, r2
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	3350      	adds	r3, #80	@ 0x50
 800a746:	443b      	add	r3, r7
 800a748:	3b30      	subs	r3, #48	@ 0x30
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4403      	add	r3, r0
 800a75a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a75c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a75e:	4613      	mov	r3, r2
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	4413      	add	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	3350      	adds	r3, #80	@ 0x50
 800a768:	443b      	add	r3, r7
 800a76a:	3b2c      	subs	r3, #44	@ 0x2c
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d021      	beq.n	800a7b6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a772:	4956      	ldr	r1, [pc, #344]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	00db      	lsls	r3, r3, #3
 800a77e:	3350      	adds	r3, #80	@ 0x50
 800a780:	443b      	add	r3, r7
 800a782:	3b2c      	subs	r3, #44	@ 0x2c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	6859      	ldr	r1, [r3, #4]
 800a792:	484e      	ldr	r0, [pc, #312]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a796:	4613      	mov	r3, r2
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	4413      	add	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	3350      	adds	r3, #80	@ 0x50
 800a7a0:	443b      	add	r3, r7
 800a7a2:	3b2c      	subs	r3, #44	@ 0x2c
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4403      	add	r3, r0
 800a7b4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	6819      	ldr	r1, [r3, #0]
 800a7ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7be:	4613      	mov	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	3350      	adds	r3, #80	@ 0x50
 800a7c8:	443b      	add	r3, r7
 800a7ca:	3b3c      	subs	r3, #60	@ 0x3c
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d03c      	beq.n	800a84c <HAL_OSPIM_Config+0x490>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	6899      	ldr	r1, [r3, #8]
 800a7d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7da:	4613      	mov	r3, r2
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4413      	add	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	3350      	adds	r3, #80	@ 0x50
 800a7e4:	443b      	add	r3, r7
 800a7e6:	3b34      	subs	r3, #52	@ 0x34
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	d02e      	beq.n	800a84c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	6859      	ldr	r1, [r3, #4]
 800a7f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	3350      	adds	r3, #80	@ 0x50
 800a800:	443b      	add	r3, r7
 800a802:	3b38      	subs	r3, #56	@ 0x38
 800a804:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a806:	4299      	cmp	r1, r3
 800a808:	d103      	bne.n	800a812 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d11c      	bne.n	800a84c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	68d9      	ldr	r1, [r3, #12]
 800a816:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	4413      	add	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	3350      	adds	r3, #80	@ 0x50
 800a824:	443b      	add	r3, r7
 800a826:	3b30      	subs	r3, #48	@ 0x30
 800a828:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a82a:	4299      	cmp	r1, r3
 800a82c:	d00e      	beq.n	800a84c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	6919      	ldr	r1, [r3, #16]
 800a832:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a836:	4613      	mov	r3, r2
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	4413      	add	r3, r2
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	3350      	adds	r3, #80	@ 0x50
 800a840:	443b      	add	r3, r7
 800a842:	3b2c      	subs	r3, #44	@ 0x2c
 800a844:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a846:	4299      	cmp	r1, r3
 800a848:	f040 810e 	bne.w	800aa68 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a854:	4613      	mov	r3, r2
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	4413      	add	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3350      	adds	r3, #80	@ 0x50
 800a85e:	443b      	add	r3, r7
 800a860:	3b3c      	subs	r3, #60	@ 0x3c
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4299      	cmp	r1, r3
 800a866:	d133      	bne.n	800a8d0 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6859      	ldr	r1, [r3, #4]
 800a86c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a870:	4613      	mov	r3, r2
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	4413      	add	r3, r2
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	3350      	adds	r3, #80	@ 0x50
 800a87a:	443b      	add	r3, r7
 800a87c:	3b38      	subs	r3, #56	@ 0x38
 800a87e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a880:	4299      	cmp	r1, r3
 800a882:	d125      	bne.n	800a8d0 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	68d9      	ldr	r1, [r3, #12]
 800a888:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	3350      	adds	r3, #80	@ 0x50
 800a896:	443b      	add	r3, r7
 800a898:	3b30      	subs	r3, #48	@ 0x30
 800a89a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a89c:	4299      	cmp	r1, r3
 800a89e:	d117      	bne.n	800a8d0 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6919      	ldr	r1, [r3, #16]
 800a8a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	4413      	add	r3, r2
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	3350      	adds	r3, #80	@ 0x50
 800a8b2:	443b      	add	r3, r7
 800a8b4:	3b2c      	subs	r3, #44	@ 0x2c
 800a8b6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	d109      	bne.n	800a8d0 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a8bc:	4b03      	ldr	r3, [pc, #12]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a02      	ldr	r2, [pc, #8]	@ (800a8cc <HAL_OSPIM_Config+0x510>)
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	e0ce      	b.n	800aa68 <HAL_OSPIM_Config+0x6ac>
 800a8ca:	bf00      	nop
 800a8cc:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a8d0:	49bb      	ldr	r1, [pc, #748]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a8d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4413      	add	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	3350      	adds	r3, #80	@ 0x50
 800a8e0:	443b      	add	r3, r7
 800a8e2:	3b3c      	subs	r3, #60	@ 0x3c
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	6859      	ldr	r1, [r3, #4]
 800a8ee:	48b4      	ldr	r0, [pc, #720]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a8f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	4413      	add	r3, r2
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	3350      	adds	r3, #80	@ 0x50
 800a8fe:	443b      	add	r3, r7
 800a900:	3b3c      	subs	r3, #60	@ 0x3c
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3b01      	subs	r3, #1
 800a906:	f021 0201 	bic.w	r2, r1, #1
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4403      	add	r3, r0
 800a90e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a910:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a914:	4613      	mov	r3, r2
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	4413      	add	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	3350      	adds	r3, #80	@ 0x50
 800a91e:	443b      	add	r3, r7
 800a920:	3b38      	subs	r3, #56	@ 0x38
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d01f      	beq.n	800a968 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a928:	49a5      	ldr	r1, [pc, #660]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a92a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a92e:	4613      	mov	r3, r2
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	3350      	adds	r3, #80	@ 0x50
 800a938:	443b      	add	r3, r7
 800a93a:	3b38      	subs	r3, #56	@ 0x38
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3b01      	subs	r3, #1
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	6859      	ldr	r1, [r3, #4]
 800a946:	489e      	ldr	r0, [pc, #632]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a948:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a94c:	4613      	mov	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	3350      	adds	r3, #80	@ 0x50
 800a956:	443b      	add	r3, r7
 800a958:	3b38      	subs	r3, #56	@ 0x38
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	f021 0210 	bic.w	r2, r1, #16
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4403      	add	r3, r0
 800a966:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a968:	4995      	ldr	r1, [pc, #596]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a96a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	3350      	adds	r3, #80	@ 0x50
 800a978:	443b      	add	r3, r7
 800a97a:	3b34      	subs	r3, #52	@ 0x34
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3b01      	subs	r3, #1
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	6859      	ldr	r1, [r3, #4]
 800a986:	488e      	ldr	r0, [pc, #568]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a988:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a98c:	4613      	mov	r3, r2
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	4413      	add	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	3350      	adds	r3, #80	@ 0x50
 800a996:	443b      	add	r3, r7
 800a998:	3b34      	subs	r3, #52	@ 0x34
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4403      	add	r3, r0
 800a9a6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a9a8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	4413      	add	r3, r2
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	3350      	adds	r3, #80	@ 0x50
 800a9b6:	443b      	add	r3, r7
 800a9b8:	3b30      	subs	r3, #48	@ 0x30
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d023      	beq.n	800aa08 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a9c0:	497f      	ldr	r1, [pc, #508]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a9c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	3350      	adds	r3, #80	@ 0x50
 800a9d0:	443b      	add	r3, r7
 800a9d2:	3b30      	subs	r3, #48	@ 0x30
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	4877      	ldr	r0, [pc, #476]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800a9e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	3350      	adds	r3, #80	@ 0x50
 800a9f2:	443b      	add	r3, r7
 800a9f4:	3b30      	subs	r3, #48	@ 0x30
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4403      	add	r3, r0
 800aa06:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aa08:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	4413      	add	r3, r2
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	3350      	adds	r3, #80	@ 0x50
 800aa16:	443b      	add	r3, r7
 800aa18:	3b2c      	subs	r3, #44	@ 0x2c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d023      	beq.n	800aa68 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aa20:	4967      	ldr	r1, [pc, #412]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aa22:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa26:	4613      	mov	r3, r2
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	4413      	add	r3, r2
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	3350      	adds	r3, #80	@ 0x50
 800aa30:	443b      	add	r3, r7
 800aa32:	3b2c      	subs	r3, #44	@ 0x2c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	440b      	add	r3, r1
 800aa40:	6859      	ldr	r1, [r3, #4]
 800aa42:	485f      	ldr	r0, [pc, #380]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aa44:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa48:	4613      	mov	r3, r2
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	4413      	add	r3, r2
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	3350      	adds	r3, #80	@ 0x50
 800aa52:	443b      	add	r3, r7
 800aa54:	3b2c      	subs	r3, #44	@ 0x2c
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4403      	add	r3, r0
 800aa66:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800aa68:	4a55      	ldr	r2, [pc, #340]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa7c:	025b      	lsls	r3, r3, #9
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	494f      	ldr	r1, [pc, #316]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	440b      	add	r3, r1
 800aa90:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	1e5a      	subs	r2, r3, #1
 800aa98:	4b49      	ldr	r3, [pc, #292]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d90a      	bls.n	800aaba <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800aaa4:	4b46      	ldr	r3, [pc, #280]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	4942      	ldr	r1, [pc, #264]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800aaba:	4b41      	ldr	r3, [pc, #260]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 809a 	beq.w	800abfc <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800aac8:	4a3d      	ldr	r2, [pc, #244]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3b01      	subs	r3, #1
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f023 0203 	bic.w	r2, r3, #3
 800aada:	4939      	ldr	r1, [pc, #228]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d011      	beq.n	800ab18 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800aaf4:	4a32      	ldr	r2, [pc, #200]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab06:	492e      	ldr	r1, [pc, #184]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	f042 0210 	orr.w	r2, r2, #16
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	440b      	add	r3, r1
 800ab16:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d016      	beq.n	800ab52 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ab24:	4a26      	ldr	r2, [pc, #152]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800ab3a:	4921      	ldr	r1, [pc, #132]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	605a      	str	r2, [r3, #4]
 800ab50:	e019      	b.n	800ab86 <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d015      	beq.n	800ab86 <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ab5a:	4a19      	ldr	r2, [pc, #100]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800ab70:	4913      	ldr	r1, [pc, #76]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	3b01      	subs	r3, #1
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d018      	beq.n	800abc4 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ab92:	4a0b      	ldr	r2, [pc, #44]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800aba8:	4905      	ldr	r1, [pc, #20]	@ (800abc0 <HAL_OSPIM_Config+0x804>)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	3b01      	subs	r3, #1
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	e0c5      	b.n	800ad4c <HAL_OSPIM_Config+0x990>
 800abc0:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 80bf 	beq.w	800ad4c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800abce:	4a6e      	ldr	r2, [pc, #440]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800abe4:	4968      	ldr	r1, [pc, #416]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	3b01      	subs	r3, #1
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	440b      	add	r3, r1
 800abf8:	605a      	str	r2, [r3, #4]
 800abfa:	e0a7      	b.n	800ad4c <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800abfc:	4a62      	ldr	r2, [pc, #392]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f023 0203 	bic.w	r2, r3, #3
 800ac0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	431a      	orrs	r2, r3
 800ac14:	495c      	ldr	r1, [pc, #368]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	f042 0201 	orr.w	r2, r2, #1
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d014      	beq.n	800ac58 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800ac2e:	4a56      	ldr	r2, [pc, #344]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ac40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac42:	015b      	lsls	r3, r3, #5
 800ac44:	431a      	orrs	r2, r3
 800ac46:	4950      	ldr	r1, [pc, #320]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	f042 0210 	orr.w	r2, r2, #16
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	440b      	add	r3, r1
 800ac56:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d019      	beq.n	800ac98 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ac64:	4a48      	ldr	r2, [pc, #288]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800ac7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac7c:	049b      	lsls	r3, r3, #18
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	4941      	ldr	r1, [pc, #260]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	e01c      	b.n	800acd2 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d018      	beq.n	800acd2 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aca0:	4a39      	ldr	r2, [pc, #228]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800acb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acb8:	069b      	lsls	r3, r3, #26
 800acba:	431a      	orrs	r2, r3
 800acbc:	4932      	ldr	r1, [pc, #200]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d019      	beq.n	800ad12 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800acde:	4a2a      	ldr	r2, [pc, #168]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800acf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acf6:	049b      	lsls	r3, r3, #18
 800acf8:	431a      	orrs	r2, r3
 800acfa:	4923      	ldr	r1, [pc, #140]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	605a      	str	r2, [r3, #4]
 800ad10:	e01c      	b.n	800ad4c <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d018      	beq.n	800ad4c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ad1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800ad30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad32:	069b      	lsls	r3, r3, #26
 800ad34:	431a      	orrs	r2, r3
 800ad36:	4914      	ldr	r1, [pc, #80]	@ (800ad88 <HAL_OSPIM_Config+0x9cc>)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	440b      	add	r3, r1
 800ad4a:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800ad4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800ad58:	4b0c      	ldr	r3, [pc, #48]	@ (800ad8c <HAL_OSPIM_Config+0x9d0>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad8c <HAL_OSPIM_Config+0x9d0>)
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800ad64:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ad68:	f003 0302 	and.w	r3, r3, #2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800ad70:	4b07      	ldr	r3, [pc, #28]	@ (800ad90 <HAL_OSPIM_Config+0x9d4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a06      	ldr	r2, [pc, #24]	@ (800ad90 <HAL_OSPIM_Config+0x9d4>)
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800ad7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3750      	adds	r7, #80	@ 0x50
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	5200b400 	.word	0x5200b400
 800ad8c:	52005000 	.word	0x52005000
 800ad90:	5200a000 	.word	0x5200a000

0800ad94 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	4613      	mov	r3, r2
 800ada2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800ada4:	e01a      	b.n	800addc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adac:	d016      	beq.n	800addc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adae:	f7fa fa15 	bl	80051dc <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10b      	bne.n	800addc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adca:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800add0:	f043 0201 	orr.w	r2, r3, #1
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e00e      	b.n	800adfa <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6a1a      	ldr	r2, [r3, #32]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4013      	ands	r3, r2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bf14      	ite	ne
 800adea:	2301      	movne	r3, #1
 800adec:	2300      	moveq	r3, #0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d1d6      	bne.n	800ada6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b089      	sub	sp, #36	@ 0x24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae20:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d114      	bne.n	800ae72 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800ae50:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ae5a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800ae64:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e02c      	b.n	800aecc <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d114      	bne.n	800aea4 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800ae82:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ae8c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae96:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e013      	b.n	800aecc <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800aeac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800aeb6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800aec0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800aeca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aed4:	431a      	orrs	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d012      	beq.n	800af08 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefa:	4319      	orrs	r1, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af00:	430b      	orrs	r3, r1
 800af02:	431a      	orrs	r2, r3
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f023 021f 	bic.w	r2, r3, #31
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af14:	431a      	orrs	r2, r3
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d009      	beq.n	800af36 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3a01      	subs	r2, #1
 800af34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 8095 	beq.w	800b06a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d053      	beq.n	800aff0 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01e      	beq.n	800af8e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b64      	ldr	r3, [pc, #400]	@ (800b0e8 <OSPI_ConfigCmd+0x2e4>)
 800af56:	4013      	ands	r3, r2
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	68d1      	ldr	r1, [r2, #12]
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	6952      	ldr	r2, [r2, #20]
 800af60:	4311      	orrs	r1, r2
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	6912      	ldr	r2, [r2, #16]
 800af66:	4311      	orrs	r1, r2
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	69d2      	ldr	r2, [r2, #28]
 800af6c:	4311      	orrs	r1, r2
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800af72:	4311      	orrs	r1, r2
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	6a12      	ldr	r2, [r2, #32]
 800af78:	4311      	orrs	r1, r2
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800af7e:	4311      	orrs	r1, r2
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800af84:	430a      	orrs	r2, r1
 800af86:	431a      	orrs	r2, r3
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e026      	b.n	800afdc <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b56      	ldr	r3, [pc, #344]	@ (800b0ec <OSPI_ConfigCmd+0x2e8>)
 800af94:	4013      	ands	r3, r2
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	68d1      	ldr	r1, [r2, #12]
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	6952      	ldr	r2, [r2, #20]
 800af9e:	4311      	orrs	r1, r2
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	6912      	ldr	r2, [r2, #16]
 800afa4:	4311      	orrs	r1, r2
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	69d2      	ldr	r2, [r2, #28]
 800afaa:	4311      	orrs	r1, r2
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800afb0:	4311      	orrs	r1, r2
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	6a12      	ldr	r2, [r2, #32]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	431a      	orrs	r2, r3
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afc6:	d109      	bne.n	800afdc <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d105      	bne.n	800afdc <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	6992      	ldr	r2, [r2, #24]
 800afec:	649a      	str	r2, [r3, #72]	@ 0x48
 800afee:	e074      	b.n	800b0da <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d015      	beq.n	800b024 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	4b3c      	ldr	r3, [pc, #240]	@ (800b0f0 <OSPI_ConfigCmd+0x2ec>)
 800affe:	4013      	ands	r3, r2
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	68d1      	ldr	r1, [r2, #12]
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	6952      	ldr	r2, [r2, #20]
 800b008:	4311      	orrs	r1, r2
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	6912      	ldr	r2, [r2, #16]
 800b00e:	4311      	orrs	r1, r2
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b014:	4311      	orrs	r1, r2
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b01a:	430a      	orrs	r2, r1
 800b01c:	431a      	orrs	r2, r3
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e01d      	b.n	800b060 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	68d9      	ldr	r1, [r3, #12]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	4319      	orrs	r1, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	430b      	orrs	r3, r1
 800b03c:	431a      	orrs	r2, r3
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b04a:	d109      	bne.n	800b060 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b050:	2b08      	cmp	r3, #8
 800b052:	d105      	bne.n	800b060 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	e037      	b.n	800b0da <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d02e      	beq.n	800b0d0 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b076:	2b00      	cmp	r3, #0
 800b078:	d015      	beq.n	800b0a6 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f4 <OSPI_ConfigCmd+0x2f0>)
 800b080:	4013      	ands	r3, r2
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	69d1      	ldr	r1, [r2, #28]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b08a:	4311      	orrs	r1, r2
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	6a12      	ldr	r2, [r2, #32]
 800b090:	4311      	orrs	r1, r2
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b096:	4311      	orrs	r1, r2
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b09c:	430a      	orrs	r2, r1
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e00e      	b.n	800b0c4 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	69d9      	ldr	r1, [r3, #28]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b6:	4319      	orrs	r1, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	6992      	ldr	r2, [r2, #24]
 800b0cc:	649a      	str	r2, [r3, #72]	@ 0x48
 800b0ce:	e004      	b.n	800b0da <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2208      	movs	r2, #8
 800b0d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800b0da:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3724      	adds	r7, #36	@ 0x24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	f0ffc0c0 	.word	0xf0ffc0c0
 800b0ec:	ffffc0c0 	.word	0xffffc0c0
 800b0f0:	f0ffffc0 	.word	0xf0ffffc0
 800b0f4:	f0ffc0ff 	.word	0xf0ffc0ff

0800b0f8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <OSPIM_GetConfig+0x26>
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d802      	bhi.n	800b11e <OSPIM_GetConfig+0x26>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]
 800b122:	e098      	b.n	800b256 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2200      	movs	r2, #0
 800b128:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2200      	movs	r2, #0
 800b12e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2200      	movs	r2, #0
 800b134:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2200      	movs	r2, #0
 800b13a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2200      	movs	r2, #0
 800b140:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d10b      	bne.n	800b160 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b148:	4b46      	ldr	r3, [pc, #280]	@ (800b264 <OSPIM_GetConfig+0x16c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b154:	4b44      	ldr	r3, [pc, #272]	@ (800b268 <OSPIM_GetConfig+0x170>)
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	e002      	b.n	800b160 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b15a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b15e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e074      	b.n	800b250 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b166:	4a3f      	ldr	r2, [pc, #252]	@ (800b264 <OSPIM_GetConfig+0x16c>)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00a      	beq.n	800b192 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4053      	eors	r3, r2
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4053      	eors	r3, r2
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00a      	beq.n	800b1d2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	4053      	eors	r3, r2
 800b1c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d103      	bne.n	800b1d2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d018      	beq.n	800b20e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	4053      	eors	r3, r2
 800b1e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d111      	bne.n	800b20e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d106      	bne.n	800b202 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	60da      	str	r2, [r3, #12]
 800b200:	e005      	b.n	800b20e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d018      	beq.n	800b24a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	4053      	eors	r3, r2
 800b21e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d111      	bne.n	800b24a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d106      	bne.n	800b23e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3301      	adds	r3, #1
 800b234:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	611a      	str	r2, [r3, #16]
 800b23c:	e005      	b.n	800b24a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d987      	bls.n	800b166 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b256:	7dfb      	ldrb	r3, [r7, #23]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	5200b400 	.word	0x5200b400
 800b268:	04040222 	.word	0x04040222

0800b26c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b274:	4b19      	ldr	r3, [pc, #100]	@ (800b2dc <HAL_PWREx_ConfigSupply+0x70>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d00a      	beq.n	800b296 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b280:	4b16      	ldr	r3, [pc, #88]	@ (800b2dc <HAL_PWREx_ConfigSupply+0x70>)
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	f003 0307 	and.w	r3, r3, #7
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d001      	beq.n	800b292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e01f      	b.n	800b2d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	e01d      	b.n	800b2d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b296:	4b11      	ldr	r3, [pc, #68]	@ (800b2dc <HAL_PWREx_ConfigSupply+0x70>)
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f023 0207 	bic.w	r2, r3, #7
 800b29e:	490f      	ldr	r1, [pc, #60]	@ (800b2dc <HAL_PWREx_ConfigSupply+0x70>)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b2a6:	f7f9 ff99 	bl	80051dc <HAL_GetTick>
 800b2aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b2ac:	e009      	b.n	800b2c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b2ae:	f7f9 ff95 	bl	80051dc <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2bc:	d901      	bls.n	800b2c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e007      	b.n	800b2d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b2c2:	4b06      	ldr	r3, [pc, #24]	@ (800b2dc <HAL_PWREx_ConfigSupply+0x70>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2ce:	d1ee      	bne.n	800b2ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	58024800 	.word	0x58024800

0800b2e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08c      	sub	sp, #48	@ 0x30
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e3c8      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 8087 	beq.w	800b40e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b300:	4b88      	ldr	r3, [pc, #544]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b30a:	4b86      	ldr	r3, [pc, #536]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	2b10      	cmp	r3, #16
 800b314:	d007      	beq.n	800b326 <HAL_RCC_OscConfig+0x46>
 800b316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b318:	2b18      	cmp	r3, #24
 800b31a:	d110      	bne.n	800b33e <HAL_RCC_OscConfig+0x5e>
 800b31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b02      	cmp	r3, #2
 800b324:	d10b      	bne.n	800b33e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b326:	4b7f      	ldr	r3, [pc, #508]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d06c      	beq.n	800b40c <HAL_RCC_OscConfig+0x12c>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d168      	bne.n	800b40c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e3a2      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b346:	d106      	bne.n	800b356 <HAL_RCC_OscConfig+0x76>
 800b348:	4b76      	ldr	r3, [pc, #472]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a75      	ldr	r2, [pc, #468]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b34e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	e02e      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd4>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10c      	bne.n	800b378 <HAL_RCC_OscConfig+0x98>
 800b35e:	4b71      	ldr	r3, [pc, #452]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a70      	ldr	r2, [pc, #448]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b368:	6013      	str	r3, [r2, #0]
 800b36a:	4b6e      	ldr	r3, [pc, #440]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a6d      	ldr	r2, [pc, #436]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	e01d      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd4>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b380:	d10c      	bne.n	800b39c <HAL_RCC_OscConfig+0xbc>
 800b382:	4b68      	ldr	r3, [pc, #416]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a67      	ldr	r2, [pc, #412]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4b65      	ldr	r3, [pc, #404]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a64      	ldr	r2, [pc, #400]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	e00b      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd4>
 800b39c:	4b61      	ldr	r3, [pc, #388]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a60      	ldr	r2, [pc, #384]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b3a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	4b5e      	ldr	r3, [pc, #376]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a5d      	ldr	r2, [pc, #372]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b3ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d013      	beq.n	800b3e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3bc:	f7f9 ff0e 	bl	80051dc <HAL_GetTick>
 800b3c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3c2:	e008      	b.n	800b3d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3c4:	f7f9 ff0a 	bl	80051dc <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b64      	cmp	r3, #100	@ 0x64
 800b3d0:	d901      	bls.n	800b3d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e356      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3d6:	4b53      	ldr	r3, [pc, #332]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0f0      	beq.n	800b3c4 <HAL_RCC_OscConfig+0xe4>
 800b3e2:	e014      	b.n	800b40e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e4:	f7f9 fefa 	bl	80051dc <HAL_GetTick>
 800b3e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3ea:	e008      	b.n	800b3fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ec:	f7f9 fef6 	bl	80051dc <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	2b64      	cmp	r3, #100	@ 0x64
 800b3f8:	d901      	bls.n	800b3fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e342      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3fe:	4b49      	ldr	r3, [pc, #292]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f0      	bne.n	800b3ec <HAL_RCC_OscConfig+0x10c>
 800b40a:	e000      	b.n	800b40e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b40c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 808c 	beq.w	800b534 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b41c:	4b41      	ldr	r3, [pc, #260]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b424:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b426:	4b3f      	ldr	r3, [pc, #252]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d007      	beq.n	800b442 <HAL_RCC_OscConfig+0x162>
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	2b18      	cmp	r3, #24
 800b436:	d137      	bne.n	800b4a8 <HAL_RCC_OscConfig+0x1c8>
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d132      	bne.n	800b4a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b442:	4b38      	ldr	r3, [pc, #224]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <HAL_RCC_OscConfig+0x17a>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e314      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b45a:	4b32      	ldr	r3, [pc, #200]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f023 0219 	bic.w	r2, r3, #25
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	492f      	ldr	r1, [pc, #188]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b468:	4313      	orrs	r3, r2
 800b46a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b46c:	f7f9 feb6 	bl	80051dc <HAL_GetTick>
 800b470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b472:	e008      	b.n	800b486 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b474:	f7f9 feb2 	bl	80051dc <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e2fe      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b486:	4b27      	ldr	r3, [pc, #156]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f0      	beq.n	800b474 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b492:	4b24      	ldr	r3, [pc, #144]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	061b      	lsls	r3, r3, #24
 800b4a0:	4920      	ldr	r1, [pc, #128]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4a6:	e045      	b.n	800b534 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d026      	beq.n	800b4fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f023 0219 	bic.w	r2, r3, #25
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	4919      	ldr	r1, [pc, #100]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c2:	f7f9 fe8b 	bl	80051dc <HAL_GetTick>
 800b4c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4c8:	e008      	b.n	800b4dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4ca:	f7f9 fe87 	bl	80051dc <HAL_GetTick>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d901      	bls.n	800b4dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	e2d3      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4dc:	4b11      	ldr	r3, [pc, #68]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0f0      	beq.n	800b4ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	061b      	lsls	r3, r3, #24
 800b4f6:	490b      	ldr	r1, [pc, #44]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	604b      	str	r3, [r1, #4]
 800b4fc:	e01a      	b.n	800b534 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4fe:	4b09      	ldr	r3, [pc, #36]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a08      	ldr	r2, [pc, #32]	@ (800b524 <HAL_RCC_OscConfig+0x244>)
 800b504:	f023 0301 	bic.w	r3, r3, #1
 800b508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50a:	f7f9 fe67 	bl	80051dc <HAL_GetTick>
 800b50e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b510:	e00a      	b.n	800b528 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b512:	f7f9 fe63 	bl	80051dc <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d903      	bls.n	800b528 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e2af      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
 800b524:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b528:	4b96      	ldr	r3, [pc, #600]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1ee      	bne.n	800b512 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d06a      	beq.n	800b616 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b540:	4b90      	ldr	r3, [pc, #576]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b548:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b54a:	4b8e      	ldr	r3, [pc, #568]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b08      	cmp	r3, #8
 800b554:	d007      	beq.n	800b566 <HAL_RCC_OscConfig+0x286>
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2b18      	cmp	r3, #24
 800b55a:	d11b      	bne.n	800b594 <HAL_RCC_OscConfig+0x2b4>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	2b01      	cmp	r3, #1
 800b564:	d116      	bne.n	800b594 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b566:	4b87      	ldr	r3, [pc, #540]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <HAL_RCC_OscConfig+0x29e>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	2b80      	cmp	r3, #128	@ 0x80
 800b578:	d001      	beq.n	800b57e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e282      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b57e:	4b81      	ldr	r3, [pc, #516]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	061b      	lsls	r3, r3, #24
 800b58c:	497d      	ldr	r1, [pc, #500]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b592:	e040      	b.n	800b616 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d023      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b59c:	4b79      	ldr	r3, [pc, #484]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a78      	ldr	r2, [pc, #480]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a8:	f7f9 fe18 	bl	80051dc <HAL_GetTick>
 800b5ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b5b0:	f7f9 fe14 	bl	80051dc <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e260      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5c2:	4b70      	ldr	r3, [pc, #448]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f0      	beq.n	800b5b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5ce:	4b6d      	ldr	r3, [pc, #436]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	061b      	lsls	r3, r3, #24
 800b5dc:	4969      	ldr	r1, [pc, #420]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60cb      	str	r3, [r1, #12]
 800b5e2:	e018      	b.n	800b616 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b5e4:	4b67      	ldr	r3, [pc, #412]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a66      	ldr	r2, [pc, #408]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f0:	f7f9 fdf4 	bl	80051dc <HAL_GetTick>
 800b5f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b5f6:	e008      	b.n	800b60a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b5f8:	f7f9 fdf0 	bl	80051dc <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	2b02      	cmp	r3, #2
 800b604:	d901      	bls.n	800b60a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e23c      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b60a:	4b5e      	ldr	r3, [pc, #376]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1f0      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0308 	and.w	r3, r3, #8
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d036      	beq.n	800b690 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d019      	beq.n	800b65e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b62a:	4b56      	ldr	r3, [pc, #344]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b62e:	4a55      	ldr	r2, [pc, #340]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b630:	f043 0301 	orr.w	r3, r3, #1
 800b634:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b636:	f7f9 fdd1 	bl	80051dc <HAL_GetTick>
 800b63a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b63c:	e008      	b.n	800b650 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b63e:	f7f9 fdcd 	bl	80051dc <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d901      	bls.n	800b650 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e219      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b650:	4b4c      	ldr	r3, [pc, #304]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0f0      	beq.n	800b63e <HAL_RCC_OscConfig+0x35e>
 800b65c:	e018      	b.n	800b690 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b65e:	4b49      	ldr	r3, [pc, #292]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b662:	4a48      	ldr	r2, [pc, #288]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b664:	f023 0301 	bic.w	r3, r3, #1
 800b668:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b66a:	f7f9 fdb7 	bl	80051dc <HAL_GetTick>
 800b66e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b670:	e008      	b.n	800b684 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b672:	f7f9 fdb3 	bl	80051dc <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d901      	bls.n	800b684 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e1ff      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b684:	4b3f      	ldr	r3, [pc, #252]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f0      	bne.n	800b672 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d036      	beq.n	800b70a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d019      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6a4:	4b37      	ldr	r3, [pc, #220]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a36      	ldr	r2, [pc, #216]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b6aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b6ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b6b0:	f7f9 fd94 	bl	80051dc <HAL_GetTick>
 800b6b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b6b6:	e008      	b.n	800b6ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6b8:	f7f9 fd90 	bl	80051dc <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d901      	bls.n	800b6ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e1dc      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b6ca:	4b2e      	ldr	r3, [pc, #184]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f0      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x3d8>
 800b6d6:	e018      	b.n	800b70a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6d8:	4b2a      	ldr	r3, [pc, #168]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a29      	ldr	r2, [pc, #164]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b6e4:	f7f9 fd7a 	bl	80051dc <HAL_GetTick>
 800b6e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b6ea:	e008      	b.n	800b6fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6ec:	f7f9 fd76 	bl	80051dc <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d901      	bls.n	800b6fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e1c2      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b6fe:	4b21      	ldr	r3, [pc, #132]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f0      	bne.n	800b6ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0304 	and.w	r3, r3, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 8086 	beq.w	800b824 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b718:	4b1b      	ldr	r3, [pc, #108]	@ (800b788 <HAL_RCC_OscConfig+0x4a8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a1a      	ldr	r2, [pc, #104]	@ (800b788 <HAL_RCC_OscConfig+0x4a8>)
 800b71e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b724:	f7f9 fd5a 	bl	80051dc <HAL_GetTick>
 800b728:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b72a:	e008      	b.n	800b73e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b72c:	f7f9 fd56 	bl	80051dc <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	2b64      	cmp	r3, #100	@ 0x64
 800b738:	d901      	bls.n	800b73e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e1a2      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b73e:	4b12      	ldr	r3, [pc, #72]	@ (800b788 <HAL_RCC_OscConfig+0x4a8>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0f0      	beq.n	800b72c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d106      	bne.n	800b760 <HAL_RCC_OscConfig+0x480>
 800b752:	4b0c      	ldr	r3, [pc, #48]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b756:	4a0b      	ldr	r2, [pc, #44]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b758:	f043 0301 	orr.w	r3, r3, #1
 800b75c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b75e:	e032      	b.n	800b7c6 <HAL_RCC_OscConfig+0x4e6>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d111      	bne.n	800b78c <HAL_RCC_OscConfig+0x4ac>
 800b768:	4b06      	ldr	r3, [pc, #24]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b76a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b76c:	4a05      	ldr	r2, [pc, #20]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b76e:	f023 0301 	bic.w	r3, r3, #1
 800b772:	6713      	str	r3, [r2, #112]	@ 0x70
 800b774:	4b03      	ldr	r3, [pc, #12]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b778:	4a02      	ldr	r2, [pc, #8]	@ (800b784 <HAL_RCC_OscConfig+0x4a4>)
 800b77a:	f023 0304 	bic.w	r3, r3, #4
 800b77e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b780:	e021      	b.n	800b7c6 <HAL_RCC_OscConfig+0x4e6>
 800b782:	bf00      	nop
 800b784:	58024400 	.word	0x58024400
 800b788:	58024800 	.word	0x58024800
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	2b05      	cmp	r3, #5
 800b792:	d10c      	bne.n	800b7ae <HAL_RCC_OscConfig+0x4ce>
 800b794:	4b83      	ldr	r3, [pc, #524]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b798:	4a82      	ldr	r2, [pc, #520]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b79a:	f043 0304 	orr.w	r3, r3, #4
 800b79e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7a0:	4b80      	ldr	r3, [pc, #512]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7a4:	4a7f      	ldr	r2, [pc, #508]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7a6:	f043 0301 	orr.w	r3, r3, #1
 800b7aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7ac:	e00b      	b.n	800b7c6 <HAL_RCC_OscConfig+0x4e6>
 800b7ae:	4b7d      	ldr	r3, [pc, #500]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7b2:	4a7c      	ldr	r2, [pc, #496]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7b4:	f023 0301 	bic.w	r3, r3, #1
 800b7b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7ba:	4b7a      	ldr	r3, [pc, #488]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7be:	4a79      	ldr	r2, [pc, #484]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7c0:	f023 0304 	bic.w	r3, r3, #4
 800b7c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d015      	beq.n	800b7fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ce:	f7f9 fd05 	bl	80051dc <HAL_GetTick>
 800b7d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7d4:	e00a      	b.n	800b7ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7d6:	f7f9 fd01 	bl	80051dc <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d901      	bls.n	800b7ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e14b      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7f0:	f003 0302 	and.w	r3, r3, #2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0ee      	beq.n	800b7d6 <HAL_RCC_OscConfig+0x4f6>
 800b7f8:	e014      	b.n	800b824 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7fa:	f7f9 fcef 	bl	80051dc <HAL_GetTick>
 800b7fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b800:	e00a      	b.n	800b818 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b802:	f7f9 fceb 	bl	80051dc <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b810:	4293      	cmp	r3, r2
 800b812:	d901      	bls.n	800b818 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e135      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b818:	4b62      	ldr	r3, [pc, #392]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b81a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1ee      	bne.n	800b802 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 812a 	beq.w	800ba82 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b82e:	4b5d      	ldr	r3, [pc, #372]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b836:	2b18      	cmp	r3, #24
 800b838:	f000 80ba 	beq.w	800b9b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	2b02      	cmp	r3, #2
 800b842:	f040 8095 	bne.w	800b970 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b846:	4b57      	ldr	r3, [pc, #348]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a56      	ldr	r2, [pc, #344]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b84c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b852:	f7f9 fcc3 	bl	80051dc <HAL_GetTick>
 800b856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b858:	e008      	b.n	800b86c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b85a:	f7f9 fcbf 	bl	80051dc <HAL_GetTick>
 800b85e:	4602      	mov	r2, r0
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	2b02      	cmp	r3, #2
 800b866:	d901      	bls.n	800b86c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e10b      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b86c:	4b4d      	ldr	r3, [pc, #308]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1f0      	bne.n	800b85a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b878:	4b4a      	ldr	r3, [pc, #296]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b87a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b87c:	4b4a      	ldr	r3, [pc, #296]	@ (800b9a8 <HAL_RCC_OscConfig+0x6c8>)
 800b87e:	4013      	ands	r3, r2
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b888:	0112      	lsls	r2, r2, #4
 800b88a:	430a      	orrs	r2, r1
 800b88c:	4945      	ldr	r1, [pc, #276]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	628b      	str	r3, [r1, #40]	@ 0x28
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b896:	3b01      	subs	r3, #1
 800b898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	025b      	lsls	r3, r3, #9
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	061b      	lsls	r3, r3, #24
 800b8be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b8c2:	4938      	ldr	r1, [pc, #224]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b8c8:	4b36      	ldr	r3, [pc, #216]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	4a35      	ldr	r2, [pc, #212]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8ce:	f023 0301 	bic.w	r3, r3, #1
 800b8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b8d4:	4b33      	ldr	r3, [pc, #204]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8d8:	4b34      	ldr	r3, [pc, #208]	@ (800b9ac <HAL_RCC_OscConfig+0x6cc>)
 800b8da:	4013      	ands	r3, r2
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b8e0:	00d2      	lsls	r2, r2, #3
 800b8e2:	4930      	ldr	r1, [pc, #192]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	f023 020c 	bic.w	r2, r3, #12
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f4:	492b      	ldr	r1, [pc, #172]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	f023 0202 	bic.w	r2, r3, #2
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b906:	4927      	ldr	r1, [pc, #156]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b908:	4313      	orrs	r3, r2
 800b90a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b90c:	4b25      	ldr	r3, [pc, #148]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b910:	4a24      	ldr	r2, [pc, #144]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b918:	4b22      	ldr	r3, [pc, #136]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91c:	4a21      	ldr	r2, [pc, #132]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b91e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b924:	4b1f      	ldr	r3, [pc, #124]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b92a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b930:	4b1c      	ldr	r3, [pc, #112]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b934:	4a1b      	ldr	r2, [pc, #108]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b93c:	4b19      	ldr	r3, [pc, #100]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a18      	ldr	r2, [pc, #96]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b948:	f7f9 fc48 	bl	80051dc <HAL_GetTick>
 800b94c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b94e:	e008      	b.n	800b962 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b950:	f7f9 fc44 	bl	80051dc <HAL_GetTick>
 800b954:	4602      	mov	r2, r0
 800b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d901      	bls.n	800b962 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e090      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b962:	4b10      	ldr	r3, [pc, #64]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0f0      	beq.n	800b950 <HAL_RCC_OscConfig+0x670>
 800b96e:	e088      	b.n	800ba82 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b970:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a0b      	ldr	r2, [pc, #44]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b97a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b97c:	f7f9 fc2e 	bl	80051dc <HAL_GetTick>
 800b980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b982:	e008      	b.n	800b996 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b984:	f7f9 fc2a 	bl	80051dc <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d901      	bls.n	800b996 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e076      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b996:	4b03      	ldr	r3, [pc, #12]	@ (800b9a4 <HAL_RCC_OscConfig+0x6c4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1f0      	bne.n	800b984 <HAL_RCC_OscConfig+0x6a4>
 800b9a2:	e06e      	b.n	800ba82 <HAL_RCC_OscConfig+0x7a2>
 800b9a4:	58024400 	.word	0x58024400
 800b9a8:	fffffc0c 	.word	0xfffffc0c
 800b9ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b9b0:	4b36      	ldr	r3, [pc, #216]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b9b6:	4b35      	ldr	r3, [pc, #212]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d031      	beq.n	800ba28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f003 0203 	and.w	r2, r3, #3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d12a      	bne.n	800ba28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	091b      	lsrs	r3, r3, #4
 800b9d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d122      	bne.n	800ba28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d11a      	bne.n	800ba28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	0a5b      	lsrs	r3, r3, #9
 800b9f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d111      	bne.n	800ba28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	0c1b      	lsrs	r3, r3, #16
 800ba08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d108      	bne.n	800ba28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	0e1b      	lsrs	r3, r3, #24
 800ba1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d001      	beq.n	800ba2c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e02b      	b.n	800ba84 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ba2c:	4b17      	ldr	r3, [pc, #92]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba30:	08db      	lsrs	r3, r3, #3
 800ba32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d01f      	beq.n	800ba82 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ba42:	4b12      	ldr	r3, [pc, #72]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba46:	4a11      	ldr	r2, [pc, #68]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba48:	f023 0301 	bic.w	r3, r3, #1
 800ba4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ba4e:	f7f9 fbc5 	bl	80051dc <HAL_GetTick>
 800ba52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ba54:	bf00      	nop
 800ba56:	f7f9 fbc1 	bl	80051dc <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d0f9      	beq.n	800ba56 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ba62:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba66:	4b0a      	ldr	r3, [pc, #40]	@ (800ba90 <HAL_RCC_OscConfig+0x7b0>)
 800ba68:	4013      	ands	r3, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ba6e:	00d2      	lsls	r2, r2, #3
 800ba70:	4906      	ldr	r1, [pc, #24]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ba76:	4b05      	ldr	r3, [pc, #20]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7a:	4a04      	ldr	r2, [pc, #16]	@ (800ba8c <HAL_RCC_OscConfig+0x7ac>)
 800ba7c:	f043 0301 	orr.w	r3, r3, #1
 800ba80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3730      	adds	r7, #48	@ 0x30
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	58024400 	.word	0x58024400
 800ba90:	ffff0007 	.word	0xffff0007

0800ba94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e19c      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800baa8:	4b8a      	ldr	r3, [pc, #552]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 030f 	and.w	r3, r3, #15
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d910      	bls.n	800bad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bab6:	4b87      	ldr	r3, [pc, #540]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f023 020f 	bic.w	r2, r3, #15
 800babe:	4985      	ldr	r1, [pc, #532]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bac6:	4b83      	ldr	r3, [pc, #524]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d001      	beq.n	800bad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e184      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0304 	and.w	r3, r3, #4
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691a      	ldr	r2, [r3, #16]
 800bae8:	4b7b      	ldr	r3, [pc, #492]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d908      	bls.n	800bb06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800baf4:	4b78      	ldr	r3, [pc, #480]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	4975      	ldr	r1, [pc, #468]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb02:	4313      	orrs	r3, r2
 800bb04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 0308 	and.w	r3, r3, #8
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	4b70      	ldr	r3, [pc, #448]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d908      	bls.n	800bb34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb22:	4b6d      	ldr	r3, [pc, #436]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	496a      	ldr	r1, [pc, #424]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0310 	and.w	r3, r3, #16
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699a      	ldr	r2, [r3, #24]
 800bb44:	4b64      	ldr	r3, [pc, #400]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d908      	bls.n	800bb62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb50:	4b61      	ldr	r3, [pc, #388]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	495e      	ldr	r1, [pc, #376]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d010      	beq.n	800bb90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	69da      	ldr	r2, [r3, #28]
 800bb72:	4b59      	ldr	r3, [pc, #356]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d908      	bls.n	800bb90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bb7e:	4b56      	ldr	r3, [pc, #344]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	4953      	ldr	r1, [pc, #332]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d010      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	4b4d      	ldr	r3, [pc, #308]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d908      	bls.n	800bbbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbac:	4b4a      	ldr	r3, [pc, #296]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	f023 020f 	bic.w	r2, r3, #15
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	4947      	ldr	r1, [pc, #284]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d055      	beq.n	800bc76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bbca:	4b43      	ldr	r3, [pc, #268]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	4940      	ldr	r1, [pc, #256]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d107      	bne.n	800bbf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbe4:	4b3c      	ldr	r3, [pc, #240]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d121      	bne.n	800bc34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e0f6      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d107      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbfc:	4b36      	ldr	r3, [pc, #216]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d115      	bne.n	800bc34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e0ea      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d107      	bne.n	800bc24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc14:	4b30      	ldr	r3, [pc, #192]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d109      	bne.n	800bc34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e0de      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc24:	4b2c      	ldr	r3, [pc, #176]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e0d6      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc34:	4b28      	ldr	r3, [pc, #160]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	f023 0207 	bic.w	r2, r3, #7
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	4925      	ldr	r1, [pc, #148]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc46:	f7f9 fac9 	bl	80051dc <HAL_GetTick>
 800bc4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc4c:	e00a      	b.n	800bc64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc4e:	f7f9 fac5 	bl	80051dc <HAL_GetTick>
 800bc52:	4602      	mov	r2, r0
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d901      	bls.n	800bc64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e0be      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc64:	4b1c      	ldr	r3, [pc, #112]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d1eb      	bne.n	800bc4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d010      	beq.n	800bca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68da      	ldr	r2, [r3, #12]
 800bc86:	4b14      	ldr	r3, [pc, #80]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	f003 030f 	and.w	r3, r3, #15
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d208      	bcs.n	800bca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc92:	4b11      	ldr	r3, [pc, #68]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	f023 020f 	bic.w	r2, r3, #15
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	490e      	ldr	r1, [pc, #56]	@ (800bcd8 <HAL_RCC_ClockConfig+0x244>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bca4:	4b0b      	ldr	r3, [pc, #44]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 030f 	and.w	r3, r3, #15
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d214      	bcs.n	800bcdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcb2:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f023 020f 	bic.w	r2, r3, #15
 800bcba:	4906      	ldr	r1, [pc, #24]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcc2:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <HAL_RCC_ClockConfig+0x240>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 030f 	and.w	r3, r3, #15
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d005      	beq.n	800bcdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e086      	b.n	800bde2 <HAL_RCC_ClockConfig+0x34e>
 800bcd4:	52002000 	.word	0x52002000
 800bcd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d010      	beq.n	800bd0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691a      	ldr	r2, [r3, #16]
 800bcec:	4b3f      	ldr	r3, [pc, #252]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d208      	bcs.n	800bd0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcf8:	4b3c      	ldr	r3, [pc, #240]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	4939      	ldr	r1, [pc, #228]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 0308 	and.w	r3, r3, #8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695a      	ldr	r2, [r3, #20]
 800bd1a:	4b34      	ldr	r3, [pc, #208]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d208      	bcs.n	800bd38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd26:	4b31      	ldr	r3, [pc, #196]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	492e      	ldr	r1, [pc, #184]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	699a      	ldr	r2, [r3, #24]
 800bd48:	4b28      	ldr	r3, [pc, #160]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d208      	bcs.n	800bd66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd54:	4b25      	ldr	r3, [pc, #148]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	4922      	ldr	r1, [pc, #136]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd62:	4313      	orrs	r3, r2
 800bd64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69da      	ldr	r2, [r3, #28]
 800bd76:	4b1d      	ldr	r3, [pc, #116]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d208      	bcs.n	800bd94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bd82:	4b1a      	ldr	r3, [pc, #104]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	4917      	ldr	r1, [pc, #92]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd94:	f000 f834 	bl	800be00 <HAL_RCC_GetSysClockFreq>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	4b14      	ldr	r3, [pc, #80]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	f003 030f 	and.w	r3, r3, #15
 800bda4:	4912      	ldr	r1, [pc, #72]	@ (800bdf0 <HAL_RCC_ClockConfig+0x35c>)
 800bda6:	5ccb      	ldrb	r3, [r1, r3]
 800bda8:	f003 031f 	and.w	r3, r3, #31
 800bdac:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdec <HAL_RCC_ClockConfig+0x358>)
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	4a0d      	ldr	r2, [pc, #52]	@ (800bdf0 <HAL_RCC_ClockConfig+0x35c>)
 800bdbc:	5cd3      	ldrb	r3, [r2, r3]
 800bdbe:	f003 031f 	and.w	r3, r3, #31
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc8:	4a0a      	ldr	r2, [pc, #40]	@ (800bdf4 <HAL_RCC_ClockConfig+0x360>)
 800bdca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bdcc:	4a0a      	ldr	r2, [pc, #40]	@ (800bdf8 <HAL_RCC_ClockConfig+0x364>)
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <HAL_RCC_ClockConfig+0x368>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f7 fdc2 	bl	8003960 <HAL_InitTick>
 800bddc:	4603      	mov	r3, r0
 800bdde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	58024400 	.word	0x58024400
 800bdf0:	0801ae64 	.word	0x0801ae64
 800bdf4:	24000014 	.word	0x24000014
 800bdf8:	24000010 	.word	0x24000010
 800bdfc:	24000018 	.word	0x24000018

0800be00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	@ 0x24
 800be04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be06:	4bb3      	ldr	r3, [pc, #716]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be0e:	2b18      	cmp	r3, #24
 800be10:	f200 8155 	bhi.w	800c0be <HAL_RCC_GetSysClockFreq+0x2be>
 800be14:	a201      	add	r2, pc, #4	@ (adr r2, 800be1c <HAL_RCC_GetSysClockFreq+0x1c>)
 800be16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1a:	bf00      	nop
 800be1c:	0800be81 	.word	0x0800be81
 800be20:	0800c0bf 	.word	0x0800c0bf
 800be24:	0800c0bf 	.word	0x0800c0bf
 800be28:	0800c0bf 	.word	0x0800c0bf
 800be2c:	0800c0bf 	.word	0x0800c0bf
 800be30:	0800c0bf 	.word	0x0800c0bf
 800be34:	0800c0bf 	.word	0x0800c0bf
 800be38:	0800c0bf 	.word	0x0800c0bf
 800be3c:	0800bea7 	.word	0x0800bea7
 800be40:	0800c0bf 	.word	0x0800c0bf
 800be44:	0800c0bf 	.word	0x0800c0bf
 800be48:	0800c0bf 	.word	0x0800c0bf
 800be4c:	0800c0bf 	.word	0x0800c0bf
 800be50:	0800c0bf 	.word	0x0800c0bf
 800be54:	0800c0bf 	.word	0x0800c0bf
 800be58:	0800c0bf 	.word	0x0800c0bf
 800be5c:	0800bead 	.word	0x0800bead
 800be60:	0800c0bf 	.word	0x0800c0bf
 800be64:	0800c0bf 	.word	0x0800c0bf
 800be68:	0800c0bf 	.word	0x0800c0bf
 800be6c:	0800c0bf 	.word	0x0800c0bf
 800be70:	0800c0bf 	.word	0x0800c0bf
 800be74:	0800c0bf 	.word	0x0800c0bf
 800be78:	0800c0bf 	.word	0x0800c0bf
 800be7c:	0800beb3 	.word	0x0800beb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be80:	4b94      	ldr	r3, [pc, #592]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0320 	and.w	r3, r3, #32
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d009      	beq.n	800bea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8c:	4b91      	ldr	r3, [pc, #580]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	08db      	lsrs	r3, r3, #3
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	4a90      	ldr	r2, [pc, #576]	@ (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be98:	fa22 f303 	lsr.w	r3, r2, r3
 800be9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800be9e:	e111      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bea0:	4b8d      	ldr	r3, [pc, #564]	@ (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bea2:	61bb      	str	r3, [r7, #24]
      break;
 800bea4:	e10e      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bea6:	4b8d      	ldr	r3, [pc, #564]	@ (800c0dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bea8:	61bb      	str	r3, [r7, #24]
      break;
 800beaa:	e10b      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800beac:	4b8c      	ldr	r3, [pc, #560]	@ (800c0e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800beae:	61bb      	str	r3, [r7, #24]
      break;
 800beb0:	e108      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800beb2:	4b88      	ldr	r3, [pc, #544]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bebc:	4b85      	ldr	r3, [pc, #532]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec0:	091b      	lsrs	r3, r3, #4
 800bec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bec8:	4b82      	ldr	r3, [pc, #520]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bed2:	4b80      	ldr	r3, [pc, #512]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed6:	08db      	lsrs	r3, r3, #3
 800bed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 80e1 	beq.w	800c0b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	f000 8083 	beq.w	800c004 <HAL_RCC_GetSysClockFreq+0x204>
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	f200 80a1 	bhi.w	800c048 <HAL_RCC_GetSysClockFreq+0x248>
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <HAL_RCC_GetSysClockFreq+0x114>
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d056      	beq.n	800bfc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf12:	e099      	b.n	800c048 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf14:	4b6f      	ldr	r3, [pc, #444]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0320 	and.w	r3, r3, #32
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d02d      	beq.n	800bf7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf20:	4b6c      	ldr	r3, [pc, #432]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	08db      	lsrs	r3, r3, #3
 800bf26:	f003 0303 	and.w	r3, r3, #3
 800bf2a:	4a6b      	ldr	r2, [pc, #428]	@ (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	ee07 3a90 	vmov	s15, r3
 800bf38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	ee07 3a90 	vmov	s15, r3
 800bf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4a:	4b62      	ldr	r3, [pc, #392]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c0e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bf7a:	e087      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8e:	4b51      	ldr	r3, [pc, #324]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c0e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfbe:	e065      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c0ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800bfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd2:	4b40      	ldr	r3, [pc, #256]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfe6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c0e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c002:	e043      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c0f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c016:	4b2f      	ldr	r3, [pc, #188]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c026:	ed97 6a02 	vldr	s12, [r7, #8]
 800c02a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c0e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c046:	e021      	b.n	800c08c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c0ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800c056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05a:	4b1e      	ldr	r3, [pc, #120]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c06e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c0e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c08a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c08c:	4b11      	ldr	r3, [pc, #68]	@ (800c0d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	0a5b      	lsrs	r3, r3, #9
 800c092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c096:	3301      	adds	r3, #1
 800c098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b0:	ee17 3a90 	vmov	r3, s15
 800c0b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c0b6:	e005      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	61bb      	str	r3, [r7, #24]
      break;
 800c0bc:	e002      	b.n	800c0c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c0be:	4b07      	ldr	r3, [pc, #28]	@ (800c0dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0c0:	61bb      	str	r3, [r7, #24]
      break;
 800c0c2:	bf00      	nop
  }

  return sysclockfreq;
 800c0c4:	69bb      	ldr	r3, [r7, #24]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3724      	adds	r7, #36	@ 0x24
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	58024400 	.word	0x58024400
 800c0d8:	03d09000 	.word	0x03d09000
 800c0dc:	003d0900 	.word	0x003d0900
 800c0e0:	017d7840 	.word	0x017d7840
 800c0e4:	46000000 	.word	0x46000000
 800c0e8:	4c742400 	.word	0x4c742400
 800c0ec:	4a742400 	.word	0x4a742400
 800c0f0:	4bbebc20 	.word	0x4bbebc20

0800c0f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0fa:	f7ff fe81 	bl	800be00 <HAL_RCC_GetSysClockFreq>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b10      	ldr	r3, [pc, #64]	@ (800c144 <HAL_RCC_GetHCLKFreq+0x50>)
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	0a1b      	lsrs	r3, r3, #8
 800c106:	f003 030f 	and.w	r3, r3, #15
 800c10a:	490f      	ldr	r1, [pc, #60]	@ (800c148 <HAL_RCC_GetHCLKFreq+0x54>)
 800c10c:	5ccb      	ldrb	r3, [r1, r3]
 800c10e:	f003 031f 	and.w	r3, r3, #31
 800c112:	fa22 f303 	lsr.w	r3, r2, r3
 800c116:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c118:	4b0a      	ldr	r3, [pc, #40]	@ (800c144 <HAL_RCC_GetHCLKFreq+0x50>)
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	4a09      	ldr	r2, [pc, #36]	@ (800c148 <HAL_RCC_GetHCLKFreq+0x54>)
 800c122:	5cd3      	ldrb	r3, [r2, r3]
 800c124:	f003 031f 	and.w	r3, r3, #31
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	fa22 f303 	lsr.w	r3, r2, r3
 800c12e:	4a07      	ldr	r2, [pc, #28]	@ (800c14c <HAL_RCC_GetHCLKFreq+0x58>)
 800c130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c132:	4a07      	ldr	r2, [pc, #28]	@ (800c150 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c138:	4b04      	ldr	r3, [pc, #16]	@ (800c14c <HAL_RCC_GetHCLKFreq+0x58>)
 800c13a:	681b      	ldr	r3, [r3, #0]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	58024400 	.word	0x58024400
 800c148:	0801ae64 	.word	0x0801ae64
 800c14c:	24000014 	.word	0x24000014
 800c150:	24000010 	.word	0x24000010

0800c154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c158:	f7ff ffcc 	bl	800c0f4 <HAL_RCC_GetHCLKFreq>
 800c15c:	4602      	mov	r2, r0
 800c15e:	4b06      	ldr	r3, [pc, #24]	@ (800c178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	091b      	lsrs	r3, r3, #4
 800c164:	f003 0307 	and.w	r3, r3, #7
 800c168:	4904      	ldr	r1, [pc, #16]	@ (800c17c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c16a:	5ccb      	ldrb	r3, [r1, r3]
 800c16c:	f003 031f 	and.w	r3, r3, #31
 800c170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c174:	4618      	mov	r0, r3
 800c176:	bd80      	pop	{r7, pc}
 800c178:	58024400 	.word	0x58024400
 800c17c:	0801ae64 	.word	0x0801ae64

0800c180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c184:	f7ff ffb6 	bl	800c0f4 <HAL_RCC_GetHCLKFreq>
 800c188:	4602      	mov	r2, r0
 800c18a:	4b06      	ldr	r3, [pc, #24]	@ (800c1a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	f003 0307 	and.w	r3, r3, #7
 800c194:	4904      	ldr	r1, [pc, #16]	@ (800c1a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c196:	5ccb      	ldrb	r3, [r1, r3]
 800c198:	f003 031f 	and.w	r3, r3, #31
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	58024400 	.word	0x58024400
 800c1a8:	0801ae64 	.word	0x0801ae64

0800c1ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	223f      	movs	r2, #63	@ 0x3f
 800c1ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c1bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	f003 0207 	and.w	r2, r3, #7
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c1c8:	4b17      	ldr	r3, [pc, #92]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c1d4:	4b14      	ldr	r3, [pc, #80]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	f003 020f 	and.w	r2, r3, #15
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c1e0:	4b11      	ldr	r3, [pc, #68]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c204:	4b08      	ldr	r3, [pc, #32]	@ (800c228 <HAL_RCC_GetClockConfig+0x7c>)
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c210:	4b06      	ldr	r3, [pc, #24]	@ (800c22c <HAL_RCC_GetClockConfig+0x80>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 020f 	and.w	r2, r3, #15
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	601a      	str	r2, [r3, #0]
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	58024400 	.word	0x58024400
 800c22c:	52002000 	.word	0x52002000

0800c230 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c234:	b0c6      	sub	sp, #280	@ 0x118
 800c236:	af00      	add	r7, sp, #0
 800c238:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c23c:	2300      	movs	r3, #0
 800c23e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c242:	2300      	movs	r3, #0
 800c244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c254:	2500      	movs	r5, #0
 800c256:	ea54 0305 	orrs.w	r3, r4, r5
 800c25a:	d049      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c262:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c266:	d02f      	beq.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c268:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c26c:	d828      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c26e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c272:	d01a      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c274:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c278:	d822      	bhi.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c27e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c282:	d007      	beq.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c284:	e01c      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c286:	4bab      	ldr	r3, [pc, #684]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28a:	4aaa      	ldr	r2, [pc, #680]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c28c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c290:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c292:	e01a      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c298:	3308      	adds	r3, #8
 800c29a:	2102      	movs	r1, #2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 fc25 	bl	800daec <RCCEx_PLL2_Config>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2a8:	e00f      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ae:	3328      	adds	r3, #40	@ 0x28
 800c2b0:	2102      	movs	r1, #2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f001 fccc 	bl	800dc50 <RCCEx_PLL3_Config>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2be:	e004      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2c6:	e000      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10a      	bne.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c2d2:	4b98      	ldr	r3, [pc, #608]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2e0:	4a94      	ldr	r2, [pc, #592]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2e2:	430b      	orrs	r3, r1
 800c2e4:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2e6:	e003      	b.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c2fc:	f04f 0900 	mov.w	r9, #0
 800c300:	ea58 0309 	orrs.w	r3, r8, r9
 800c304:	d047      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c30c:	2b04      	cmp	r3, #4
 800c30e:	d82a      	bhi.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c310:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c32d 	.word	0x0800c32d
 800c31c:	0800c33b 	.word	0x0800c33b
 800c320:	0800c351 	.word	0x0800c351
 800c324:	0800c36f 	.word	0x0800c36f
 800c328:	0800c36f 	.word	0x0800c36f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c32c:	4b81      	ldr	r3, [pc, #516]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c330:	4a80      	ldr	r2, [pc, #512]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c338:	e01a      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33e:	3308      	adds	r3, #8
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f001 fbd2 	bl	800daec <RCCEx_PLL2_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c34e:	e00f      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c354:	3328      	adds	r3, #40	@ 0x28
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f001 fc79 	bl	800dc50 <RCCEx_PLL3_Config>
 800c35e:	4603      	mov	r3, r0
 800c360:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c364:	e004      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c36c:	e000      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c36e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10a      	bne.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c378:	4b6e      	ldr	r3, [pc, #440]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c37c:	f023 0107 	bic.w	r1, r3, #7
 800c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c386:	4a6b      	ldr	r2, [pc, #428]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c388:	430b      	orrs	r3, r1
 800c38a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c38c:	e003      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c392:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c3a2:	f04f 0b00 	mov.w	fp, #0
 800c3a6:	ea5a 030b 	orrs.w	r3, sl, fp
 800c3aa:	d05b      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c3b4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c3b8:	d03b      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c3ba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c3be:	d834      	bhi.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3c4:	d037      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c3c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3ca:	d82e      	bhi.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3d0:	d033      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c3d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3d6:	d828      	bhi.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3dc:	d01a      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c3de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3e2:	d822      	bhi.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c3e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3ec:	d007      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c3ee:	e01c      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3f0:	4b50      	ldr	r3, [pc, #320]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f4:	4a4f      	ldr	r2, [pc, #316]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3fc:	e01e      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c402:	3308      	adds	r3, #8
 800c404:	2100      	movs	r1, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fb70 	bl	800daec <RCCEx_PLL2_Config>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c412:	e013      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c418:	3328      	adds	r3, #40	@ 0x28
 800c41a:	2100      	movs	r1, #0
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 fc17 	bl	800dc50 <RCCEx_PLL3_Config>
 800c422:	4603      	mov	r3, r0
 800c424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c428:	e008      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c430:	e004      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c432:	bf00      	nop
 800c434:	e002      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c436:	bf00      	nop
 800c438:	e000      	b.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c43c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10b      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c444:	4b3b      	ldr	r3, [pc, #236]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c448:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c454:	4a37      	ldr	r2, [pc, #220]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c456:	430b      	orrs	r3, r1
 800c458:	6593      	str	r3, [r2, #88]	@ 0x58
 800c45a:	e003      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c460:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c474:	2300      	movs	r3, #0
 800c476:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c47a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c47e:	460b      	mov	r3, r1
 800c480:	4313      	orrs	r3, r2
 800c482:	d05d      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c488:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c48c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c490:	d03b      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c492:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c496:	d834      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c49c:	d037      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c49e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c4a2:	d82e      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c4a8:	d033      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c4aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c4ae:	d828      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4b4:	d01a      	beq.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c4b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4ba:	d822      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d003      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c4c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4c4:	d007      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c4c6:	e01c      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4cc:	4a19      	ldr	r2, [pc, #100]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4d4:	e01e      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4da:	3308      	adds	r3, #8
 800c4dc:	2100      	movs	r1, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 fb04 	bl	800daec <RCCEx_PLL2_Config>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4ea:	e013      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f0:	3328      	adds	r3, #40	@ 0x28
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f001 fbab 	bl	800dc50 <RCCEx_PLL3_Config>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c500:	e008      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c508:	e004      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c50a:	bf00      	nop
 800c50c:	e002      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10d      	bne.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c51c:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c51e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c520:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c528:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c52c:	4a01      	ldr	r2, [pc, #4]	@ (800c534 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c52e:	430b      	orrs	r3, r1
 800c530:	6593      	str	r3, [r2, #88]	@ 0x58
 800c532:	e005      	b.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c53c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c54c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c550:	2300      	movs	r3, #0
 800c552:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c556:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4313      	orrs	r3, r2
 800c55e:	d03a      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c566:	2b30      	cmp	r3, #48	@ 0x30
 800c568:	d01f      	beq.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c56a:	2b30      	cmp	r3, #48	@ 0x30
 800c56c:	d819      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c56e:	2b20      	cmp	r3, #32
 800c570:	d00c      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c572:	2b20      	cmp	r3, #32
 800c574:	d815      	bhi.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c576:	2b00      	cmp	r3, #0
 800c578:	d019      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c57a:	2b10      	cmp	r3, #16
 800c57c:	d111      	bne.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c57e:	4baa      	ldr	r3, [pc, #680]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c582:	4aa9      	ldr	r2, [pc, #676]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c58a:	e011      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c590:	3308      	adds	r3, #8
 800c592:	2102      	movs	r1, #2
 800c594:	4618      	mov	r0, r3
 800c596:	f001 faa9 	bl	800daec <RCCEx_PLL2_Config>
 800c59a:	4603      	mov	r3, r0
 800c59c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c5a0:	e006      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5a8:	e002      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c5aa:	bf00      	nop
 800c5ac:	e000      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c5ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10a      	bne.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c5b8:	4b9b      	ldr	r3, [pc, #620]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5c6:	4a98      	ldr	r2, [pc, #608]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c5cc:	e003      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c5e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c5ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	d051      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c600:	d035      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c606:	d82e      	bhi.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c608:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c60c:	d031      	beq.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c60e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c612:	d828      	bhi.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c618:	d01a      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c61a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c61e:	d822      	bhi.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c620:	2b00      	cmp	r3, #0
 800c622:	d003      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c628:	d007      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c62a:	e01c      	b.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c62c:	4b7e      	ldr	r3, [pc, #504]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c630:	4a7d      	ldr	r2, [pc, #500]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c638:	e01c      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63e:	3308      	adds	r3, #8
 800c640:	2100      	movs	r1, #0
 800c642:	4618      	mov	r0, r3
 800c644:	f001 fa52 	bl	800daec <RCCEx_PLL2_Config>
 800c648:	4603      	mov	r3, r0
 800c64a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c64e:	e011      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c654:	3328      	adds	r3, #40	@ 0x28
 800c656:	2100      	movs	r1, #0
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 faf9 	bl	800dc50 <RCCEx_PLL3_Config>
 800c65e:	4603      	mov	r3, r0
 800c660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c664:	e006      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c66c:	e002      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c66e:	bf00      	nop
 800c670:	e000      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10a      	bne.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c67c:	4b6a      	ldr	r3, [pc, #424]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c680:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c68a:	4a67      	ldr	r2, [pc, #412]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c68c:	430b      	orrs	r3, r1
 800c68e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c690:	e003      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c6a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c6b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	d053      	beq.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6c4:	d033      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c6c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6ca:	d82c      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6d0:	d02f      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c6d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6d6:	d826      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c6dc:	d02b      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c6de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c6e2:	d820      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6e8:	d012      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c6ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6ee:	d81a      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d022      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6f8:	d115      	bne.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fe:	3308      	adds	r3, #8
 800c700:	2101      	movs	r1, #1
 800c702:	4618      	mov	r0, r3
 800c704:	f001 f9f2 	bl	800daec <RCCEx_PLL2_Config>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c70e:	e015      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c714:	3328      	adds	r3, #40	@ 0x28
 800c716:	2101      	movs	r1, #1
 800c718:	4618      	mov	r0, r3
 800c71a:	f001 fa99 	bl	800dc50 <RCCEx_PLL3_Config>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c724:	e00a      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c72c:	e006      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c72e:	bf00      	nop
 800c730:	e004      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c732:	bf00      	nop
 800c734:	e002      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c736:	bf00      	nop
 800c738:	e000      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c73c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c744:	4b38      	ldr	r3, [pc, #224]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c748:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c752:	4a35      	ldr	r2, [pc, #212]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c754:	430b      	orrs	r3, r1
 800c756:	6513      	str	r3, [r2, #80]	@ 0x50
 800c758:	e003      	b.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c75a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c75e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c76e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c772:	2300      	movs	r3, #0
 800c774:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c778:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c77c:	460b      	mov	r3, r1
 800c77e:	4313      	orrs	r3, r2
 800c780:	d058      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c78e:	d033      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c794:	d82c      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79a:	d02f      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c79c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a0:	d826      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c7a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c7a6:	d02b      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c7a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c7ac:	d820      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7b2:	d012      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7b8:	d81a      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d022      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c7be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7c2:	d115      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f001 f98d 	bl	800daec <RCCEx_PLL2_Config>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7d8:	e015      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7de:	3328      	adds	r3, #40	@ 0x28
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f001 fa34 	bl	800dc50 <RCCEx_PLL3_Config>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7ee:	e00a      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7f6:	e006      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7f8:	bf00      	nop
 800c7fa:	e004      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7fc:	bf00      	nop
 800c7fe:	e002      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c800:	bf00      	nop
 800c802:	e000      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c806:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10e      	bne.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c80e:	4b06      	ldr	r3, [pc, #24]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c812:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c81e:	4a02      	ldr	r2, [pc, #8]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c820:	430b      	orrs	r3, r1
 800c822:	6593      	str	r3, [r2, #88]	@ 0x58
 800c824:	e006      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c826:	bf00      	nop
 800c828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c844:	2300      	movs	r3, #0
 800c846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c84a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c84e:	460b      	mov	r3, r1
 800c850:	4313      	orrs	r3, r2
 800c852:	d037      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c85e:	d00e      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c864:	d816      	bhi.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d018      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c86a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c86e:	d111      	bne.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c870:	4bc4      	ldr	r3, [pc, #784]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c874:	4ac3      	ldr	r2, [pc, #780]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c87a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c87c:	e00f      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c882:	3308      	adds	r3, #8
 800c884:	2101      	movs	r1, #1
 800c886:	4618      	mov	r0, r3
 800c888:	f001 f930 	bl	800daec <RCCEx_PLL2_Config>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c892:	e004      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c89a:	e000      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c89c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c89e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10a      	bne.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c8a6:	4bb7      	ldr	r3, [pc, #732]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8b4:	4ab3      	ldr	r2, [pc, #716]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c8ba:	e003      	b.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c8d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c8da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	d039      	beq.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d81c      	bhi.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f4:	0800c931 	.word	0x0800c931
 800c8f8:	0800c905 	.word	0x0800c905
 800c8fc:	0800c913 	.word	0x0800c913
 800c900:	0800c931 	.word	0x0800c931
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c904:	4b9f      	ldr	r3, [pc, #636]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c908:	4a9e      	ldr	r2, [pc, #632]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c90a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c90e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c910:	e00f      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c916:	3308      	adds	r3, #8
 800c918:	2102      	movs	r1, #2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f001 f8e6 	bl	800daec <RCCEx_PLL2_Config>
 800c920:	4603      	mov	r3, r0
 800c922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c926:	e004      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c92e:	e000      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10a      	bne.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c93a:	4b92      	ldr	r3, [pc, #584]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c93e:	f023 0103 	bic.w	r1, r3, #3
 800c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c948:	4a8e      	ldr	r2, [pc, #568]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c94a:	430b      	orrs	r3, r1
 800c94c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c94e:	e003      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c968:	2300      	movs	r3, #0
 800c96a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c96e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c972:	460b      	mov	r3, r1
 800c974:	4313      	orrs	r3, r2
 800c976:	f000 8099 	beq.w	800caac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c97a:	4b83      	ldr	r3, [pc, #524]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a82      	ldr	r2, [pc, #520]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c986:	f7f8 fc29 	bl	80051dc <HAL_GetTick>
 800c98a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c98e:	e00b      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c990:	f7f8 fc24 	bl	80051dc <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	2b64      	cmp	r3, #100	@ 0x64
 800c99e:	d903      	bls.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9a6:	e005      	b.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c9a8:	4b77      	ldr	r3, [pc, #476]	@ (800cb88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d0ed      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d173      	bne.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c9bc:	4b71      	ldr	r3, [pc, #452]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9c8:	4053      	eors	r3, r2
 800c9ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d015      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9d2:	4b6c      	ldr	r3, [pc, #432]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c9de:	4b69      	ldr	r3, [pc, #420]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9e2:	4a68      	ldr	r2, [pc, #416]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c9ea:	4b66      	ldr	r3, [pc, #408]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9ee:	4a65      	ldr	r2, [pc, #404]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c9f6:	4a63      	ldr	r2, [pc, #396]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca0a:	d118      	bne.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca0c:	f7f8 fbe6 	bl	80051dc <HAL_GetTick>
 800ca10:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca14:	e00d      	b.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca16:	f7f8 fbe1 	bl	80051dc <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ca20:	1ad2      	subs	r2, r2, r3
 800ca22:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d903      	bls.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ca30:	e005      	b.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca32:	4b54      	ldr	r3, [pc, #336]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d0eb      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ca3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d129      	bne.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca56:	d10e      	bne.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ca58:	4b4a      	ldr	r3, [pc, #296]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ca60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca68:	091a      	lsrs	r2, r3, #4
 800ca6a:	4b48      	ldr	r3, [pc, #288]	@ (800cb8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	4a45      	ldr	r2, [pc, #276]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca70:	430b      	orrs	r3, r1
 800ca72:	6113      	str	r3, [r2, #16]
 800ca74:	e005      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ca76:	4b43      	ldr	r3, [pc, #268]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	4a42      	ldr	r2, [pc, #264]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca80:	6113      	str	r3, [r2, #16]
 800ca82:	4b40      	ldr	r3, [pc, #256]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca84:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca92:	4a3c      	ldr	r2, [pc, #240]	@ (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca94:	430b      	orrs	r3, r1
 800ca96:	6713      	str	r3, [r2, #112]	@ 0x70
 800ca98:	e008      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ca9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800caa2:	e003      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800caac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f002 0301 	and.w	r3, r2, #1
 800cab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cabc:	2300      	movs	r3, #0
 800cabe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cac2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cac6:	460b      	mov	r3, r1
 800cac8:	4313      	orrs	r3, r2
 800caca:	f000 808f 	beq.w	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cad4:	2b28      	cmp	r3, #40	@ 0x28
 800cad6:	d871      	bhi.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cad8:	a201      	add	r2, pc, #4	@ (adr r2, 800cae0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cade:	bf00      	nop
 800cae0:	0800cbc5 	.word	0x0800cbc5
 800cae4:	0800cbbd 	.word	0x0800cbbd
 800cae8:	0800cbbd 	.word	0x0800cbbd
 800caec:	0800cbbd 	.word	0x0800cbbd
 800caf0:	0800cbbd 	.word	0x0800cbbd
 800caf4:	0800cbbd 	.word	0x0800cbbd
 800caf8:	0800cbbd 	.word	0x0800cbbd
 800cafc:	0800cbbd 	.word	0x0800cbbd
 800cb00:	0800cb91 	.word	0x0800cb91
 800cb04:	0800cbbd 	.word	0x0800cbbd
 800cb08:	0800cbbd 	.word	0x0800cbbd
 800cb0c:	0800cbbd 	.word	0x0800cbbd
 800cb10:	0800cbbd 	.word	0x0800cbbd
 800cb14:	0800cbbd 	.word	0x0800cbbd
 800cb18:	0800cbbd 	.word	0x0800cbbd
 800cb1c:	0800cbbd 	.word	0x0800cbbd
 800cb20:	0800cba7 	.word	0x0800cba7
 800cb24:	0800cbbd 	.word	0x0800cbbd
 800cb28:	0800cbbd 	.word	0x0800cbbd
 800cb2c:	0800cbbd 	.word	0x0800cbbd
 800cb30:	0800cbbd 	.word	0x0800cbbd
 800cb34:	0800cbbd 	.word	0x0800cbbd
 800cb38:	0800cbbd 	.word	0x0800cbbd
 800cb3c:	0800cbbd 	.word	0x0800cbbd
 800cb40:	0800cbc5 	.word	0x0800cbc5
 800cb44:	0800cbbd 	.word	0x0800cbbd
 800cb48:	0800cbbd 	.word	0x0800cbbd
 800cb4c:	0800cbbd 	.word	0x0800cbbd
 800cb50:	0800cbbd 	.word	0x0800cbbd
 800cb54:	0800cbbd 	.word	0x0800cbbd
 800cb58:	0800cbbd 	.word	0x0800cbbd
 800cb5c:	0800cbbd 	.word	0x0800cbbd
 800cb60:	0800cbc5 	.word	0x0800cbc5
 800cb64:	0800cbbd 	.word	0x0800cbbd
 800cb68:	0800cbbd 	.word	0x0800cbbd
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbbd 	.word	0x0800cbbd
 800cb74:	0800cbbd 	.word	0x0800cbbd
 800cb78:	0800cbbd 	.word	0x0800cbbd
 800cb7c:	0800cbbd 	.word	0x0800cbbd
 800cb80:	0800cbc5 	.word	0x0800cbc5
 800cb84:	58024400 	.word	0x58024400
 800cb88:	58024800 	.word	0x58024800
 800cb8c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	3308      	adds	r3, #8
 800cb96:	2101      	movs	r1, #1
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 ffa7 	bl	800daec <RCCEx_PLL2_Config>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cba4:	e00f      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbaa:	3328      	adds	r3, #40	@ 0x28
 800cbac:	2101      	movs	r1, #1
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f001 f84e 	bl	800dc50 <RCCEx_PLL3_Config>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cbba:	e004      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbc2:	e000      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cbc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cbce:	4bbf      	ldr	r3, [pc, #764]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbdc:	4abb      	ldr	r2, [pc, #748]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cbde:	430b      	orrs	r3, r1
 800cbe0:	6553      	str	r3, [r2, #84]	@ 0x54
 800cbe2:	e003      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f002 0302 	and.w	r3, r2, #2
 800cbf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cc06:	460b      	mov	r3, r1
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	d041      	beq.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d824      	bhi.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cc16:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc69 	.word	0x0800cc69
 800cc20:	0800cc35 	.word	0x0800cc35
 800cc24:	0800cc4b 	.word	0x0800cc4b
 800cc28:	0800cc69 	.word	0x0800cc69
 800cc2c:	0800cc69 	.word	0x0800cc69
 800cc30:	0800cc69 	.word	0x0800cc69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc38:	3308      	adds	r3, #8
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 ff55 	bl	800daec <RCCEx_PLL2_Config>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc48:	e00f      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4e:	3328      	adds	r3, #40	@ 0x28
 800cc50:	2101      	movs	r1, #1
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fffc 	bl	800dc50 <RCCEx_PLL3_Config>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc5e:	e004      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc66:	e000      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cc68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10a      	bne.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc72:	4b96      	ldr	r3, [pc, #600]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc76:	f023 0107 	bic.w	r1, r3, #7
 800cc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc80:	4a92      	ldr	r2, [pc, #584]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc82:	430b      	orrs	r3, r1
 800cc84:	6553      	str	r3, [r2, #84]	@ 0x54
 800cc86:	e003      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f002 0304 	and.w	r3, r2, #4
 800cc9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cca0:	2300      	movs	r3, #0
 800cca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cca6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4313      	orrs	r3, r2
 800ccae:	d044      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ccb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb8:	2b05      	cmp	r3, #5
 800ccba:	d825      	bhi.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ccbc:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ccbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc2:	bf00      	nop
 800ccc4:	0800cd11 	.word	0x0800cd11
 800ccc8:	0800ccdd 	.word	0x0800ccdd
 800cccc:	0800ccf3 	.word	0x0800ccf3
 800ccd0:	0800cd11 	.word	0x0800cd11
 800ccd4:	0800cd11 	.word	0x0800cd11
 800ccd8:	0800cd11 	.word	0x0800cd11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce0:	3308      	adds	r3, #8
 800cce2:	2101      	movs	r1, #1
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 ff01 	bl	800daec <RCCEx_PLL2_Config>
 800ccea:	4603      	mov	r3, r0
 800ccec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ccf0:	e00f      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf6:	3328      	adds	r3, #40	@ 0x28
 800ccf8:	2101      	movs	r1, #1
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 ffa8 	bl	800dc50 <RCCEx_PLL3_Config>
 800cd00:	4603      	mov	r3, r0
 800cd02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cd06:	e004      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd0e:	e000      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cd10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10b      	bne.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd1a:	4b6c      	ldr	r3, [pc, #432]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd1e:	f023 0107 	bic.w	r1, r3, #7
 800cd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd2a:	4a68      	ldr	r2, [pc, #416]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd2c:	430b      	orrs	r3, r1
 800cd2e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd30:	e003      	b.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f002 0320 	and.w	r3, r2, #32
 800cd46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cd54:	460b      	mov	r3, r1
 800cd56:	4313      	orrs	r3, r2
 800cd58:	d055      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd66:	d033      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800cd68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd6c:	d82c      	bhi.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd72:	d02f      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800cd74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd78:	d826      	bhi.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd7e:	d02b      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800cd80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd84:	d820      	bhi.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd8a:	d012      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800cd8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd90:	d81a      	bhi.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d022      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800cd96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd9a:	d115      	bne.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda0:	3308      	adds	r3, #8
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fea1 	bl	800daec <RCCEx_PLL2_Config>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cdb0:	e015      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	3328      	adds	r3, #40	@ 0x28
 800cdb8:	2102      	movs	r1, #2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 ff48 	bl	800dc50 <RCCEx_PLL3_Config>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cdc6:	e00a      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdce:	e006      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdd0:	bf00      	nop
 800cdd2:	e004      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdd4:	bf00      	nop
 800cdd6:	e002      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cde6:	4b39      	ldr	r3, [pc, #228]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdf6:	4a35      	ldr	r2, [pc, #212]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	6553      	str	r3, [r2, #84]	@ 0x54
 800cdfc:	e003      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ce06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ce12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce16:	2300      	movs	r3, #0
 800ce18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ce20:	460b      	mov	r3, r1
 800ce22:	4313      	orrs	r3, r2
 800ce24:	d058      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ce26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ce2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ce32:	d033      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ce34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ce38:	d82c      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce3e:	d02f      	beq.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ce40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce44:	d826      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce4a:	d02b      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ce4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce50:	d820      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce56:	d012      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ce58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce5c:	d81a      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d022      	beq.n	800cea8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ce62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce66:	d115      	bne.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6c:	3308      	adds	r3, #8
 800ce6e:	2100      	movs	r1, #0
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fe3b 	bl	800daec <RCCEx_PLL2_Config>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce7c:	e015      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce82:	3328      	adds	r3, #40	@ 0x28
 800ce84:	2102      	movs	r1, #2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fee2 	bl	800dc50 <RCCEx_PLL3_Config>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce92:	e00a      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce9a:	e006      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ce9c:	bf00      	nop
 800ce9e:	e004      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cea0:	bf00      	nop
 800cea2:	e002      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cea4:	bf00      	nop
 800cea6:	e000      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10e      	bne.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ceb2:	4b06      	ldr	r3, [pc, #24]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ceb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ceba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cec2:	4a02      	ldr	r2, [pc, #8]	@ (800cecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cec4:	430b      	orrs	r3, r1
 800cec6:	6593      	str	r3, [r2, #88]	@ 0x58
 800cec8:	e006      	b.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ceca:	bf00      	nop
 800cecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ced0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ced4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ced8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cee8:	2300      	movs	r3, #0
 800ceea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ceee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cef2:	460b      	mov	r3, r1
 800cef4:	4313      	orrs	r3, r2
 800cef6:	d055      	beq.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cefc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cf04:	d033      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cf06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cf0a:	d82c      	bhi.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf10:	d02f      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cf12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf16:	d826      	bhi.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cf1c:	d02b      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cf1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cf22:	d820      	bhi.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf28:	d012      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800cf2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf2e:	d81a      	bhi.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d022      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cf34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf38:	d115      	bne.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3e:	3308      	adds	r3, #8
 800cf40:	2100      	movs	r1, #0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fdd2 	bl	800daec <RCCEx_PLL2_Config>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf4e:	e015      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf54:	3328      	adds	r3, #40	@ 0x28
 800cf56:	2102      	movs	r1, #2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 fe79 	bl	800dc50 <RCCEx_PLL3_Config>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf64:	e00a      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf6c:	e006      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf6e:	bf00      	nop
 800cf70:	e004      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf72:	bf00      	nop
 800cf74:	e002      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf76:	bf00      	nop
 800cf78:	e000      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10b      	bne.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cf84:	4ba0      	ldr	r3, [pc, #640]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800cf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf94:	4a9c      	ldr	r2, [pc, #624]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf96:	430b      	orrs	r3, r1
 800cf98:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf9a:	e003      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfac:	f002 0308 	and.w	r3, r2, #8
 800cfb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cfba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	d01e      	beq.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfd0:	d10c      	bne.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd6:	3328      	adds	r3, #40	@ 0x28
 800cfd8:	2102      	movs	r1, #2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fe38 	bl	800dc50 <RCCEx_PLL3_Config>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cfec:	4b86      	ldr	r3, [pc, #536]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cfee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cff0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cffc:	4a82      	ldr	r2, [pc, #520]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cffe:	430b      	orrs	r3, r1
 800d000:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f002 0310 	and.w	r3, r2, #16
 800d00e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d012:	2300      	movs	r3, #0
 800d014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d018:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d01c:	460b      	mov	r3, r1
 800d01e:	4313      	orrs	r3, r2
 800d020:	d01e      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d02a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d02e:	d10c      	bne.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d034:	3328      	adds	r3, #40	@ 0x28
 800d036:	2102      	movs	r1, #2
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 fe09 	bl	800dc50 <RCCEx_PLL3_Config>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d04a:	4b6f      	ldr	r3, [pc, #444]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d04e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d05a:	4a6b      	ldr	r2, [pc, #428]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d05c:	430b      	orrs	r3, r1
 800d05e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d06c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d06e:	2300      	movs	r3, #0
 800d070:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d072:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d076:	460b      	mov	r3, r1
 800d078:	4313      	orrs	r3, r2
 800d07a:	d03e      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d088:	d022      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d08a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d08e:	d81b      	bhi.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d098:	d00b      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d09a:	e015      	b.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f000 fd21 	bl	800daec <RCCEx_PLL2_Config>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0b0:	e00f      	b.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b6:	3328      	adds	r3, #40	@ 0x28
 800d0b8:	2102      	movs	r1, #2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f000 fdc8 	bl	800dc50 <RCCEx_PLL3_Config>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0c6:	e004      	b.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0ce:	e000      	b.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d0d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0da:	4b4b      	ldr	r3, [pc, #300]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d0ea:	4a47      	ldr	r2, [pc, #284]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0ec:	430b      	orrs	r3, r1
 800d0ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0f0:	e003      	b.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d106:	673b      	str	r3, [r7, #112]	@ 0x70
 800d108:	2300      	movs	r3, #0
 800d10a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d10c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d110:	460b      	mov	r3, r1
 800d112:	4313      	orrs	r3, r2
 800d114:	d03b      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d11e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d122:	d01f      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d128:	d818      	bhi.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d12e:	d003      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d134:	d007      	beq.n	800d146 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d136:	e011      	b.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d138:	4b33      	ldr	r3, [pc, #204]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13c:	4a32      	ldr	r2, [pc, #200]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d13e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d144:	e00f      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d14a:	3328      	adds	r3, #40	@ 0x28
 800d14c:	2101      	movs	r1, #1
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fd7e 	bl	800dc50 <RCCEx_PLL3_Config>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d15a:	e004      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d162:	e000      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10b      	bne.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d16e:	4b26      	ldr	r3, [pc, #152]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d172:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d17e:	4a22      	ldr	r2, [pc, #136]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d180:	430b      	orrs	r3, r1
 800d182:	6553      	str	r3, [r2, #84]	@ 0x54
 800d184:	e003      	b.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d18a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d19a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d19c:	2300      	movs	r3, #0
 800d19e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d1a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	d034      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1b8:	d007      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d1ba:	e011      	b.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1bc:	4b12      	ldr	r3, [pc, #72]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c0:	4a11      	ldr	r2, [pc, #68]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1c8:	e00e      	b.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	2102      	movs	r1, #2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fc8a 	bl	800daec <RCCEx_PLL2_Config>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1de:	e003      	b.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10d      	bne.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d1f0:	4b05      	ldr	r3, [pc, #20]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1fe:	4a02      	ldr	r2, [pc, #8]	@ (800d208 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d200:	430b      	orrs	r3, r1
 800d202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d204:	e006      	b.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d206:	bf00      	nop
 800d208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d20c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d220:	663b      	str	r3, [r7, #96]	@ 0x60
 800d222:	2300      	movs	r3, #0
 800d224:	667b      	str	r3, [r7, #100]	@ 0x64
 800d226:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d22a:	460b      	mov	r3, r1
 800d22c:	4313      	orrs	r3, r2
 800d22e:	d00c      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d234:	3328      	adds	r3, #40	@ 0x28
 800d236:	2102      	movs	r1, #2
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 fd09 	bl	800dc50 <RCCEx_PLL3_Config>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d256:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d258:	2300      	movs	r3, #0
 800d25a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d25c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d260:	460b      	mov	r3, r1
 800d262:	4313      	orrs	r3, r2
 800d264:	d036      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d26c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d270:	d018      	beq.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d276:	d811      	bhi.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d27c:	d014      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d27e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d282:	d80b      	bhi.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d284:	2b00      	cmp	r3, #0
 800d286:	d011      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d28c:	d106      	bne.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d28e:	4bb7      	ldr	r3, [pc, #732]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d292:	4ab6      	ldr	r2, [pc, #728]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d29a:	e008      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2a2:	e004      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d2a4:	bf00      	nop
 800d2a6:	e002      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d2a8:	bf00      	nop
 800d2aa:	e000      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d2ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10a      	bne.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d2b6:	4bad      	ldr	r3, [pc, #692]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2c4:	4aa9      	ldr	r2, [pc, #676]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2c6:	430b      	orrs	r3, r1
 800d2c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d2ca:	e003      	b.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d2e0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	d009      	beq.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d2f0:	4b9e      	ldr	r3, [pc, #632]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2fe:	4a9b      	ldr	r2, [pc, #620]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d300:	430b      	orrs	r3, r1
 800d302:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d310:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d312:	2300      	movs	r3, #0
 800d314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d316:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d31a:	460b      	mov	r3, r1
 800d31c:	4313      	orrs	r3, r2
 800d31e:	d009      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d320:	4b92      	ldr	r3, [pc, #584]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d324:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d32e:	4a8f      	ldr	r2, [pc, #572]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d330:	430b      	orrs	r3, r1
 800d332:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d340:	643b      	str	r3, [r7, #64]	@ 0x40
 800d342:	2300      	movs	r3, #0
 800d344:	647b      	str	r3, [r7, #68]	@ 0x44
 800d346:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d34a:	460b      	mov	r3, r1
 800d34c:	4313      	orrs	r3, r2
 800d34e:	d00e      	beq.n	800d36e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d350:	4b86      	ldr	r3, [pc, #536]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	4a85      	ldr	r2, [pc, #532]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d356:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d35a:	6113      	str	r3, [r2, #16]
 800d35c:	4b83      	ldr	r3, [pc, #524]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d35e:	6919      	ldr	r1, [r3, #16]
 800d360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d368:	4a80      	ldr	r2, [pc, #512]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d36a:	430b      	orrs	r3, r1
 800d36c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d37a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d37c:	2300      	movs	r3, #0
 800d37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d380:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d384:	460b      	mov	r3, r1
 800d386:	4313      	orrs	r3, r2
 800d388:	d009      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d38a:	4b78      	ldr	r3, [pc, #480]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d38c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d38e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d398:	4a74      	ldr	r2, [pc, #464]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d39a:	430b      	orrs	r3, r1
 800d39c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	d00a      	beq.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d3ba:	4b6c      	ldr	r3, [pc, #432]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3ca:	4a68      	ldr	r2, [pc, #416]	@ (800d56c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	2100      	movs	r1, #0
 800d3da:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d3dc:	f003 0301 	and.w	r3, r3, #1
 800d3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	d011      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 fb79 	bl	800daec <RCCEx_PLL2_Config>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d404:	2b00      	cmp	r3, #0
 800d406:	d003      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d40c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	2100      	movs	r1, #0
 800d41a:	6239      	str	r1, [r7, #32]
 800d41c:	f003 0302 	and.w	r3, r3, #2
 800d420:	627b      	str	r3, [r7, #36]	@ 0x24
 800d422:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d426:	460b      	mov	r3, r1
 800d428:	4313      	orrs	r3, r2
 800d42a:	d011      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d430:	3308      	adds	r3, #8
 800d432:	2101      	movs	r1, #1
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fb59 	bl	800daec <RCCEx_PLL2_Config>
 800d43a:	4603      	mov	r3, r0
 800d43c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d444:	2b00      	cmp	r3, #0
 800d446:	d003      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d44c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	2100      	movs	r1, #0
 800d45a:	61b9      	str	r1, [r7, #24]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	61fb      	str	r3, [r7, #28]
 800d462:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d466:	460b      	mov	r3, r1
 800d468:	4313      	orrs	r3, r2
 800d46a:	d011      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d470:	3308      	adds	r3, #8
 800d472:	2102      	movs	r1, #2
 800d474:	4618      	mov	r0, r3
 800d476:	f000 fb39 	bl	800daec <RCCEx_PLL2_Config>
 800d47a:	4603      	mov	r3, r0
 800d47c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d48c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	2100      	movs	r1, #0
 800d49a:	6139      	str	r1, [r7, #16]
 800d49c:	f003 0308 	and.w	r3, r3, #8
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	d011      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b0:	3328      	adds	r3, #40	@ 0x28
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fbcb 	bl	800dc50 <RCCEx_PLL3_Config>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	2100      	movs	r1, #0
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	f003 0310 	and.w	r3, r3, #16
 800d4e0:	60fb      	str	r3, [r7, #12]
 800d4e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	d011      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f0:	3328      	adds	r3, #40	@ 0x28
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 fbab 	bl	800dc50 <RCCEx_PLL3_Config>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d50c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	2100      	movs	r1, #0
 800d51a:	6039      	str	r1, [r7, #0]
 800d51c:	f003 0320 	and.w	r3, r3, #32
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d526:	460b      	mov	r3, r1
 800d528:	4313      	orrs	r3, r2
 800d52a:	d011      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d530:	3328      	adds	r3, #40	@ 0x28
 800d532:	2102      	movs	r1, #2
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fb8b 	bl	800dc50 <RCCEx_PLL3_Config>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d54c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d550:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	e000      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d55c:	2301      	movs	r3, #1
}
 800d55e:	4618      	mov	r0, r3
 800d560:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d564:	46bd      	mov	sp, r7
 800d566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d56a:	bf00      	nop
 800d56c:	58024400 	.word	0x58024400

0800d570 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d574:	f7fe fdbe 	bl	800c0f4 <HAL_RCC_GetHCLKFreq>
 800d578:	4602      	mov	r2, r0
 800d57a:	4b06      	ldr	r3, [pc, #24]	@ (800d594 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	091b      	lsrs	r3, r3, #4
 800d580:	f003 0307 	and.w	r3, r3, #7
 800d584:	4904      	ldr	r1, [pc, #16]	@ (800d598 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d586:	5ccb      	ldrb	r3, [r1, r3]
 800d588:	f003 031f 	and.w	r3, r3, #31
 800d58c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d590:	4618      	mov	r0, r3
 800d592:	bd80      	pop	{r7, pc}
 800d594:	58024400 	.word	0x58024400
 800d598:	0801ae64 	.word	0x0801ae64

0800d59c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b089      	sub	sp, #36	@ 0x24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5a4:	4ba1      	ldr	r3, [pc, #644]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a8:	f003 0303 	and.w	r3, r3, #3
 800d5ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d5ae:	4b9f      	ldr	r3, [pc, #636]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b2:	0b1b      	lsrs	r3, r3, #12
 800d5b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d5ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5be:	091b      	lsrs	r3, r3, #4
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d5c6:	4b99      	ldr	r3, [pc, #612]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ca:	08db      	lsrs	r3, r3, #3
 800d5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	fb02 f303 	mul.w	r3, r2, r3
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 8111 	beq.w	800d80c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	f000 8083 	beq.w	800d6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	f200 80a1 	bhi.w	800d73c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d003      	beq.n	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d056      	beq.n	800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d606:	e099      	b.n	800d73c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d608:	4b88      	ldr	r3, [pc, #544]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 0320 	and.w	r3, r3, #32
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02d      	beq.n	800d670 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d614:	4b85      	ldr	r3, [pc, #532]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	08db      	lsrs	r3, r3, #3
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	4a84      	ldr	r2, [pc, #528]	@ (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d620:	fa22 f303 	lsr.w	r3, r2, r3
 800d624:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	ee07 3a90 	vmov	s15, r3
 800d636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d63e:	4b7b      	ldr	r3, [pc, #492]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d652:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d66a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d66e:	e087      	b.n	800d780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d682:	4b6a      	ldr	r3, [pc, #424]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d692:	ed97 6a03 	vldr	s12, [r7, #12]
 800d696:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6b2:	e065      	b.n	800d780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	ee07 3a90 	vmov	s15, r3
 800d6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d83c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6c6:	4b59      	ldr	r3, [pc, #356]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ce:	ee07 3a90 	vmov	s15, r3
 800d6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6f6:	e043      	b.n	800d780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d702:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d70a:	4b48      	ldr	r3, [pc, #288]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d71e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d72a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d73a:	e021      	b.n	800d780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d746:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d83c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d74e:	4b37      	ldr	r3, [pc, #220]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d762:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d77e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d780:	4b2a      	ldr	r3, [pc, #168]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d784:	0a5b      	lsrs	r3, r3, #9
 800d786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a6:	ee17 2a90 	vmov	r2, s15
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7b8:	ee07 3a90 	vmov	s15, r3
 800d7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d4:	ee17 2a90 	vmov	r2, s15
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d7dc:	4b13      	ldr	r3, [pc, #76]	@ (800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e0:	0e1b      	lsrs	r3, r3, #24
 800d7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d802:	ee17 2a90 	vmov	r2, s15
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d80a:	e008      	b.n	800d81e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	609a      	str	r2, [r3, #8]
}
 800d81e:	bf00      	nop
 800d820:	3724      	adds	r7, #36	@ 0x24
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	58024400 	.word	0x58024400
 800d830:	03d09000 	.word	0x03d09000
 800d834:	46000000 	.word	0x46000000
 800d838:	4c742400 	.word	0x4c742400
 800d83c:	4a742400 	.word	0x4a742400
 800d840:	4bbebc20 	.word	0x4bbebc20

0800d844 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d844:	b480      	push	{r7}
 800d846:	b089      	sub	sp, #36	@ 0x24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d84c:	4ba1      	ldr	r3, [pc, #644]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d850:	f003 0303 	and.w	r3, r3, #3
 800d854:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d856:	4b9f      	ldr	r3, [pc, #636]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85a:	0d1b      	lsrs	r3, r3, #20
 800d85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d860:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d862:	4b9c      	ldr	r3, [pc, #624]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d866:	0a1b      	lsrs	r3, r3, #8
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d86e:	4b99      	ldr	r3, [pc, #612]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d872:	08db      	lsrs	r3, r3, #3
 800d874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	fb02 f303 	mul.w	r3, r2, r3
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 8111 	beq.w	800dab4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	2b02      	cmp	r3, #2
 800d896:	f000 8083 	beq.w	800d9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	f200 80a1 	bhi.w	800d9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d056      	beq.n	800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d8ae:	e099      	b.n	800d9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8b0:	4b88      	ldr	r3, [pc, #544]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 0320 	and.w	r3, r3, #32
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d02d      	beq.n	800d918 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8bc:	4b85      	ldr	r3, [pc, #532]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	08db      	lsrs	r3, r3, #3
 800d8c2:	f003 0303 	and.w	r3, r3, #3
 800d8c6:	4a84      	ldr	r2, [pc, #528]	@ (800dad8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	ee07 3a90 	vmov	s15, r3
 800d8d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	ee07 3a90 	vmov	s15, r3
 800d8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8e6:	4b7b      	ldr	r3, [pc, #492]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ee:	ee07 3a90 	vmov	s15, r3
 800d8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d912:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d916:	e087      	b.n	800da28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	ee07 3a90 	vmov	s15, r3
 800d91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d922:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d92a:	4b6a      	ldr	r3, [pc, #424]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d932:	ee07 3a90 	vmov	s15, r3
 800d936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d93e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d95a:	e065      	b.n	800da28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	ee07 3a90 	vmov	s15, r3
 800d962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d966:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d96e:	4b59      	ldr	r3, [pc, #356]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d97e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d982:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d98e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d99a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d99e:	e043      	b.n	800da28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	ee07 3a90 	vmov	s15, r3
 800d9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b2:	4b48      	ldr	r3, [pc, #288]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9e2:	e021      	b.n	800da28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	ee07 3a90 	vmov	s15, r3
 800d9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f6:	4b37      	ldr	r3, [pc, #220]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fe:	ee07 3a90 	vmov	s15, r3
 800da02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da06:	ed97 6a03 	vldr	s12, [r7, #12]
 800da0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dadc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800da28:	4b2a      	ldr	r3, [pc, #168]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2c:	0a5b      	lsrs	r3, r3, #9
 800da2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da32:	ee07 3a90 	vmov	s15, r3
 800da36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da42:	edd7 6a07 	vldr	s13, [r7, #28]
 800da46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4e:	ee17 2a90 	vmov	r2, s15
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800da56:	4b1f      	ldr	r3, [pc, #124]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5a:	0c1b      	lsrs	r3, r3, #16
 800da5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da60:	ee07 3a90 	vmov	s15, r3
 800da64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da70:	edd7 6a07 	vldr	s13, [r7, #28]
 800da74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7c:	ee17 2a90 	vmov	r2, s15
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800da84:	4b13      	ldr	r3, [pc, #76]	@ (800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da88:	0e1b      	lsrs	r3, r3, #24
 800da8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da8e:	ee07 3a90 	vmov	s15, r3
 800da92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daaa:	ee17 2a90 	vmov	r2, s15
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dab2:	e008      	b.n	800dac6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	609a      	str	r2, [r3, #8]
}
 800dac6:	bf00      	nop
 800dac8:	3724      	adds	r7, #36	@ 0x24
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	58024400 	.word	0x58024400
 800dad8:	03d09000 	.word	0x03d09000
 800dadc:	46000000 	.word	0x46000000
 800dae0:	4c742400 	.word	0x4c742400
 800dae4:	4a742400 	.word	0x4a742400
 800dae8:	4bbebc20 	.word	0x4bbebc20

0800daec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dafa:	4b53      	ldr	r3, [pc, #332]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	2b03      	cmp	r3, #3
 800db04:	d101      	bne.n	800db0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e099      	b.n	800dc3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db0a:	4b4f      	ldr	r3, [pc, #316]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a4e      	ldr	r2, [pc, #312]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db16:	f7f7 fb61 	bl	80051dc <HAL_GetTick>
 800db1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db1c:	e008      	b.n	800db30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db1e:	f7f7 fb5d 	bl	80051dc <HAL_GetTick>
 800db22:	4602      	mov	r2, r0
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d901      	bls.n	800db30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db2c:	2303      	movs	r3, #3
 800db2e:	e086      	b.n	800dc3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db30:	4b45      	ldr	r3, [pc, #276]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1f0      	bne.n	800db1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db3c:	4b42      	ldr	r3, [pc, #264]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	031b      	lsls	r3, r3, #12
 800db4a:	493f      	ldr	r1, [pc, #252]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db4c:	4313      	orrs	r3, r2
 800db4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	3b01      	subs	r3, #1
 800db56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	3b01      	subs	r3, #1
 800db60:	025b      	lsls	r3, r3, #9
 800db62:	b29b      	uxth	r3, r3
 800db64:	431a      	orrs	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	3b01      	subs	r3, #1
 800db6c:	041b      	lsls	r3, r3, #16
 800db6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db72:	431a      	orrs	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	3b01      	subs	r3, #1
 800db7a:	061b      	lsls	r3, r3, #24
 800db7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db80:	4931      	ldr	r1, [pc, #196]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db82:	4313      	orrs	r3, r2
 800db84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db86:	4b30      	ldr	r3, [pc, #192]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	695b      	ldr	r3, [r3, #20]
 800db92:	492d      	ldr	r1, [pc, #180]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db94:	4313      	orrs	r3, r2
 800db96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db98:	4b2b      	ldr	r3, [pc, #172]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800db9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9c:	f023 0220 	bic.w	r2, r3, #32
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	4928      	ldr	r1, [pc, #160]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dba6:	4313      	orrs	r3, r2
 800dba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbaa:	4b27      	ldr	r3, [pc, #156]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbae:	4a26      	ldr	r2, [pc, #152]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbb0:	f023 0310 	bic.w	r3, r3, #16
 800dbb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbb6:	4b24      	ldr	r3, [pc, #144]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbba:	4b24      	ldr	r3, [pc, #144]	@ (800dc4c <RCCEx_PLL2_Config+0x160>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	69d2      	ldr	r2, [r2, #28]
 800dbc2:	00d2      	lsls	r2, r2, #3
 800dbc4:	4920      	ldr	r1, [pc, #128]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbca:	4b1f      	ldr	r3, [pc, #124]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbce:	4a1e      	ldr	r2, [pc, #120]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbd0:	f043 0310 	orr.w	r3, r3, #16
 800dbd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d106      	bne.n	800dbea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dbdc:	4b1a      	ldr	r3, [pc, #104]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe0:	4a19      	ldr	r2, [pc, #100]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbe8:	e00f      	b.n	800dc0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d106      	bne.n	800dbfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbf0:	4b15      	ldr	r3, [pc, #84]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf4:	4a14      	ldr	r2, [pc, #80]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dbf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbfc:	e005      	b.n	800dc0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbfe:	4b12      	ldr	r3, [pc, #72]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc02:	4a11      	ldr	r2, [pc, #68]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dc04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a0e      	ldr	r2, [pc, #56]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dc10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc16:	f7f7 fae1 	bl	80051dc <HAL_GetTick>
 800dc1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc1c:	e008      	b.n	800dc30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc1e:	f7f7 fadd 	bl	80051dc <HAL_GetTick>
 800dc22:	4602      	mov	r2, r0
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d901      	bls.n	800dc30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e006      	b.n	800dc3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc30:	4b05      	ldr	r3, [pc, #20]	@ (800dc48 <RCCEx_PLL2_Config+0x15c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d0f0      	beq.n	800dc1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	58024400 	.word	0x58024400
 800dc4c:	ffff0007 	.word	0xffff0007

0800dc50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc5e:	4b53      	ldr	r3, [pc, #332]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc62:	f003 0303 	and.w	r3, r3, #3
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d101      	bne.n	800dc6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e099      	b.n	800dda2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc6e:	4b4f      	ldr	r3, [pc, #316]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a4e      	ldr	r2, [pc, #312]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dc74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc7a:	f7f7 faaf 	bl	80051dc <HAL_GetTick>
 800dc7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc80:	e008      	b.n	800dc94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc82:	f7f7 faab 	bl	80051dc <HAL_GetTick>
 800dc86:	4602      	mov	r2, r0
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d901      	bls.n	800dc94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc90:	2303      	movs	r3, #3
 800dc92:	e086      	b.n	800dda2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc94:	4b45      	ldr	r3, [pc, #276]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1f0      	bne.n	800dc82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dca0:	4b42      	ldr	r3, [pc, #264]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	051b      	lsls	r3, r3, #20
 800dcae:	493f      	ldr	r1, [pc, #252]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	025b      	lsls	r3, r3, #9
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	041b      	lsls	r3, r3, #16
 800dcd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dcd6:	431a      	orrs	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	061b      	lsls	r3, r3, #24
 800dce0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dce4:	4931      	ldr	r1, [pc, #196]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dce6:	4313      	orrs	r3, r2
 800dce8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dcea:	4b30      	ldr	r3, [pc, #192]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	492d      	ldr	r1, [pc, #180]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dcfc:	4b2b      	ldr	r3, [pc, #172]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	4928      	ldr	r1, [pc, #160]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd0e:	4b27      	ldr	r3, [pc, #156]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd12:	4a26      	ldr	r2, [pc, #152]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd1a:	4b24      	ldr	r3, [pc, #144]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd1e:	4b24      	ldr	r3, [pc, #144]	@ (800ddb0 <RCCEx_PLL3_Config+0x160>)
 800dd20:	4013      	ands	r3, r2
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	69d2      	ldr	r2, [r2, #28]
 800dd26:	00d2      	lsls	r2, r2, #3
 800dd28:	4920      	ldr	r1, [pc, #128]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd2e:	4b1f      	ldr	r3, [pc, #124]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	4a1e      	ldr	r2, [pc, #120]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd40:	4b1a      	ldr	r3, [pc, #104]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd44:	4a19      	ldr	r2, [pc, #100]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd4c:	e00f      	b.n	800dd6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d106      	bne.n	800dd62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd54:	4b15      	ldr	r3, [pc, #84]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd58:	4a14      	ldr	r2, [pc, #80]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd60:	e005      	b.n	800dd6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd62:	4b12      	ldr	r3, [pc, #72]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd66:	4a11      	ldr	r2, [pc, #68]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a0e      	ldr	r2, [pc, #56]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd7a:	f7f7 fa2f 	bl	80051dc <HAL_GetTick>
 800dd7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd80:	e008      	b.n	800dd94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd82:	f7f7 fa2b 	bl	80051dc <HAL_GetTick>
 800dd86:	4602      	mov	r2, r0
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d901      	bls.n	800dd94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd90:	2303      	movs	r3, #3
 800dd92:	e006      	b.n	800dda2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd94:	4b05      	ldr	r3, [pc, #20]	@ (800ddac <RCCEx_PLL3_Config+0x15c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d0f0      	beq.n	800dd82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	58024400 	.word	0x58024400
 800ddb0:	ffff0007 	.word	0xffff0007

0800ddb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d101      	bne.n	800ddc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e10f      	b.n	800dfe6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a87      	ldr	r2, [pc, #540]	@ (800dff0 <HAL_SPI_Init+0x23c>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d00f      	beq.n	800ddf6 <HAL_SPI_Init+0x42>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a86      	ldr	r2, [pc, #536]	@ (800dff4 <HAL_SPI_Init+0x240>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d00a      	beq.n	800ddf6 <HAL_SPI_Init+0x42>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a84      	ldr	r2, [pc, #528]	@ (800dff8 <HAL_SPI_Init+0x244>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d005      	beq.n	800ddf6 <HAL_SPI_Init+0x42>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	2b0f      	cmp	r3, #15
 800ddf0:	d901      	bls.n	800ddf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e0f7      	b.n	800dfe6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fdc6 	bl	800e988 <SPI_GetPacketSize>
 800ddfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a7b      	ldr	r2, [pc, #492]	@ (800dff0 <HAL_SPI_Init+0x23c>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d00c      	beq.n	800de22 <HAL_SPI_Init+0x6e>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a79      	ldr	r2, [pc, #484]	@ (800dff4 <HAL_SPI_Init+0x240>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d007      	beq.n	800de22 <HAL_SPI_Init+0x6e>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a78      	ldr	r2, [pc, #480]	@ (800dff8 <HAL_SPI_Init+0x244>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d002      	beq.n	800de22 <HAL_SPI_Init+0x6e>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b08      	cmp	r3, #8
 800de20:	d811      	bhi.n	800de46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de26:	4a72      	ldr	r2, [pc, #456]	@ (800dff0 <HAL_SPI_Init+0x23c>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d009      	beq.n	800de40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a70      	ldr	r2, [pc, #448]	@ (800dff4 <HAL_SPI_Init+0x240>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d004      	beq.n	800de40 <HAL_SPI_Init+0x8c>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a6f      	ldr	r2, [pc, #444]	@ (800dff8 <HAL_SPI_Init+0x244>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d104      	bne.n	800de4a <HAL_SPI_Init+0x96>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b10      	cmp	r3, #16
 800de44:	d901      	bls.n	800de4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e0cd      	b.n	800dfe6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d106      	bne.n	800de64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7f5 fc8c 	bl	800377c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2202      	movs	r2, #2
 800de68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f022 0201 	bic.w	r2, r2, #1
 800de7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800de86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de90:	d119      	bne.n	800dec6 <HAL_SPI_Init+0x112>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de9a:	d103      	bne.n	800dea4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d008      	beq.n	800deb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10c      	bne.n	800dec6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800deb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800deb4:	d107      	bne.n	800dec6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dec4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00f      	beq.n	800def2 <HAL_SPI_Init+0x13e>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	2b06      	cmp	r3, #6
 800ded8:	d90b      	bls.n	800def2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	e007      	b.n	800df02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800df00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	69da      	ldr	r2, [r3, #28]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0a:	431a      	orrs	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	431a      	orrs	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df14:	ea42 0103 	orr.w	r1, r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68da      	ldr	r2, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	430a      	orrs	r2, r1
 800df22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df2c:	431a      	orrs	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df32:	431a      	orrs	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	431a      	orrs	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	431a      	orrs	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	695b      	ldr	r3, [r3, #20]
 800df44:	431a      	orrs	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a1b      	ldr	r3, [r3, #32]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	431a      	orrs	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df56:	431a      	orrs	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	431a      	orrs	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df62:	ea42 0103 	orr.w	r1, r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d113      	bne.n	800dfa2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfa0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f022 0201 	bic.w	r2, r2, #1
 800dfb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00a      	beq.n	800dfd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	40013000 	.word	0x40013000
 800dff4:	40003800 	.word	0x40003800
 800dff8:	40003c00 	.word	0x40003c00

0800dffc <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b01      	cmp	r3, #1
 800e014:	d001      	beq.n	800e01a <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800e016:	2302      	movs	r3, #2
 800e018:	e19c      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <HAL_SPI_TransmitReceive_DMA+0x30>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <HAL_SPI_TransmitReceive_DMA+0x30>
 800e026:	887b      	ldrh	r3, [r7, #2]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e191      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e036:	2b01      	cmp	r3, #1
 800e038:	d101      	bne.n	800e03e <HAL_SPI_TransmitReceive_DMA+0x42>
 800e03a:	2302      	movs	r3, #2
 800e03c:	e18a      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2205      	movs	r2, #5
 800e04a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	887a      	ldrh	r2, [r7, #2]
 800e060:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	887a      	ldrh	r2, [r7, #2]
 800e068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	887a      	ldrh	r2, [r7, #2]
 800e076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	887a      	ldrh	r2, [r7, #2]
 800e07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68da      	ldr	r2, [r3, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e09c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	689a      	ldr	r2, [r3, #8]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e0ac:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	2b0f      	cmp	r3, #15
 800e0b4:	d90b      	bls.n	800e0ce <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0ba:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800e0bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0c0:	d121      	bne.n	800e106 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0c6:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800e0c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0cc:	d11b      	bne.n	800e106 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800e0d2:	2b07      	cmp	r3, #7
 800e0d4:	d91d      	bls.n	800e112 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0da:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800e0dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0e0:	d005      	beq.n	800e0ee <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0e6:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0ec:	d10b      	bne.n	800e106 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0f2:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800e0f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0f8:	d00b      	beq.n	800e112 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0fe:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e104:	d005      	beq.n	800e112 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e120      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	2b07      	cmp	r3, #7
 800e118:	d840      	bhi.n	800e19c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e124:	d109      	bne.n	800e13a <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	3301      	adds	r3, #1
 800e130:	105b      	asrs	r3, r3, #1
 800e132:	b29a      	uxth	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e144:	d109      	bne.n	800e15a <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	3303      	adds	r3, #3
 800e150:	109b      	asrs	r3, r3, #2
 800e152:	b29a      	uxth	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e164:	d109      	bne.n	800e17a <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	3301      	adds	r3, #1
 800e170:	105b      	asrs	r3, r3, #1
 800e172:	b29a      	uxth	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e184:	d12e      	bne.n	800e1e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	3303      	adds	r3, #3
 800e190:	109b      	asrs	r3, r3, #2
 800e192:	b29a      	uxth	r2, r3
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e19a:	e023      	b.n	800e1e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	2b0f      	cmp	r3, #15
 800e1a2:	d81f      	bhi.n	800e1e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1a8:	699b      	ldr	r3, [r3, #24]
 800e1aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1ae:	d109      	bne.n	800e1c4 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	105b      	asrs	r3, r3, #1
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1ce:	d109      	bne.n	800e1e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	3301      	adds	r3, #1
 800e1da:	105b      	asrs	r3, r3, #1
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1e8:	4a5c      	ldr	r2, [pc, #368]	@ (800e35c <HAL_SPI_TransmitReceive_DMA+0x360>)
 800e1ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1f0:	4a5b      	ldr	r2, [pc, #364]	@ (800e360 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800e1f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1f8:	4a5a      	ldr	r2, [pc, #360]	@ (800e364 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800e1fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e200:	2200      	movs	r2, #0
 800e202:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3330      	adds	r3, #48	@ 0x30
 800e20e:	4619      	mov	r1, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e214:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e21c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e21e:	f7f7 fcbd 	bl	8005b9c <HAL_DMA_Start_IT>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d011      	beq.n	800e24c <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e22e:	f043 0210 	orr.w	r2, r3, #16
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	e083      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	689a      	ldr	r2, [r3, #8]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e25a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e260:	2200      	movs	r2, #0
 800e262:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e268:	2200      	movs	r2, #0
 800e26a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e270:	2200      	movs	r2, #0
 800e272:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e278:	4a3a      	ldr	r2, [pc, #232]	@ (800e364 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800e27a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e284:	4619      	mov	r1, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3320      	adds	r3, #32
 800e28c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e294:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e296:	f7f7 fc81 	bl	8005b9c <HAL_DMA_Start_IT>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d016      	beq.n	800e2ce <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7f7 fee3 	bl	8006070 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2b0:	f043 0210 	orr.w	r2, r3, #16
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e042      	b.n	800e354 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2d2:	69db      	ldr	r3, [r3, #28]
 800e2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2d8:	d108      	bne.n	800e2ec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6859      	ldr	r1, [r3, #4]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	4b20      	ldr	r3, [pc, #128]	@ (800e368 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800e2e6:	400b      	ands	r3, r1
 800e2e8:	6053      	str	r3, [r2, #4]
 800e2ea:	e009      	b.n	800e300 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800e368 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	8879      	ldrh	r1, [r7, #2]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	6812      	ldr	r2, [r2, #0]
 800e2fc:	430b      	orrs	r3, r1
 800e2fe:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e30e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	691a      	ldr	r2, [r3, #16]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800e31e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f042 0201 	orr.w	r2, r2, #1
 800e32e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e338:	d107      	bne.n	800e34a <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e348:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	0800e7b3 	.word	0x0800e7b3
 800e360:	0800e76d 	.word	0x0800e76d
 800e364:	0800e7cf 	.word	0x0800e7cf
 800e368:	ffff0000 	.word	0xffff0000

0800e36c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08a      	sub	sp, #40	@ 0x28
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	691b      	ldr	r3, [r3, #16]
 800e37a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800e384:	6a3a      	ldr	r2, [r7, #32]
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	4013      	ands	r3, r2
 800e38a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800e394:	2300      	movs	r3, #0
 800e396:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e39e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3330      	adds	r3, #48	@ 0x30
 800e3a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d010      	beq.n	800e3d4 <HAL_SPI_IRQHandler+0x68>
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	f003 0308 	and.w	r3, r3, #8
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00b      	beq.n	800e3d4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	699a      	ldr	r2, [r3, #24]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3ca:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f9c3 	bl	800e758 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800e3d2:	e192      	b.n	800e6fa <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d113      	bne.n	800e406 <HAL_SPI_IRQHandler+0x9a>
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	f003 0320 	and.w	r3, r3, #32
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10e      	bne.n	800e406 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d009      	beq.n	800e406 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	4798      	blx	r3
    handled = 1UL;
 800e402:	2301      	movs	r3, #1
 800e404:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10f      	bne.n	800e430 <HAL_SPI_IRQHandler+0xc4>
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00a      	beq.n	800e430 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e420:	2b00      	cmp	r3, #0
 800e422:	d105      	bne.n	800e430 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	4798      	blx	r3
    handled = 1UL;
 800e42c:	2301      	movs	r3, #1
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10f      	bne.n	800e45a <HAL_SPI_IRQHandler+0xee>
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	f003 0302 	and.w	r3, r3, #2
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00a      	beq.n	800e45a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d105      	bne.n	800e45a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
    handled = 1UL;
 800e456:	2301      	movs	r3, #1
 800e458:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f040 8147 	bne.w	800e6f0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 808b 	beq.w	800e584 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	699a      	ldr	r2, [r3, #24]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f042 0208 	orr.w	r2, r2, #8
 800e47c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	699a      	ldr	r2, [r3, #24]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f042 0210 	orr.w	r2, r2, #16
 800e48c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	699a      	ldr	r2, [r3, #24]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e49c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	691a      	ldr	r2, [r3, #16]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f022 0208 	bic.w	r2, r2, #8
 800e4ac:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d13d      	bne.n	800e538 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800e4bc:	e036      	b.n	800e52c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	2b0f      	cmp	r3, #15
 800e4c4:	d90b      	bls.n	800e4de <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e4d0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4d6:	1d1a      	adds	r2, r3, #4
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	665a      	str	r2, [r3, #100]	@ 0x64
 800e4dc:	e01d      	b.n	800e51a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	2b07      	cmp	r3, #7
 800e4e4:	d90b      	bls.n	800e4fe <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	8812      	ldrh	r2, [r2, #0]
 800e4ee:	b292      	uxth	r2, r2
 800e4f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4f6:	1c9a      	adds	r2, r3, #2
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	665a      	str	r2, [r3, #100]	@ 0x64
 800e4fc:	e00d      	b.n	800e51a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e50a:	7812      	ldrb	r2, [r2, #0]
 800e50c:	b2d2      	uxtb	r2, r2
 800e50e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e520:	b29b      	uxth	r3, r3
 800e522:	3b01      	subs	r3, #1
 800e524:	b29a      	uxth	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e532:	b29b      	uxth	r3, r3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1c2      	bne.n	800e4be <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f985 	bl	800e848 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 f8f7 	bl	800e744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e556:	e0d0      	b.n	800e6fa <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e558:	7cfb      	ldrb	r3, [r7, #19]
 800e55a:	2b05      	cmp	r3, #5
 800e55c:	d103      	bne.n	800e566 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7f2 fd94 	bl	800108c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800e564:	e0c6      	b.n	800e6f4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e566:	7cfb      	ldrb	r3, [r7, #19]
 800e568:	2b04      	cmp	r3, #4
 800e56a:	d103      	bne.n	800e574 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f8d5 	bl	800e71c <HAL_SPI_RxCpltCallback>
    return;
 800e572:	e0bf      	b.n	800e6f4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e574:	7cfb      	ldrb	r3, [r7, #19]
 800e576:	2b03      	cmp	r3, #3
 800e578:	f040 80bc 	bne.w	800e6f4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f8c3 	bl	800e708 <HAL_SPI_TxCpltCallback>
    return;
 800e582:	e0b7      	b.n	800e6f4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 80b5 	beq.w	800e6fa <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00f      	beq.n	800e5ba <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5a0:	f043 0204 	orr.w	r2, r3, #4
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	699a      	ldr	r2, [r3, #24]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00f      	beq.n	800e5e4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5ca:	f043 0201 	orr.w	r2, r3, #1
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	699a      	ldr	r2, [r3, #24]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00f      	beq.n	800e60e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5f4:	f043 0208 	orr.w	r2, r3, #8
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	699a      	ldr	r2, [r3, #24]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e60c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	f003 0320 	and.w	r3, r3, #32
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00f      	beq.n	800e638 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e61e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	699a      	ldr	r2, [r3, #24]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f042 0220 	orr.w	r2, r2, #32
 800e636:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d05a      	beq.n	800e6f8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f022 0201 	bic.w	r2, r2, #1
 800e650:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6919      	ldr	r1, [r3, #16]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	4b28      	ldr	r3, [pc, #160]	@ (800e700 <HAL_SPI_IRQHandler+0x394>)
 800e65e:	400b      	ands	r3, r1
 800e660:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e668:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e66c:	d138      	bne.n	800e6e0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	689a      	ldr	r2, [r3, #8]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e67c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e682:	2b00      	cmp	r3, #0
 800e684:	d013      	beq.n	800e6ae <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e68a:	4a1e      	ldr	r2, [pc, #120]	@ (800e704 <HAL_SPI_IRQHandler+0x398>)
 800e68c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e692:	4618      	mov	r0, r3
 800e694:	f7f8 f80a 	bl	80066ac <HAL_DMA_Abort_IT>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d007      	beq.n	800e6ae <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d020      	beq.n	800e6f8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6ba:	4a12      	ldr	r2, [pc, #72]	@ (800e704 <HAL_SPI_IRQHandler+0x398>)
 800e6bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7f7 fff2 	bl	80066ac <HAL_DMA_Abort_IT>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d014      	beq.n	800e6f8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e6de:	e00b      	b.n	800e6f8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 f82b 	bl	800e744 <HAL_SPI_ErrorCallback>
    return;
 800e6ee:	e003      	b.n	800e6f8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800e6f0:	bf00      	nop
 800e6f2:	e002      	b.n	800e6fa <HAL_SPI_IRQHandler+0x38e>
    return;
 800e6f4:	bf00      	nop
 800e6f6:	e000      	b.n	800e6fa <HAL_SPI_IRQHandler+0x38e>
    return;
 800e6f8:	bf00      	nop
  }
}
 800e6fa:	3728      	adds	r7, #40	@ 0x28
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	fffffc94 	.word	0xfffffc94
 800e704:	0800e815 	.word	0x0800e815

0800e708 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e778:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b07      	cmp	r3, #7
 800e784:	d011      	beq.n	800e7aa <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e78a:	69db      	ldr	r3, [r3, #28]
 800e78c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e790:	d103      	bne.n	800e79a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f7f2 fc7a 	bl	800108c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e798:	e007      	b.n	800e7aa <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	691a      	ldr	r2, [r3, #16]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f042 0208 	orr.w	r2, r2, #8
 800e7a8:	611a      	str	r2, [r3, #16]
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7be:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ffb5 	bl	800e730 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e7c6:	bf00      	nop
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7da:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7f9 f8e3 	bl	80079a8 <HAL_DMA_GetError>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d011      	beq.n	800e80c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f82d 	bl	800e848 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7f4:	f043 0210 	orr.w	r2, r3, #16
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2201      	movs	r2, #1
 800e802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff ff9c 	bl	800e744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e80c:	bf00      	nop
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e820:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f7ff ff82 	bl	800e744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e840:	bf00      	nop
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	695b      	ldr	r3, [r3, #20]
 800e856:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	699a      	ldr	r2, [r3, #24]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f042 0208 	orr.w	r2, r2, #8
 800e866:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	699a      	ldr	r2, [r3, #24]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f042 0210 	orr.w	r2, r2, #16
 800e876:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f022 0201 	bic.w	r2, r2, #1
 800e886:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6919      	ldr	r1, [r3, #16]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	4b3c      	ldr	r3, [pc, #240]	@ (800e984 <SPI_CloseTransfer+0x13c>)
 800e894:	400b      	ands	r3, r1
 800e896:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	689a      	ldr	r2, [r3, #8]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e8a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d014      	beq.n	800e8de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f003 0320 	and.w	r3, r3, #32
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00f      	beq.n	800e8de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	699a      	ldr	r2, [r3, #24]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f042 0220 	orr.w	r2, r2, #32
 800e8dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	2b03      	cmp	r3, #3
 800e8e8:	d014      	beq.n	800e914 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00f      	beq.n	800e914 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8fa:	f043 0204 	orr.w	r2, r3, #4
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	699a      	ldr	r2, [r3, #24]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e912:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00f      	beq.n	800e93e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e924:	f043 0201 	orr.w	r2, r3, #1
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	699a      	ldr	r2, [r3, #24]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e93c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00f      	beq.n	800e968 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e94e:	f043 0208 	orr.w	r2, r3, #8
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e966:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e978:	bf00      	nop
 800e97a:	3714      	adds	r7, #20
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	fffffc90 	.word	0xfffffc90

0800e988 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e994:	095b      	lsrs	r3, r3, #5
 800e996:	3301      	adds	r3, #1
 800e998:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	3307      	adds	r3, #7
 800e9a6:	08db      	lsrs	r3, r3, #3
 800e9a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e049      	b.n	800ea64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d106      	bne.n	800e9ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7f5 fe4f 	bl	8004688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f001 fa23 	bl	800fe48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d001      	beq.n	800ea84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	e056      	b.n	800eb32 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2202      	movs	r2, #2
 800ea88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a2b      	ldr	r2, [pc, #172]	@ (800eb40 <HAL_TIM_Base_Start+0xd4>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d02c      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea9e:	d027      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a27      	ldr	r2, [pc, #156]	@ (800eb44 <HAL_TIM_Base_Start+0xd8>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d022      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a26      	ldr	r2, [pc, #152]	@ (800eb48 <HAL_TIM_Base_Start+0xdc>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d01d      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a24      	ldr	r2, [pc, #144]	@ (800eb4c <HAL_TIM_Base_Start+0xe0>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d018      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a23      	ldr	r2, [pc, #140]	@ (800eb50 <HAL_TIM_Base_Start+0xe4>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d013      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a21      	ldr	r2, [pc, #132]	@ (800eb54 <HAL_TIM_Base_Start+0xe8>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d00e      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a20      	ldr	r2, [pc, #128]	@ (800eb58 <HAL_TIM_Base_Start+0xec>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d009      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a1e      	ldr	r2, [pc, #120]	@ (800eb5c <HAL_TIM_Base_Start+0xf0>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d004      	beq.n	800eaf0 <HAL_TIM_Base_Start+0x84>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a1d      	ldr	r2, [pc, #116]	@ (800eb60 <HAL_TIM_Base_Start+0xf4>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d115      	bne.n	800eb1c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	689a      	ldr	r2, [r3, #8]
 800eaf6:	4b1b      	ldr	r3, [pc, #108]	@ (800eb64 <HAL_TIM_Base_Start+0xf8>)
 800eaf8:	4013      	ands	r3, r2
 800eafa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b06      	cmp	r3, #6
 800eb00:	d015      	beq.n	800eb2e <HAL_TIM_Base_Start+0xc2>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb08:	d011      	beq.n	800eb2e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f042 0201 	orr.w	r2, r2, #1
 800eb18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb1a:	e008      	b.n	800eb2e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
 800eb2c:	e000      	b.n	800eb30 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	40010000 	.word	0x40010000
 800eb44:	40000400 	.word	0x40000400
 800eb48:	40000800 	.word	0x40000800
 800eb4c:	40000c00 	.word	0x40000c00
 800eb50:	40010400 	.word	0x40010400
 800eb54:	40001800 	.word	0x40001800
 800eb58:	40014000 	.word	0x40014000
 800eb5c:	4000e000 	.word	0x4000e000
 800eb60:	4000e400 	.word	0x4000e400
 800eb64:	00010007 	.word	0x00010007

0800eb68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6a1a      	ldr	r2, [r3, #32]
 800eb76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10f      	bne.n	800eba0 <HAL_TIM_Base_Stop+0x38>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6a1a      	ldr	r2, [r3, #32]
 800eb86:	f240 4344 	movw	r3, #1092	@ 0x444
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d107      	bne.n	800eba0 <HAL_TIM_Base_Stop+0x38>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f022 0201 	bic.w	r2, r2, #1
 800eb9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
	...

0800ebb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d001      	beq.n	800ebd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e05e      	b.n	800ec8e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68da      	ldr	r2, [r3, #12]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0201 	orr.w	r2, r2, #1
 800ebe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a2b      	ldr	r2, [pc, #172]	@ (800ec9c <HAL_TIM_Base_Start_IT+0xe4>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d02c      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebfa:	d027      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a27      	ldr	r2, [pc, #156]	@ (800eca0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d022      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a26      	ldr	r2, [pc, #152]	@ (800eca4 <HAL_TIM_Base_Start_IT+0xec>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d01d      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a24      	ldr	r2, [pc, #144]	@ (800eca8 <HAL_TIM_Base_Start_IT+0xf0>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d018      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a23      	ldr	r2, [pc, #140]	@ (800ecac <HAL_TIM_Base_Start_IT+0xf4>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d013      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a21      	ldr	r2, [pc, #132]	@ (800ecb0 <HAL_TIM_Base_Start_IT+0xf8>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d00e      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4a20      	ldr	r2, [pc, #128]	@ (800ecb4 <HAL_TIM_Base_Start_IT+0xfc>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d009      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a1e      	ldr	r2, [pc, #120]	@ (800ecb8 <HAL_TIM_Base_Start_IT+0x100>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d004      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x94>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4a1d      	ldr	r2, [pc, #116]	@ (800ecbc <HAL_TIM_Base_Start_IT+0x104>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d115      	bne.n	800ec78 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	689a      	ldr	r2, [r3, #8]
 800ec52:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc0 <HAL_TIM_Base_Start_IT+0x108>)
 800ec54:	4013      	ands	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b06      	cmp	r3, #6
 800ec5c:	d015      	beq.n	800ec8a <HAL_TIM_Base_Start_IT+0xd2>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec64:	d011      	beq.n	800ec8a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f042 0201 	orr.w	r2, r2, #1
 800ec74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec76:	e008      	b.n	800ec8a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f042 0201 	orr.w	r2, r2, #1
 800ec86:	601a      	str	r2, [r3, #0]
 800ec88:	e000      	b.n	800ec8c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	40010000 	.word	0x40010000
 800eca0:	40000400 	.word	0x40000400
 800eca4:	40000800 	.word	0x40000800
 800eca8:	40000c00 	.word	0x40000c00
 800ecac:	40010400 	.word	0x40010400
 800ecb0:	40001800 	.word	0x40001800
 800ecb4:	40014000 	.word	0x40014000
 800ecb8:	4000e000 	.word	0x4000e000
 800ecbc:	4000e400 	.word	0x4000e400
 800ecc0:	00010007 	.word	0x00010007

0800ecc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d101      	bne.n	800ecd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e049      	b.n	800ed6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d106      	bne.n	800ecf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f841 	bl	800ed72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	4619      	mov	r1, r3
 800ed02:	4610      	mov	r0, r2
 800ed04:	f001 f8a0 	bl	800fe48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ed7a:	bf00      	nop
 800ed7c:	370c      	adds	r7, #12
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr
	...

0800ed88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d109      	bne.n	800edac <HAL_TIM_PWM_Start+0x24>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	bf14      	ite	ne
 800eda4:	2301      	movne	r3, #1
 800eda6:	2300      	moveq	r3, #0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	e03c      	b.n	800ee26 <HAL_TIM_PWM_Start+0x9e>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b04      	cmp	r3, #4
 800edb0:	d109      	bne.n	800edc6 <HAL_TIM_PWM_Start+0x3e>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b01      	cmp	r3, #1
 800edbc:	bf14      	ite	ne
 800edbe:	2301      	movne	r3, #1
 800edc0:	2300      	moveq	r3, #0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	e02f      	b.n	800ee26 <HAL_TIM_PWM_Start+0x9e>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d109      	bne.n	800ede0 <HAL_TIM_PWM_Start+0x58>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	bf14      	ite	ne
 800edd8:	2301      	movne	r3, #1
 800edda:	2300      	moveq	r3, #0
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	e022      	b.n	800ee26 <HAL_TIM_PWM_Start+0x9e>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b0c      	cmp	r3, #12
 800ede4:	d109      	bne.n	800edfa <HAL_TIM_PWM_Start+0x72>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b01      	cmp	r3, #1
 800edf0:	bf14      	ite	ne
 800edf2:	2301      	movne	r3, #1
 800edf4:	2300      	moveq	r3, #0
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	e015      	b.n	800ee26 <HAL_TIM_PWM_Start+0x9e>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b10      	cmp	r3, #16
 800edfe:	d109      	bne.n	800ee14 <HAL_TIM_PWM_Start+0x8c>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	bf14      	ite	ne
 800ee0c:	2301      	movne	r3, #1
 800ee0e:	2300      	moveq	r3, #0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	e008      	b.n	800ee26 <HAL_TIM_PWM_Start+0x9e>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	bf14      	ite	ne
 800ee20:	2301      	movne	r3, #1
 800ee22:	2300      	moveq	r3, #0
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e0ab      	b.n	800ef86 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d104      	bne.n	800ee3e <HAL_TIM_PWM_Start+0xb6>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2202      	movs	r2, #2
 800ee38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee3c:	e023      	b.n	800ee86 <HAL_TIM_PWM_Start+0xfe>
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b04      	cmp	r3, #4
 800ee42:	d104      	bne.n	800ee4e <HAL_TIM_PWM_Start+0xc6>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2202      	movs	r2, #2
 800ee48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee4c:	e01b      	b.n	800ee86 <HAL_TIM_PWM_Start+0xfe>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d104      	bne.n	800ee5e <HAL_TIM_PWM_Start+0xd6>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee5c:	e013      	b.n	800ee86 <HAL_TIM_PWM_Start+0xfe>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b0c      	cmp	r3, #12
 800ee62:	d104      	bne.n	800ee6e <HAL_TIM_PWM_Start+0xe6>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ee6c:	e00b      	b.n	800ee86 <HAL_TIM_PWM_Start+0xfe>
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b10      	cmp	r3, #16
 800ee72:	d104      	bne.n	800ee7e <HAL_TIM_PWM_Start+0xf6>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2202      	movs	r2, #2
 800ee78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee7c:	e003      	b.n	800ee86 <HAL_TIM_PWM_Start+0xfe>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	6839      	ldr	r1, [r7, #0]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f001 fbfa 	bl	8010688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a3d      	ldr	r2, [pc, #244]	@ (800ef90 <HAL_TIM_PWM_Start+0x208>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d013      	beq.n	800eec6 <HAL_TIM_PWM_Start+0x13e>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a3c      	ldr	r2, [pc, #240]	@ (800ef94 <HAL_TIM_PWM_Start+0x20c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d00e      	beq.n	800eec6 <HAL_TIM_PWM_Start+0x13e>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a3a      	ldr	r2, [pc, #232]	@ (800ef98 <HAL_TIM_PWM_Start+0x210>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d009      	beq.n	800eec6 <HAL_TIM_PWM_Start+0x13e>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a39      	ldr	r2, [pc, #228]	@ (800ef9c <HAL_TIM_PWM_Start+0x214>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d004      	beq.n	800eec6 <HAL_TIM_PWM_Start+0x13e>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a37      	ldr	r2, [pc, #220]	@ (800efa0 <HAL_TIM_PWM_Start+0x218>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d101      	bne.n	800eeca <HAL_TIM_PWM_Start+0x142>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e000      	b.n	800eecc <HAL_TIM_PWM_Start+0x144>
 800eeca:	2300      	movs	r3, #0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d007      	beq.n	800eee0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eede:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a2a      	ldr	r2, [pc, #168]	@ (800ef90 <HAL_TIM_PWM_Start+0x208>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d02c      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eef2:	d027      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a2a      	ldr	r2, [pc, #168]	@ (800efa4 <HAL_TIM_PWM_Start+0x21c>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d022      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a29      	ldr	r2, [pc, #164]	@ (800efa8 <HAL_TIM_PWM_Start+0x220>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d01d      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a27      	ldr	r2, [pc, #156]	@ (800efac <HAL_TIM_PWM_Start+0x224>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d018      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a1f      	ldr	r2, [pc, #124]	@ (800ef94 <HAL_TIM_PWM_Start+0x20c>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d013      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a23      	ldr	r2, [pc, #140]	@ (800efb0 <HAL_TIM_PWM_Start+0x228>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d00e      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ef98 <HAL_TIM_PWM_Start+0x210>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d009      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a1f      	ldr	r2, [pc, #124]	@ (800efb4 <HAL_TIM_PWM_Start+0x22c>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d004      	beq.n	800ef44 <HAL_TIM_PWM_Start+0x1bc>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a1e      	ldr	r2, [pc, #120]	@ (800efb8 <HAL_TIM_PWM_Start+0x230>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d115      	bne.n	800ef70 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	689a      	ldr	r2, [r3, #8]
 800ef4a:	4b1c      	ldr	r3, [pc, #112]	@ (800efbc <HAL_TIM_PWM_Start+0x234>)
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2b06      	cmp	r3, #6
 800ef54:	d015      	beq.n	800ef82 <HAL_TIM_PWM_Start+0x1fa>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef5c:	d011      	beq.n	800ef82 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f042 0201 	orr.w	r2, r2, #1
 800ef6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef6e:	e008      	b.n	800ef82 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f042 0201 	orr.w	r2, r2, #1
 800ef7e:	601a      	str	r2, [r3, #0]
 800ef80:	e000      	b.n	800ef84 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	40010000 	.word	0x40010000
 800ef94:	40010400 	.word	0x40010400
 800ef98:	40014000 	.word	0x40014000
 800ef9c:	40014400 	.word	0x40014400
 800efa0:	40014800 	.word	0x40014800
 800efa4:	40000400 	.word	0x40000400
 800efa8:	40000800 	.word	0x40000800
 800efac:	40000c00 	.word	0x40000c00
 800efb0:	40001800 	.word	0x40001800
 800efb4:	4000e000 	.word	0x4000e000
 800efb8:	4000e400 	.word	0x4000e400
 800efbc:	00010007 	.word	0x00010007

0800efc0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d109      	bne.n	800efec <HAL_TIM_PWM_Start_DMA+0x2c>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	bf0c      	ite	eq
 800efe4:	2301      	moveq	r3, #1
 800efe6:	2300      	movne	r3, #0
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	e03c      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0xa6>
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b04      	cmp	r3, #4
 800eff0:	d109      	bne.n	800f006 <HAL_TIM_PWM_Start_DMA+0x46>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b02      	cmp	r3, #2
 800effc:	bf0c      	ite	eq
 800effe:	2301      	moveq	r3, #1
 800f000:	2300      	movne	r3, #0
 800f002:	b2db      	uxtb	r3, r3
 800f004:	e02f      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b08      	cmp	r3, #8
 800f00a:	d109      	bne.n	800f020 <HAL_TIM_PWM_Start_DMA+0x60>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b02      	cmp	r3, #2
 800f016:	bf0c      	ite	eq
 800f018:	2301      	moveq	r3, #1
 800f01a:	2300      	movne	r3, #0
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	e022      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2b0c      	cmp	r3, #12
 800f024:	d109      	bne.n	800f03a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b02      	cmp	r3, #2
 800f030:	bf0c      	ite	eq
 800f032:	2301      	moveq	r3, #1
 800f034:	2300      	movne	r3, #0
 800f036:	b2db      	uxtb	r3, r3
 800f038:	e015      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2b10      	cmp	r3, #16
 800f03e:	d109      	bne.n	800f054 <HAL_TIM_PWM_Start_DMA+0x94>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f046:	b2db      	uxtb	r3, r3
 800f048:	2b02      	cmp	r3, #2
 800f04a:	bf0c      	ite	eq
 800f04c:	2301      	moveq	r3, #1
 800f04e:	2300      	movne	r3, #0
 800f050:	b2db      	uxtb	r3, r3
 800f052:	e008      	b.n	800f066 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	bf0c      	ite	eq
 800f060:	2301      	moveq	r3, #1
 800f062:	2300      	movne	r3, #0
 800f064:	b2db      	uxtb	r3, r3
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f06a:	2302      	movs	r3, #2
 800f06c:	e1ba      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d109      	bne.n	800f088 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	bf0c      	ite	eq
 800f080:	2301      	moveq	r3, #1
 800f082:	2300      	movne	r3, #0
 800f084:	b2db      	uxtb	r3, r3
 800f086:	e03c      	b.n	800f102 <HAL_TIM_PWM_Start_DMA+0x142>
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b04      	cmp	r3, #4
 800f08c:	d109      	bne.n	800f0a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b01      	cmp	r3, #1
 800f098:	bf0c      	ite	eq
 800f09a:	2301      	moveq	r3, #1
 800f09c:	2300      	movne	r3, #0
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	e02f      	b.n	800f102 <HAL_TIM_PWM_Start_DMA+0x142>
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b08      	cmp	r3, #8
 800f0a6:	d109      	bne.n	800f0bc <HAL_TIM_PWM_Start_DMA+0xfc>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	bf0c      	ite	eq
 800f0b4:	2301      	moveq	r3, #1
 800f0b6:	2300      	movne	r3, #0
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	e022      	b.n	800f102 <HAL_TIM_PWM_Start_DMA+0x142>
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b0c      	cmp	r3, #12
 800f0c0:	d109      	bne.n	800f0d6 <HAL_TIM_PWM_Start_DMA+0x116>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	bf0c      	ite	eq
 800f0ce:	2301      	moveq	r3, #1
 800f0d0:	2300      	movne	r3, #0
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	e015      	b.n	800f102 <HAL_TIM_PWM_Start_DMA+0x142>
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2b10      	cmp	r3, #16
 800f0da:	d109      	bne.n	800f0f0 <HAL_TIM_PWM_Start_DMA+0x130>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	bf0c      	ite	eq
 800f0e8:	2301      	moveq	r3, #1
 800f0ea:	2300      	movne	r3, #0
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	e008      	b.n	800f102 <HAL_TIM_PWM_Start_DMA+0x142>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	bf0c      	ite	eq
 800f0fc:	2301      	moveq	r3, #1
 800f0fe:	2300      	movne	r3, #0
 800f100:	b2db      	uxtb	r3, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	d034      	beq.n	800f170 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <HAL_TIM_PWM_Start_DMA+0x152>
 800f10c:	887b      	ldrh	r3, [r7, #2]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d101      	bne.n	800f116 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	e166      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d104      	bne.n	800f126 <HAL_TIM_PWM_Start_DMA+0x166>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2202      	movs	r2, #2
 800f120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f124:	e026      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	2b04      	cmp	r3, #4
 800f12a:	d104      	bne.n	800f136 <HAL_TIM_PWM_Start_DMA+0x176>
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2202      	movs	r2, #2
 800f130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f134:	e01e      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	2b08      	cmp	r3, #8
 800f13a:	d104      	bne.n	800f146 <HAL_TIM_PWM_Start_DMA+0x186>
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2202      	movs	r2, #2
 800f140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f144:	e016      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	2b0c      	cmp	r3, #12
 800f14a:	d104      	bne.n	800f156 <HAL_TIM_PWM_Start_DMA+0x196>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2202      	movs	r2, #2
 800f150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f154:	e00e      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2b10      	cmp	r3, #16
 800f15a:	d104      	bne.n	800f166 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2202      	movs	r2, #2
 800f160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f164:	e006      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2202      	movs	r2, #2
 800f16a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f16e:	e001      	b.n	800f174 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	e137      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b0c      	cmp	r3, #12
 800f178:	f200 80ae 	bhi.w	800f2d8 <HAL_TIM_PWM_Start_DMA+0x318>
 800f17c:	a201      	add	r2, pc, #4	@ (adr r2, 800f184 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f182:	bf00      	nop
 800f184:	0800f1b9 	.word	0x0800f1b9
 800f188:	0800f2d9 	.word	0x0800f2d9
 800f18c:	0800f2d9 	.word	0x0800f2d9
 800f190:	0800f2d9 	.word	0x0800f2d9
 800f194:	0800f201 	.word	0x0800f201
 800f198:	0800f2d9 	.word	0x0800f2d9
 800f19c:	0800f2d9 	.word	0x0800f2d9
 800f1a0:	0800f2d9 	.word	0x0800f2d9
 800f1a4:	0800f249 	.word	0x0800f249
 800f1a8:	0800f2d9 	.word	0x0800f2d9
 800f1ac:	0800f2d9 	.word	0x0800f2d9
 800f1b0:	0800f2d9 	.word	0x0800f2d9
 800f1b4:	0800f291 	.word	0x0800f291
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1bc:	4a8b      	ldr	r2, [pc, #556]	@ (800f3ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f1be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c4:	4a8a      	ldr	r2, [pc, #552]	@ (800f3f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f1c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1cc:	4a89      	ldr	r2, [pc, #548]	@ (800f3f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f1ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3334      	adds	r3, #52	@ 0x34
 800f1dc:	461a      	mov	r2, r3
 800f1de:	887b      	ldrh	r3, [r7, #2]
 800f1e0:	f7f6 fcdc 	bl	8005b9c <HAL_DMA_Start_IT>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e0fa      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1fc:	60da      	str	r2, [r3, #12]
      break;
 800f1fe:	e06e      	b.n	800f2de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f204:	4a79      	ldr	r2, [pc, #484]	@ (800f3ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f206:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f20c:	4a78      	ldr	r2, [pc, #480]	@ (800f3f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f20e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f214:	4a77      	ldr	r2, [pc, #476]	@ (800f3f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f216:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800f21c:	6879      	ldr	r1, [r7, #4]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3338      	adds	r3, #56	@ 0x38
 800f224:	461a      	mov	r2, r3
 800f226:	887b      	ldrh	r3, [r7, #2]
 800f228:	f7f6 fcb8 	bl	8005b9c <HAL_DMA_Start_IT>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e0d6      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f244:	60da      	str	r2, [r3, #12]
      break;
 800f246:	e04a      	b.n	800f2de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f24c:	4a67      	ldr	r2, [pc, #412]	@ (800f3ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f24e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f254:	4a66      	ldr	r2, [pc, #408]	@ (800f3f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f25c:	4a65      	ldr	r2, [pc, #404]	@ (800f3f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f25e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	333c      	adds	r3, #60	@ 0x3c
 800f26c:	461a      	mov	r2, r3
 800f26e:	887b      	ldrh	r3, [r7, #2]
 800f270:	f7f6 fc94 	bl	8005b9c <HAL_DMA_Start_IT>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	e0b2      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	68da      	ldr	r2, [r3, #12]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f28c:	60da      	str	r2, [r3, #12]
      break;
 800f28e:	e026      	b.n	800f2de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f294:	4a55      	ldr	r2, [pc, #340]	@ (800f3ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f296:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f29c:	4a54      	ldr	r2, [pc, #336]	@ (800f3f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f29e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2a4:	4a53      	ldr	r2, [pc, #332]	@ (800f3f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f2a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f2ac:	6879      	ldr	r1, [r7, #4]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3340      	adds	r3, #64	@ 0x40
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	887b      	ldrh	r3, [r7, #2]
 800f2b8:	f7f6 fc70 	bl	8005b9c <HAL_DMA_Start_IT>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e08e      	b.n	800f3e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68da      	ldr	r2, [r3, #12]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f2d4:	60da      	str	r2, [r3, #12]
      break;
 800f2d6:	e002      	b.n	800f2de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	75fb      	strb	r3, [r7, #23]
      break;
 800f2dc:	bf00      	nop
  }

  if (status == HAL_OK)
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d17e      	bne.n	800f3e2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f001 f9cb 	bl	8010688 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a40      	ldr	r2, [pc, #256]	@ (800f3f8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d013      	beq.n	800f324 <HAL_TIM_PWM_Start_DMA+0x364>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a3e      	ldr	r2, [pc, #248]	@ (800f3fc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d00e      	beq.n	800f324 <HAL_TIM_PWM_Start_DMA+0x364>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a3d      	ldr	r2, [pc, #244]	@ (800f400 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d009      	beq.n	800f324 <HAL_TIM_PWM_Start_DMA+0x364>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a3b      	ldr	r2, [pc, #236]	@ (800f404 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d004      	beq.n	800f324 <HAL_TIM_PWM_Start_DMA+0x364>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a3a      	ldr	r2, [pc, #232]	@ (800f408 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d101      	bne.n	800f328 <HAL_TIM_PWM_Start_DMA+0x368>
 800f324:	2301      	movs	r3, #1
 800f326:	e000      	b.n	800f32a <HAL_TIM_PWM_Start_DMA+0x36a>
 800f328:	2300      	movs	r3, #0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d007      	beq.n	800f33e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f33c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a2d      	ldr	r2, [pc, #180]	@ (800f3f8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d02c      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f350:	d027      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a2d      	ldr	r2, [pc, #180]	@ (800f40c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d022      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a2b      	ldr	r2, [pc, #172]	@ (800f410 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d01d      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a2a      	ldr	r2, [pc, #168]	@ (800f414 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d018      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a21      	ldr	r2, [pc, #132]	@ (800f3fc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d013      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a26      	ldr	r2, [pc, #152]	@ (800f418 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d00e      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a1d      	ldr	r2, [pc, #116]	@ (800f400 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d009      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a22      	ldr	r2, [pc, #136]	@ (800f41c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d004      	beq.n	800f3a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a20      	ldr	r2, [pc, #128]	@ (800f420 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d115      	bne.n	800f3ce <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	689a      	ldr	r2, [r3, #8]
 800f3a8:	4b1e      	ldr	r3, [pc, #120]	@ (800f424 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f3aa:	4013      	ands	r3, r2
 800f3ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2b06      	cmp	r3, #6
 800f3b2:	d015      	beq.n	800f3e0 <HAL_TIM_PWM_Start_DMA+0x420>
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3ba:	d011      	beq.n	800f3e0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0201 	orr.w	r2, r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3cc:	e008      	b.n	800f3e0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f042 0201 	orr.w	r2, r2, #1
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	e000      	b.n	800f3e2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0800fd37 	.word	0x0800fd37
 800f3f0:	0800fddf 	.word	0x0800fddf
 800f3f4:	0800fca5 	.word	0x0800fca5
 800f3f8:	40010000 	.word	0x40010000
 800f3fc:	40010400 	.word	0x40010400
 800f400:	40014000 	.word	0x40014000
 800f404:	40014400 	.word	0x40014400
 800f408:	40014800 	.word	0x40014800
 800f40c:	40000400 	.word	0x40000400
 800f410:	40000800 	.word	0x40000800
 800f414:	40000c00 	.word	0x40000c00
 800f418:	40001800 	.word	0x40001800
 800f41c:	4000e000 	.word	0x4000e000
 800f420:	4000e400 	.word	0x4000e400
 800f424:	00010007 	.word	0x00010007

0800f428 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b0c      	cmp	r3, #12
 800f43a:	d855      	bhi.n	800f4e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800f43c:	a201      	add	r2, pc, #4	@ (adr r2, 800f444 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800f43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f442:	bf00      	nop
 800f444:	0800f479 	.word	0x0800f479
 800f448:	0800f4e9 	.word	0x0800f4e9
 800f44c:	0800f4e9 	.word	0x0800f4e9
 800f450:	0800f4e9 	.word	0x0800f4e9
 800f454:	0800f495 	.word	0x0800f495
 800f458:	0800f4e9 	.word	0x0800f4e9
 800f45c:	0800f4e9 	.word	0x0800f4e9
 800f460:	0800f4e9 	.word	0x0800f4e9
 800f464:	0800f4b1 	.word	0x0800f4b1
 800f468:	0800f4e9 	.word	0x0800f4e9
 800f46c:	0800f4e9 	.word	0x0800f4e9
 800f470:	0800f4e9 	.word	0x0800f4e9
 800f474:	0800f4cd 	.word	0x0800f4cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68da      	ldr	r2, [r3, #12]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800f486:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7f7 f90d 	bl	80066ac <HAL_DMA_Abort_IT>
      break;
 800f492:	e02c      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68da      	ldr	r2, [r3, #12]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7f7 f8ff 	bl	80066ac <HAL_DMA_Abort_IT>
      break;
 800f4ae:	e01e      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	68da      	ldr	r2, [r3, #12]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f4be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f7 f8f1 	bl	80066ac <HAL_DMA_Abort_IT>
      break;
 800f4ca:	e010      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	68da      	ldr	r2, [r3, #12]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f4da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7f7 f8e3 	bl	80066ac <HAL_DMA_Abort_IT>
      break;
 800f4e6:	e002      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ec:	bf00      	nop
  }

  if (status == HAL_OK)
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f040 8081 	bne.w	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f001 f8c2 	bl	8010688 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a3e      	ldr	r2, [pc, #248]	@ (800f604 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d013      	beq.n	800f536 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a3d      	ldr	r2, [pc, #244]	@ (800f608 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d00e      	beq.n	800f536 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a3b      	ldr	r2, [pc, #236]	@ (800f60c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d009      	beq.n	800f536 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a3a      	ldr	r2, [pc, #232]	@ (800f610 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d004      	beq.n	800f536 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a38      	ldr	r2, [pc, #224]	@ (800f614 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d101      	bne.n	800f53a <HAL_TIM_PWM_Stop_DMA+0x112>
 800f536:	2301      	movs	r3, #1
 800f538:	e000      	b.n	800f53c <HAL_TIM_PWM_Stop_DMA+0x114>
 800f53a:	2300      	movs	r3, #0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d017      	beq.n	800f570 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6a1a      	ldr	r2, [r3, #32]
 800f546:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f54a:	4013      	ands	r3, r2
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10f      	bne.n	800f570 <HAL_TIM_PWM_Stop_DMA+0x148>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	6a1a      	ldr	r2, [r3, #32]
 800f556:	f240 4344 	movw	r3, #1092	@ 0x444
 800f55a:	4013      	ands	r3, r2
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d107      	bne.n	800f570 <HAL_TIM_PWM_Stop_DMA+0x148>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f56e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	6a1a      	ldr	r2, [r3, #32]
 800f576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f57a:	4013      	ands	r3, r2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10f      	bne.n	800f5a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6a1a      	ldr	r2, [r3, #32]
 800f586:	f240 4344 	movw	r3, #1092	@ 0x444
 800f58a:	4013      	ands	r3, r2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d107      	bne.n	800f5a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f022 0201 	bic.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <HAL_TIM_PWM_Stop_DMA+0x188>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f5ae:	e023      	b.n	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	2b04      	cmp	r3, #4
 800f5b4:	d104      	bne.n	800f5c0 <HAL_TIM_PWM_Stop_DMA+0x198>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f5be:	e01b      	b.n	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b08      	cmp	r3, #8
 800f5c4:	d104      	bne.n	800f5d0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f5ce:	e013      	b.n	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	2b0c      	cmp	r3, #12
 800f5d4:	d104      	bne.n	800f5e0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f5de:	e00b      	b.n	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b10      	cmp	r3, #16
 800f5e4:	d104      	bne.n	800f5f0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f5ee:	e003      	b.n	800f5f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	40010000 	.word	0x40010000
 800f608:	40010400 	.word	0x40010400
 800f60c:	40014000 	.word	0x40014000
 800f610:	40014400 	.word	0x40014400
 800f614:	40014800 	.word	0x40014800

0800f618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f003 0302 	and.w	r3, r3, #2
 800f636:	2b00      	cmp	r3, #0
 800f638:	d020      	beq.n	800f67c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f003 0302 	and.w	r3, r3, #2
 800f640:	2b00      	cmp	r3, #0
 800f642:	d01b      	beq.n	800f67c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f06f 0202 	mvn.w	r2, #2
 800f64c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2201      	movs	r2, #1
 800f652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	f003 0303 	and.w	r3, r3, #3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 faf6 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f668:	e005      	b.n	800f676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fae8 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7f4 fbc1 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	f003 0304 	and.w	r3, r3, #4
 800f682:	2b00      	cmp	r3, #0
 800f684:	d020      	beq.n	800f6c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f003 0304 	and.w	r3, r3, #4
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d01b      	beq.n	800f6c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f06f 0204 	mvn.w	r2, #4
 800f698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2202      	movs	r2, #2
 800f69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d003      	beq.n	800f6b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fad0 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f6b4:	e005      	b.n	800f6c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fac2 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f4 fb9b 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f003 0308 	and.w	r3, r3, #8
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d020      	beq.n	800f714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f003 0308 	and.w	r3, r3, #8
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d01b      	beq.n	800f714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f06f 0208 	mvn.w	r2, #8
 800f6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2204      	movs	r2, #4
 800f6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	69db      	ldr	r3, [r3, #28]
 800f6f2:	f003 0303 	and.w	r3, r3, #3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 faaa 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f700:	e005      	b.n	800f70e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fa9c 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7f4 fb75 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	f003 0310 	and.w	r3, r3, #16
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d020      	beq.n	800f760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f003 0310 	and.w	r3, r3, #16
 800f724:	2b00      	cmp	r3, #0
 800f726:	d01b      	beq.n	800f760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f06f 0210 	mvn.w	r2, #16
 800f730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2208      	movs	r2, #8
 800f736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	69db      	ldr	r3, [r3, #28]
 800f73e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fa84 	bl	800fc54 <HAL_TIM_IC_CaptureCallback>
 800f74c:	e005      	b.n	800f75a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fa76 	bl	800fc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7f4 fb4f 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00c      	beq.n	800f784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f06f 0201 	mvn.w	r2, #1
 800f77c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7f3 fe52 	bl	8003428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d104      	bne.n	800f798 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00c      	beq.n	800f7b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d007      	beq.n	800f7b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f001 f837 	bl	8010820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00c      	beq.n	800f7d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d007      	beq.n	800f7d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f001 f82f 	bl	8010834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00c      	beq.n	800f7fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d007      	beq.n	800f7fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fa41 	bl	800fc7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	f003 0320 	and.w	r3, r3, #32
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00c      	beq.n	800f81e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f003 0320 	and.w	r3, r3, #32
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d007      	beq.n	800f81e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f06f 0220 	mvn.w	r2, #32
 800f816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 fff7 	bl	801080c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f81e:	bf00      	nop
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
	...

0800f828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d101      	bne.n	800f846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f842:	2302      	movs	r3, #2
 800f844:	e0ff      	b.n	800fa46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b14      	cmp	r3, #20
 800f852:	f200 80f0 	bhi.w	800fa36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f856:	a201      	add	r2, pc, #4	@ (adr r2, 800f85c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85c:	0800f8b1 	.word	0x0800f8b1
 800f860:	0800fa37 	.word	0x0800fa37
 800f864:	0800fa37 	.word	0x0800fa37
 800f868:	0800fa37 	.word	0x0800fa37
 800f86c:	0800f8f1 	.word	0x0800f8f1
 800f870:	0800fa37 	.word	0x0800fa37
 800f874:	0800fa37 	.word	0x0800fa37
 800f878:	0800fa37 	.word	0x0800fa37
 800f87c:	0800f933 	.word	0x0800f933
 800f880:	0800fa37 	.word	0x0800fa37
 800f884:	0800fa37 	.word	0x0800fa37
 800f888:	0800fa37 	.word	0x0800fa37
 800f88c:	0800f973 	.word	0x0800f973
 800f890:	0800fa37 	.word	0x0800fa37
 800f894:	0800fa37 	.word	0x0800fa37
 800f898:	0800fa37 	.word	0x0800fa37
 800f89c:	0800f9b5 	.word	0x0800f9b5
 800f8a0:	0800fa37 	.word	0x0800fa37
 800f8a4:	0800fa37 	.word	0x0800fa37
 800f8a8:	0800fa37 	.word	0x0800fa37
 800f8ac:	0800f9f5 	.word	0x0800f9f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68b9      	ldr	r1, [r7, #8]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 fb72 	bl	800ffa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	699a      	ldr	r2, [r3, #24]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f042 0208 	orr.w	r2, r2, #8
 800f8ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	699a      	ldr	r2, [r3, #24]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f022 0204 	bic.w	r2, r2, #4
 800f8da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6999      	ldr	r1, [r3, #24]
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	691a      	ldr	r2, [r3, #16]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	430a      	orrs	r2, r1
 800f8ec:	619a      	str	r2, [r3, #24]
      break;
 800f8ee:	e0a5      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	68b9      	ldr	r1, [r7, #8]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 fbe2 	bl	80100c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	699a      	ldr	r2, [r3, #24]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f90a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	699a      	ldr	r2, [r3, #24]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f91a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6999      	ldr	r1, [r3, #24]
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	691b      	ldr	r3, [r3, #16]
 800f926:	021a      	lsls	r2, r3, #8
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	430a      	orrs	r2, r1
 800f92e:	619a      	str	r2, [r3, #24]
      break;
 800f930:	e084      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68b9      	ldr	r1, [r7, #8]
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 fc4b 	bl	80101d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	69da      	ldr	r2, [r3, #28]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f042 0208 	orr.w	r2, r2, #8
 800f94c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69da      	ldr	r2, [r3, #28]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0204 	bic.w	r2, r2, #4
 800f95c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	69d9      	ldr	r1, [r3, #28]
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	691a      	ldr	r2, [r3, #16]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	430a      	orrs	r2, r1
 800f96e:	61da      	str	r2, [r3, #28]
      break;
 800f970:	e064      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68b9      	ldr	r1, [r7, #8]
 800f978:	4618      	mov	r0, r3
 800f97a:	f000 fcb3 	bl	80102e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	69da      	ldr	r2, [r3, #28]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f98c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	69da      	ldr	r2, [r3, #28]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f99c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	69d9      	ldr	r1, [r3, #28]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	691b      	ldr	r3, [r3, #16]
 800f9a8:	021a      	lsls	r2, r3, #8
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	430a      	orrs	r2, r1
 800f9b0:	61da      	str	r2, [r3, #28]
      break;
 800f9b2:	e043      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68b9      	ldr	r1, [r7, #8]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 fcfc 	bl	80103b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f042 0208 	orr.w	r2, r2, #8
 800f9ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f022 0204 	bic.w	r2, r2, #4
 800f9de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	691a      	ldr	r2, [r3, #16]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	430a      	orrs	r2, r1
 800f9f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f9f2:	e023      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68b9      	ldr	r1, [r7, #8]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 fd40 	bl	8010480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fa1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	691b      	ldr	r3, [r3, #16]
 800fa2a:	021a      	lsls	r2, r3, #8
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	430a      	orrs	r2, r1
 800fa32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fa34:	e002      	b.n	800fa3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	75fb      	strb	r3, [r7, #23]
      break;
 800fa3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fa44:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3718      	adds	r7, #24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop

0800fa50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d101      	bne.n	800fa6c <HAL_TIM_ConfigClockSource+0x1c>
 800fa68:	2302      	movs	r3, #2
 800fa6a:	e0dc      	b.n	800fc26 <HAL_TIM_ConfigClockSource+0x1d6>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2202      	movs	r2, #2
 800fa78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	4b6a      	ldr	r3, [pc, #424]	@ (800fc30 <HAL_TIM_ConfigClockSource+0x1e0>)
 800fa88:	4013      	ands	r3, r2
 800fa8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fa92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a64      	ldr	r2, [pc, #400]	@ (800fc34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	f000 80a9 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800faa8:	4a62      	ldr	r2, [pc, #392]	@ (800fc34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	f200 80ae 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fab0:	4a61      	ldr	r2, [pc, #388]	@ (800fc38 <HAL_TIM_ConfigClockSource+0x1e8>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	f000 80a1 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fab8:	4a5f      	ldr	r2, [pc, #380]	@ (800fc38 <HAL_TIM_ConfigClockSource+0x1e8>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	f200 80a6 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fac0:	4a5e      	ldr	r2, [pc, #376]	@ (800fc3c <HAL_TIM_ConfigClockSource+0x1ec>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	f000 8099 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fac8:	4a5c      	ldr	r2, [pc, #368]	@ (800fc3c <HAL_TIM_ConfigClockSource+0x1ec>)
 800faca:	4293      	cmp	r3, r2
 800facc:	f200 809e 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fad0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fad4:	f000 8091 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fad8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fadc:	f200 8096 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fae4:	f000 8089 	beq.w	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800faec:	f200 808e 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800faf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faf4:	d03e      	beq.n	800fb74 <HAL_TIM_ConfigClockSource+0x124>
 800faf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fafa:	f200 8087 	bhi.w	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fafe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb02:	f000 8086 	beq.w	800fc12 <HAL_TIM_ConfigClockSource+0x1c2>
 800fb06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb0a:	d87f      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb0c:	2b70      	cmp	r3, #112	@ 0x70
 800fb0e:	d01a      	beq.n	800fb46 <HAL_TIM_ConfigClockSource+0xf6>
 800fb10:	2b70      	cmp	r3, #112	@ 0x70
 800fb12:	d87b      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb14:	2b60      	cmp	r3, #96	@ 0x60
 800fb16:	d050      	beq.n	800fbba <HAL_TIM_ConfigClockSource+0x16a>
 800fb18:	2b60      	cmp	r3, #96	@ 0x60
 800fb1a:	d877      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb1c:	2b50      	cmp	r3, #80	@ 0x50
 800fb1e:	d03c      	beq.n	800fb9a <HAL_TIM_ConfigClockSource+0x14a>
 800fb20:	2b50      	cmp	r3, #80	@ 0x50
 800fb22:	d873      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb24:	2b40      	cmp	r3, #64	@ 0x40
 800fb26:	d058      	beq.n	800fbda <HAL_TIM_ConfigClockSource+0x18a>
 800fb28:	2b40      	cmp	r3, #64	@ 0x40
 800fb2a:	d86f      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb2c:	2b30      	cmp	r3, #48	@ 0x30
 800fb2e:	d064      	beq.n	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fb30:	2b30      	cmp	r3, #48	@ 0x30
 800fb32:	d86b      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb34:	2b20      	cmp	r3, #32
 800fb36:	d060      	beq.n	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fb38:	2b20      	cmp	r3, #32
 800fb3a:	d867      	bhi.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d05c      	beq.n	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fb40:	2b10      	cmp	r3, #16
 800fb42:	d05a      	beq.n	800fbfa <HAL_TIM_ConfigClockSource+0x1aa>
 800fb44:	e062      	b.n	800fc0c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb56:	f000 fd77 	bl	8010648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fb68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	609a      	str	r2, [r3, #8]
      break;
 800fb72:	e04f      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb84:	f000 fd60 	bl	8010648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689a      	ldr	r2, [r3, #8]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fb96:	609a      	str	r2, [r3, #8]
      break;
 800fb98:	e03c      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fba6:	461a      	mov	r2, r3
 800fba8:	f000 fcd0 	bl	801054c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2150      	movs	r1, #80	@ 0x50
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f000 fd2a 	bl	801060c <TIM_ITRx_SetConfig>
      break;
 800fbb8:	e02c      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	f000 fcef 	bl	80105aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2160      	movs	r1, #96	@ 0x60
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 fd1a 	bl	801060c <TIM_ITRx_SetConfig>
      break;
 800fbd8:	e01c      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f000 fcb0 	bl	801054c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2140      	movs	r1, #64	@ 0x40
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 fd0a 	bl	801060c <TIM_ITRx_SetConfig>
      break;
 800fbf8:	e00c      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4619      	mov	r1, r3
 800fc04:	4610      	mov	r0, r2
 800fc06:	f000 fd01 	bl	801060c <TIM_ITRx_SetConfig>
      break;
 800fc0a:	e003      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc10:	e000      	b.n	800fc14 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800fc12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	ffceff88 	.word	0xffceff88
 800fc34:	00100040 	.word	0x00100040
 800fc38:	00100030 	.word	0x00100030
 800fc3c:	00100020 	.word	0x00100020

0800fc40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fc98:	bf00      	nop
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d107      	bne.n	800fccc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcca:	e02a      	b.n	800fd22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d107      	bne.n	800fce6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2202      	movs	r2, #2
 800fcda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fce4:	e01d      	b.n	800fd22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d107      	bne.n	800fd00 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2204      	movs	r2, #4
 800fcf4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fcfe:	e010      	b.n	800fd22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d107      	bne.n	800fd1a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2208      	movs	r2, #8
 800fd0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2201      	movs	r2, #1
 800fd14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fd18:	e003      	b.n	800fd22 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff ffb4 	bl	800fc90 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	771a      	strb	r2, [r3, #28]
}
 800fd2e:	bf00      	nop
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b084      	sub	sp, #16
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d10b      	bne.n	800fd66 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2201      	movs	r2, #1
 800fd52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d136      	bne.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fd64:	e031      	b.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d10b      	bne.n	800fd88 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2202      	movs	r2, #2
 800fd74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d125      	bne.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2201      	movs	r2, #1
 800fd82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd86:	e020      	b.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d10b      	bne.n	800fdaa <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2204      	movs	r2, #4
 800fd96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d114      	bne.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2201      	movs	r2, #1
 800fda4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fda8:	e00f      	b.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d10a      	bne.n	800fdca <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2208      	movs	r2, #8
 800fdb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	69db      	ldr	r3, [r3, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d103      	bne.n	800fdca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7f4 f814 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	771a      	strb	r2, [r3, #28]
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d103      	bne.n	800fdfe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	771a      	strb	r2, [r3, #28]
 800fdfc:	e019      	b.n	800fe32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d103      	bne.n	800fe10 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	771a      	strb	r2, [r3, #28]
 800fe0e:	e010      	b.n	800fe32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d103      	bne.n	800fe22 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2204      	movs	r2, #4
 800fe1e:	771a      	strb	r2, [r3, #28]
 800fe20:	e007      	b.n	800fe32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d102      	bne.n	800fe32 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2208      	movs	r2, #8
 800fe30:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7ff ff18 	bl	800fc68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	771a      	strb	r2, [r3, #28]
}
 800fe3e:	bf00      	nop
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
	...

0800fe48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4a47      	ldr	r2, [pc, #284]	@ (800ff78 <TIM_Base_SetConfig+0x130>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d013      	beq.n	800fe88 <TIM_Base_SetConfig+0x40>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe66:	d00f      	beq.n	800fe88 <TIM_Base_SetConfig+0x40>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a44      	ldr	r2, [pc, #272]	@ (800ff7c <TIM_Base_SetConfig+0x134>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d00b      	beq.n	800fe88 <TIM_Base_SetConfig+0x40>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a43      	ldr	r2, [pc, #268]	@ (800ff80 <TIM_Base_SetConfig+0x138>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d007      	beq.n	800fe88 <TIM_Base_SetConfig+0x40>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4a42      	ldr	r2, [pc, #264]	@ (800ff84 <TIM_Base_SetConfig+0x13c>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d003      	beq.n	800fe88 <TIM_Base_SetConfig+0x40>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a41      	ldr	r2, [pc, #260]	@ (800ff88 <TIM_Base_SetConfig+0x140>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d108      	bne.n	800fe9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4a36      	ldr	r2, [pc, #216]	@ (800ff78 <TIM_Base_SetConfig+0x130>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d027      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fea8:	d023      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4a33      	ldr	r2, [pc, #204]	@ (800ff7c <TIM_Base_SetConfig+0x134>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d01f      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4a32      	ldr	r2, [pc, #200]	@ (800ff80 <TIM_Base_SetConfig+0x138>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d01b      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4a31      	ldr	r2, [pc, #196]	@ (800ff84 <TIM_Base_SetConfig+0x13c>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d017      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4a30      	ldr	r2, [pc, #192]	@ (800ff88 <TIM_Base_SetConfig+0x140>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d013      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4a2f      	ldr	r2, [pc, #188]	@ (800ff8c <TIM_Base_SetConfig+0x144>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d00f      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a2e      	ldr	r2, [pc, #184]	@ (800ff90 <TIM_Base_SetConfig+0x148>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d00b      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a2d      	ldr	r2, [pc, #180]	@ (800ff94 <TIM_Base_SetConfig+0x14c>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d007      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a2c      	ldr	r2, [pc, #176]	@ (800ff98 <TIM_Base_SetConfig+0x150>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d003      	beq.n	800fef2 <TIM_Base_SetConfig+0xaa>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a2b      	ldr	r2, [pc, #172]	@ (800ff9c <TIM_Base_SetConfig+0x154>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d108      	bne.n	800ff04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	695b      	ldr	r3, [r3, #20]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	689a      	ldr	r2, [r3, #8]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4a14      	ldr	r2, [pc, #80]	@ (800ff78 <TIM_Base_SetConfig+0x130>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d00f      	beq.n	800ff4a <TIM_Base_SetConfig+0x102>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a16      	ldr	r2, [pc, #88]	@ (800ff88 <TIM_Base_SetConfig+0x140>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d00b      	beq.n	800ff4a <TIM_Base_SetConfig+0x102>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a15      	ldr	r2, [pc, #84]	@ (800ff8c <TIM_Base_SetConfig+0x144>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d007      	beq.n	800ff4a <TIM_Base_SetConfig+0x102>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a14      	ldr	r2, [pc, #80]	@ (800ff90 <TIM_Base_SetConfig+0x148>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d003      	beq.n	800ff4a <TIM_Base_SetConfig+0x102>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4a13      	ldr	r2, [pc, #76]	@ (800ff94 <TIM_Base_SetConfig+0x14c>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d103      	bne.n	800ff52 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	691a      	ldr	r2, [r3, #16]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f043 0204 	orr.w	r2, r3, #4
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2201      	movs	r2, #1
 800ff62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	601a      	str	r2, [r3, #0]
}
 800ff6a:	bf00      	nop
 800ff6c:	3714      	adds	r7, #20
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	40010000 	.word	0x40010000
 800ff7c:	40000400 	.word	0x40000400
 800ff80:	40000800 	.word	0x40000800
 800ff84:	40000c00 	.word	0x40000c00
 800ff88:	40010400 	.word	0x40010400
 800ff8c:	40014000 	.word	0x40014000
 800ff90:	40014400 	.word	0x40014400
 800ff94:	40014800 	.word	0x40014800
 800ff98:	4000e000 	.word	0x4000e000
 800ff9c:	4000e400 	.word	0x4000e400

0800ffa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a1b      	ldr	r3, [r3, #32]
 800ffb4:	f023 0201 	bic.w	r2, r3, #1
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	699b      	ldr	r3, [r3, #24]
 800ffc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	4b37      	ldr	r3, [pc, #220]	@ (80100a8 <TIM_OC1_SetConfig+0x108>)
 800ffcc:	4013      	ands	r3, r2
 800ffce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f023 0303 	bic.w	r3, r3, #3
 800ffd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f023 0302 	bic.w	r3, r3, #2
 800ffe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a2d      	ldr	r2, [pc, #180]	@ (80100ac <TIM_OC1_SetConfig+0x10c>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d00f      	beq.n	801001c <TIM_OC1_SetConfig+0x7c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a2c      	ldr	r2, [pc, #176]	@ (80100b0 <TIM_OC1_SetConfig+0x110>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d00b      	beq.n	801001c <TIM_OC1_SetConfig+0x7c>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a2b      	ldr	r2, [pc, #172]	@ (80100b4 <TIM_OC1_SetConfig+0x114>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d007      	beq.n	801001c <TIM_OC1_SetConfig+0x7c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	4a2a      	ldr	r2, [pc, #168]	@ (80100b8 <TIM_OC1_SetConfig+0x118>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d003      	beq.n	801001c <TIM_OC1_SetConfig+0x7c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a29      	ldr	r2, [pc, #164]	@ (80100bc <TIM_OC1_SetConfig+0x11c>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d10c      	bne.n	8010036 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f023 0308 	bic.w	r3, r3, #8
 8010022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	4313      	orrs	r3, r2
 801002c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f023 0304 	bic.w	r3, r3, #4
 8010034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4a1c      	ldr	r2, [pc, #112]	@ (80100ac <TIM_OC1_SetConfig+0x10c>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d00f      	beq.n	801005e <TIM_OC1_SetConfig+0xbe>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a1b      	ldr	r2, [pc, #108]	@ (80100b0 <TIM_OC1_SetConfig+0x110>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d00b      	beq.n	801005e <TIM_OC1_SetConfig+0xbe>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a1a      	ldr	r2, [pc, #104]	@ (80100b4 <TIM_OC1_SetConfig+0x114>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d007      	beq.n	801005e <TIM_OC1_SetConfig+0xbe>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a19      	ldr	r2, [pc, #100]	@ (80100b8 <TIM_OC1_SetConfig+0x118>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d003      	beq.n	801005e <TIM_OC1_SetConfig+0xbe>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a18      	ldr	r2, [pc, #96]	@ (80100bc <TIM_OC1_SetConfig+0x11c>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d111      	bne.n	8010082 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801006c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	4313      	orrs	r3, r2
 8010076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	4313      	orrs	r3, r2
 8010080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	693a      	ldr	r2, [r7, #16]
 8010086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	697a      	ldr	r2, [r7, #20]
 801009a:	621a      	str	r2, [r3, #32]
}
 801009c:	bf00      	nop
 801009e:	371c      	adds	r7, #28
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr
 80100a8:	fffeff8f 	.word	0xfffeff8f
 80100ac:	40010000 	.word	0x40010000
 80100b0:	40010400 	.word	0x40010400
 80100b4:	40014000 	.word	0x40014000
 80100b8:	40014400 	.word	0x40014400
 80100bc:	40014800 	.word	0x40014800

080100c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a1b      	ldr	r3, [r3, #32]
 80100ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a1b      	ldr	r3, [r3, #32]
 80100d4:	f023 0210 	bic.w	r2, r3, #16
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	699b      	ldr	r3, [r3, #24]
 80100e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	4b34      	ldr	r3, [pc, #208]	@ (80101bc <TIM_OC2_SetConfig+0xfc>)
 80100ec:	4013      	ands	r3, r2
 80100ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	021b      	lsls	r3, r3, #8
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	4313      	orrs	r3, r2
 8010102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	f023 0320 	bic.w	r3, r3, #32
 801010a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	011b      	lsls	r3, r3, #4
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	4313      	orrs	r3, r2
 8010116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a29      	ldr	r2, [pc, #164]	@ (80101c0 <TIM_OC2_SetConfig+0x100>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d003      	beq.n	8010128 <TIM_OC2_SetConfig+0x68>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a28      	ldr	r2, [pc, #160]	@ (80101c4 <TIM_OC2_SetConfig+0x104>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d10d      	bne.n	8010144 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801012e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	011b      	lsls	r3, r3, #4
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	4313      	orrs	r3, r2
 801013a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a1e      	ldr	r2, [pc, #120]	@ (80101c0 <TIM_OC2_SetConfig+0x100>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d00f      	beq.n	801016c <TIM_OC2_SetConfig+0xac>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a1d      	ldr	r2, [pc, #116]	@ (80101c4 <TIM_OC2_SetConfig+0x104>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d00b      	beq.n	801016c <TIM_OC2_SetConfig+0xac>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a1c      	ldr	r2, [pc, #112]	@ (80101c8 <TIM_OC2_SetConfig+0x108>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d007      	beq.n	801016c <TIM_OC2_SetConfig+0xac>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a1b      	ldr	r2, [pc, #108]	@ (80101cc <TIM_OC2_SetConfig+0x10c>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d003      	beq.n	801016c <TIM_OC2_SetConfig+0xac>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a1a      	ldr	r2, [pc, #104]	@ (80101d0 <TIM_OC2_SetConfig+0x110>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d113      	bne.n	8010194 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801017a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	4313      	orrs	r3, r2
 8010186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	4313      	orrs	r3, r2
 8010192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	621a      	str	r2, [r3, #32]
}
 80101ae:	bf00      	nop
 80101b0:	371c      	adds	r7, #28
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	feff8fff 	.word	0xfeff8fff
 80101c0:	40010000 	.word	0x40010000
 80101c4:	40010400 	.word	0x40010400
 80101c8:	40014000 	.word	0x40014000
 80101cc:	40014400 	.word	0x40014400
 80101d0:	40014800 	.word	0x40014800

080101d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b087      	sub	sp, #28
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a1b      	ldr	r3, [r3, #32]
 80101e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	69db      	ldr	r3, [r3, #28]
 80101fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4b33      	ldr	r3, [pc, #204]	@ (80102cc <TIM_OC3_SetConfig+0xf8>)
 8010200:	4013      	ands	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f023 0303 	bic.w	r3, r3, #3
 801020a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	4313      	orrs	r3, r2
 8010214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801021c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	021b      	lsls	r3, r3, #8
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	4313      	orrs	r3, r2
 8010228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a28      	ldr	r2, [pc, #160]	@ (80102d0 <TIM_OC3_SetConfig+0xfc>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d003      	beq.n	801023a <TIM_OC3_SetConfig+0x66>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a27      	ldr	r2, [pc, #156]	@ (80102d4 <TIM_OC3_SetConfig+0x100>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d10d      	bne.n	8010256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	021b      	lsls	r3, r3, #8
 8010248:	697a      	ldr	r2, [r7, #20]
 801024a:	4313      	orrs	r3, r2
 801024c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a1d      	ldr	r2, [pc, #116]	@ (80102d0 <TIM_OC3_SetConfig+0xfc>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d00f      	beq.n	801027e <TIM_OC3_SetConfig+0xaa>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a1c      	ldr	r2, [pc, #112]	@ (80102d4 <TIM_OC3_SetConfig+0x100>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d00b      	beq.n	801027e <TIM_OC3_SetConfig+0xaa>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a1b      	ldr	r2, [pc, #108]	@ (80102d8 <TIM_OC3_SetConfig+0x104>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d007      	beq.n	801027e <TIM_OC3_SetConfig+0xaa>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a1a      	ldr	r2, [pc, #104]	@ (80102dc <TIM_OC3_SetConfig+0x108>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d003      	beq.n	801027e <TIM_OC3_SetConfig+0xaa>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a19      	ldr	r2, [pc, #100]	@ (80102e0 <TIM_OC3_SetConfig+0x10c>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d113      	bne.n	80102a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801028c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	695b      	ldr	r3, [r3, #20]
 8010292:	011b      	lsls	r3, r3, #4
 8010294:	693a      	ldr	r2, [r7, #16]
 8010296:	4313      	orrs	r3, r2
 8010298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	4313      	orrs	r3, r2
 80102a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	697a      	ldr	r2, [r7, #20]
 80102be:	621a      	str	r2, [r3, #32]
}
 80102c0:	bf00      	nop
 80102c2:	371c      	adds	r7, #28
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	fffeff8f 	.word	0xfffeff8f
 80102d0:	40010000 	.word	0x40010000
 80102d4:	40010400 	.word	0x40010400
 80102d8:	40014000 	.word	0x40014000
 80102dc:	40014400 	.word	0x40014400
 80102e0:	40014800 	.word	0x40014800

080102e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b087      	sub	sp, #28
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6a1b      	ldr	r3, [r3, #32]
 80102f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	69db      	ldr	r3, [r3, #28]
 801030a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	4b24      	ldr	r3, [pc, #144]	@ (80103a0 <TIM_OC4_SetConfig+0xbc>)
 8010310:	4013      	ands	r3, r2
 8010312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801031a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	021b      	lsls	r3, r3, #8
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	4313      	orrs	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801032e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	031b      	lsls	r3, r3, #12
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	4313      	orrs	r3, r2
 801033a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4a19      	ldr	r2, [pc, #100]	@ (80103a4 <TIM_OC4_SetConfig+0xc0>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d00f      	beq.n	8010364 <TIM_OC4_SetConfig+0x80>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a18      	ldr	r2, [pc, #96]	@ (80103a8 <TIM_OC4_SetConfig+0xc4>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d00b      	beq.n	8010364 <TIM_OC4_SetConfig+0x80>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a17      	ldr	r2, [pc, #92]	@ (80103ac <TIM_OC4_SetConfig+0xc8>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d007      	beq.n	8010364 <TIM_OC4_SetConfig+0x80>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a16      	ldr	r2, [pc, #88]	@ (80103b0 <TIM_OC4_SetConfig+0xcc>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d003      	beq.n	8010364 <TIM_OC4_SetConfig+0x80>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a15      	ldr	r2, [pc, #84]	@ (80103b4 <TIM_OC4_SetConfig+0xd0>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d109      	bne.n	8010378 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801036a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	695b      	ldr	r3, [r3, #20]
 8010370:	019b      	lsls	r3, r3, #6
 8010372:	697a      	ldr	r2, [r7, #20]
 8010374:	4313      	orrs	r3, r2
 8010376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	685a      	ldr	r2, [r3, #4]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	621a      	str	r2, [r3, #32]
}
 8010392:	bf00      	nop
 8010394:	371c      	adds	r7, #28
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	feff8fff 	.word	0xfeff8fff
 80103a4:	40010000 	.word	0x40010000
 80103a8:	40010400 	.word	0x40010400
 80103ac:	40014000 	.word	0x40014000
 80103b0:	40014400 	.word	0x40014400
 80103b4:	40014800 	.word	0x40014800

080103b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	4b21      	ldr	r3, [pc, #132]	@ (8010468 <TIM_OC5_SetConfig+0xb0>)
 80103e4:	4013      	ands	r3, r2
 80103e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80103f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	041b      	lsls	r3, r3, #16
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	4313      	orrs	r3, r2
 8010404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a18      	ldr	r2, [pc, #96]	@ (801046c <TIM_OC5_SetConfig+0xb4>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d00f      	beq.n	801042e <TIM_OC5_SetConfig+0x76>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a17      	ldr	r2, [pc, #92]	@ (8010470 <TIM_OC5_SetConfig+0xb8>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d00b      	beq.n	801042e <TIM_OC5_SetConfig+0x76>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a16      	ldr	r2, [pc, #88]	@ (8010474 <TIM_OC5_SetConfig+0xbc>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d007      	beq.n	801042e <TIM_OC5_SetConfig+0x76>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a15      	ldr	r2, [pc, #84]	@ (8010478 <TIM_OC5_SetConfig+0xc0>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d003      	beq.n	801042e <TIM_OC5_SetConfig+0x76>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a14      	ldr	r2, [pc, #80]	@ (801047c <TIM_OC5_SetConfig+0xc4>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d109      	bne.n	8010442 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010434:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	695b      	ldr	r3, [r3, #20]
 801043a:	021b      	lsls	r3, r3, #8
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	4313      	orrs	r3, r2
 8010440:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	621a      	str	r2, [r3, #32]
}
 801045c:	bf00      	nop
 801045e:	371c      	adds	r7, #28
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	fffeff8f 	.word	0xfffeff8f
 801046c:	40010000 	.word	0x40010000
 8010470:	40010400 	.word	0x40010400
 8010474:	40014000 	.word	0x40014000
 8010478:	40014400 	.word	0x40014400
 801047c:	40014800 	.word	0x40014800

08010480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6a1b      	ldr	r3, [r3, #32]
 8010494:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4b22      	ldr	r3, [pc, #136]	@ (8010534 <TIM_OC6_SetConfig+0xb4>)
 80104ac:	4013      	ands	r3, r2
 80104ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	021b      	lsls	r3, r3, #8
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80104c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	051b      	lsls	r3, r3, #20
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a19      	ldr	r2, [pc, #100]	@ (8010538 <TIM_OC6_SetConfig+0xb8>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00f      	beq.n	80104f8 <TIM_OC6_SetConfig+0x78>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a18      	ldr	r2, [pc, #96]	@ (801053c <TIM_OC6_SetConfig+0xbc>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00b      	beq.n	80104f8 <TIM_OC6_SetConfig+0x78>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a17      	ldr	r2, [pc, #92]	@ (8010540 <TIM_OC6_SetConfig+0xc0>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d007      	beq.n	80104f8 <TIM_OC6_SetConfig+0x78>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a16      	ldr	r2, [pc, #88]	@ (8010544 <TIM_OC6_SetConfig+0xc4>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d003      	beq.n	80104f8 <TIM_OC6_SetConfig+0x78>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a15      	ldr	r2, [pc, #84]	@ (8010548 <TIM_OC6_SetConfig+0xc8>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d109      	bne.n	801050c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	029b      	lsls	r3, r3, #10
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	4313      	orrs	r3, r2
 801050a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	621a      	str	r2, [r3, #32]
}
 8010526:	bf00      	nop
 8010528:	371c      	adds	r7, #28
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	feff8fff 	.word	0xfeff8fff
 8010538:	40010000 	.word	0x40010000
 801053c:	40010400 	.word	0x40010400
 8010540:	40014000 	.word	0x40014000
 8010544:	40014400 	.word	0x40014400
 8010548:	40014800 	.word	0x40014800

0801054c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801054c:	b480      	push	{r7}
 801054e:	b087      	sub	sp, #28
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6a1b      	ldr	r3, [r3, #32]
 801055c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	f023 0201 	bic.w	r2, r3, #1
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	699b      	ldr	r3, [r3, #24]
 801056e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	011b      	lsls	r3, r3, #4
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	4313      	orrs	r3, r2
 8010580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	f023 030a 	bic.w	r3, r3, #10
 8010588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801058a:	697a      	ldr	r2, [r7, #20]
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	4313      	orrs	r3, r2
 8010590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	693a      	ldr	r2, [r7, #16]
 8010596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	621a      	str	r2, [r3, #32]
}
 801059e:	bf00      	nop
 80105a0:	371c      	adds	r7, #28
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b087      	sub	sp, #28
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	60f8      	str	r0, [r7, #12]
 80105b2:	60b9      	str	r1, [r7, #8]
 80105b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6a1b      	ldr	r3, [r3, #32]
 80105c0:	f023 0210 	bic.w	r2, r3, #16
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	699b      	ldr	r3, [r3, #24]
 80105cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80105d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	031b      	lsls	r3, r3, #12
 80105da:	693a      	ldr	r2, [r7, #16]
 80105dc:	4313      	orrs	r3, r2
 80105de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80105e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	011b      	lsls	r3, r3, #4
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	621a      	str	r2, [r3, #32]
}
 80105fe:	bf00      	nop
 8010600:	371c      	adds	r7, #28
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
	...

0801060c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801060c:	b480      	push	{r7}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	4b09      	ldr	r3, [pc, #36]	@ (8010644 <TIM_ITRx_SetConfig+0x38>)
 8010620:	4013      	ands	r3, r2
 8010622:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	4313      	orrs	r3, r2
 801062a:	f043 0307 	orr.w	r3, r3, #7
 801062e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	609a      	str	r2, [r3, #8]
}
 8010636:	bf00      	nop
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	ffcfff8f 	.word	0xffcfff8f

08010648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010648:	b480      	push	{r7}
 801064a:	b087      	sub	sp, #28
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	021a      	lsls	r2, r3, #8
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	431a      	orrs	r2, r3
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	4313      	orrs	r3, r2
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	4313      	orrs	r3, r2
 8010674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	609a      	str	r2, [r3, #8]
}
 801067c:	bf00      	nop
 801067e:	371c      	adds	r7, #28
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010688:	b480      	push	{r7}
 801068a:	b087      	sub	sp, #28
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	f003 031f 	and.w	r3, r3, #31
 801069a:	2201      	movs	r2, #1
 801069c:	fa02 f303 	lsl.w	r3, r2, r3
 80106a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6a1a      	ldr	r2, [r3, #32]
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	43db      	mvns	r3, r3
 80106aa:	401a      	ands	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6a1a      	ldr	r2, [r3, #32]
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	f003 031f 	and.w	r3, r3, #31
 80106ba:	6879      	ldr	r1, [r7, #4]
 80106bc:	fa01 f303 	lsl.w	r3, r1, r3
 80106c0:	431a      	orrs	r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	621a      	str	r2, [r3, #32]
}
 80106c6:	bf00      	nop
 80106c8:	371c      	adds	r7, #28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
	...

080106d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d101      	bne.n	80106ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106e8:	2302      	movs	r3, #2
 80106ea:	e077      	b.n	80107dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2201      	movs	r2, #1
 80106f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2202      	movs	r2, #2
 80106f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a35      	ldr	r2, [pc, #212]	@ (80107e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d004      	beq.n	8010720 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a34      	ldr	r2, [pc, #208]	@ (80107ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d108      	bne.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010726:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	4313      	orrs	r3, r2
 8010730:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	4313      	orrs	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a25      	ldr	r2, [pc, #148]	@ (80107e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d02c      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801075e:	d027      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4a22      	ldr	r2, [pc, #136]	@ (80107f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d022      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4a21      	ldr	r2, [pc, #132]	@ (80107f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d01d      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a1f      	ldr	r2, [pc, #124]	@ (80107f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d018      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a1a      	ldr	r2, [pc, #104]	@ (80107ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d013      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a1b      	ldr	r2, [pc, #108]	@ (80107fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d00e      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4a1a      	ldr	r2, [pc, #104]	@ (8010800 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d009      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	4a18      	ldr	r2, [pc, #96]	@ (8010804 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d004      	beq.n	80107b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4a17      	ldr	r2, [pc, #92]	@ (8010808 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d10c      	bne.n	80107ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80107b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	4313      	orrs	r3, r2
 80107c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3714      	adds	r7, #20
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	40010000 	.word	0x40010000
 80107ec:	40010400 	.word	0x40010400
 80107f0:	40000400 	.word	0x40000400
 80107f4:	40000800 	.word	0x40000800
 80107f8:	40000c00 	.word	0x40000c00
 80107fc:	40001800 	.word	0x40001800
 8010800:	40014000 	.word	0x40014000
 8010804:	4000e000 	.word	0x4000e000
 8010808:	4000e400 	.word	0x4000e400

0801080c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010814:	bf00      	nop
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010828:	bf00      	nop
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801083c:	bf00      	nop
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	e042      	b.n	80108e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010860:	2b00      	cmp	r3, #0
 8010862:	d106      	bne.n	8010872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7f4 fb23 	bl	8004eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2224      	movs	r2, #36	@ 0x24
 8010876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f022 0201 	bic.w	r2, r2, #1
 8010888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088e:	2b00      	cmp	r3, #0
 8010890:	d002      	beq.n	8010898 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f001 fa8a 	bl	8011dac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 fc1b 	bl	80110d4 <UART_SetConfig>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d101      	bne.n	80108a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80108a4:	2301      	movs	r3, #1
 80108a6:	e01b      	b.n	80108e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80108b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	689a      	ldr	r2, [r3, #8]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80108c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f042 0201 	orr.w	r2, r2, #1
 80108d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f001 fb09 	bl	8011ef0 <UART_CheckIdleState>
 80108de:	4603      	mov	r3, r0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b0ba      	sub	sp, #232	@ 0xe8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	69db      	ldr	r3, [r3, #28]
 80108f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	689b      	ldr	r3, [r3, #8]
 801090a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801090e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010912:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010916:	4013      	ands	r3, r2
 8010918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801091c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010920:	2b00      	cmp	r3, #0
 8010922:	d11b      	bne.n	801095c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010928:	f003 0320 	and.w	r3, r3, #32
 801092c:	2b00      	cmp	r3, #0
 801092e:	d015      	beq.n	801095c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010934:	f003 0320 	and.w	r3, r3, #32
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801093c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010944:	2b00      	cmp	r3, #0
 8010946:	d009      	beq.n	801095c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 8393 	beq.w	8011078 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	4798      	blx	r3
      }
      return;
 801095a:	e38d      	b.n	8011078 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801095c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 8123 	beq.w	8010bac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801096a:	4b8d      	ldr	r3, [pc, #564]	@ (8010ba0 <HAL_UART_IRQHandler+0x2b8>)
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010972:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010976:	4b8b      	ldr	r3, [pc, #556]	@ (8010ba4 <HAL_UART_IRQHandler+0x2bc>)
 8010978:	4013      	ands	r3, r2
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 8116 	beq.w	8010bac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d011      	beq.n	80109b0 <HAL_UART_IRQHandler+0xc8>
 801098c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00b      	beq.n	80109b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2201      	movs	r2, #1
 801099e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109a6:	f043 0201 	orr.w	r2, r3, #1
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109b4:	f003 0302 	and.w	r3, r3, #2
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d011      	beq.n	80109e0 <HAL_UART_IRQHandler+0xf8>
 80109bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00b      	beq.n	80109e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2202      	movs	r2, #2
 80109ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109d6:	f043 0204 	orr.w	r2, r3, #4
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d011      	beq.n	8010a10 <HAL_UART_IRQHandler+0x128>
 80109ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00b      	beq.n	8010a10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2204      	movs	r2, #4
 80109fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a06:	f043 0202 	orr.w	r2, r3, #2
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a14:	f003 0308 	and.w	r3, r3, #8
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d017      	beq.n	8010a4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a20:	f003 0320 	and.w	r3, r3, #32
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d105      	bne.n	8010a34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010a28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ba0 <HAL_UART_IRQHandler+0x2b8>)
 8010a2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00b      	beq.n	8010a4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2208      	movs	r2, #8
 8010a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a42:	f043 0208 	orr.w	r2, r3, #8
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d012      	beq.n	8010a7e <HAL_UART_IRQHandler+0x196>
 8010a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00c      	beq.n	8010a7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a74:	f043 0220 	orr.w	r2, r3, #32
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f000 82f9 	beq.w	801107c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a8e:	f003 0320 	and.w	r3, r3, #32
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d013      	beq.n	8010abe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a9a:	f003 0320 	and.w	r3, r3, #32
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d105      	bne.n	8010aae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d007      	beq.n	8010abe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d003      	beq.n	8010abe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ad2:	2b40      	cmp	r3, #64	@ 0x40
 8010ad4:	d005      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010ada:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d054      	beq.n	8010b8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f001 fb1c 	bl	8012120 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010af2:	2b40      	cmp	r3, #64	@ 0x40
 8010af4:	d146      	bne.n	8010b84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3308      	adds	r3, #8
 8010afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010b04:	e853 3f00 	ldrex	r3, [r3]
 8010b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	3308      	adds	r3, #8
 8010b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010b32:	e841 2300 	strex	r3, r2, [r1]
 8010b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1d9      	bne.n	8010af6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d017      	beq.n	8010b7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b52:	4a15      	ldr	r2, [pc, #84]	@ (8010ba8 <HAL_UART_IRQHandler+0x2c0>)
 8010b54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f5 fda5 	bl	80066ac <HAL_DMA_Abort_IT>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d019      	beq.n	8010b9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010b76:	4610      	mov	r0, r2
 8010b78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b7a:	e00f      	b.n	8010b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f000 fa93 	bl	80110a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b82:	e00b      	b.n	8010b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 fa8f 	bl	80110a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b8a:	e007      	b.n	8010b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fa8b 	bl	80110a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010b9a:	e26f      	b.n	801107c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b9c:	bf00      	nop
    return;
 8010b9e:	e26d      	b.n	801107c <HAL_UART_IRQHandler+0x794>
 8010ba0:	10000001 	.word	0x10000001
 8010ba4:	04000120 	.word	0x04000120
 8010ba8:	080121ed 	.word	0x080121ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	f040 8203 	bne.w	8010fbc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bba:	f003 0310 	and.w	r3, r3, #16
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 81fc 	beq.w	8010fbc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bc8:	f003 0310 	and.w	r3, r3, #16
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f000 81f5 	beq.w	8010fbc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2210      	movs	r2, #16
 8010bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010be4:	2b40      	cmp	r3, #64	@ 0x40
 8010be6:	f040 816d 	bne.w	8010ec4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4aa4      	ldr	r2, [pc, #656]	@ (8010e84 <HAL_UART_IRQHandler+0x59c>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d068      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4aa1      	ldr	r2, [pc, #644]	@ (8010e88 <HAL_UART_IRQHandler+0x5a0>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d061      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4a9f      	ldr	r2, [pc, #636]	@ (8010e8c <HAL_UART_IRQHandler+0x5a4>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d05a      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a9c      	ldr	r2, [pc, #624]	@ (8010e90 <HAL_UART_IRQHandler+0x5a8>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d053      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a9a      	ldr	r2, [pc, #616]	@ (8010e94 <HAL_UART_IRQHandler+0x5ac>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d04c      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a97      	ldr	r2, [pc, #604]	@ (8010e98 <HAL_UART_IRQHandler+0x5b0>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d045      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4a95      	ldr	r2, [pc, #596]	@ (8010e9c <HAL_UART_IRQHandler+0x5b4>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d03e      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a92      	ldr	r2, [pc, #584]	@ (8010ea0 <HAL_UART_IRQHandler+0x5b8>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d037      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a90      	ldr	r2, [pc, #576]	@ (8010ea4 <HAL_UART_IRQHandler+0x5bc>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d030      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a8d      	ldr	r2, [pc, #564]	@ (8010ea8 <HAL_UART_IRQHandler+0x5c0>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d029      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a8b      	ldr	r2, [pc, #556]	@ (8010eac <HAL_UART_IRQHandler+0x5c4>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d022      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a88      	ldr	r2, [pc, #544]	@ (8010eb0 <HAL_UART_IRQHandler+0x5c8>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d01b      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a86      	ldr	r2, [pc, #536]	@ (8010eb4 <HAL_UART_IRQHandler+0x5cc>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d014      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a83      	ldr	r2, [pc, #524]	@ (8010eb8 <HAL_UART_IRQHandler+0x5d0>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d00d      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a81      	ldr	r2, [pc, #516]	@ (8010ebc <HAL_UART_IRQHandler+0x5d4>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d006      	beq.n	8010cca <HAL_UART_IRQHandler+0x3e2>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8010ec0 <HAL_UART_IRQHandler+0x5d8>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d106      	bne.n	8010cd8 <HAL_UART_IRQHandler+0x3f0>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	e005      	b.n	8010ce4 <HAL_UART_IRQHandler+0x3fc>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 80ad 	beq.w	8010e4c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010cf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	f080 80a5 	bcs.w	8010e4c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d12:	69db      	ldr	r3, [r3, #28]
 8010d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d18:	f000 8087 	beq.w	8010e2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010d28:	e853 3f00 	ldrex	r3, [r3]
 8010d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010d4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010d56:	e841 2300 	strex	r3, r2, [r1]
 8010d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1da      	bne.n	8010d1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3308      	adds	r3, #8
 8010d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d70:	e853 3f00 	ldrex	r3, [r3]
 8010d74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010d78:	f023 0301 	bic.w	r3, r3, #1
 8010d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3308      	adds	r3, #8
 8010d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010d8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010d96:	e841 2300 	strex	r3, r2, [r1]
 8010d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1e1      	bne.n	8010d66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	3308      	adds	r3, #8
 8010da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	3308      	adds	r3, #8
 8010dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dce:	e841 2300 	strex	r3, r2, [r1]
 8010dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1e3      	bne.n	8010da2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2220      	movs	r2, #32
 8010dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010df0:	e853 3f00 	ldrex	r3, [r3]
 8010df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010df8:	f023 0310 	bic.w	r3, r3, #16
 8010dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	461a      	mov	r2, r3
 8010e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e12:	e841 2300 	strex	r3, r2, [r1]
 8010e16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1e4      	bne.n	8010de8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7f5 f923 	bl	8006070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2202      	movs	r2, #2
 8010e2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f000 f939 	bl	80110bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010e4a:	e119      	b.n	8011080 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e56:	429a      	cmp	r2, r3
 8010e58:	f040 8112 	bne.w	8011080 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e62:	69db      	ldr	r3, [r3, #28]
 8010e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e68:	f040 810a 	bne.w	8011080 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2202      	movs	r2, #2
 8010e70:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 f91e 	bl	80110bc <HAL_UARTEx_RxEventCallback>
      return;
 8010e80:	e0fe      	b.n	8011080 <HAL_UART_IRQHandler+0x798>
 8010e82:	bf00      	nop
 8010e84:	40020010 	.word	0x40020010
 8010e88:	40020028 	.word	0x40020028
 8010e8c:	40020040 	.word	0x40020040
 8010e90:	40020058 	.word	0x40020058
 8010e94:	40020070 	.word	0x40020070
 8010e98:	40020088 	.word	0x40020088
 8010e9c:	400200a0 	.word	0x400200a0
 8010ea0:	400200b8 	.word	0x400200b8
 8010ea4:	40020410 	.word	0x40020410
 8010ea8:	40020428 	.word	0x40020428
 8010eac:	40020440 	.word	0x40020440
 8010eb0:	40020458 	.word	0x40020458
 8010eb4:	40020470 	.word	0x40020470
 8010eb8:	40020488 	.word	0x40020488
 8010ebc:	400204a0 	.word	0x400204a0
 8010ec0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80cf 	beq.w	8011084 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8010ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f000 80ca 	beq.w	8011084 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef8:	e853 3f00 	ldrex	r3, [r3]
 8010efc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f14:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f1a:	e841 2300 	strex	r3, r2, [r1]
 8010f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1e4      	bne.n	8010ef0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	3308      	adds	r3, #8
 8010f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f30:	e853 3f00 	ldrex	r3, [r3]
 8010f34:	623b      	str	r3, [r7, #32]
   return(result);
 8010f36:	6a3a      	ldr	r2, [r7, #32]
 8010f38:	4b55      	ldr	r3, [pc, #340]	@ (8011090 <HAL_UART_IRQHandler+0x7a8>)
 8010f3a:	4013      	ands	r3, r2
 8010f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	3308      	adds	r3, #8
 8010f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8010f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f52:	e841 2300 	strex	r3, r2, [r1]
 8010f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1e3      	bne.n	8010f26 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2220      	movs	r2, #32
 8010f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	e853 3f00 	ldrex	r3, [r3]
 8010f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f023 0310 	bic.w	r3, r3, #16
 8010f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010f94:	61fb      	str	r3, [r7, #28]
 8010f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f98:	69b9      	ldr	r1, [r7, #24]
 8010f9a:	69fa      	ldr	r2, [r7, #28]
 8010f9c:	e841 2300 	strex	r3, r2, [r1]
 8010fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1e4      	bne.n	8010f72 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2202      	movs	r2, #2
 8010fac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 f881 	bl	80110bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010fba:	e063      	b.n	8011084 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00e      	beq.n	8010fe6 <HAL_UART_IRQHandler+0x6fe>
 8010fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d008      	beq.n	8010fe6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f001 f941 	bl	8012266 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010fe4:	e051      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d014      	beq.n	801101c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d105      	bne.n	801100a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011006:	2b00      	cmp	r3, #0
 8011008:	d008      	beq.n	801101c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801100e:	2b00      	cmp	r3, #0
 8011010:	d03a      	beq.n	8011088 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	4798      	blx	r3
    }
    return;
 801101a:	e035      	b.n	8011088 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801101c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011024:	2b00      	cmp	r3, #0
 8011026:	d009      	beq.n	801103c <HAL_UART_IRQHandler+0x754>
 8011028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801102c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011030:	2b00      	cmp	r3, #0
 8011032:	d003      	beq.n	801103c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f001 f8eb 	bl	8012210 <UART_EndTransmit_IT>
    return;
 801103a:	e026      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801103c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011040:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d009      	beq.n	801105c <HAL_UART_IRQHandler+0x774>
 8011048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801104c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011050:	2b00      	cmp	r3, #0
 8011052:	d003      	beq.n	801105c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f001 f91a 	bl	801228e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801105a:	e016      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801105c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d010      	beq.n	801108a <HAL_UART_IRQHandler+0x7a2>
 8011068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801106c:	2b00      	cmp	r3, #0
 801106e:	da0c      	bge.n	801108a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f001 f902 	bl	801227a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011076:	e008      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011078:	bf00      	nop
 801107a:	e006      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
    return;
 801107c:	bf00      	nop
 801107e:	e004      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011080:	bf00      	nop
 8011082:	e002      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
      return;
 8011084:	bf00      	nop
 8011086:	e000      	b.n	801108a <HAL_UART_IRQHandler+0x7a2>
    return;
 8011088:	bf00      	nop
  }
}
 801108a:	37e8      	adds	r7, #232	@ 0xe8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	effffffe 	.word	0xeffffffe

08011094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	460b      	mov	r3, r1
 80110c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110d8:	b092      	sub	sp, #72	@ 0x48
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	689a      	ldr	r2, [r3, #8]
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	691b      	ldr	r3, [r3, #16]
 80110ec:	431a      	orrs	r2, r3
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	431a      	orrs	r2, r3
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	69db      	ldr	r3, [r3, #28]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	4bbe      	ldr	r3, [pc, #760]	@ (80113fc <UART_SetConfig+0x328>)
 8011104:	4013      	ands	r3, r2
 8011106:	697a      	ldr	r2, [r7, #20]
 8011108:	6812      	ldr	r2, [r2, #0]
 801110a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801110c:	430b      	orrs	r3, r1
 801110e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	68da      	ldr	r2, [r3, #12]
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	430a      	orrs	r2, r1
 8011124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	699b      	ldr	r3, [r3, #24]
 801112a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4ab3      	ldr	r2, [pc, #716]	@ (8011400 <UART_SetConfig+0x32c>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d004      	beq.n	8011140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	6a1b      	ldr	r3, [r3, #32]
 801113a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801113c:	4313      	orrs	r3, r2
 801113e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	689a      	ldr	r2, [r3, #8]
 8011146:	4baf      	ldr	r3, [pc, #700]	@ (8011404 <UART_SetConfig+0x330>)
 8011148:	4013      	ands	r3, r2
 801114a:	697a      	ldr	r2, [r7, #20]
 801114c:	6812      	ldr	r2, [r2, #0]
 801114e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011150:	430b      	orrs	r3, r1
 8011152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115a:	f023 010f 	bic.w	r1, r3, #15
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	430a      	orrs	r2, r1
 8011168:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4aa6      	ldr	r2, [pc, #664]	@ (8011408 <UART_SetConfig+0x334>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d177      	bne.n	8011264 <UART_SetConfig+0x190>
 8011174:	4ba5      	ldr	r3, [pc, #660]	@ (801140c <UART_SetConfig+0x338>)
 8011176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801117c:	2b28      	cmp	r3, #40	@ 0x28
 801117e:	d86d      	bhi.n	801125c <UART_SetConfig+0x188>
 8011180:	a201      	add	r2, pc, #4	@ (adr r2, 8011188 <UART_SetConfig+0xb4>)
 8011182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011186:	bf00      	nop
 8011188:	0801122d 	.word	0x0801122d
 801118c:	0801125d 	.word	0x0801125d
 8011190:	0801125d 	.word	0x0801125d
 8011194:	0801125d 	.word	0x0801125d
 8011198:	0801125d 	.word	0x0801125d
 801119c:	0801125d 	.word	0x0801125d
 80111a0:	0801125d 	.word	0x0801125d
 80111a4:	0801125d 	.word	0x0801125d
 80111a8:	08011235 	.word	0x08011235
 80111ac:	0801125d 	.word	0x0801125d
 80111b0:	0801125d 	.word	0x0801125d
 80111b4:	0801125d 	.word	0x0801125d
 80111b8:	0801125d 	.word	0x0801125d
 80111bc:	0801125d 	.word	0x0801125d
 80111c0:	0801125d 	.word	0x0801125d
 80111c4:	0801125d 	.word	0x0801125d
 80111c8:	0801123d 	.word	0x0801123d
 80111cc:	0801125d 	.word	0x0801125d
 80111d0:	0801125d 	.word	0x0801125d
 80111d4:	0801125d 	.word	0x0801125d
 80111d8:	0801125d 	.word	0x0801125d
 80111dc:	0801125d 	.word	0x0801125d
 80111e0:	0801125d 	.word	0x0801125d
 80111e4:	0801125d 	.word	0x0801125d
 80111e8:	08011245 	.word	0x08011245
 80111ec:	0801125d 	.word	0x0801125d
 80111f0:	0801125d 	.word	0x0801125d
 80111f4:	0801125d 	.word	0x0801125d
 80111f8:	0801125d 	.word	0x0801125d
 80111fc:	0801125d 	.word	0x0801125d
 8011200:	0801125d 	.word	0x0801125d
 8011204:	0801125d 	.word	0x0801125d
 8011208:	0801124d 	.word	0x0801124d
 801120c:	0801125d 	.word	0x0801125d
 8011210:	0801125d 	.word	0x0801125d
 8011214:	0801125d 	.word	0x0801125d
 8011218:	0801125d 	.word	0x0801125d
 801121c:	0801125d 	.word	0x0801125d
 8011220:	0801125d 	.word	0x0801125d
 8011224:	0801125d 	.word	0x0801125d
 8011228:	08011255 	.word	0x08011255
 801122c:	2301      	movs	r3, #1
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011232:	e326      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011234:	2304      	movs	r3, #4
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801123a:	e322      	b.n	8011882 <UART_SetConfig+0x7ae>
 801123c:	2308      	movs	r3, #8
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011242:	e31e      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011244:	2310      	movs	r3, #16
 8011246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801124a:	e31a      	b.n	8011882 <UART_SetConfig+0x7ae>
 801124c:	2320      	movs	r3, #32
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011252:	e316      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011254:	2340      	movs	r3, #64	@ 0x40
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801125a:	e312      	b.n	8011882 <UART_SetConfig+0x7ae>
 801125c:	2380      	movs	r3, #128	@ 0x80
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011262:	e30e      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a69      	ldr	r2, [pc, #420]	@ (8011410 <UART_SetConfig+0x33c>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d130      	bne.n	80112d0 <UART_SetConfig+0x1fc>
 801126e:	4b67      	ldr	r3, [pc, #412]	@ (801140c <UART_SetConfig+0x338>)
 8011270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011272:	f003 0307 	and.w	r3, r3, #7
 8011276:	2b05      	cmp	r3, #5
 8011278:	d826      	bhi.n	80112c8 <UART_SetConfig+0x1f4>
 801127a:	a201      	add	r2, pc, #4	@ (adr r2, 8011280 <UART_SetConfig+0x1ac>)
 801127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011280:	08011299 	.word	0x08011299
 8011284:	080112a1 	.word	0x080112a1
 8011288:	080112a9 	.word	0x080112a9
 801128c:	080112b1 	.word	0x080112b1
 8011290:	080112b9 	.word	0x080112b9
 8011294:	080112c1 	.word	0x080112c1
 8011298:	2300      	movs	r3, #0
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801129e:	e2f0      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112a0:	2304      	movs	r3, #4
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112a6:	e2ec      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112a8:	2308      	movs	r3, #8
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112ae:	e2e8      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112b0:	2310      	movs	r3, #16
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112b6:	e2e4      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112b8:	2320      	movs	r3, #32
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112be:	e2e0      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112c0:	2340      	movs	r3, #64	@ 0x40
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112c6:	e2dc      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112c8:	2380      	movs	r3, #128	@ 0x80
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112ce:	e2d8      	b.n	8011882 <UART_SetConfig+0x7ae>
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4a4f      	ldr	r2, [pc, #316]	@ (8011414 <UART_SetConfig+0x340>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d130      	bne.n	801133c <UART_SetConfig+0x268>
 80112da:	4b4c      	ldr	r3, [pc, #304]	@ (801140c <UART_SetConfig+0x338>)
 80112dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112de:	f003 0307 	and.w	r3, r3, #7
 80112e2:	2b05      	cmp	r3, #5
 80112e4:	d826      	bhi.n	8011334 <UART_SetConfig+0x260>
 80112e6:	a201      	add	r2, pc, #4	@ (adr r2, 80112ec <UART_SetConfig+0x218>)
 80112e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ec:	08011305 	.word	0x08011305
 80112f0:	0801130d 	.word	0x0801130d
 80112f4:	08011315 	.word	0x08011315
 80112f8:	0801131d 	.word	0x0801131d
 80112fc:	08011325 	.word	0x08011325
 8011300:	0801132d 	.word	0x0801132d
 8011304:	2300      	movs	r3, #0
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801130a:	e2ba      	b.n	8011882 <UART_SetConfig+0x7ae>
 801130c:	2304      	movs	r3, #4
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011312:	e2b6      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011314:	2308      	movs	r3, #8
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801131a:	e2b2      	b.n	8011882 <UART_SetConfig+0x7ae>
 801131c:	2310      	movs	r3, #16
 801131e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011322:	e2ae      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011324:	2320      	movs	r3, #32
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801132a:	e2aa      	b.n	8011882 <UART_SetConfig+0x7ae>
 801132c:	2340      	movs	r3, #64	@ 0x40
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011332:	e2a6      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011334:	2380      	movs	r3, #128	@ 0x80
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801133a:	e2a2      	b.n	8011882 <UART_SetConfig+0x7ae>
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4a35      	ldr	r2, [pc, #212]	@ (8011418 <UART_SetConfig+0x344>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d130      	bne.n	80113a8 <UART_SetConfig+0x2d4>
 8011346:	4b31      	ldr	r3, [pc, #196]	@ (801140c <UART_SetConfig+0x338>)
 8011348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801134a:	f003 0307 	and.w	r3, r3, #7
 801134e:	2b05      	cmp	r3, #5
 8011350:	d826      	bhi.n	80113a0 <UART_SetConfig+0x2cc>
 8011352:	a201      	add	r2, pc, #4	@ (adr r2, 8011358 <UART_SetConfig+0x284>)
 8011354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011358:	08011371 	.word	0x08011371
 801135c:	08011379 	.word	0x08011379
 8011360:	08011381 	.word	0x08011381
 8011364:	08011389 	.word	0x08011389
 8011368:	08011391 	.word	0x08011391
 801136c:	08011399 	.word	0x08011399
 8011370:	2300      	movs	r3, #0
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011376:	e284      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011378:	2304      	movs	r3, #4
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801137e:	e280      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011380:	2308      	movs	r3, #8
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011386:	e27c      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011388:	2310      	movs	r3, #16
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801138e:	e278      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011390:	2320      	movs	r3, #32
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011396:	e274      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011398:	2340      	movs	r3, #64	@ 0x40
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801139e:	e270      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113a0:	2380      	movs	r3, #128	@ 0x80
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113a6:	e26c      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a1b      	ldr	r2, [pc, #108]	@ (801141c <UART_SetConfig+0x348>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d142      	bne.n	8011438 <UART_SetConfig+0x364>
 80113b2:	4b16      	ldr	r3, [pc, #88]	@ (801140c <UART_SetConfig+0x338>)
 80113b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113b6:	f003 0307 	and.w	r3, r3, #7
 80113ba:	2b05      	cmp	r3, #5
 80113bc:	d838      	bhi.n	8011430 <UART_SetConfig+0x35c>
 80113be:	a201      	add	r2, pc, #4	@ (adr r2, 80113c4 <UART_SetConfig+0x2f0>)
 80113c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c4:	080113dd 	.word	0x080113dd
 80113c8:	080113e5 	.word	0x080113e5
 80113cc:	080113ed 	.word	0x080113ed
 80113d0:	080113f5 	.word	0x080113f5
 80113d4:	08011421 	.word	0x08011421
 80113d8:	08011429 	.word	0x08011429
 80113dc:	2300      	movs	r3, #0
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113e2:	e24e      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113e4:	2304      	movs	r3, #4
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ea:	e24a      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113ec:	2308      	movs	r3, #8
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113f2:	e246      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113f4:	2310      	movs	r3, #16
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113fa:	e242      	b.n	8011882 <UART_SetConfig+0x7ae>
 80113fc:	cfff69f3 	.word	0xcfff69f3
 8011400:	58000c00 	.word	0x58000c00
 8011404:	11fff4ff 	.word	0x11fff4ff
 8011408:	40011000 	.word	0x40011000
 801140c:	58024400 	.word	0x58024400
 8011410:	40004400 	.word	0x40004400
 8011414:	40004800 	.word	0x40004800
 8011418:	40004c00 	.word	0x40004c00
 801141c:	40005000 	.word	0x40005000
 8011420:	2320      	movs	r3, #32
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011426:	e22c      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011428:	2340      	movs	r3, #64	@ 0x40
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801142e:	e228      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011430:	2380      	movs	r3, #128	@ 0x80
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011436:	e224      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4ab1      	ldr	r2, [pc, #708]	@ (8011704 <UART_SetConfig+0x630>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d176      	bne.n	8011530 <UART_SetConfig+0x45c>
 8011442:	4bb1      	ldr	r3, [pc, #708]	@ (8011708 <UART_SetConfig+0x634>)
 8011444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801144a:	2b28      	cmp	r3, #40	@ 0x28
 801144c:	d86c      	bhi.n	8011528 <UART_SetConfig+0x454>
 801144e:	a201      	add	r2, pc, #4	@ (adr r2, 8011454 <UART_SetConfig+0x380>)
 8011450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011454:	080114f9 	.word	0x080114f9
 8011458:	08011529 	.word	0x08011529
 801145c:	08011529 	.word	0x08011529
 8011460:	08011529 	.word	0x08011529
 8011464:	08011529 	.word	0x08011529
 8011468:	08011529 	.word	0x08011529
 801146c:	08011529 	.word	0x08011529
 8011470:	08011529 	.word	0x08011529
 8011474:	08011501 	.word	0x08011501
 8011478:	08011529 	.word	0x08011529
 801147c:	08011529 	.word	0x08011529
 8011480:	08011529 	.word	0x08011529
 8011484:	08011529 	.word	0x08011529
 8011488:	08011529 	.word	0x08011529
 801148c:	08011529 	.word	0x08011529
 8011490:	08011529 	.word	0x08011529
 8011494:	08011509 	.word	0x08011509
 8011498:	08011529 	.word	0x08011529
 801149c:	08011529 	.word	0x08011529
 80114a0:	08011529 	.word	0x08011529
 80114a4:	08011529 	.word	0x08011529
 80114a8:	08011529 	.word	0x08011529
 80114ac:	08011529 	.word	0x08011529
 80114b0:	08011529 	.word	0x08011529
 80114b4:	08011511 	.word	0x08011511
 80114b8:	08011529 	.word	0x08011529
 80114bc:	08011529 	.word	0x08011529
 80114c0:	08011529 	.word	0x08011529
 80114c4:	08011529 	.word	0x08011529
 80114c8:	08011529 	.word	0x08011529
 80114cc:	08011529 	.word	0x08011529
 80114d0:	08011529 	.word	0x08011529
 80114d4:	08011519 	.word	0x08011519
 80114d8:	08011529 	.word	0x08011529
 80114dc:	08011529 	.word	0x08011529
 80114e0:	08011529 	.word	0x08011529
 80114e4:	08011529 	.word	0x08011529
 80114e8:	08011529 	.word	0x08011529
 80114ec:	08011529 	.word	0x08011529
 80114f0:	08011529 	.word	0x08011529
 80114f4:	08011521 	.word	0x08011521
 80114f8:	2301      	movs	r3, #1
 80114fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114fe:	e1c0      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011500:	2304      	movs	r3, #4
 8011502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011506:	e1bc      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011508:	2308      	movs	r3, #8
 801150a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801150e:	e1b8      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011510:	2310      	movs	r3, #16
 8011512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011516:	e1b4      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011518:	2320      	movs	r3, #32
 801151a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801151e:	e1b0      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011520:	2340      	movs	r3, #64	@ 0x40
 8011522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011526:	e1ac      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011528:	2380      	movs	r3, #128	@ 0x80
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801152e:	e1a8      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4a75      	ldr	r2, [pc, #468]	@ (801170c <UART_SetConfig+0x638>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d130      	bne.n	801159c <UART_SetConfig+0x4c8>
 801153a:	4b73      	ldr	r3, [pc, #460]	@ (8011708 <UART_SetConfig+0x634>)
 801153c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801153e:	f003 0307 	and.w	r3, r3, #7
 8011542:	2b05      	cmp	r3, #5
 8011544:	d826      	bhi.n	8011594 <UART_SetConfig+0x4c0>
 8011546:	a201      	add	r2, pc, #4	@ (adr r2, 801154c <UART_SetConfig+0x478>)
 8011548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801154c:	08011565 	.word	0x08011565
 8011550:	0801156d 	.word	0x0801156d
 8011554:	08011575 	.word	0x08011575
 8011558:	0801157d 	.word	0x0801157d
 801155c:	08011585 	.word	0x08011585
 8011560:	0801158d 	.word	0x0801158d
 8011564:	2300      	movs	r3, #0
 8011566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801156a:	e18a      	b.n	8011882 <UART_SetConfig+0x7ae>
 801156c:	2304      	movs	r3, #4
 801156e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011572:	e186      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011574:	2308      	movs	r3, #8
 8011576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801157a:	e182      	b.n	8011882 <UART_SetConfig+0x7ae>
 801157c:	2310      	movs	r3, #16
 801157e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011582:	e17e      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011584:	2320      	movs	r3, #32
 8011586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801158a:	e17a      	b.n	8011882 <UART_SetConfig+0x7ae>
 801158c:	2340      	movs	r3, #64	@ 0x40
 801158e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011592:	e176      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011594:	2380      	movs	r3, #128	@ 0x80
 8011596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801159a:	e172      	b.n	8011882 <UART_SetConfig+0x7ae>
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a5b      	ldr	r2, [pc, #364]	@ (8011710 <UART_SetConfig+0x63c>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d130      	bne.n	8011608 <UART_SetConfig+0x534>
 80115a6:	4b58      	ldr	r3, [pc, #352]	@ (8011708 <UART_SetConfig+0x634>)
 80115a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115aa:	f003 0307 	and.w	r3, r3, #7
 80115ae:	2b05      	cmp	r3, #5
 80115b0:	d826      	bhi.n	8011600 <UART_SetConfig+0x52c>
 80115b2:	a201      	add	r2, pc, #4	@ (adr r2, 80115b8 <UART_SetConfig+0x4e4>)
 80115b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b8:	080115d1 	.word	0x080115d1
 80115bc:	080115d9 	.word	0x080115d9
 80115c0:	080115e1 	.word	0x080115e1
 80115c4:	080115e9 	.word	0x080115e9
 80115c8:	080115f1 	.word	0x080115f1
 80115cc:	080115f9 	.word	0x080115f9
 80115d0:	2300      	movs	r3, #0
 80115d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115d6:	e154      	b.n	8011882 <UART_SetConfig+0x7ae>
 80115d8:	2304      	movs	r3, #4
 80115da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115de:	e150      	b.n	8011882 <UART_SetConfig+0x7ae>
 80115e0:	2308      	movs	r3, #8
 80115e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115e6:	e14c      	b.n	8011882 <UART_SetConfig+0x7ae>
 80115e8:	2310      	movs	r3, #16
 80115ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115ee:	e148      	b.n	8011882 <UART_SetConfig+0x7ae>
 80115f0:	2320      	movs	r3, #32
 80115f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115f6:	e144      	b.n	8011882 <UART_SetConfig+0x7ae>
 80115f8:	2340      	movs	r3, #64	@ 0x40
 80115fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115fe:	e140      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011600:	2380      	movs	r3, #128	@ 0x80
 8011602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011606:	e13c      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4a41      	ldr	r2, [pc, #260]	@ (8011714 <UART_SetConfig+0x640>)
 801160e:	4293      	cmp	r3, r2
 8011610:	f040 8082 	bne.w	8011718 <UART_SetConfig+0x644>
 8011614:	4b3c      	ldr	r3, [pc, #240]	@ (8011708 <UART_SetConfig+0x634>)
 8011616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801161c:	2b28      	cmp	r3, #40	@ 0x28
 801161e:	d86d      	bhi.n	80116fc <UART_SetConfig+0x628>
 8011620:	a201      	add	r2, pc, #4	@ (adr r2, 8011628 <UART_SetConfig+0x554>)
 8011622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011626:	bf00      	nop
 8011628:	080116cd 	.word	0x080116cd
 801162c:	080116fd 	.word	0x080116fd
 8011630:	080116fd 	.word	0x080116fd
 8011634:	080116fd 	.word	0x080116fd
 8011638:	080116fd 	.word	0x080116fd
 801163c:	080116fd 	.word	0x080116fd
 8011640:	080116fd 	.word	0x080116fd
 8011644:	080116fd 	.word	0x080116fd
 8011648:	080116d5 	.word	0x080116d5
 801164c:	080116fd 	.word	0x080116fd
 8011650:	080116fd 	.word	0x080116fd
 8011654:	080116fd 	.word	0x080116fd
 8011658:	080116fd 	.word	0x080116fd
 801165c:	080116fd 	.word	0x080116fd
 8011660:	080116fd 	.word	0x080116fd
 8011664:	080116fd 	.word	0x080116fd
 8011668:	080116dd 	.word	0x080116dd
 801166c:	080116fd 	.word	0x080116fd
 8011670:	080116fd 	.word	0x080116fd
 8011674:	080116fd 	.word	0x080116fd
 8011678:	080116fd 	.word	0x080116fd
 801167c:	080116fd 	.word	0x080116fd
 8011680:	080116fd 	.word	0x080116fd
 8011684:	080116fd 	.word	0x080116fd
 8011688:	080116e5 	.word	0x080116e5
 801168c:	080116fd 	.word	0x080116fd
 8011690:	080116fd 	.word	0x080116fd
 8011694:	080116fd 	.word	0x080116fd
 8011698:	080116fd 	.word	0x080116fd
 801169c:	080116fd 	.word	0x080116fd
 80116a0:	080116fd 	.word	0x080116fd
 80116a4:	080116fd 	.word	0x080116fd
 80116a8:	080116ed 	.word	0x080116ed
 80116ac:	080116fd 	.word	0x080116fd
 80116b0:	080116fd 	.word	0x080116fd
 80116b4:	080116fd 	.word	0x080116fd
 80116b8:	080116fd 	.word	0x080116fd
 80116bc:	080116fd 	.word	0x080116fd
 80116c0:	080116fd 	.word	0x080116fd
 80116c4:	080116fd 	.word	0x080116fd
 80116c8:	080116f5 	.word	0x080116f5
 80116cc:	2301      	movs	r3, #1
 80116ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116d2:	e0d6      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116d4:	2304      	movs	r3, #4
 80116d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116da:	e0d2      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116dc:	2308      	movs	r3, #8
 80116de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116e2:	e0ce      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116e4:	2310      	movs	r3, #16
 80116e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116ea:	e0ca      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116ec:	2320      	movs	r3, #32
 80116ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116f2:	e0c6      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116f4:	2340      	movs	r3, #64	@ 0x40
 80116f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116fa:	e0c2      	b.n	8011882 <UART_SetConfig+0x7ae>
 80116fc:	2380      	movs	r3, #128	@ 0x80
 80116fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011702:	e0be      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011704:	40011400 	.word	0x40011400
 8011708:	58024400 	.word	0x58024400
 801170c:	40007800 	.word	0x40007800
 8011710:	40007c00 	.word	0x40007c00
 8011714:	40011800 	.word	0x40011800
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4aad      	ldr	r2, [pc, #692]	@ (80119d4 <UART_SetConfig+0x900>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d176      	bne.n	8011810 <UART_SetConfig+0x73c>
 8011722:	4bad      	ldr	r3, [pc, #692]	@ (80119d8 <UART_SetConfig+0x904>)
 8011724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801172a:	2b28      	cmp	r3, #40	@ 0x28
 801172c:	d86c      	bhi.n	8011808 <UART_SetConfig+0x734>
 801172e:	a201      	add	r2, pc, #4	@ (adr r2, 8011734 <UART_SetConfig+0x660>)
 8011730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011734:	080117d9 	.word	0x080117d9
 8011738:	08011809 	.word	0x08011809
 801173c:	08011809 	.word	0x08011809
 8011740:	08011809 	.word	0x08011809
 8011744:	08011809 	.word	0x08011809
 8011748:	08011809 	.word	0x08011809
 801174c:	08011809 	.word	0x08011809
 8011750:	08011809 	.word	0x08011809
 8011754:	080117e1 	.word	0x080117e1
 8011758:	08011809 	.word	0x08011809
 801175c:	08011809 	.word	0x08011809
 8011760:	08011809 	.word	0x08011809
 8011764:	08011809 	.word	0x08011809
 8011768:	08011809 	.word	0x08011809
 801176c:	08011809 	.word	0x08011809
 8011770:	08011809 	.word	0x08011809
 8011774:	080117e9 	.word	0x080117e9
 8011778:	08011809 	.word	0x08011809
 801177c:	08011809 	.word	0x08011809
 8011780:	08011809 	.word	0x08011809
 8011784:	08011809 	.word	0x08011809
 8011788:	08011809 	.word	0x08011809
 801178c:	08011809 	.word	0x08011809
 8011790:	08011809 	.word	0x08011809
 8011794:	080117f1 	.word	0x080117f1
 8011798:	08011809 	.word	0x08011809
 801179c:	08011809 	.word	0x08011809
 80117a0:	08011809 	.word	0x08011809
 80117a4:	08011809 	.word	0x08011809
 80117a8:	08011809 	.word	0x08011809
 80117ac:	08011809 	.word	0x08011809
 80117b0:	08011809 	.word	0x08011809
 80117b4:	080117f9 	.word	0x080117f9
 80117b8:	08011809 	.word	0x08011809
 80117bc:	08011809 	.word	0x08011809
 80117c0:	08011809 	.word	0x08011809
 80117c4:	08011809 	.word	0x08011809
 80117c8:	08011809 	.word	0x08011809
 80117cc:	08011809 	.word	0x08011809
 80117d0:	08011809 	.word	0x08011809
 80117d4:	08011801 	.word	0x08011801
 80117d8:	2301      	movs	r3, #1
 80117da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117de:	e050      	b.n	8011882 <UART_SetConfig+0x7ae>
 80117e0:	2304      	movs	r3, #4
 80117e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117e6:	e04c      	b.n	8011882 <UART_SetConfig+0x7ae>
 80117e8:	2308      	movs	r3, #8
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117ee:	e048      	b.n	8011882 <UART_SetConfig+0x7ae>
 80117f0:	2310      	movs	r3, #16
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117f6:	e044      	b.n	8011882 <UART_SetConfig+0x7ae>
 80117f8:	2320      	movs	r3, #32
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117fe:	e040      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011800:	2340      	movs	r3, #64	@ 0x40
 8011802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011806:	e03c      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011808:	2380      	movs	r3, #128	@ 0x80
 801180a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801180e:	e038      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a71      	ldr	r2, [pc, #452]	@ (80119dc <UART_SetConfig+0x908>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d130      	bne.n	801187c <UART_SetConfig+0x7a8>
 801181a:	4b6f      	ldr	r3, [pc, #444]	@ (80119d8 <UART_SetConfig+0x904>)
 801181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801181e:	f003 0307 	and.w	r3, r3, #7
 8011822:	2b05      	cmp	r3, #5
 8011824:	d826      	bhi.n	8011874 <UART_SetConfig+0x7a0>
 8011826:	a201      	add	r2, pc, #4	@ (adr r2, 801182c <UART_SetConfig+0x758>)
 8011828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182c:	08011845 	.word	0x08011845
 8011830:	0801184d 	.word	0x0801184d
 8011834:	08011855 	.word	0x08011855
 8011838:	0801185d 	.word	0x0801185d
 801183c:	08011865 	.word	0x08011865
 8011840:	0801186d 	.word	0x0801186d
 8011844:	2302      	movs	r3, #2
 8011846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801184a:	e01a      	b.n	8011882 <UART_SetConfig+0x7ae>
 801184c:	2304      	movs	r3, #4
 801184e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011852:	e016      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011854:	2308      	movs	r3, #8
 8011856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801185a:	e012      	b.n	8011882 <UART_SetConfig+0x7ae>
 801185c:	2310      	movs	r3, #16
 801185e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011862:	e00e      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011864:	2320      	movs	r3, #32
 8011866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801186a:	e00a      	b.n	8011882 <UART_SetConfig+0x7ae>
 801186c:	2340      	movs	r3, #64	@ 0x40
 801186e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011872:	e006      	b.n	8011882 <UART_SetConfig+0x7ae>
 8011874:	2380      	movs	r3, #128	@ 0x80
 8011876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801187a:	e002      	b.n	8011882 <UART_SetConfig+0x7ae>
 801187c:	2380      	movs	r3, #128	@ 0x80
 801187e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4a55      	ldr	r2, [pc, #340]	@ (80119dc <UART_SetConfig+0x908>)
 8011888:	4293      	cmp	r3, r2
 801188a:	f040 80f8 	bne.w	8011a7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801188e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011892:	2b20      	cmp	r3, #32
 8011894:	dc46      	bgt.n	8011924 <UART_SetConfig+0x850>
 8011896:	2b02      	cmp	r3, #2
 8011898:	db75      	blt.n	8011986 <UART_SetConfig+0x8b2>
 801189a:	3b02      	subs	r3, #2
 801189c:	2b1e      	cmp	r3, #30
 801189e:	d872      	bhi.n	8011986 <UART_SetConfig+0x8b2>
 80118a0:	a201      	add	r2, pc, #4	@ (adr r2, 80118a8 <UART_SetConfig+0x7d4>)
 80118a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a6:	bf00      	nop
 80118a8:	0801192b 	.word	0x0801192b
 80118ac:	08011987 	.word	0x08011987
 80118b0:	08011933 	.word	0x08011933
 80118b4:	08011987 	.word	0x08011987
 80118b8:	08011987 	.word	0x08011987
 80118bc:	08011987 	.word	0x08011987
 80118c0:	08011943 	.word	0x08011943
 80118c4:	08011987 	.word	0x08011987
 80118c8:	08011987 	.word	0x08011987
 80118cc:	08011987 	.word	0x08011987
 80118d0:	08011987 	.word	0x08011987
 80118d4:	08011987 	.word	0x08011987
 80118d8:	08011987 	.word	0x08011987
 80118dc:	08011987 	.word	0x08011987
 80118e0:	08011953 	.word	0x08011953
 80118e4:	08011987 	.word	0x08011987
 80118e8:	08011987 	.word	0x08011987
 80118ec:	08011987 	.word	0x08011987
 80118f0:	08011987 	.word	0x08011987
 80118f4:	08011987 	.word	0x08011987
 80118f8:	08011987 	.word	0x08011987
 80118fc:	08011987 	.word	0x08011987
 8011900:	08011987 	.word	0x08011987
 8011904:	08011987 	.word	0x08011987
 8011908:	08011987 	.word	0x08011987
 801190c:	08011987 	.word	0x08011987
 8011910:	08011987 	.word	0x08011987
 8011914:	08011987 	.word	0x08011987
 8011918:	08011987 	.word	0x08011987
 801191c:	08011987 	.word	0x08011987
 8011920:	08011979 	.word	0x08011979
 8011924:	2b40      	cmp	r3, #64	@ 0x40
 8011926:	d02a      	beq.n	801197e <UART_SetConfig+0x8aa>
 8011928:	e02d      	b.n	8011986 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801192a:	f7fb fe21 	bl	800d570 <HAL_RCCEx_GetD3PCLK1Freq>
 801192e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011930:	e02f      	b.n	8011992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011936:	4618      	mov	r0, r3
 8011938:	f7fb fe30 	bl	800d59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801193c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011940:	e027      	b.n	8011992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011942:	f107 0318 	add.w	r3, r7, #24
 8011946:	4618      	mov	r0, r3
 8011948:	f7fb ff7c 	bl	800d844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011950:	e01f      	b.n	8011992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011952:	4b21      	ldr	r3, [pc, #132]	@ (80119d8 <UART_SetConfig+0x904>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 0320 	and.w	r3, r3, #32
 801195a:	2b00      	cmp	r3, #0
 801195c:	d009      	beq.n	8011972 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801195e:	4b1e      	ldr	r3, [pc, #120]	@ (80119d8 <UART_SetConfig+0x904>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	08db      	lsrs	r3, r3, #3
 8011964:	f003 0303 	and.w	r3, r3, #3
 8011968:	4a1d      	ldr	r2, [pc, #116]	@ (80119e0 <UART_SetConfig+0x90c>)
 801196a:	fa22 f303 	lsr.w	r3, r2, r3
 801196e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011970:	e00f      	b.n	8011992 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011972:	4b1b      	ldr	r3, [pc, #108]	@ (80119e0 <UART_SetConfig+0x90c>)
 8011974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011976:	e00c      	b.n	8011992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011978:	4b1a      	ldr	r3, [pc, #104]	@ (80119e4 <UART_SetConfig+0x910>)
 801197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801197c:	e009      	b.n	8011992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801197e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011984:	e005      	b.n	8011992 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011986:	2300      	movs	r3, #0
 8011988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801198a:	2301      	movs	r3, #1
 801198c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011994:	2b00      	cmp	r3, #0
 8011996:	f000 81ee 	beq.w	8011d76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801199e:	4a12      	ldr	r2, [pc, #72]	@ (80119e8 <UART_SetConfig+0x914>)
 80119a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119a4:	461a      	mov	r2, r3
 80119a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80119ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	685a      	ldr	r2, [r3, #4]
 80119b2:	4613      	mov	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	4413      	add	r3, r2
 80119b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d305      	bcc.n	80119ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d910      	bls.n	80119ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80119ca:	2301      	movs	r3, #1
 80119cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80119d0:	e1d1      	b.n	8011d76 <UART_SetConfig+0xca2>
 80119d2:	bf00      	nop
 80119d4:	40011c00 	.word	0x40011c00
 80119d8:	58024400 	.word	0x58024400
 80119dc:	58000c00 	.word	0x58000c00
 80119e0:	03d09000 	.word	0x03d09000
 80119e4:	003d0900 	.word	0x003d0900
 80119e8:	0801ae94 	.word	0x0801ae94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ee:	2200      	movs	r2, #0
 80119f0:	60bb      	str	r3, [r7, #8]
 80119f2:	60fa      	str	r2, [r7, #12]
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119f8:	4ac0      	ldr	r2, [pc, #768]	@ (8011cfc <UART_SetConfig+0xc28>)
 80119fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	2200      	movs	r2, #0
 8011a02:	603b      	str	r3, [r7, #0]
 8011a04:	607a      	str	r2, [r7, #4]
 8011a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a0e:	f7ee fcd7 	bl	80003c0 <__aeabi_uldivmod>
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4610      	mov	r0, r2
 8011a18:	4619      	mov	r1, r3
 8011a1a:	f04f 0200 	mov.w	r2, #0
 8011a1e:	f04f 0300 	mov.w	r3, #0
 8011a22:	020b      	lsls	r3, r1, #8
 8011a24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a28:	0202      	lsls	r2, r0, #8
 8011a2a:	6979      	ldr	r1, [r7, #20]
 8011a2c:	6849      	ldr	r1, [r1, #4]
 8011a2e:	0849      	lsrs	r1, r1, #1
 8011a30:	2000      	movs	r0, #0
 8011a32:	460c      	mov	r4, r1
 8011a34:	4605      	mov	r5, r0
 8011a36:	eb12 0804 	adds.w	r8, r2, r4
 8011a3a:	eb43 0905 	adc.w	r9, r3, r5
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	469a      	mov	sl, r3
 8011a46:	4693      	mov	fp, r2
 8011a48:	4652      	mov	r2, sl
 8011a4a:	465b      	mov	r3, fp
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	4649      	mov	r1, r9
 8011a50:	f7ee fcb6 	bl	80003c0 <__aeabi_uldivmod>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4613      	mov	r3, r2
 8011a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011a62:	d308      	bcc.n	8011a76 <UART_SetConfig+0x9a2>
 8011a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011a6a:	d204      	bcs.n	8011a76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a72:	60da      	str	r2, [r3, #12]
 8011a74:	e17f      	b.n	8011d76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011a76:	2301      	movs	r3, #1
 8011a78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011a7c:	e17b      	b.n	8011d76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	69db      	ldr	r3, [r3, #28]
 8011a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011a86:	f040 80bd 	bne.w	8011c04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011a8e:	2b20      	cmp	r3, #32
 8011a90:	dc48      	bgt.n	8011b24 <UART_SetConfig+0xa50>
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	db7b      	blt.n	8011b8e <UART_SetConfig+0xaba>
 8011a96:	2b20      	cmp	r3, #32
 8011a98:	d879      	bhi.n	8011b8e <UART_SetConfig+0xaba>
 8011a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011aa0 <UART_SetConfig+0x9cc>)
 8011a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa0:	08011b2b 	.word	0x08011b2b
 8011aa4:	08011b33 	.word	0x08011b33
 8011aa8:	08011b8f 	.word	0x08011b8f
 8011aac:	08011b8f 	.word	0x08011b8f
 8011ab0:	08011b3b 	.word	0x08011b3b
 8011ab4:	08011b8f 	.word	0x08011b8f
 8011ab8:	08011b8f 	.word	0x08011b8f
 8011abc:	08011b8f 	.word	0x08011b8f
 8011ac0:	08011b4b 	.word	0x08011b4b
 8011ac4:	08011b8f 	.word	0x08011b8f
 8011ac8:	08011b8f 	.word	0x08011b8f
 8011acc:	08011b8f 	.word	0x08011b8f
 8011ad0:	08011b8f 	.word	0x08011b8f
 8011ad4:	08011b8f 	.word	0x08011b8f
 8011ad8:	08011b8f 	.word	0x08011b8f
 8011adc:	08011b8f 	.word	0x08011b8f
 8011ae0:	08011b5b 	.word	0x08011b5b
 8011ae4:	08011b8f 	.word	0x08011b8f
 8011ae8:	08011b8f 	.word	0x08011b8f
 8011aec:	08011b8f 	.word	0x08011b8f
 8011af0:	08011b8f 	.word	0x08011b8f
 8011af4:	08011b8f 	.word	0x08011b8f
 8011af8:	08011b8f 	.word	0x08011b8f
 8011afc:	08011b8f 	.word	0x08011b8f
 8011b00:	08011b8f 	.word	0x08011b8f
 8011b04:	08011b8f 	.word	0x08011b8f
 8011b08:	08011b8f 	.word	0x08011b8f
 8011b0c:	08011b8f 	.word	0x08011b8f
 8011b10:	08011b8f 	.word	0x08011b8f
 8011b14:	08011b8f 	.word	0x08011b8f
 8011b18:	08011b8f 	.word	0x08011b8f
 8011b1c:	08011b8f 	.word	0x08011b8f
 8011b20:	08011b81 	.word	0x08011b81
 8011b24:	2b40      	cmp	r3, #64	@ 0x40
 8011b26:	d02e      	beq.n	8011b86 <UART_SetConfig+0xab2>
 8011b28:	e031      	b.n	8011b8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b2a:	f7fa fb13 	bl	800c154 <HAL_RCC_GetPCLK1Freq>
 8011b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011b30:	e033      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b32:	f7fa fb25 	bl	800c180 <HAL_RCC_GetPCLK2Freq>
 8011b36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011b38:	e02f      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7fb fd2c 	bl	800d59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b48:	e027      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b4a:	f107 0318 	add.w	r3, r7, #24
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fb fe78 	bl	800d844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b58:	e01f      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b5a:	4b69      	ldr	r3, [pc, #420]	@ (8011d00 <UART_SetConfig+0xc2c>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f003 0320 	and.w	r3, r3, #32
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d009      	beq.n	8011b7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b66:	4b66      	ldr	r3, [pc, #408]	@ (8011d00 <UART_SetConfig+0xc2c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	08db      	lsrs	r3, r3, #3
 8011b6c:	f003 0303 	and.w	r3, r3, #3
 8011b70:	4a64      	ldr	r2, [pc, #400]	@ (8011d04 <UART_SetConfig+0xc30>)
 8011b72:	fa22 f303 	lsr.w	r3, r2, r3
 8011b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b78:	e00f      	b.n	8011b9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011b7a:	4b62      	ldr	r3, [pc, #392]	@ (8011d04 <UART_SetConfig+0xc30>)
 8011b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b7e:	e00c      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b80:	4b61      	ldr	r3, [pc, #388]	@ (8011d08 <UART_SetConfig+0xc34>)
 8011b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b84:	e009      	b.n	8011b9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011b8c:	e005      	b.n	8011b9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011b92:	2301      	movs	r3, #1
 8011b94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	f000 80ea 	beq.w	8011d76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ba6:	4a55      	ldr	r2, [pc, #340]	@ (8011cfc <UART_SetConfig+0xc28>)
 8011ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bac:	461a      	mov	r2, r3
 8011bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bb4:	005a      	lsls	r2, r3, #1
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	085b      	lsrs	r3, r3, #1
 8011bbc:	441a      	add	r2, r3
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bca:	2b0f      	cmp	r3, #15
 8011bcc:	d916      	bls.n	8011bfc <UART_SetConfig+0xb28>
 8011bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011bd4:	d212      	bcs.n	8011bfc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	f023 030f 	bic.w	r3, r3, #15
 8011bde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be2:	085b      	lsrs	r3, r3, #1
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	f003 0307 	and.w	r3, r3, #7
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011bf8:	60da      	str	r2, [r3, #12]
 8011bfa:	e0bc      	b.n	8011d76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011c02:	e0b8      	b.n	8011d76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011c08:	2b20      	cmp	r3, #32
 8011c0a:	dc4b      	bgt.n	8011ca4 <UART_SetConfig+0xbd0>
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f2c0 8087 	blt.w	8011d20 <UART_SetConfig+0xc4c>
 8011c12:	2b20      	cmp	r3, #32
 8011c14:	f200 8084 	bhi.w	8011d20 <UART_SetConfig+0xc4c>
 8011c18:	a201      	add	r2, pc, #4	@ (adr r2, 8011c20 <UART_SetConfig+0xb4c>)
 8011c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c1e:	bf00      	nop
 8011c20:	08011cab 	.word	0x08011cab
 8011c24:	08011cb3 	.word	0x08011cb3
 8011c28:	08011d21 	.word	0x08011d21
 8011c2c:	08011d21 	.word	0x08011d21
 8011c30:	08011cbb 	.word	0x08011cbb
 8011c34:	08011d21 	.word	0x08011d21
 8011c38:	08011d21 	.word	0x08011d21
 8011c3c:	08011d21 	.word	0x08011d21
 8011c40:	08011ccb 	.word	0x08011ccb
 8011c44:	08011d21 	.word	0x08011d21
 8011c48:	08011d21 	.word	0x08011d21
 8011c4c:	08011d21 	.word	0x08011d21
 8011c50:	08011d21 	.word	0x08011d21
 8011c54:	08011d21 	.word	0x08011d21
 8011c58:	08011d21 	.word	0x08011d21
 8011c5c:	08011d21 	.word	0x08011d21
 8011c60:	08011cdb 	.word	0x08011cdb
 8011c64:	08011d21 	.word	0x08011d21
 8011c68:	08011d21 	.word	0x08011d21
 8011c6c:	08011d21 	.word	0x08011d21
 8011c70:	08011d21 	.word	0x08011d21
 8011c74:	08011d21 	.word	0x08011d21
 8011c78:	08011d21 	.word	0x08011d21
 8011c7c:	08011d21 	.word	0x08011d21
 8011c80:	08011d21 	.word	0x08011d21
 8011c84:	08011d21 	.word	0x08011d21
 8011c88:	08011d21 	.word	0x08011d21
 8011c8c:	08011d21 	.word	0x08011d21
 8011c90:	08011d21 	.word	0x08011d21
 8011c94:	08011d21 	.word	0x08011d21
 8011c98:	08011d21 	.word	0x08011d21
 8011c9c:	08011d21 	.word	0x08011d21
 8011ca0:	08011d13 	.word	0x08011d13
 8011ca4:	2b40      	cmp	r3, #64	@ 0x40
 8011ca6:	d037      	beq.n	8011d18 <UART_SetConfig+0xc44>
 8011ca8:	e03a      	b.n	8011d20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011caa:	f7fa fa53 	bl	800c154 <HAL_RCC_GetPCLK1Freq>
 8011cae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011cb0:	e03c      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cb2:	f7fa fa65 	bl	800c180 <HAL_RCC_GetPCLK2Freq>
 8011cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011cb8:	e038      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fb fc6c 	bl	800d59c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cc8:	e030      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cca:	f107 0318 	add.w	r3, r7, #24
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fb fdb8 	bl	800d844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cd8:	e028      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cda:	4b09      	ldr	r3, [pc, #36]	@ (8011d00 <UART_SetConfig+0xc2c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f003 0320 	and.w	r3, r3, #32
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d012      	beq.n	8011d0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ce6:	4b06      	ldr	r3, [pc, #24]	@ (8011d00 <UART_SetConfig+0xc2c>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	08db      	lsrs	r3, r3, #3
 8011cec:	f003 0303 	and.w	r3, r3, #3
 8011cf0:	4a04      	ldr	r2, [pc, #16]	@ (8011d04 <UART_SetConfig+0xc30>)
 8011cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8011cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011cf8:	e018      	b.n	8011d2c <UART_SetConfig+0xc58>
 8011cfa:	bf00      	nop
 8011cfc:	0801ae94 	.word	0x0801ae94
 8011d00:	58024400 	.word	0x58024400
 8011d04:	03d09000 	.word	0x03d09000
 8011d08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011d0c:	4b24      	ldr	r3, [pc, #144]	@ (8011da0 <UART_SetConfig+0xccc>)
 8011d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d10:	e00c      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d12:	4b24      	ldr	r3, [pc, #144]	@ (8011da4 <UART_SetConfig+0xcd0>)
 8011d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d16:	e009      	b.n	8011d2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d1e:	e005      	b.n	8011d2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011d20:	2300      	movs	r3, #0
 8011d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011d24:	2301      	movs	r3, #1
 8011d26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011d2a:	bf00      	nop
    }

    if (pclk != 0U)
 8011d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d021      	beq.n	8011d76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d36:	4a1c      	ldr	r2, [pc, #112]	@ (8011da8 <UART_SetConfig+0xcd4>)
 8011d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d40:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	085b      	lsrs	r3, r3, #1
 8011d4a:	441a      	add	r2, r3
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d58:	2b0f      	cmp	r3, #15
 8011d5a:	d909      	bls.n	8011d70 <UART_SetConfig+0xc9c>
 8011d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d62:	d205      	bcs.n	8011d70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	60da      	str	r2, [r3, #12]
 8011d6e:	e002      	b.n	8011d76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011d70:	2301      	movs	r3, #1
 8011d72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011d92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3748      	adds	r7, #72	@ 0x48
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011da0:	03d09000 	.word	0x03d09000
 8011da4:	003d0900 	.word	0x003d0900
 8011da8:	0801ae94 	.word	0x0801ae94

08011dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011db8:	f003 0308 	and.w	r3, r3, #8
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00a      	beq.n	8011dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dda:	f003 0301 	and.w	r3, r3, #1
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00a      	beq.n	8011df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	430a      	orrs	r2, r1
 8011df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dfc:	f003 0302 	and.w	r3, r3, #2
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d00a      	beq.n	8011e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	430a      	orrs	r2, r1
 8011e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e1e:	f003 0304 	and.w	r3, r3, #4
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	430a      	orrs	r2, r1
 8011e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e40:	f003 0310 	and.w	r3, r3, #16
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00a      	beq.n	8011e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	430a      	orrs	r2, r1
 8011e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e62:	f003 0320 	and.w	r3, r3, #32
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00a      	beq.n	8011e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	430a      	orrs	r2, r1
 8011e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d01a      	beq.n	8011ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	430a      	orrs	r2, r1
 8011ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011eaa:	d10a      	bne.n	8011ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	430a      	orrs	r2, r1
 8011ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00a      	beq.n	8011ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	430a      	orrs	r2, r1
 8011ee2:	605a      	str	r2, [r3, #4]
  }
}
 8011ee4:	bf00      	nop
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b098      	sub	sp, #96	@ 0x60
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f00:	f7f3 f96c 	bl	80051dc <HAL_GetTick>
 8011f04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f003 0308 	and.w	r3, r3, #8
 8011f10:	2b08      	cmp	r3, #8
 8011f12:	d12f      	bne.n	8011f74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011f18:	9300      	str	r3, [sp, #0]
 8011f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 f88e 	bl	8012044 <UART_WaitOnFlagUntilTimeout>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d022      	beq.n	8011f74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f36:	e853 3f00 	ldrex	r3, [r3]
 8011f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f54:	e841 2300 	strex	r3, r2, [r1]
 8011f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e6      	bne.n	8011f2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2220      	movs	r2, #32
 8011f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f70:	2303      	movs	r3, #3
 8011f72:	e063      	b.n	801203c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f003 0304 	and.w	r3, r3, #4
 8011f7e:	2b04      	cmp	r3, #4
 8011f80:	d149      	bne.n	8012016 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f000 f857 	bl	8012044 <UART_WaitOnFlagUntilTimeout>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d03c      	beq.n	8012016 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa4:	e853 3f00 	ldrex	r3, [r3]
 8011fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8011faa:	6a3b      	ldr	r3, [r7, #32]
 8011fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8011fbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fc2:	e841 2300 	strex	r3, r2, [r1]
 8011fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1e6      	bne.n	8011f9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	e853 3f00 	ldrex	r3, [r3]
 8011fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f023 0301 	bic.w	r3, r3, #1
 8011fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3308      	adds	r3, #8
 8011fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011fee:	61fa      	str	r2, [r7, #28]
 8011ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff2:	69b9      	ldr	r1, [r7, #24]
 8011ff4:	69fa      	ldr	r2, [r7, #28]
 8011ff6:	e841 2300 	strex	r3, r2, [r1]
 8011ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1e5      	bne.n	8011fce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2220      	movs	r2, #32
 8012006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2200      	movs	r2, #0
 801200e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012012:	2303      	movs	r3, #3
 8012014:	e012      	b.n	801203c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2220      	movs	r2, #32
 801201a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2220      	movs	r2, #32
 8012022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3758      	adds	r7, #88	@ 0x58
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	603b      	str	r3, [r7, #0]
 8012050:	4613      	mov	r3, r2
 8012052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012054:	e04f      	b.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801205c:	d04b      	beq.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801205e:	f7f3 f8bd 	bl	80051dc <HAL_GetTick>
 8012062:	4602      	mov	r2, r0
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	69ba      	ldr	r2, [r7, #24]
 801206a:	429a      	cmp	r2, r3
 801206c:	d302      	bcc.n	8012074 <UART_WaitOnFlagUntilTimeout+0x30>
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012074:	2303      	movs	r3, #3
 8012076:	e04e      	b.n	8012116 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f003 0304 	and.w	r3, r3, #4
 8012082:	2b00      	cmp	r3, #0
 8012084:	d037      	beq.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2b80      	cmp	r3, #128	@ 0x80
 801208a:	d034      	beq.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	2b40      	cmp	r3, #64	@ 0x40
 8012090:	d031      	beq.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	f003 0308 	and.w	r3, r3, #8
 801209c:	2b08      	cmp	r3, #8
 801209e:	d110      	bne.n	80120c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2208      	movs	r2, #8
 80120a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80120a8:	68f8      	ldr	r0, [r7, #12]
 80120aa:	f000 f839 	bl	8012120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	2208      	movs	r2, #8
 80120b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80120be:	2301      	movs	r3, #1
 80120c0:	e029      	b.n	8012116 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	69db      	ldr	r3, [r3, #28]
 80120c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80120cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80120d0:	d111      	bne.n	80120f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80120da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	f000 f81f 	bl	8012120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2220      	movs	r2, #32
 80120e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80120f2:	2303      	movs	r3, #3
 80120f4:	e00f      	b.n	8012116 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	69da      	ldr	r2, [r3, #28]
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	4013      	ands	r3, r2
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	429a      	cmp	r2, r3
 8012104:	bf0c      	ite	eq
 8012106:	2301      	moveq	r3, #1
 8012108:	2300      	movne	r3, #0
 801210a:	b2db      	uxtb	r3, r3
 801210c:	461a      	mov	r2, r3
 801210e:	79fb      	ldrb	r3, [r7, #7]
 8012110:	429a      	cmp	r2, r3
 8012112:	d0a0      	beq.n	8012056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012114:	2300      	movs	r3, #0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012120:	b480      	push	{r7}
 8012122:	b095      	sub	sp, #84	@ 0x54
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012130:	e853 3f00 	ldrex	r3, [r3]
 8012134:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801213c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012146:	643b      	str	r3, [r7, #64]	@ 0x40
 8012148:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801214c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801214e:	e841 2300 	strex	r3, r2, [r1]
 8012152:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1e6      	bne.n	8012128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	3308      	adds	r3, #8
 8012160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012162:	6a3b      	ldr	r3, [r7, #32]
 8012164:	e853 3f00 	ldrex	r3, [r3]
 8012168:	61fb      	str	r3, [r7, #28]
   return(result);
 801216a:	69fa      	ldr	r2, [r7, #28]
 801216c:	4b1e      	ldr	r3, [pc, #120]	@ (80121e8 <UART_EndRxTransfer+0xc8>)
 801216e:	4013      	ands	r3, r2
 8012170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	3308      	adds	r3, #8
 8012178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801217a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801217c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012182:	e841 2300 	strex	r3, r2, [r1]
 8012186:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e5      	bne.n	801215a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012192:	2b01      	cmp	r3, #1
 8012194:	d118      	bne.n	80121c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	e853 3f00 	ldrex	r3, [r3]
 80121a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	f023 0310 	bic.w	r3, r3, #16
 80121aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	461a      	mov	r2, r3
 80121b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121b4:	61bb      	str	r3, [r7, #24]
 80121b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b8:	6979      	ldr	r1, [r7, #20]
 80121ba:	69ba      	ldr	r2, [r7, #24]
 80121bc:	e841 2300 	strex	r3, r2, [r1]
 80121c0:	613b      	str	r3, [r7, #16]
   return(result);
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1e6      	bne.n	8012196 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2220      	movs	r2, #32
 80121cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2200      	movs	r2, #0
 80121da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80121dc:	bf00      	nop
 80121de:	3754      	adds	r7, #84	@ 0x54
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	effffffe 	.word	0xeffffffe

080121ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2200      	movs	r2, #0
 80121fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f7fe ff50 	bl	80110a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012208:	bf00      	nop
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b088      	sub	sp, #32
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	e853 3f00 	ldrex	r3, [r3]
 8012224:	60bb      	str	r3, [r7, #8]
   return(result);
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801222c:	61fb      	str	r3, [r7, #28]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	61bb      	str	r3, [r7, #24]
 8012238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801223a:	6979      	ldr	r1, [r7, #20]
 801223c:	69ba      	ldr	r2, [r7, #24]
 801223e:	e841 2300 	strex	r3, r2, [r1]
 8012242:	613b      	str	r3, [r7, #16]
   return(result);
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d1e6      	bne.n	8012218 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2220      	movs	r2, #32
 801224e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7fe ff1b 	bl	8011094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801225e:	bf00      	nop
 8012260:	3720      	adds	r7, #32
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012266:	b480      	push	{r7}
 8012268:	b083      	sub	sp, #12
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801226e:	bf00      	nop
 8012270:	370c      	adds	r7, #12
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr

0801227a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801227a:	b480      	push	{r7}
 801227c:	b083      	sub	sp, #12
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012282:	bf00      	nop
 8012284:	370c      	adds	r7, #12
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr

0801228e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801228e:	b480      	push	{r7}
 8012290:	b083      	sub	sp, #12
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012296:	bf00      	nop
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80122a2:	b480      	push	{r7}
 80122a4:	b085      	sub	sp, #20
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d101      	bne.n	80122b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80122b4:	2302      	movs	r3, #2
 80122b6:	e027      	b.n	8012308 <HAL_UARTEx_DisableFifoMode+0x66>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2201      	movs	r2, #1
 80122bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2224      	movs	r2, #36	@ 0x24
 80122c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f022 0201 	bic.w	r2, r2, #1
 80122de:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80122e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2220      	movs	r2, #32
 80122fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012306:	2300      	movs	r3, #0
}
 8012308:	4618      	mov	r0, r3
 801230a:	3714      	adds	r7, #20
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012324:	2b01      	cmp	r3, #1
 8012326:	d101      	bne.n	801232c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012328:	2302      	movs	r3, #2
 801232a:	e02d      	b.n	8012388 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2201      	movs	r2, #1
 8012330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2224      	movs	r2, #36	@ 0x24
 8012338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	f022 0201 	bic.w	r2, r2, #1
 8012352:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	683a      	ldr	r2, [r7, #0]
 8012364:	430a      	orrs	r2, r1
 8012366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 f84f 	bl	801240c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	68fa      	ldr	r2, [r7, #12]
 8012374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2220      	movs	r2, #32
 801237a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3710      	adds	r7, #16
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d101      	bne.n	80123a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80123a4:	2302      	movs	r3, #2
 80123a6:	e02d      	b.n	8012404 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2224      	movs	r2, #36	@ 0x24
 80123b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f022 0201 	bic.w	r2, r2, #1
 80123ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	683a      	ldr	r2, [r7, #0]
 80123e0:	430a      	orrs	r2, r1
 80123e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 f811 	bl	801240c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	68fa      	ldr	r2, [r7, #12]
 80123f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2220      	movs	r2, #32
 80123f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012402:	2300      	movs	r3, #0
}
 8012404:	4618      	mov	r0, r3
 8012406:	3710      	adds	r7, #16
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801240c:	b480      	push	{r7}
 801240e:	b085      	sub	sp, #20
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012418:	2b00      	cmp	r3, #0
 801241a:	d108      	bne.n	801242e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2201      	movs	r2, #1
 8012420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2201      	movs	r2, #1
 8012428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801242c:	e031      	b.n	8012492 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801242e:	2310      	movs	r3, #16
 8012430:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012432:	2310      	movs	r3, #16
 8012434:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	0e5b      	lsrs	r3, r3, #25
 801243e:	b2db      	uxtb	r3, r3
 8012440:	f003 0307 	and.w	r3, r3, #7
 8012444:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	689b      	ldr	r3, [r3, #8]
 801244c:	0f5b      	lsrs	r3, r3, #29
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 0307 	and.w	r3, r3, #7
 8012454:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012456:	7bbb      	ldrb	r3, [r7, #14]
 8012458:	7b3a      	ldrb	r2, [r7, #12]
 801245a:	4911      	ldr	r1, [pc, #68]	@ (80124a0 <UARTEx_SetNbDataToProcess+0x94>)
 801245c:	5c8a      	ldrb	r2, [r1, r2]
 801245e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012462:	7b3a      	ldrb	r2, [r7, #12]
 8012464:	490f      	ldr	r1, [pc, #60]	@ (80124a4 <UARTEx_SetNbDataToProcess+0x98>)
 8012466:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012468:	fb93 f3f2 	sdiv	r3, r3, r2
 801246c:	b29a      	uxth	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012474:	7bfb      	ldrb	r3, [r7, #15]
 8012476:	7b7a      	ldrb	r2, [r7, #13]
 8012478:	4909      	ldr	r1, [pc, #36]	@ (80124a0 <UARTEx_SetNbDataToProcess+0x94>)
 801247a:	5c8a      	ldrb	r2, [r1, r2]
 801247c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012480:	7b7a      	ldrb	r2, [r7, #13]
 8012482:	4908      	ldr	r1, [pc, #32]	@ (80124a4 <UARTEx_SetNbDataToProcess+0x98>)
 8012484:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012486:	fb93 f3f2 	sdiv	r3, r3, r2
 801248a:	b29a      	uxth	r2, r3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012492:	bf00      	nop
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	0801aeac 	.word	0x0801aeac
 80124a4:	0801aeb4 	.word	0x0801aeb4

080124a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6819      	ldr	r1, [r3, #0]
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	fb03 f203 	mul.w	r2, r3, r3
 80124be:	4613      	mov	r3, r2
 80124c0:	005b      	lsls	r3, r3, #1
 80124c2:	4413      	add	r3, r2
 80124c4:	43db      	mvns	r3, r3
 80124c6:	ea01 0203 	and.w	r2, r1, r3
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	fb03 f303 	mul.w	r3, r3, r3
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	fb01 f303 	mul.w	r3, r1, r3
 80124d6:	431a      	orrs	r2, r3
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	601a      	str	r2, [r3, #0]
}
 80124dc:	bf00      	nop
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	43db      	mvns	r3, r3
 80124fc:	401a      	ands	r2, r3
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6879      	ldr	r1, [r7, #4]
 8012502:	fb01 f303 	mul.w	r3, r1, r3
 8012506:	431a      	orrs	r2, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	605a      	str	r2, [r3, #4]
}
 801250c:	bf00      	nop
 801250e:	3714      	adds	r7, #20
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr

08012518 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8012518:	b480      	push	{r7}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6899      	ldr	r1, [r3, #8]
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	fb03 f203 	mul.w	r2, r3, r3
 801252e:	4613      	mov	r3, r2
 8012530:	005b      	lsls	r3, r3, #1
 8012532:	4413      	add	r3, r2
 8012534:	43db      	mvns	r3, r3
 8012536:	ea01 0203 	and.w	r2, r1, r3
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	fb03 f303 	mul.w	r3, r3, r3
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	fb01 f303 	mul.w	r3, r1, r3
 8012546:	431a      	orrs	r2, r3
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	609a      	str	r2, [r3, #8]
}
 801254c:	bf00      	nop
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	68d9      	ldr	r1, [r3, #12]
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	fb03 f203 	mul.w	r2, r3, r3
 801256e:	4613      	mov	r3, r2
 8012570:	005b      	lsls	r3, r3, #1
 8012572:	4413      	add	r3, r2
 8012574:	43db      	mvns	r3, r3
 8012576:	ea01 0203 	and.w	r2, r1, r3
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	fb03 f303 	mul.w	r3, r3, r3
 8012580:	6879      	ldr	r1, [r7, #4]
 8012582:	fb01 f303 	mul.w	r3, r1, r3
 8012586:	431a      	orrs	r2, r3
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	60da      	str	r2, [r3, #12]
}
 801258c:	bf00      	nop
 801258e:	3714      	adds	r7, #20
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr

08012598 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8012598:	b480      	push	{r7}
 801259a:	b085      	sub	sp, #20
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6a19      	ldr	r1, [r3, #32]
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	fb03 f303 	mul.w	r3, r3, r3
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	fb02 f303 	mul.w	r3, r2, r3
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	fb03 f202 	mul.w	r2, r3, r2
 80125ba:	4613      	mov	r3, r2
 80125bc:	011b      	lsls	r3, r3, #4
 80125be:	1a9b      	subs	r3, r3, r2
 80125c0:	43db      	mvns	r3, r3
 80125c2:	ea01 0203 	and.w	r2, r1, r3
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	fb03 f303 	mul.w	r3, r3, r3
 80125cc:	68b9      	ldr	r1, [r7, #8]
 80125ce:	fb01 f303 	mul.w	r3, r1, r3
 80125d2:	68b9      	ldr	r1, [r7, #8]
 80125d4:	fb01 f303 	mul.w	r3, r1, r3
 80125d8:	6879      	ldr	r1, [r7, #4]
 80125da:	fb01 f303 	mul.w	r3, r1, r3
 80125de:	431a      	orrs	r2, r3
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80125e4:	bf00      	nop
 80125e6:	3714      	adds	r7, #20
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr

080125f0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	0a1b      	lsrs	r3, r3, #8
 8012604:	68ba      	ldr	r2, [r7, #8]
 8012606:	0a12      	lsrs	r2, r2, #8
 8012608:	fb02 f303 	mul.w	r3, r2, r3
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	0a12      	lsrs	r2, r2, #8
 8012610:	fb02 f303 	mul.w	r3, r2, r3
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	0a12      	lsrs	r2, r2, #8
 8012618:	fb03 f202 	mul.w	r2, r3, r2
 801261c:	4613      	mov	r3, r2
 801261e:	011b      	lsls	r3, r3, #4
 8012620:	1a9b      	subs	r3, r3, r2
 8012622:	43db      	mvns	r3, r3
 8012624:	ea01 0203 	and.w	r2, r1, r3
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	0a1b      	lsrs	r3, r3, #8
 801262c:	68b9      	ldr	r1, [r7, #8]
 801262e:	0a09      	lsrs	r1, r1, #8
 8012630:	fb01 f303 	mul.w	r3, r1, r3
 8012634:	68b9      	ldr	r1, [r7, #8]
 8012636:	0a09      	lsrs	r1, r1, #8
 8012638:	fb01 f303 	mul.w	r3, r1, r3
 801263c:	68b9      	ldr	r1, [r7, #8]
 801263e:	0a09      	lsrs	r1, r1, #8
 8012640:	fb01 f303 	mul.w	r3, r1, r3
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	fb01 f303 	mul.w	r3, r1, r3
 801264a:	431a      	orrs	r2, r3
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8012650:	bf00      	nop
 8012652:	3714      	adds	r7, #20
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr

0801265c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b088      	sub	sp, #32
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	fa93 f3a3 	rbit	r3, r3
 8012672:	60fb      	str	r3, [r7, #12]
  return result;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d101      	bne.n	8012682 <LL_GPIO_Init+0x26>
    return 32U;
 801267e:	2320      	movs	r3, #32
 8012680:	e003      	b.n	801268a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	fab3 f383 	clz	r3, r3
 8012688:	b2db      	uxtb	r3, r3
 801268a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801268c:	e048      	b.n	8012720 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	2101      	movs	r1, #1
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	fa01 f303 	lsl.w	r3, r1, r3
 801269a:	4013      	ands	r3, r2
 801269c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 801269e:	69bb      	ldr	r3, [r7, #24]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d03a      	beq.n	801271a <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d003      	beq.n	80126b4 <LL_GPIO_Init+0x58>
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	d10e      	bne.n	80126d2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	461a      	mov	r2, r3
 80126ba:	69b9      	ldr	r1, [r7, #24]
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f7ff ff2b 	bl	8012518 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	6819      	ldr	r1, [r3, #0]
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	461a      	mov	r2, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7ff ff0b 	bl	80124e8 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	461a      	mov	r2, r3
 80126d8:	69b9      	ldr	r1, [r7, #24]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7ff ff3c 	bl	8012558 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	2b02      	cmp	r3, #2
 80126e6:	d111      	bne.n	801270c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	2bff      	cmp	r3, #255	@ 0xff
 80126ec:	d807      	bhi.n	80126fe <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	461a      	mov	r2, r3
 80126f4:	69b9      	ldr	r1, [r7, #24]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff ff4e 	bl	8012598 <LL_GPIO_SetAFPin_0_7>
 80126fc:	e006      	b.n	801270c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	695b      	ldr	r3, [r3, #20]
 8012702:	461a      	mov	r2, r3
 8012704:	69b9      	ldr	r1, [r7, #24]
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff ff72 	bl	80125f0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	461a      	mov	r2, r3
 8012712:	69b9      	ldr	r1, [r7, #24]
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff fec7 	bl	80124a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	3301      	adds	r3, #1
 801271e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	fa22 f303 	lsr.w	r3, r2, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1af      	bne.n	801268e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3720      	adds	r7, #32
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8012738:	b480      	push	{r7}
 801273a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801273c:	4b07      	ldr	r3, [pc, #28]	@ (801275c <LL_RCC_HSE_IsReady+0x24>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012748:	d101      	bne.n	801274e <LL_RCC_HSE_IsReady+0x16>
 801274a:	2301      	movs	r3, #1
 801274c:	e000      	b.n	8012750 <LL_RCC_HSE_IsReady+0x18>
 801274e:	2300      	movs	r3, #0
}
 8012750:	4618      	mov	r0, r3
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	58024400 	.word	0x58024400

08012760 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8012764:	4b06      	ldr	r3, [pc, #24]	@ (8012780 <LL_RCC_HSI_IsReady+0x20>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f003 0304 	and.w	r3, r3, #4
 801276c:	2b04      	cmp	r3, #4
 801276e:	d101      	bne.n	8012774 <LL_RCC_HSI_IsReady+0x14>
 8012770:	2301      	movs	r3, #1
 8012772:	e000      	b.n	8012776 <LL_RCC_HSI_IsReady+0x16>
 8012774:	2300      	movs	r3, #0
}
 8012776:	4618      	mov	r0, r3
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr
 8012780:	58024400 	.word	0x58024400

08012784 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8012784:	b480      	push	{r7}
 8012786:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8012788:	4b04      	ldr	r3, [pc, #16]	@ (801279c <LL_RCC_HSI_GetDivider+0x18>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f003 0318 	and.w	r3, r3, #24
}
 8012790:	4618      	mov	r0, r3
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	58024400 	.word	0x58024400

080127a0 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 80127a0:	b480      	push	{r7}
 80127a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 80127a4:	4b07      	ldr	r3, [pc, #28]	@ (80127c4 <LL_RCC_CSI_IsReady+0x24>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80127ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127b0:	d101      	bne.n	80127b6 <LL_RCC_CSI_IsReady+0x16>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e000      	b.n	80127b8 <LL_RCC_CSI_IsReady+0x18>
 80127b6:	2300      	movs	r3, #0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	58024400 	.word	0x58024400

080127c8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80127c8:	b480      	push	{r7}
 80127ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80127cc:	4b06      	ldr	r3, [pc, #24]	@ (80127e8 <LL_RCC_LSE_IsReady+0x20>)
 80127ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127d0:	f003 0302 	and.w	r3, r3, #2
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d101      	bne.n	80127dc <LL_RCC_LSE_IsReady+0x14>
 80127d8:	2301      	movs	r3, #1
 80127da:	e000      	b.n	80127de <LL_RCC_LSE_IsReady+0x16>
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	58024400 	.word	0x58024400

080127ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80127ec:	b480      	push	{r7}
 80127ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80127f0:	4b04      	ldr	r3, [pc, #16]	@ (8012804 <LL_RCC_GetSysClkSource+0x18>)
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	58024400 	.word	0x58024400

08012808 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8012808:	b480      	push	{r7}
 801280a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 801280c:	4b04      	ldr	r3, [pc, #16]	@ (8012820 <LL_RCC_GetSysPrescaler+0x18>)
 801280e:	699b      	ldr	r3, [r3, #24]
 8012810:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8012814:	4618      	mov	r0, r3
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	58024400 	.word	0x58024400

08012824 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8012824:	b480      	push	{r7}
 8012826:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8012828:	4b04      	ldr	r3, [pc, #16]	@ (801283c <LL_RCC_GetAHBPrescaler+0x18>)
 801282a:	699b      	ldr	r3, [r3, #24]
 801282c:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8012830:	4618      	mov	r0, r3
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	58024400 	.word	0x58024400

08012840 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8012840:	b480      	push	{r7}
 8012842:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8012844:	4b04      	ldr	r3, [pc, #16]	@ (8012858 <LL_RCC_GetAPB1Prescaler+0x18>)
 8012846:	69db      	ldr	r3, [r3, #28]
 8012848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 801284c:	4618      	mov	r0, r3
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	58024400 	.word	0x58024400

0801285c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801285c:	b480      	push	{r7}
 801285e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8012860:	4b04      	ldr	r3, [pc, #16]	@ (8012874 <LL_RCC_GetAPB2Prescaler+0x18>)
 8012862:	69db      	ldr	r3, [r3, #28]
 8012864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8012868:	4618      	mov	r0, r3
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	58024400 	.word	0x58024400

08012878 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	b2da      	uxtb	r2, r3
 8012884:	4b0e      	ldr	r3, [pc, #56]	@ (80128c0 <LL_RCC_GetClockSource+0x48>)
 8012886:	4413      	add	r3, r2
 8012888:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	0e19      	lsrs	r1, r3, #24
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	0a1b      	lsrs	r3, r3, #8
 8012896:	f003 031f 	and.w	r3, r3, #31
 801289a:	fa01 f303 	lsl.w	r3, r1, r3
 801289e:	401a      	ands	r2, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	0a1b      	lsrs	r3, r3, #8
 80128a4:	f003 031f 	and.w	r3, r3, #31
 80128a8:	fa22 f303 	lsr.w	r3, r2, r3
 80128ac:	041a      	lsls	r2, r3, #16
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4313      	orrs	r3, r2
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	5802444c 	.word	0x5802444c

080128c4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff ffd3 	bl	8012878 <LL_RCC_GetClockSource>
 80128d2:	4603      	mov	r3, r0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80128e0:	4b04      	ldr	r3, [pc, #16]	@ (80128f4 <LL_RCC_PLL_GetSource+0x18>)
 80128e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128e4:	f003 0303 	and.w	r3, r3, #3
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	58024400 	.word	0x58024400

080128f8 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 80128f8:	b480      	push	{r7}
 80128fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 80128fc:	4b07      	ldr	r3, [pc, #28]	@ (801291c <LL_RCC_PLL1P_IsEnabled+0x24>)
 80128fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012908:	d101      	bne.n	801290e <LL_RCC_PLL1P_IsEnabled+0x16>
 801290a:	2301      	movs	r3, #1
 801290c:	e000      	b.n	8012910 <LL_RCC_PLL1P_IsEnabled+0x18>
 801290e:	2300      	movs	r3, #0
}
 8012910:	4618      	mov	r0, r3
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	58024400 	.word	0x58024400

08012920 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8012920:	b480      	push	{r7}
 8012922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8012924:	4b07      	ldr	r3, [pc, #28]	@ (8012944 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8012926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801292c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012930:	d101      	bne.n	8012936 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8012932:	2301      	movs	r3, #1
 8012934:	e000      	b.n	8012938 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	58024400 	.word	0x58024400

08012948 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8012948:	b480      	push	{r7}
 801294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 801294c:	4b07      	ldr	r3, [pc, #28]	@ (801296c <LL_RCC_PLL1R_IsEnabled+0x24>)
 801294e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012954:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012958:	d101      	bne.n	801295e <LL_RCC_PLL1R_IsEnabled+0x16>
 801295a:	2301      	movs	r3, #1
 801295c:	e000      	b.n	8012960 <LL_RCC_PLL1R_IsEnabled+0x18>
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	58024400 	.word	0x58024400

08012970 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8012970:	b480      	push	{r7}
 8012972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8012974:	4b06      	ldr	r3, [pc, #24]	@ (8012990 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8012976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012978:	f003 0301 	and.w	r3, r3, #1
 801297c:	2b01      	cmp	r3, #1
 801297e:	d101      	bne.n	8012984 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8012980:	2301      	movs	r3, #1
 8012982:	e000      	b.n	8012986 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr
 8012990:	58024400 	.word	0x58024400

08012994 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8012994:	b480      	push	{r7}
 8012996:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8012998:	4b04      	ldr	r3, [pc, #16]	@ (80129ac <LL_RCC_PLL1_GetN+0x18>)
 801299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801299c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129a0:	3301      	adds	r3, #1
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	58024400 	.word	0x58024400

080129b0 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 80129b0:	b480      	push	{r7}
 80129b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 80129b4:	4b04      	ldr	r3, [pc, #16]	@ (80129c8 <LL_RCC_PLL1_GetM+0x18>)
 80129b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129b8:	091b      	lsrs	r3, r3, #4
 80129ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80129be:	4618      	mov	r0, r3
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr
 80129c8:	58024400 	.word	0x58024400

080129cc <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 80129cc:	b480      	push	{r7}
 80129ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 80129d0:	4b05      	ldr	r3, [pc, #20]	@ (80129e8 <LL_RCC_PLL1_GetP+0x1c>)
 80129d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129d4:	0a5b      	lsrs	r3, r3, #9
 80129d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80129da:	3301      	adds	r3, #1
}
 80129dc:	4618      	mov	r0, r3
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop
 80129e8:	58024400 	.word	0x58024400

080129ec <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 80129ec:	b480      	push	{r7}
 80129ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80129f0:	4b05      	ldr	r3, [pc, #20]	@ (8012a08 <LL_RCC_PLL1_GetQ+0x1c>)
 80129f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129f4:	0c1b      	lsrs	r3, r3, #16
 80129f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80129fa:	3301      	adds	r3, #1
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	58024400 	.word	0x58024400

08012a0c <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8012a10:	4b05      	ldr	r3, [pc, #20]	@ (8012a28 <LL_RCC_PLL1_GetR+0x1c>)
 8012a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a14:	0e1b      	lsrs	r3, r3, #24
 8012a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a1a:	3301      	adds	r3, #1
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop
 8012a28:	58024400 	.word	0x58024400

08012a2c <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8012a30:	4b04      	ldr	r3, [pc, #16]	@ (8012a44 <LL_RCC_PLL1_GetFRACN+0x18>)
 8012a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a34:	08db      	lsrs	r3, r3, #3
 8012a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	58024400 	.word	0x58024400

08012a48 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8012a4c:	4b07      	ldr	r3, [pc, #28]	@ (8012a6c <LL_RCC_PLL2_IsReady+0x24>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012a58:	d101      	bne.n	8012a5e <LL_RCC_PLL2_IsReady+0x16>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e000      	b.n	8012a60 <LL_RCC_PLL2_IsReady+0x18>
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	58024400 	.word	0x58024400

08012a70 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8012a70:	b480      	push	{r7}
 8012a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8012a74:	4b07      	ldr	r3, [pc, #28]	@ (8012a94 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8012a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012a7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012a80:	d101      	bne.n	8012a86 <LL_RCC_PLL2P_IsEnabled+0x16>
 8012a82:	2301      	movs	r3, #1
 8012a84:	e000      	b.n	8012a88 <LL_RCC_PLL2P_IsEnabled+0x18>
 8012a86:	2300      	movs	r3, #0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop
 8012a94:	58024400 	.word	0x58024400

08012a98 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8012a9c:	4b07      	ldr	r3, [pc, #28]	@ (8012abc <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8012a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012aa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012aa8:	d101      	bne.n	8012aae <LL_RCC_PLL2Q_IsEnabled+0x16>
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e000      	b.n	8012ab0 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr
 8012aba:	bf00      	nop
 8012abc:	58024400 	.word	0x58024400

08012ac0 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8012ac4:	4b07      	ldr	r3, [pc, #28]	@ (8012ae4 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8012ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012acc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012ad0:	d101      	bne.n	8012ad6 <LL_RCC_PLL2R_IsEnabled+0x16>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e000      	b.n	8012ad8 <LL_RCC_PLL2R_IsEnabled+0x18>
 8012ad6:	2300      	movs	r3, #0
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	58024400 	.word	0x58024400

08012ae8 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8012aec:	4b06      	ldr	r3, [pc, #24]	@ (8012b08 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8012aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012af0:	f003 0310 	and.w	r3, r3, #16
 8012af4:	2b10      	cmp	r3, #16
 8012af6:	d101      	bne.n	8012afc <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8012af8:	2301      	movs	r3, #1
 8012afa:	e000      	b.n	8012afe <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8012afc:	2300      	movs	r3, #0
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	58024400 	.word	0x58024400

08012b0c <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8012b10:	4b04      	ldr	r3, [pc, #16]	@ (8012b24 <LL_RCC_PLL2_GetN+0x18>)
 8012b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b18:	3301      	adds	r3, #1
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr
 8012b24:	58024400 	.word	0x58024400

08012b28 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8012b2c:	4b04      	ldr	r3, [pc, #16]	@ (8012b40 <LL_RCC_PLL2_GetM+0x18>)
 8012b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b30:	0b1b      	lsrs	r3, r3, #12
 8012b32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr
 8012b40:	58024400 	.word	0x58024400

08012b44 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8012b44:	b480      	push	{r7}
 8012b46:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8012b48:	4b05      	ldr	r3, [pc, #20]	@ (8012b60 <LL_RCC_PLL2_GetP+0x1c>)
 8012b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b4c:	0a5b      	lsrs	r3, r3, #9
 8012b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b52:	3301      	adds	r3, #1
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	58024400 	.word	0x58024400

08012b64 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8012b64:	b480      	push	{r7}
 8012b66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8012b68:	4b05      	ldr	r3, [pc, #20]	@ (8012b80 <LL_RCC_PLL2_GetQ+0x1c>)
 8012b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b6c:	0c1b      	lsrs	r3, r3, #16
 8012b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b72:	3301      	adds	r3, #1
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	58024400 	.word	0x58024400

08012b84 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8012b84:	b480      	push	{r7}
 8012b86:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8012b88:	4b05      	ldr	r3, [pc, #20]	@ (8012ba0 <LL_RCC_PLL2_GetR+0x1c>)
 8012b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b8c:	0e1b      	lsrs	r3, r3, #24
 8012b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b92:	3301      	adds	r3, #1
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	58024400 	.word	0x58024400

08012ba4 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8012ba8:	4b04      	ldr	r3, [pc, #16]	@ (8012bbc <LL_RCC_PLL2_GetFRACN+0x18>)
 8012baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bac:	08db      	lsrs	r3, r3, #3
 8012bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	58024400 	.word	0x58024400

08012bc0 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8012bc4:	4b07      	ldr	r3, [pc, #28]	@ (8012be4 <LL_RCC_PLL3_IsReady+0x24>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012bd0:	d101      	bne.n	8012bd6 <LL_RCC_PLL3_IsReady+0x16>
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	e000      	b.n	8012bd8 <LL_RCC_PLL3_IsReady+0x18>
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop
 8012be4:	58024400 	.word	0x58024400

08012be8 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8012be8:	b480      	push	{r7}
 8012bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8012bec:	4b07      	ldr	r3, [pc, #28]	@ (8012c0c <LL_RCC_PLL3P_IsEnabled+0x24>)
 8012bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012bf8:	d101      	bne.n	8012bfe <LL_RCC_PLL3P_IsEnabled+0x16>
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e000      	b.n	8012c00 <LL_RCC_PLL3P_IsEnabled+0x18>
 8012bfe:	2300      	movs	r3, #0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	46bd      	mov	sp, r7
 8012c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c08:	4770      	bx	lr
 8012c0a:	bf00      	nop
 8012c0c:	58024400 	.word	0x58024400

08012c10 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8012c10:	b480      	push	{r7}
 8012c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8012c14:	4b07      	ldr	r3, [pc, #28]	@ (8012c34 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8012c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012c20:	d101      	bne.n	8012c26 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8012c22:	2301      	movs	r3, #1
 8012c24:	e000      	b.n	8012c28 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	58024400 	.word	0x58024400

08012c38 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8012c3c:	4b07      	ldr	r3, [pc, #28]	@ (8012c5c <LL_RCC_PLL3R_IsEnabled+0x24>)
 8012c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c48:	d101      	bne.n	8012c4e <LL_RCC_PLL3R_IsEnabled+0x16>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <LL_RCC_PLL3R_IsEnabled+0x18>
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop
 8012c5c:	58024400 	.word	0x58024400

08012c60 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8012c60:	b480      	push	{r7}
 8012c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8012c64:	4b07      	ldr	r3, [pc, #28]	@ (8012c84 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8012c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c70:	d101      	bne.n	8012c76 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8012c72:	2301      	movs	r3, #1
 8012c74:	e000      	b.n	8012c78 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr
 8012c82:	bf00      	nop
 8012c84:	58024400 	.word	0x58024400

08012c88 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8012c8c:	4b04      	ldr	r3, [pc, #16]	@ (8012ca0 <LL_RCC_PLL3_GetN+0x18>)
 8012c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c94:	3301      	adds	r3, #1
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr
 8012ca0:	58024400 	.word	0x58024400

08012ca4 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8012ca8:	4b04      	ldr	r3, [pc, #16]	@ (8012cbc <LL_RCC_PLL3_GetM+0x18>)
 8012caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cac:	0d1b      	lsrs	r3, r3, #20
 8012cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr
 8012cbc:	58024400 	.word	0x58024400

08012cc0 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8012cc4:	4b05      	ldr	r3, [pc, #20]	@ (8012cdc <LL_RCC_PLL3_GetP+0x1c>)
 8012cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cc8:	0a5b      	lsrs	r3, r3, #9
 8012cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012cce:	3301      	adds	r3, #1
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	58024400 	.word	0x58024400

08012ce0 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8012ce4:	4b05      	ldr	r3, [pc, #20]	@ (8012cfc <LL_RCC_PLL3_GetQ+0x1c>)
 8012ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ce8:	0c1b      	lsrs	r3, r3, #16
 8012cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012cee:	3301      	adds	r3, #1
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	58024400 	.word	0x58024400

08012d00 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8012d00:	b480      	push	{r7}
 8012d02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8012d04:	4b05      	ldr	r3, [pc, #20]	@ (8012d1c <LL_RCC_PLL3_GetR+0x1c>)
 8012d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d08:	0e1b      	lsrs	r3, r3, #24
 8012d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d0e:	3301      	adds	r3, #1
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	58024400 	.word	0x58024400

08012d20 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8012d20:	b480      	push	{r7}
 8012d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8012d24:	4b04      	ldr	r3, [pc, #16]	@ (8012d38 <LL_RCC_PLL3_GetFRACN+0x18>)
 8012d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d28:	08db      	lsrs	r3, r3, #3
 8012d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr
 8012d38:	58024400 	.word	0x58024400

08012d3c <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b08a      	sub	sp, #40	@ 0x28
 8012d40:	af02      	add	r7, sp, #8
 8012d42:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8012d44:	2300      	movs	r3, #0
 8012d46:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8012d4c:	f7ff fdc6 	bl	80128dc <LL_RCC_PLL_GetSource>
 8012d50:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d01f      	beq.n	8012d98 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b02      	cmp	r3, #2
 8012d5c:	d824      	bhi.n	8012da8 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d003      	beq.n	8012d6c <LL_RCC_GetPLL1ClockFreq+0x30>
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d00e      	beq.n	8012d88 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8012d6a:	e01d      	b.n	8012da8 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8012d6c:	f7ff fcf8 	bl	8012760 <LL_RCC_HSI_IsReady>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d01a      	beq.n	8012dac <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8012d76:	f7ff fd05 	bl	8012784 <LL_RCC_HSI_GetDivider>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	08db      	lsrs	r3, r3, #3
 8012d7e:	4a38      	ldr	r2, [pc, #224]	@ (8012e60 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8012d80:	fa22 f303 	lsr.w	r3, r2, r3
 8012d84:	61fb      	str	r3, [r7, #28]
      break;
 8012d86:	e011      	b.n	8012dac <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8012d88:	f7ff fd0a 	bl	80127a0 <LL_RCC_CSI_IsReady>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00e      	beq.n	8012db0 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8012d92:	4b34      	ldr	r3, [pc, #208]	@ (8012e64 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8012d94:	61fb      	str	r3, [r7, #28]
      break;
 8012d96:	e00b      	b.n	8012db0 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8012d98:	f7ff fcce 	bl	8012738 <LL_RCC_HSE_IsReady>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d008      	beq.n	8012db4 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8012da2:	4b31      	ldr	r3, [pc, #196]	@ (8012e68 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8012da4:	61fb      	str	r3, [r7, #28]
      break;
 8012da6:	e005      	b.n	8012db4 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8012da8:	bf00      	nop
 8012daa:	e004      	b.n	8012db6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8012dac:	bf00      	nop
 8012dae:	e002      	b.n	8012db6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8012db0:	bf00      	nop
 8012db2:	e000      	b.n	8012db6 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8012db4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2200      	movs	r2, #0
 8012dba:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8012dc8:	f7ff fdf2 	bl	80129b0 <LL_RCC_PLL1_GetM>
 8012dcc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8012dce:	f7ff fde1 	bl	8012994 <LL_RCC_PLL1_GetN>
 8012dd2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8012dd4:	f7ff fdcc 	bl	8012970 <LL_RCC_PLL1FRACN_IsEnabled>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d002      	beq.n	8012de4 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8012dde:	f7ff fe25 	bl	8012a2c <LL_RCC_PLL1_GetFRACN>
 8012de2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d035      	beq.n	8012e56 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8012dea:	f7ff fd85 	bl	80128f8 <LL_RCC_PLL1P_IsEnabled>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d00c      	beq.n	8012e0e <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8012df4:	f7ff fdea 	bl	80129cc <LL_RCC_PLL1_GetP>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	6939      	ldr	r1, [r7, #16]
 8012e02:	69f8      	ldr	r0, [r7, #28]
 8012e04:	f000 f964 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8012e0e:	f7ff fd87 	bl	8012920 <LL_RCC_PLL1Q_IsEnabled>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d00c      	beq.n	8012e32 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8012e18:	f7ff fde8 	bl	80129ec <LL_RCC_PLL1_GetQ>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	6939      	ldr	r1, [r7, #16]
 8012e26:	69f8      	ldr	r0, [r7, #28]
 8012e28:	f000 f952 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012e2c:	4602      	mov	r2, r0
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8012e32:	f7ff fd89 	bl	8012948 <LL_RCC_PLL1R_IsEnabled>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d00c      	beq.n	8012e56 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8012e3c:	f7ff fde6 	bl	8012a0c <LL_RCC_PLL1_GetR>
 8012e40:	4603      	mov	r3, r0
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	69bb      	ldr	r3, [r7, #24]
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	6939      	ldr	r1, [r7, #16]
 8012e4a:	69f8      	ldr	r0, [r7, #28]
 8012e4c:	f000 f940 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012e50:	4602      	mov	r2, r0
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	609a      	str	r2, [r3, #8]
    }
  }
}
 8012e56:	bf00      	nop
 8012e58:	3720      	adds	r7, #32
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	03d09000 	.word	0x03d09000
 8012e64:	003d0900 	.word	0x003d0900
 8012e68:	017d7840 	.word	0x017d7840

08012e6c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b08a      	sub	sp, #40	@ 0x28
 8012e70:	af02      	add	r7, sp, #8
 8012e72:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8012e74:	2300      	movs	r3, #0
 8012e76:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8012e7c:	f7ff fd2e 	bl	80128dc <LL_RCC_PLL_GetSource>
 8012e80:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d01f      	beq.n	8012ec8 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d824      	bhi.n	8012ed8 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d003      	beq.n	8012e9c <LL_RCC_GetPLL2ClockFreq+0x30>
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d00e      	beq.n	8012eb8 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8012e9a:	e01d      	b.n	8012ed8 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8012e9c:	f7ff fc60 	bl	8012760 <LL_RCC_HSI_IsReady>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d01a      	beq.n	8012edc <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8012ea6:	f7ff fc6d 	bl	8012784 <LL_RCC_HSI_GetDivider>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	08db      	lsrs	r3, r3, #3
 8012eae:	4a38      	ldr	r2, [pc, #224]	@ (8012f90 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8012eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8012eb4:	61fb      	str	r3, [r7, #28]
      break;
 8012eb6:	e011      	b.n	8012edc <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8012eb8:	f7ff fc72 	bl	80127a0 <LL_RCC_CSI_IsReady>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00e      	beq.n	8012ee0 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8012ec2:	4b34      	ldr	r3, [pc, #208]	@ (8012f94 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8012ec4:	61fb      	str	r3, [r7, #28]
      break;
 8012ec6:	e00b      	b.n	8012ee0 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8012ec8:	f7ff fc36 	bl	8012738 <LL_RCC_HSE_IsReady>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d008      	beq.n	8012ee4 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8012ed2:	4b31      	ldr	r3, [pc, #196]	@ (8012f98 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8012ed4:	61fb      	str	r3, [r7, #28]
      break;
 8012ed6:	e005      	b.n	8012ee4 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8012ed8:	bf00      	nop
 8012eda:	e004      	b.n	8012ee6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8012edc:	bf00      	nop
 8012ede:	e002      	b.n	8012ee6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8012ee0:	bf00      	nop
 8012ee2:	e000      	b.n	8012ee6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8012ee4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8012ef8:	f7ff fe16 	bl	8012b28 <LL_RCC_PLL2_GetM>
 8012efc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8012efe:	f7ff fe05 	bl	8012b0c <LL_RCC_PLL2_GetN>
 8012f02:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8012f04:	f7ff fdf0 	bl	8012ae8 <LL_RCC_PLL2FRACN_IsEnabled>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d002      	beq.n	8012f14 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8012f0e:	f7ff fe49 	bl	8012ba4 <LL_RCC_PLL2_GetFRACN>
 8012f12:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d035      	beq.n	8012f86 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8012f1a:	f7ff fda9 	bl	8012a70 <LL_RCC_PLL2P_IsEnabled>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d00c      	beq.n	8012f3e <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8012f24:	f7ff fe0e 	bl	8012b44 <LL_RCC_PLL2_GetP>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	6939      	ldr	r1, [r7, #16]
 8012f32:	69f8      	ldr	r0, [r7, #28]
 8012f34:	f000 f8cc 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012f38:	4602      	mov	r2, r0
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8012f3e:	f7ff fdab 	bl	8012a98 <LL_RCC_PLL2Q_IsEnabled>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00c      	beq.n	8012f62 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8012f48:	f7ff fe0c 	bl	8012b64 <LL_RCC_PLL2_GetQ>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	68fa      	ldr	r2, [r7, #12]
 8012f54:	6939      	ldr	r1, [r7, #16]
 8012f56:	69f8      	ldr	r0, [r7, #28]
 8012f58:	f000 f8ba 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8012f62:	f7ff fdad 	bl	8012ac0 <LL_RCC_PLL2R_IsEnabled>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d00c      	beq.n	8012f86 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8012f6c:	f7ff fe0a 	bl	8012b84 <LL_RCC_PLL2_GetR>
 8012f70:	4603      	mov	r3, r0
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	6939      	ldr	r1, [r7, #16]
 8012f7a:	69f8      	ldr	r0, [r7, #28]
 8012f7c:	f000 f8a8 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8012f80:	4602      	mov	r2, r0
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	609a      	str	r2, [r3, #8]
    }
  }
}
 8012f86:	bf00      	nop
 8012f88:	3720      	adds	r7, #32
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	03d09000 	.word	0x03d09000
 8012f94:	003d0900 	.word	0x003d0900
 8012f98:	017d7840 	.word	0x017d7840

08012f9c <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b08a      	sub	sp, #40	@ 0x28
 8012fa0:	af02      	add	r7, sp, #8
 8012fa2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8012fac:	f7ff fc96 	bl	80128dc <LL_RCC_PLL_GetSource>
 8012fb0:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	d01f      	beq.n	8012ff8 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d824      	bhi.n	8013008 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d003      	beq.n	8012fcc <LL_RCC_GetPLL3ClockFreq+0x30>
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d00e      	beq.n	8012fe8 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8012fca:	e01d      	b.n	8013008 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8012fcc:	f7ff fbc8 	bl	8012760 <LL_RCC_HSI_IsReady>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d01a      	beq.n	801300c <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8012fd6:	f7ff fbd5 	bl	8012784 <LL_RCC_HSI_GetDivider>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	08db      	lsrs	r3, r3, #3
 8012fde:	4a39      	ldr	r2, [pc, #228]	@ (80130c4 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8012fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8012fe4:	61fb      	str	r3, [r7, #28]
      break;
 8012fe6:	e011      	b.n	801300c <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8012fe8:	f7ff fbda 	bl	80127a0 <LL_RCC_CSI_IsReady>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d00e      	beq.n	8013010 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8012ff2:	4b35      	ldr	r3, [pc, #212]	@ (80130c8 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8012ff4:	61fb      	str	r3, [r7, #28]
      break;
 8012ff6:	e00b      	b.n	8013010 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8012ff8:	f7ff fb9e 	bl	8012738 <LL_RCC_HSE_IsReady>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d008      	beq.n	8013014 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8013002:	4b32      	ldr	r3, [pc, #200]	@ (80130cc <LL_RCC_GetPLL3ClockFreq+0x130>)
 8013004:	61fb      	str	r3, [r7, #28]
      break;
 8013006:	e005      	b.n	8013014 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8013008:	bf00      	nop
 801300a:	e004      	b.n	8013016 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 801300c:	bf00      	nop
 801300e:	e002      	b.n	8013016 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8013010:	bf00      	nop
 8013012:	e000      	b.n	8013016 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8013014:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2200      	movs	r2, #0
 8013026:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8013028:	f7ff fe3c 	bl	8012ca4 <LL_RCC_PLL3_GetM>
 801302c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 801302e:	f7ff fe2b 	bl	8012c88 <LL_RCC_PLL3_GetN>
 8013032:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8013034:	f7ff fe14 	bl	8012c60 <LL_RCC_PLL3FRACN_IsEnabled>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d002      	beq.n	8013044 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 801303e:	f7ff fe6f 	bl	8012d20 <LL_RCC_PLL3_GetFRACN>
 8013042:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d038      	beq.n	80130bc <LL_RCC_GetPLL3ClockFreq+0x120>
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d035      	beq.n	80130bc <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8013050:	f7ff fdca 	bl	8012be8 <LL_RCC_PLL3P_IsEnabled>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d00c      	beq.n	8013074 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 801305a:	f7ff fe31 	bl	8012cc0 <LL_RCC_PLL3_GetP>
 801305e:	4603      	mov	r3, r0
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	68fa      	ldr	r2, [r7, #12]
 8013066:	6939      	ldr	r1, [r7, #16]
 8013068:	69f8      	ldr	r0, [r7, #28]
 801306a:	f000 f831 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 801306e:	4602      	mov	r2, r0
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8013074:	f7ff fdcc 	bl	8012c10 <LL_RCC_PLL3Q_IsEnabled>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d00c      	beq.n	8013098 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 801307e:	f7ff fe2f 	bl	8012ce0 <LL_RCC_PLL3_GetQ>
 8013082:	4603      	mov	r3, r0
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	68fa      	ldr	r2, [r7, #12]
 801308a:	6939      	ldr	r1, [r7, #16]
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f000 f81f 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 8013092:	4602      	mov	r2, r0
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8013098:	f7ff fdce 	bl	8012c38 <LL_RCC_PLL3R_IsEnabled>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d00c      	beq.n	80130bc <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 80130a2:	f7ff fe2d 	bl	8012d00 <LL_RCC_PLL3_GetR>
 80130a6:	4603      	mov	r3, r0
 80130a8:	9300      	str	r3, [sp, #0]
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	68fa      	ldr	r2, [r7, #12]
 80130ae:	6939      	ldr	r1, [r7, #16]
 80130b0:	69f8      	ldr	r0, [r7, #28]
 80130b2:	f000 f80d 	bl	80130d0 <LL_RCC_CalcPLLClockFreq>
 80130b6:	4602      	mov	r2, r0
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	609a      	str	r2, [r3, #8]
    }
  }
}
 80130bc:	bf00      	nop
 80130be:	3720      	adds	r7, #32
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	03d09000 	.word	0x03d09000
 80130c8:	003d0900 	.word	0x003d0900
 80130cc:	017d7840 	.word	0x017d7840

080130d0 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 80130d0:	b480      	push	{r7}
 80130d2:	b087      	sub	sp, #28
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	ee07 3a90 	vmov	s15, r3
 80130e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	ee07 3a90 	vmov	s15, r3
 80130ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	ee07 3a90 	vmov	s15, r3
 80130fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	ee07 3a90 	vmov	s15, r3
 8013106:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801310a:	eddf 5a10 	vldr	s11, [pc, #64]	@ 801314c <LL_RCC_CalcPLLClockFreq+0x7c>
 801310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801311a:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	ee07 3a90 	vmov	s15, r3
 8013124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013128:	edd7 6a05 	vldr	s13, [r7, #20]
 801312c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013130:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8013134:	edd7 7a05 	vldr	s15, [r7, #20]
 8013138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801313c:	ee17 3a90 	vmov	r3, s15
}
 8013140:	4618      	mov	r0, r3
 8013142:	371c      	adds	r7, #28
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr
 801314c:	46000000 	.word	0x46000000

08013150 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8013150:	b590      	push	{r4, r7, lr}
 8013152:	b087      	sub	sp, #28
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8013158:	2300      	movs	r3, #0
 801315a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ff fbb1 	bl	80128c4 <LL_RCC_GetUSARTClockSource>
 8013162:	4603      	mov	r3, r0
 8013164:	4a62      	ldr	r2, [pc, #392]	@ (80132f0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8013166:	4293      	cmp	r3, r2
 8013168:	f000 80a9 	beq.w	80132be <LL_RCC_GetUSARTClockFreq+0x16e>
 801316c:	4a60      	ldr	r2, [pc, #384]	@ (80132f0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 801316e:	4293      	cmp	r3, r2
 8013170:	f200 80ae 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 8013174:	4a5f      	ldr	r2, [pc, #380]	@ (80132f4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8013176:	4293      	cmp	r3, r2
 8013178:	f000 80a1 	beq.w	80132be <LL_RCC_GetUSARTClockFreq+0x16e>
 801317c:	4a5d      	ldr	r2, [pc, #372]	@ (80132f4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 801317e:	4293      	cmp	r3, r2
 8013180:	f200 80a6 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 8013184:	4a5c      	ldr	r2, [pc, #368]	@ (80132f8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8013186:	4293      	cmp	r3, r2
 8013188:	f000 8091 	beq.w	80132ae <LL_RCC_GetUSARTClockFreq+0x15e>
 801318c:	4a5a      	ldr	r2, [pc, #360]	@ (80132f8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 801318e:	4293      	cmp	r3, r2
 8013190:	f200 809e 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 8013194:	4a59      	ldr	r2, [pc, #356]	@ (80132fc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8013196:	4293      	cmp	r3, r2
 8013198:	f000 8089 	beq.w	80132ae <LL_RCC_GetUSARTClockFreq+0x15e>
 801319c:	4a57      	ldr	r2, [pc, #348]	@ (80132fc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	f200 8096 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131a4:	4a56      	ldr	r2, [pc, #344]	@ (8013300 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d073      	beq.n	8013292 <LL_RCC_GetUSARTClockFreq+0x142>
 80131aa:	4a55      	ldr	r2, [pc, #340]	@ (8013300 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	f200 808f 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131b2:	4a54      	ldr	r2, [pc, #336]	@ (8013304 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80131b4:	4293      	cmp	r3, r2
 80131b6:	d06c      	beq.n	8013292 <LL_RCC_GetUSARTClockFreq+0x142>
 80131b8:	4a52      	ldr	r2, [pc, #328]	@ (8013304 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	f200 8088 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131c0:	4a51      	ldr	r2, [pc, #324]	@ (8013308 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d058      	beq.n	8013278 <LL_RCC_GetUSARTClockFreq+0x128>
 80131c6:	4a50      	ldr	r2, [pc, #320]	@ (8013308 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	f200 8081 	bhi.w	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131ce:	4a4f      	ldr	r2, [pc, #316]	@ (801330c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d051      	beq.n	8013278 <LL_RCC_GetUSARTClockFreq+0x128>
 80131d4:	4a4d      	ldr	r2, [pc, #308]	@ (801330c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d87a      	bhi.n	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131da:	4a4d      	ldr	r2, [pc, #308]	@ (8013310 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d03e      	beq.n	801325e <LL_RCC_GetUSARTClockFreq+0x10e>
 80131e0:	4a4b      	ldr	r2, [pc, #300]	@ (8013310 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d874      	bhi.n	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131e6:	4a4b      	ldr	r2, [pc, #300]	@ (8013314 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d038      	beq.n	801325e <LL_RCC_GetUSARTClockFreq+0x10e>
 80131ec:	4a49      	ldr	r2, [pc, #292]	@ (8013314 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d86e      	bhi.n	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
 80131f2:	4a49      	ldr	r2, [pc, #292]	@ (8013318 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d01a      	beq.n	801322e <LL_RCC_GetUSARTClockFreq+0xde>
 80131f8:	4a48      	ldr	r2, [pc, #288]	@ (801331c <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d168      	bne.n	80132d0 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80131fe:	f000 f895 	bl	801332c <RCC_GetSystemClockFreq>
 8013202:	4604      	mov	r4, r0
 8013204:	f7ff fb00 	bl	8012808 <LL_RCC_GetSysPrescaler>
 8013208:	4603      	mov	r3, r0
 801320a:	0a1b      	lsrs	r3, r3, #8
 801320c:	f003 030f 	and.w	r3, r3, #15
 8013210:	4a43      	ldr	r2, [pc, #268]	@ (8013320 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8013212:	5cd3      	ldrb	r3, [r2, r3]
 8013214:	f003 031f 	and.w	r3, r3, #31
 8013218:	fa24 f303 	lsr.w	r3, r4, r3
 801321c:	4618      	mov	r0, r3
 801321e:	f000 f8e7 	bl	80133f0 <RCC_GetHCLKClockFreq>
 8013222:	4603      	mov	r3, r0
 8013224:	4618      	mov	r0, r3
 8013226:	f000 f911 	bl	801344c <RCC_GetPCLK2ClockFreq>
 801322a:	6178      	str	r0, [r7, #20]
      break;
 801322c:	e05b      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 801322e:	f000 f87d 	bl	801332c <RCC_GetSystemClockFreq>
 8013232:	4604      	mov	r4, r0
 8013234:	f7ff fae8 	bl	8012808 <LL_RCC_GetSysPrescaler>
 8013238:	4603      	mov	r3, r0
 801323a:	0a1b      	lsrs	r3, r3, #8
 801323c:	f003 030f 	and.w	r3, r3, #15
 8013240:	4a37      	ldr	r2, [pc, #220]	@ (8013320 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8013242:	5cd3      	ldrb	r3, [r2, r3]
 8013244:	f003 031f 	and.w	r3, r3, #31
 8013248:	fa24 f303 	lsr.w	r3, r4, r3
 801324c:	4618      	mov	r0, r3
 801324e:	f000 f8cf 	bl	80133f0 <RCC_GetHCLKClockFreq>
 8013252:	4603      	mov	r3, r0
 8013254:	4618      	mov	r0, r3
 8013256:	f000 f8e1 	bl	801341c <RCC_GetPCLK1ClockFreq>
 801325a:	6178      	str	r0, [r7, #20]
      break;
 801325c:	e043      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 801325e:	f7ff fbf3 	bl	8012a48 <LL_RCC_PLL2_IsReady>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d035      	beq.n	80132d4 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8013268:	f107 0308 	add.w	r3, r7, #8
 801326c:	4618      	mov	r0, r3
 801326e:	f7ff fdfd 	bl	8012e6c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	617b      	str	r3, [r7, #20]
      }
      break;
 8013276:	e02d      	b.n	80132d4 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8013278:	f7ff fca2 	bl	8012bc0 <LL_RCC_PLL3_IsReady>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d02a      	beq.n	80132d8 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8013282:	f107 0308 	add.w	r3, r7, #8
 8013286:	4618      	mov	r0, r3
 8013288:	f7ff fe88 	bl	8012f9c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	617b      	str	r3, [r7, #20]
      }
      break;
 8013290:	e022      	b.n	80132d8 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8013292:	f7ff fa65 	bl	8012760 <LL_RCC_HSI_IsReady>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	d01f      	beq.n	80132dc <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 801329c:	f7ff fa72 	bl	8012784 <LL_RCC_HSI_GetDivider>
 80132a0:	4603      	mov	r3, r0
 80132a2:	08db      	lsrs	r3, r3, #3
 80132a4:	4a1f      	ldr	r2, [pc, #124]	@ (8013324 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80132a6:	fa22 f303 	lsr.w	r3, r2, r3
 80132aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80132ac:	e016      	b.n	80132dc <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 80132ae:	f7ff fa77 	bl	80127a0 <LL_RCC_CSI_IsReady>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d013      	beq.n	80132e0 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80132b8:	4b1b      	ldr	r3, [pc, #108]	@ (8013328 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80132ba:	617b      	str	r3, [r7, #20]
      }
      break;
 80132bc:	e010      	b.n	80132e0 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80132be:	f7ff fa83 	bl	80127c8 <LL_RCC_LSE_IsReady>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00d      	beq.n	80132e4 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80132c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132cc:	617b      	str	r3, [r7, #20]
      }
      break;
 80132ce:	e009      	b.n	80132e4 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 80132d0:	bf00      	nop
 80132d2:	e008      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80132d4:	bf00      	nop
 80132d6:	e006      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80132d8:	bf00      	nop
 80132da:	e004      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80132dc:	bf00      	nop
 80132de:	e002      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80132e0:	bf00      	nop
 80132e2:	e000      	b.n	80132e6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80132e4:	bf00      	nop
  }

  return usart_frequency;
 80132e6:	697b      	ldr	r3, [r7, #20]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	371c      	adds	r7, #28
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	07050308 	.word	0x07050308
 80132f4:	07050008 	.word	0x07050008
 80132f8:	07040308 	.word	0x07040308
 80132fc:	07040008 	.word	0x07040008
 8013300:	07030308 	.word	0x07030308
 8013304:	07030008 	.word	0x07030008
 8013308:	07020308 	.word	0x07020308
 801330c:	07020008 	.word	0x07020008
 8013310:	07010308 	.word	0x07010308
 8013314:	07010008 	.word	0x07010008
 8013318:	07000008 	.word	0x07000008
 801331c:	07000308 	.word	0x07000308
 8013320:	0801aebc 	.word	0x0801aebc
 8013324:	03d09000 	.word	0x03d09000
 8013328:	003d0900 	.word	0x003d0900

0801332c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8013332:	2300      	movs	r3, #0
 8013334:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8013336:	f7ff fa59 	bl	80127ec <LL_RCC_GetSysClkSource>
 801333a:	4603      	mov	r3, r0
 801333c:	2b18      	cmp	r3, #24
 801333e:	d84b      	bhi.n	80133d8 <RCC_GetSystemClockFreq+0xac>
 8013340:	a201      	add	r2, pc, #4	@ (adr r2, 8013348 <RCC_GetSystemClockFreq+0x1c>)
 8013342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013346:	bf00      	nop
 8013348:	080133ad 	.word	0x080133ad
 801334c:	080133d9 	.word	0x080133d9
 8013350:	080133d9 	.word	0x080133d9
 8013354:	080133d9 	.word	0x080133d9
 8013358:	080133d9 	.word	0x080133d9
 801335c:	080133d9 	.word	0x080133d9
 8013360:	080133d9 	.word	0x080133d9
 8013364:	080133d9 	.word	0x080133d9
 8013368:	080133bf 	.word	0x080133bf
 801336c:	080133d9 	.word	0x080133d9
 8013370:	080133d9 	.word	0x080133d9
 8013374:	080133d9 	.word	0x080133d9
 8013378:	080133d9 	.word	0x080133d9
 801337c:	080133d9 	.word	0x080133d9
 8013380:	080133d9 	.word	0x080133d9
 8013384:	080133d9 	.word	0x080133d9
 8013388:	080133c5 	.word	0x080133c5
 801338c:	080133d9 	.word	0x080133d9
 8013390:	080133d9 	.word	0x080133d9
 8013394:	080133d9 	.word	0x080133d9
 8013398:	080133d9 	.word	0x080133d9
 801339c:	080133d9 	.word	0x080133d9
 80133a0:	080133d9 	.word	0x080133d9
 80133a4:	080133d9 	.word	0x080133d9
 80133a8:	080133cb 	.word	0x080133cb
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80133ac:	f7ff f9ea 	bl	8012784 <LL_RCC_HSI_GetDivider>
 80133b0:	4603      	mov	r3, r0
 80133b2:	08db      	lsrs	r3, r3, #3
 80133b4:	4a0b      	ldr	r2, [pc, #44]	@ (80133e4 <RCC_GetSystemClockFreq+0xb8>)
 80133b6:	fa22 f303 	lsr.w	r3, r2, r3
 80133ba:	60fb      	str	r3, [r7, #12]
      break;
 80133bc:	e00d      	b.n	80133da <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80133be:	4b0a      	ldr	r3, [pc, #40]	@ (80133e8 <RCC_GetSystemClockFreq+0xbc>)
 80133c0:	60fb      	str	r3, [r7, #12]
      break;
 80133c2:	e00a      	b.n	80133da <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80133c4:	4b09      	ldr	r3, [pc, #36]	@ (80133ec <RCC_GetSystemClockFreq+0xc0>)
 80133c6:	60fb      	str	r3, [r7, #12]
      break;
 80133c8:	e007      	b.n	80133da <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80133ca:	463b      	mov	r3, r7
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7ff fcb5 	bl	8012d3c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	60fb      	str	r3, [r7, #12]
      break;
 80133d6:	e000      	b.n	80133da <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80133d8:	bf00      	nop
  }

  return frequency;
 80133da:	68fb      	ldr	r3, [r7, #12]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	03d09000 	.word	0x03d09000
 80133e8:	003d0900 	.word	0x003d0900
 80133ec:	017d7840 	.word	0x017d7840

080133f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80133f8:	f7ff fa14 	bl	8012824 <LL_RCC_GetAHBPrescaler>
 80133fc:	4603      	mov	r3, r0
 80133fe:	f003 030f 	and.w	r3, r3, #15
 8013402:	4a05      	ldr	r2, [pc, #20]	@ (8013418 <RCC_GetHCLKClockFreq+0x28>)
 8013404:	5cd3      	ldrb	r3, [r2, r3]
 8013406:	f003 031f 	and.w	r3, r3, #31
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	0801aebc 	.word	0x0801aebc

0801341c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8013424:	f7ff fa0c 	bl	8012840 <LL_RCC_GetAPB1Prescaler>
 8013428:	4603      	mov	r3, r0
 801342a:	091b      	lsrs	r3, r3, #4
 801342c:	f003 0307 	and.w	r3, r3, #7
 8013430:	4a05      	ldr	r2, [pc, #20]	@ (8013448 <RCC_GetPCLK1ClockFreq+0x2c>)
 8013432:	5cd3      	ldrb	r3, [r2, r3]
 8013434:	f003 031f 	and.w	r3, r3, #31
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	fa22 f303 	lsr.w	r3, r2, r3
}
 801343e:	4618      	mov	r0, r3
 8013440:	3708      	adds	r7, #8
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	0801aebc 	.word	0x0801aebc

0801344c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8013454:	f7ff fa02 	bl	801285c <LL_RCC_GetAPB2Prescaler>
 8013458:	4603      	mov	r3, r0
 801345a:	0a1b      	lsrs	r3, r3, #8
 801345c:	f003 0307 	and.w	r3, r3, #7
 8013460:	4a05      	ldr	r2, [pc, #20]	@ (8013478 <RCC_GetPCLK2ClockFreq+0x2c>)
 8013462:	5cd3      	ldrb	r3, [r2, r3]
 8013464:	f003 031f 	and.w	r3, r3, #31
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	fa22 f303 	lsr.w	r3, r2, r3
}
 801346e:	4618      	mov	r0, r3
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	bf00      	nop
 8013478:	0801aebc 	.word	0x0801aebc

0801347c <LL_TIM_SetPrescaler>:
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	683a      	ldr	r2, [r7, #0]
 801348a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801348c:	bf00      	nop
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <LL_TIM_SetAutoReload>:
{
 8013498:	b480      	push	{r7}
 801349a:	b083      	sub	sp, #12
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	683a      	ldr	r2, [r7, #0]
 80134a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80134a8:	bf00      	nop
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <LL_TIM_SetRepetitionCounter>:
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	683a      	ldr	r2, [r7, #0]
 80134c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80134c4:	bf00      	nop
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr

080134d0 <LL_TIM_OC_SetCompareCH1>:
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80134e0:	bf00      	nop
 80134e2:	370c      	adds	r7, #12
 80134e4:	46bd      	mov	sp, r7
 80134e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ea:	4770      	bx	lr

080134ec <LL_TIM_OC_SetCompareCH2>:
{
 80134ec:	b480      	push	{r7}
 80134ee:	b083      	sub	sp, #12
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	683a      	ldr	r2, [r7, #0]
 80134fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80134fc:	bf00      	nop
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <LL_TIM_OC_SetCompareCH3>:
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8013518:	bf00      	nop
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <LL_TIM_OC_SetCompareCH4>:
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	683a      	ldr	r2, [r7, #0]
 8013532:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8013534:	bf00      	nop
 8013536:	370c      	adds	r7, #12
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr

08013540 <LL_TIM_OC_SetCompareCH5>:
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	683a      	ldr	r2, [r7, #0]
 8013552:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8013554:	bf00      	nop
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <LL_TIM_OC_SetCompareCH6>:
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8013570:	bf00      	nop
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	f043 0201 	orr.w	r2, r3, #1
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	615a      	str	r2, [r3, #20]
}
 8013590:	bf00      	nop
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	4a41      	ldr	r2, [pc, #260]	@ (80136b4 <LL_TIM_Init+0x118>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d013      	beq.n	80135dc <LL_TIM_Init+0x40>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135ba:	d00f      	beq.n	80135dc <LL_TIM_Init+0x40>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	4a3e      	ldr	r2, [pc, #248]	@ (80136b8 <LL_TIM_Init+0x11c>)
 80135c0:	4293      	cmp	r3, r2
 80135c2:	d00b      	beq.n	80135dc <LL_TIM_Init+0x40>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	4a3d      	ldr	r2, [pc, #244]	@ (80136bc <LL_TIM_Init+0x120>)
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d007      	beq.n	80135dc <LL_TIM_Init+0x40>
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	4a3c      	ldr	r2, [pc, #240]	@ (80136c0 <LL_TIM_Init+0x124>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d003      	beq.n	80135dc <LL_TIM_Init+0x40>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4a3b      	ldr	r2, [pc, #236]	@ (80136c4 <LL_TIM_Init+0x128>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d106      	bne.n	80135ea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	4313      	orrs	r3, r2
 80135e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4a31      	ldr	r2, [pc, #196]	@ (80136b4 <LL_TIM_Init+0x118>)
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d027      	beq.n	8013642 <LL_TIM_Init+0xa6>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135f8:	d023      	beq.n	8013642 <LL_TIM_Init+0xa6>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4a2e      	ldr	r2, [pc, #184]	@ (80136b8 <LL_TIM_Init+0x11c>)
 80135fe:	4293      	cmp	r3, r2
 8013600:	d01f      	beq.n	8013642 <LL_TIM_Init+0xa6>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a2d      	ldr	r2, [pc, #180]	@ (80136bc <LL_TIM_Init+0x120>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d01b      	beq.n	8013642 <LL_TIM_Init+0xa6>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4a2c      	ldr	r2, [pc, #176]	@ (80136c0 <LL_TIM_Init+0x124>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d017      	beq.n	8013642 <LL_TIM_Init+0xa6>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4a2b      	ldr	r2, [pc, #172]	@ (80136c4 <LL_TIM_Init+0x128>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d013      	beq.n	8013642 <LL_TIM_Init+0xa6>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a2a      	ldr	r2, [pc, #168]	@ (80136c8 <LL_TIM_Init+0x12c>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d00f      	beq.n	8013642 <LL_TIM_Init+0xa6>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a29      	ldr	r2, [pc, #164]	@ (80136cc <LL_TIM_Init+0x130>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d00b      	beq.n	8013642 <LL_TIM_Init+0xa6>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a28      	ldr	r2, [pc, #160]	@ (80136d0 <LL_TIM_Init+0x134>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d007      	beq.n	8013642 <LL_TIM_Init+0xa6>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a27      	ldr	r2, [pc, #156]	@ (80136d4 <LL_TIM_Init+0x138>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d003      	beq.n	8013642 <LL_TIM_Init+0xa6>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a26      	ldr	r2, [pc, #152]	@ (80136d8 <LL_TIM_Init+0x13c>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d106      	bne.n	8013650 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	4313      	orrs	r3, r2
 801364e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	4619      	mov	r1, r3
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff ff1b 	bl	8013498 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	881b      	ldrh	r3, [r3, #0]
 8013666:	4619      	mov	r1, r3
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7ff ff07 	bl	801347c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	4a10      	ldr	r2, [pc, #64]	@ (80136b4 <LL_TIM_Init+0x118>)
 8013672:	4293      	cmp	r3, r2
 8013674:	d00f      	beq.n	8013696 <LL_TIM_Init+0xfa>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4a12      	ldr	r2, [pc, #72]	@ (80136c4 <LL_TIM_Init+0x128>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d00b      	beq.n	8013696 <LL_TIM_Init+0xfa>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4a11      	ldr	r2, [pc, #68]	@ (80136c8 <LL_TIM_Init+0x12c>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d007      	beq.n	8013696 <LL_TIM_Init+0xfa>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4a10      	ldr	r2, [pc, #64]	@ (80136cc <LL_TIM_Init+0x130>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d003      	beq.n	8013696 <LL_TIM_Init+0xfa>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4a0f      	ldr	r2, [pc, #60]	@ (80136d0 <LL_TIM_Init+0x134>)
 8013692:	4293      	cmp	r3, r2
 8013694:	d105      	bne.n	80136a2 <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	691b      	ldr	r3, [r3, #16]
 801369a:	4619      	mov	r1, r3
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7ff ff09 	bl	80134b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7ff ff6a 	bl	801357c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	40010000 	.word	0x40010000
 80136b8:	40000400 	.word	0x40000400
 80136bc:	40000800 	.word	0x40000800
 80136c0:	40000c00 	.word	0x40000c00
 80136c4:	40010400 	.word	0x40010400
 80136c8:	40014000 	.word	0x40014000
 80136cc:	40014400 	.word	0x40014400
 80136d0:	40014800 	.word	0x40014800
 80136d4:	4000e000 	.word	0x4000e000
 80136d8:	4000e400 	.word	0x4000e400

080136dc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b086      	sub	sp, #24
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	60b9      	str	r1, [r7, #8]
 80136e6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80136e8:	2301      	movs	r3, #1
 80136ea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80136f2:	d045      	beq.n	8013780 <LL_TIM_OC_Init+0xa4>
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80136fa:	d848      	bhi.n	801378e <LL_TIM_OC_Init+0xb2>
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013702:	d036      	beq.n	8013772 <LL_TIM_OC_Init+0x96>
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801370a:	d840      	bhi.n	801378e <LL_TIM_OC_Init+0xb2>
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013712:	d027      	beq.n	8013764 <LL_TIM_OC_Init+0x88>
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801371a:	d838      	bhi.n	801378e <LL_TIM_OC_Init+0xb2>
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013722:	d018      	beq.n	8013756 <LL_TIM_OC_Init+0x7a>
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801372a:	d830      	bhi.n	801378e <LL_TIM_OC_Init+0xb2>
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d003      	beq.n	801373a <LL_TIM_OC_Init+0x5e>
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	2b10      	cmp	r3, #16
 8013736:	d007      	beq.n	8013748 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8013738:	e029      	b.n	801378e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 801373a:	6879      	ldr	r1, [r7, #4]
 801373c:	68f8      	ldr	r0, [r7, #12]
 801373e:	f000 f82d 	bl	801379c <OC1Config>
 8013742:	4603      	mov	r3, r0
 8013744:	75fb      	strb	r3, [r7, #23]
      break;
 8013746:	e023      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8013748:	6879      	ldr	r1, [r7, #4]
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	f000 f8a6 	bl	801389c <OC2Config>
 8013750:	4603      	mov	r3, r0
 8013752:	75fb      	strb	r3, [r7, #23]
      break;
 8013754:	e01c      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8013756:	6879      	ldr	r1, [r7, #4]
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f000 f923 	bl	80139a4 <OC3Config>
 801375e:	4603      	mov	r3, r0
 8013760:	75fb      	strb	r3, [r7, #23]
      break;
 8013762:	e015      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8013764:	6879      	ldr	r1, [r7, #4]
 8013766:	68f8      	ldr	r0, [r7, #12]
 8013768:	f000 f9a0 	bl	8013aac <OC4Config>
 801376c:	4603      	mov	r3, r0
 801376e:	75fb      	strb	r3, [r7, #23]
      break;
 8013770:	e00e      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8013772:	6879      	ldr	r1, [r7, #4]
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f000 fa05 	bl	8013b84 <OC5Config>
 801377a:	4603      	mov	r3, r0
 801377c:	75fb      	strb	r3, [r7, #23]
      break;
 801377e:	e007      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8013780:	6879      	ldr	r1, [r7, #4]
 8013782:	68f8      	ldr	r0, [r7, #12]
 8013784:	f000 fa62 	bl	8013c4c <OC6Config>
 8013788:	4603      	mov	r3, r0
 801378a:	75fb      	strb	r3, [r7, #23]
      break;
 801378c:	e000      	b.n	8013790 <LL_TIM_OC_Init+0xb4>
      break;
 801378e:	bf00      	nop
  }

  return result;
 8013790:	7dfb      	ldrb	r3, [r7, #23]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3718      	adds	r7, #24
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
	...

0801379c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6a1b      	ldr	r3, [r3, #32]
 80137aa:	f023 0201 	bic.w	r2, r3, #1
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6a1b      	ldr	r3, [r3, #32]
 80137b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	699b      	ldr	r3, [r3, #24]
 80137c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f023 0303 	bic.w	r3, r3, #3
 80137ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	4b2d      	ldr	r3, [pc, #180]	@ (8013884 <OC1Config+0xe8>)
 80137d0:	4013      	ands	r3, r2
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	6812      	ldr	r2, [r2, #0]
 80137d6:	4313      	orrs	r3, r2
 80137d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f023 0202 	bic.w	r2, r3, #2
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	691b      	ldr	r3, [r3, #16]
 80137e4:	4313      	orrs	r3, r2
 80137e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	f023 0201 	bic.w	r2, r3, #1
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	4313      	orrs	r3, r2
 80137f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a23      	ldr	r2, [pc, #140]	@ (8013888 <OC1Config+0xec>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d00f      	beq.n	801381e <OC1Config+0x82>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4a22      	ldr	r2, [pc, #136]	@ (801388c <OC1Config+0xf0>)
 8013802:	4293      	cmp	r3, r2
 8013804:	d00b      	beq.n	801381e <OC1Config+0x82>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4a21      	ldr	r2, [pc, #132]	@ (8013890 <OC1Config+0xf4>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d007      	beq.n	801381e <OC1Config+0x82>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4a20      	ldr	r2, [pc, #128]	@ (8013894 <OC1Config+0xf8>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d003      	beq.n	801381e <OC1Config+0x82>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	4a1f      	ldr	r2, [pc, #124]	@ (8013898 <OC1Config+0xfc>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d11e      	bne.n	801385c <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	f023 0208 	bic.w	r2, r3, #8
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	695b      	ldr	r3, [r3, #20]
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	4313      	orrs	r3, r2
 801382c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	f023 0204 	bic.w	r2, r3, #4
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	4313      	orrs	r3, r2
 801383c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	699b      	ldr	r3, [r3, #24]
 8013848:	4313      	orrs	r3, r2
 801384a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	69db      	ldr	r3, [r3, #28]
 8013856:	005b      	lsls	r3, r3, #1
 8013858:	4313      	orrs	r3, r2
 801385a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	693a      	ldr	r2, [r7, #16]
 8013860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	4619      	mov	r1, r3
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f7ff fe2e 	bl	80134d0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	697a      	ldr	r2, [r7, #20]
 8013878:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801387a:	2300      	movs	r3, #0
}
 801387c:	4618      	mov	r0, r3
 801387e:	3718      	adds	r7, #24
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	fffeff8f 	.word	0xfffeff8f
 8013888:	40010000 	.word	0x40010000
 801388c:	40010400 	.word	0x40010400
 8013890:	40014000 	.word	0x40014000
 8013894:	40014400 	.word	0x40014400
 8013898:	40014800 	.word	0x40014800

0801389c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	f023 0210 	bic.w	r2, r3, #16
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a1b      	ldr	r3, [r3, #32]
 80138b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	699b      	ldr	r3, [r3, #24]
 80138c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80138ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80138cc:	68fa      	ldr	r2, [r7, #12]
 80138ce:	4b2f      	ldr	r3, [pc, #188]	@ (801398c <OC2Config+0xf0>)
 80138d0:	4013      	ands	r3, r2
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	6812      	ldr	r2, [r2, #0]
 80138d6:	0212      	lsls	r2, r2, #8
 80138d8:	4313      	orrs	r3, r2
 80138da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	f023 0220 	bic.w	r2, r3, #32
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	011b      	lsls	r3, r3, #4
 80138e8:	4313      	orrs	r3, r2
 80138ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	f023 0210 	bic.w	r2, r3, #16
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	011b      	lsls	r3, r3, #4
 80138f8:	4313      	orrs	r3, r2
 80138fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4a24      	ldr	r2, [pc, #144]	@ (8013990 <OC2Config+0xf4>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d00f      	beq.n	8013924 <OC2Config+0x88>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4a23      	ldr	r2, [pc, #140]	@ (8013994 <OC2Config+0xf8>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d00b      	beq.n	8013924 <OC2Config+0x88>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a22      	ldr	r2, [pc, #136]	@ (8013998 <OC2Config+0xfc>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d007      	beq.n	8013924 <OC2Config+0x88>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4a21      	ldr	r2, [pc, #132]	@ (801399c <OC2Config+0x100>)
 8013918:	4293      	cmp	r3, r2
 801391a:	d003      	beq.n	8013924 <OC2Config+0x88>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4a20      	ldr	r2, [pc, #128]	@ (80139a0 <OC2Config+0x104>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d11f      	bne.n	8013964 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	019b      	lsls	r3, r3, #6
 8013930:	4313      	orrs	r3, r2
 8013932:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	019b      	lsls	r3, r3, #6
 8013940:	4313      	orrs	r3, r2
 8013942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	699b      	ldr	r3, [r3, #24]
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	4313      	orrs	r3, r2
 8013952:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	69db      	ldr	r3, [r3, #28]
 801395e:	00db      	lsls	r3, r3, #3
 8013960:	4313      	orrs	r3, r2
 8013962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	693a      	ldr	r2, [r7, #16]
 8013968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	4619      	mov	r1, r3
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7ff fdb8 	bl	80134ec <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	697a      	ldr	r2, [r7, #20]
 8013980:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	feff8fff 	.word	0xfeff8fff
 8013990:	40010000 	.word	0x40010000
 8013994:	40010400 	.word	0x40010400
 8013998:	40014000 	.word	0x40014000
 801399c:	40014400 	.word	0x40014400
 80139a0:	40014800 	.word	0x40014800

080139a4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6a1b      	ldr	r3, [r3, #32]
 80139b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6a1b      	ldr	r3, [r3, #32]
 80139be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	69db      	ldr	r3, [r3, #28]
 80139ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f023 0303 	bic.w	r3, r3, #3
 80139d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80139d4:	68fa      	ldr	r2, [r7, #12]
 80139d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013a94 <OC3Config+0xf0>)
 80139d8:	4013      	ands	r3, r2
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	4313      	orrs	r3, r2
 80139e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	021b      	lsls	r3, r3, #8
 80139ee:	4313      	orrs	r3, r2
 80139f0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	021b      	lsls	r3, r3, #8
 80139fe:	4313      	orrs	r3, r2
 8013a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4a24      	ldr	r2, [pc, #144]	@ (8013a98 <OC3Config+0xf4>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d00f      	beq.n	8013a2a <OC3Config+0x86>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4a23      	ldr	r2, [pc, #140]	@ (8013a9c <OC3Config+0xf8>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d00b      	beq.n	8013a2a <OC3Config+0x86>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4a22      	ldr	r2, [pc, #136]	@ (8013aa0 <OC3Config+0xfc>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d007      	beq.n	8013a2a <OC3Config+0x86>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	4a21      	ldr	r2, [pc, #132]	@ (8013aa4 <OC3Config+0x100>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d003      	beq.n	8013a2a <OC3Config+0x86>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4a20      	ldr	r2, [pc, #128]	@ (8013aa8 <OC3Config+0x104>)
 8013a26:	4293      	cmp	r3, r2
 8013a28:	d11f      	bne.n	8013a6a <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	695b      	ldr	r3, [r3, #20]
 8013a34:	029b      	lsls	r3, r3, #10
 8013a36:	4313      	orrs	r3, r2
 8013a38:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	689b      	ldr	r3, [r3, #8]
 8013a44:	029b      	lsls	r3, r3, #10
 8013a46:	4313      	orrs	r3, r2
 8013a48:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	011b      	lsls	r3, r3, #4
 8013a56:	4313      	orrs	r3, r2
 8013a58:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	69db      	ldr	r3, [r3, #28]
 8013a64:	015b      	lsls	r3, r3, #5
 8013a66:	4313      	orrs	r3, r2
 8013a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	693a      	ldr	r2, [r7, #16]
 8013a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7ff fd43 	bl	8013508 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	fffeff8f 	.word	0xfffeff8f
 8013a98:	40010000 	.word	0x40010000
 8013a9c:	40010400 	.word	0x40010400
 8013aa0:	40014000 	.word	0x40014000
 8013aa4:	40014400 	.word	0x40014400
 8013aa8:	40014800 	.word	0x40014800

08013aac <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b086      	sub	sp, #24
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6a1b      	ldr	r3, [r3, #32]
 8013aba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6a1b      	ldr	r3, [r3, #32]
 8013ac6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	69db      	ldr	r3, [r3, #28]
 8013ad2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	4b23      	ldr	r3, [pc, #140]	@ (8013b6c <OC4Config+0xc0>)
 8013ae0:	4013      	ands	r3, r2
 8013ae2:	683a      	ldr	r2, [r7, #0]
 8013ae4:	6812      	ldr	r2, [r2, #0]
 8013ae6:	0212      	lsls	r2, r2, #8
 8013ae8:	4313      	orrs	r3, r2
 8013aea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	691b      	ldr	r3, [r3, #16]
 8013af6:	031b      	lsls	r3, r3, #12
 8013af8:	4313      	orrs	r3, r2
 8013afa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	031b      	lsls	r3, r3, #12
 8013b08:	4313      	orrs	r3, r2
 8013b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4a18      	ldr	r2, [pc, #96]	@ (8013b70 <OC4Config+0xc4>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d00f      	beq.n	8013b34 <OC4Config+0x88>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4a17      	ldr	r2, [pc, #92]	@ (8013b74 <OC4Config+0xc8>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d00b      	beq.n	8013b34 <OC4Config+0x88>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4a16      	ldr	r2, [pc, #88]	@ (8013b78 <OC4Config+0xcc>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d007      	beq.n	8013b34 <OC4Config+0x88>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	4a15      	ldr	r2, [pc, #84]	@ (8013b7c <OC4Config+0xd0>)
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d003      	beq.n	8013b34 <OC4Config+0x88>
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4a14      	ldr	r2, [pc, #80]	@ (8013b80 <OC4Config+0xd4>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d107      	bne.n	8013b44 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	019b      	lsls	r3, r3, #6
 8013b40:	4313      	orrs	r3, r2
 8013b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	697a      	ldr	r2, [r7, #20]
 8013b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	4619      	mov	r1, r3
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f7ff fce4 	bl	8013524 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	693a      	ldr	r2, [r7, #16]
 8013b60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3718      	adds	r7, #24
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	feff8fff 	.word	0xfeff8fff
 8013b70:	40010000 	.word	0x40010000
 8013b74:	40010400 	.word	0x40010400
 8013b78:	40014000 	.word	0x40014000
 8013b7c:	40014400 	.word	0x40014400
 8013b80:	40014800 	.word	0x40014800

08013b84 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6a1b      	ldr	r3, [r3, #32]
 8013b92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6a1b      	ldr	r3, [r3, #32]
 8013b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ba4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	4b22      	ldr	r3, [pc, #136]	@ (8013c34 <OC5Config+0xb0>)
 8013baa:	4013      	ands	r3, r2
 8013bac:	683a      	ldr	r2, [r7, #0]
 8013bae:	6812      	ldr	r2, [r2, #0]
 8013bb0:	4313      	orrs	r3, r2
 8013bb2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	691b      	ldr	r3, [r3, #16]
 8013bbe:	041b      	lsls	r3, r3, #16
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	041b      	lsls	r3, r3, #16
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4a18      	ldr	r2, [pc, #96]	@ (8013c38 <OC5Config+0xb4>)
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d00f      	beq.n	8013bfc <OC5Config+0x78>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	4a17      	ldr	r2, [pc, #92]	@ (8013c3c <OC5Config+0xb8>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d00b      	beq.n	8013bfc <OC5Config+0x78>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4a16      	ldr	r2, [pc, #88]	@ (8013c40 <OC5Config+0xbc>)
 8013be8:	4293      	cmp	r3, r2
 8013bea:	d007      	beq.n	8013bfc <OC5Config+0x78>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	4a15      	ldr	r2, [pc, #84]	@ (8013c44 <OC5Config+0xc0>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d003      	beq.n	8013bfc <OC5Config+0x78>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	4a14      	ldr	r2, [pc, #80]	@ (8013c48 <OC5Config+0xc4>)
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d109      	bne.n	8013c10 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	021b      	lsls	r3, r3, #8
 8013c0a:	431a      	orrs	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	68ba      	ldr	r2, [r7, #8]
 8013c14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7ff fc8f 	bl	8013540 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	fffeff8f 	.word	0xfffeff8f
 8013c38:	40010000 	.word	0x40010000
 8013c3c:	40010400 	.word	0x40010400
 8013c40:	40014000 	.word	0x40014000
 8013c44:	40014400 	.word	0x40014400
 8013c48:	40014800 	.word	0x40014800

08013c4c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6a1b      	ldr	r3, [r3, #32]
 8013c5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6a1b      	ldr	r3, [r3, #32]
 8013c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c6c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8013c6e:	68ba      	ldr	r2, [r7, #8]
 8013c70:	4b22      	ldr	r3, [pc, #136]	@ (8013cfc <OC6Config+0xb0>)
 8013c72:	4013      	ands	r3, r2
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	6812      	ldr	r2, [r2, #0]
 8013c78:	0212      	lsls	r2, r2, #8
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	051b      	lsls	r3, r3, #20
 8013c8a:	4313      	orrs	r3, r2
 8013c8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	051b      	lsls	r3, r3, #20
 8013c9a:	4313      	orrs	r3, r2
 8013c9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4a17      	ldr	r2, [pc, #92]	@ (8013d00 <OC6Config+0xb4>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d00f      	beq.n	8013cc6 <OC6Config+0x7a>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	4a16      	ldr	r2, [pc, #88]	@ (8013d04 <OC6Config+0xb8>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d00b      	beq.n	8013cc6 <OC6Config+0x7a>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	4a15      	ldr	r2, [pc, #84]	@ (8013d08 <OC6Config+0xbc>)
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	d007      	beq.n	8013cc6 <OC6Config+0x7a>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	4a14      	ldr	r2, [pc, #80]	@ (8013d0c <OC6Config+0xc0>)
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	d003      	beq.n	8013cc6 <OC6Config+0x7a>
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4a13      	ldr	r2, [pc, #76]	@ (8013d10 <OC6Config+0xc4>)
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d109      	bne.n	8013cda <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	685b      	ldr	r3, [r3, #4]
 8013cca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	699b      	ldr	r3, [r3, #24]
 8013cd2:	029b      	lsls	r3, r3, #10
 8013cd4:	431a      	orrs	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	68ba      	ldr	r2, [r7, #8]
 8013cde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f7ff fc3a 	bl	8013560 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8013cf2:	2300      	movs	r3, #0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	feff8fff 	.word	0xfeff8fff
 8013d00:	40010000 	.word	0x40010000
 8013d04:	40010400 	.word	0x40010400
 8013d08:	40014000 	.word	0x40014000
 8013d0c:	40014400 	.word	0x40014400
 8013d10:	40014800 	.word	0x40014800

08013d14 <LL_USART_IsEnabled>:
{
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f003 0301 	and.w	r3, r3, #1
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d101      	bne.n	8013d2c <LL_USART_IsEnabled+0x18>
 8013d28:	2301      	movs	r3, #1
 8013d2a:	e000      	b.n	8013d2e <LL_USART_IsEnabled+0x1a>
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr

08013d3a <LL_USART_SetPrescaler>:
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b083      	sub	sp, #12
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
 8013d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d48:	f023 030f 	bic.w	r3, r3, #15
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	b292      	uxth	r2, r2
 8013d50:	431a      	orrs	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8013d56:	bf00      	nop
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <LL_USART_SetStopBitsLength>:
{
 8013d62:	b480      	push	{r7}
 8013d64:	b083      	sub	sp, #12
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
 8013d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	431a      	orrs	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	605a      	str	r2, [r3, #4]
}
 8013d7c:	bf00      	nop
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <LL_USART_SetHWFlowCtrl>:
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	689b      	ldr	r3, [r3, #8]
 8013d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	431a      	orrs	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	609a      	str	r2, [r3, #8]
}
 8013da2:	bf00      	nop
 8013da4:	370c      	adds	r7, #12
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr
	...

08013db0 <LL_USART_SetBaudRate>:
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	607a      	str	r2, [r7, #4]
 8013dbc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2b0b      	cmp	r3, #11
 8013dc2:	d83c      	bhi.n	8013e3e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8013dc4:	6a3b      	ldr	r3, [r7, #32]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d039      	beq.n	8013e3e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013dd0:	d122      	bne.n	8013e18 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8013e4c <LL_USART_SetBaudRate+0x9c>)
 8013dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dde:	68ba      	ldr	r2, [r7, #8]
 8013de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013de4:	005a      	lsls	r2, r3, #1
 8013de6:	6a3b      	ldr	r3, [r7, #32]
 8013de8:	085b      	lsrs	r3, r3, #1
 8013dea:	441a      	add	r2, r3
 8013dec:	6a3b      	ldr	r3, [r7, #32]
 8013dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8013df6:	697a      	ldr	r2, [r7, #20]
 8013df8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8013dfc:	4013      	ands	r3, r2
 8013dfe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	085b      	lsrs	r3, r3, #1
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	f003 0307 	and.w	r3, r3, #7
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	693a      	ldr	r2, [r7, #16]
 8013e14:	60da      	str	r2, [r3, #12]
}
 8013e16:	e012      	b.n	8013e3e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8013e4c <LL_USART_SetBaudRate+0x9c>)
 8013e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e24:	68ba      	ldr	r2, [r7, #8]
 8013e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e2a:	6a3b      	ldr	r3, [r7, #32]
 8013e2c:	085b      	lsrs	r3, r3, #1
 8013e2e:	441a      	add	r2, r3
 8013e30:	6a3b      	ldr	r3, [r7, #32]
 8013e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	461a      	mov	r2, r3
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	60da      	str	r2, [r3, #12]
}
 8013e3e:	bf00      	nop
 8013e40:	371c      	adds	r7, #28
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	0801aecc 	.word	0x0801aecc

08013e50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b086      	sub	sp, #24
 8013e54:	af02      	add	r7, sp, #8
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7ff ff56 	bl	8013d14 <LL_USART_IsEnabled>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f040 8092 	bne.w	8013f94 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	4b4a      	ldr	r3, [pc, #296]	@ (8013fa0 <LL_USART_Init+0x150>)
 8013e76:	4013      	ands	r3, r2
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	6891      	ldr	r1, [r2, #8]
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	6912      	ldr	r2, [r2, #16]
 8013e80:	4311      	orrs	r1, r2
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	6952      	ldr	r2, [r2, #20]
 8013e86:	4311      	orrs	r1, r2
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	69d2      	ldr	r2, [r2, #28]
 8013e8c:	430a      	orrs	r2, r1
 8013e8e:	431a      	orrs	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f7ff ff61 	bl	8013d62 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	699b      	ldr	r3, [r3, #24]
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7ff ff6e 	bl	8013d88 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4a3d      	ldr	r2, [pc, #244]	@ (8013fa4 <LL_USART_Init+0x154>)
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d104      	bne.n	8013ebe <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8013eb4:	483c      	ldr	r0, [pc, #240]	@ (8013fa8 <LL_USART_Init+0x158>)
 8013eb6:	f7ff f94b 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013eba:	60b8      	str	r0, [r7, #8]
 8013ebc:	e04f      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8013fac <LL_USART_Init+0x15c>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d104      	bne.n	8013ed0 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013ec6:	483a      	ldr	r0, [pc, #232]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013ec8:	f7ff f942 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013ecc:	60b8      	str	r0, [r7, #8]
 8013ece:	e046      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	4a38      	ldr	r2, [pc, #224]	@ (8013fb4 <LL_USART_Init+0x164>)
 8013ed4:	4293      	cmp	r3, r2
 8013ed6:	d104      	bne.n	8013ee2 <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013ed8:	4835      	ldr	r0, [pc, #212]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013eda:	f7ff f939 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013ede:	60b8      	str	r0, [r7, #8]
 8013ee0:	e03d      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4a34      	ldr	r2, [pc, #208]	@ (8013fb8 <LL_USART_Init+0x168>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d104      	bne.n	8013ef4 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013eea:	4831      	ldr	r0, [pc, #196]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013eec:	f7ff f930 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013ef0:	60b8      	str	r0, [r7, #8]
 8013ef2:	e034      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4a31      	ldr	r2, [pc, #196]	@ (8013fbc <LL_USART_Init+0x16c>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d104      	bne.n	8013f06 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013efc:	482c      	ldr	r0, [pc, #176]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013efe:	f7ff f927 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f02:	60b8      	str	r0, [r7, #8]
 8013f04:	e02b      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4a2d      	ldr	r2, [pc, #180]	@ (8013fc0 <LL_USART_Init+0x170>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d104      	bne.n	8013f18 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8013f0e:	4826      	ldr	r0, [pc, #152]	@ (8013fa8 <LL_USART_Init+0x158>)
 8013f10:	f7ff f91e 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f14:	60b8      	str	r0, [r7, #8]
 8013f16:	e022      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8013fc4 <LL_USART_Init+0x174>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d104      	bne.n	8013f2a <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013f20:	4823      	ldr	r0, [pc, #140]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013f22:	f7ff f915 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f26:	60b8      	str	r0, [r7, #8]
 8013f28:	e019      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4a26      	ldr	r2, [pc, #152]	@ (8013fc8 <LL_USART_Init+0x178>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d104      	bne.n	8013f3c <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8013f32:	481f      	ldr	r0, [pc, #124]	@ (8013fb0 <LL_USART_Init+0x160>)
 8013f34:	f7ff f90c 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f38:	60b8      	str	r0, [r7, #8]
 8013f3a:	e010      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	4a23      	ldr	r2, [pc, #140]	@ (8013fcc <LL_USART_Init+0x17c>)
 8013f40:	4293      	cmp	r3, r2
 8013f42:	d104      	bne.n	8013f4e <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8013f44:	4818      	ldr	r0, [pc, #96]	@ (8013fa8 <LL_USART_Init+0x158>)
 8013f46:	f7ff f903 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f4a:	60b8      	str	r0, [r7, #8]
 8013f4c:	e007      	b.n	8013f5e <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	4a1f      	ldr	r2, [pc, #124]	@ (8013fd0 <LL_USART_Init+0x180>)
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d103      	bne.n	8013f5e <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8013f56:	4814      	ldr	r0, [pc, #80]	@ (8013fa8 <LL_USART_Init+0x158>)
 8013f58:	f7ff f8fa 	bl	8013150 <LL_RCC_GetUSARTClockFreq>
 8013f5c:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d011      	beq.n	8013f88 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d00d      	beq.n	8013f88 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	460b      	mov	r3, r1
 8013f80:	68b9      	ldr	r1, [r7, #8]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f7ff ff14 	bl	8013db0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f7ff fed3 	bl	8013d3a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8013f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3710      	adds	r7, #16
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	efff69f3 	.word	0xefff69f3
 8013fa4:	40011000 	.word	0x40011000
 8013fa8:	07000308 	.word	0x07000308
 8013fac:	40004400 	.word	0x40004400
 8013fb0:	07000008 	.word	0x07000008
 8013fb4:	40004800 	.word	0x40004800
 8013fb8:	40004c00 	.word	0x40004c00
 8013fbc:	40005000 	.word	0x40005000
 8013fc0:	40011400 	.word	0x40011400
 8013fc4:	40007800 	.word	0x40007800
 8013fc8:	40007c00 	.word	0x40007c00
 8013fcc:	40011800 	.word	0x40011800
 8013fd0:	40011c00 	.word	0x40011c00

08013fd4 <__NVIC_SetPriority>:
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	6039      	str	r1, [r7, #0]
 8013fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	db0a      	blt.n	8013ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	b2da      	uxtb	r2, r3
 8013fec:	490c      	ldr	r1, [pc, #48]	@ (8014020 <__NVIC_SetPriority+0x4c>)
 8013fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ff2:	0112      	lsls	r2, r2, #4
 8013ff4:	b2d2      	uxtb	r2, r2
 8013ff6:	440b      	add	r3, r1
 8013ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013ffc:	e00a      	b.n	8014014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	b2da      	uxtb	r2, r3
 8014002:	4908      	ldr	r1, [pc, #32]	@ (8014024 <__NVIC_SetPriority+0x50>)
 8014004:	88fb      	ldrh	r3, [r7, #6]
 8014006:	f003 030f 	and.w	r3, r3, #15
 801400a:	3b04      	subs	r3, #4
 801400c:	0112      	lsls	r2, r2, #4
 801400e:	b2d2      	uxtb	r2, r2
 8014010:	440b      	add	r3, r1
 8014012:	761a      	strb	r2, [r3, #24]
}
 8014014:	bf00      	nop
 8014016:	370c      	adds	r7, #12
 8014018:	46bd      	mov	sp, r7
 801401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401e:	4770      	bx	lr
 8014020:	e000e100 	.word	0xe000e100
 8014024:	e000ed00 	.word	0xe000ed00

08014028 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014028:	b580      	push	{r7, lr}
 801402a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801402c:	4b05      	ldr	r3, [pc, #20]	@ (8014044 <SysTick_Handler+0x1c>)
 801402e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014030:	f002 f98c 	bl	801634c <xTaskGetSchedulerState>
 8014034:	4603      	mov	r3, r0
 8014036:	2b01      	cmp	r3, #1
 8014038:	d001      	beq.n	801403e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801403a:	f003 f885 	bl	8017148 <xPortSysTickHandler>
  }
}
 801403e:	bf00      	nop
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	e000e010 	.word	0xe000e010

08014048 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014048:	b580      	push	{r7, lr}
 801404a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801404c:	2100      	movs	r1, #0
 801404e:	f06f 0004 	mvn.w	r0, #4
 8014052:	f7ff ffbf 	bl	8013fd4 <__NVIC_SetPriority>
#endif
}
 8014056:	bf00      	nop
 8014058:	bd80      	pop	{r7, pc}
	...

0801405c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014062:	f3ef 8305 	mrs	r3, IPSR
 8014066:	603b      	str	r3, [r7, #0]
  return(result);
 8014068:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801406a:	2b00      	cmp	r3, #0
 801406c:	d003      	beq.n	8014076 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801406e:	f06f 0305 	mvn.w	r3, #5
 8014072:	607b      	str	r3, [r7, #4]
 8014074:	e00c      	b.n	8014090 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014076:	4b0a      	ldr	r3, [pc, #40]	@ (80140a0 <osKernelInitialize+0x44>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d105      	bne.n	801408a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801407e:	4b08      	ldr	r3, [pc, #32]	@ (80140a0 <osKernelInitialize+0x44>)
 8014080:	2201      	movs	r2, #1
 8014082:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014084:	2300      	movs	r3, #0
 8014086:	607b      	str	r3, [r7, #4]
 8014088:	e002      	b.n	8014090 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801408a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801408e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014090:	687b      	ldr	r3, [r7, #4]
}
 8014092:	4618      	mov	r0, r3
 8014094:	370c      	adds	r7, #12
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr
 801409e:	bf00      	nop
 80140a0:	2400114c 	.word	0x2400114c

080140a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80140aa:	f3ef 8305 	mrs	r3, IPSR
 80140ae:	603b      	str	r3, [r7, #0]
  return(result);
 80140b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d003      	beq.n	80140be <osKernelStart+0x1a>
    stat = osErrorISR;
 80140b6:	f06f 0305 	mvn.w	r3, #5
 80140ba:	607b      	str	r3, [r7, #4]
 80140bc:	e010      	b.n	80140e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80140be:	4b0b      	ldr	r3, [pc, #44]	@ (80140ec <osKernelStart+0x48>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d109      	bne.n	80140da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80140c6:	f7ff ffbf 	bl	8014048 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80140ca:	4b08      	ldr	r3, [pc, #32]	@ (80140ec <osKernelStart+0x48>)
 80140cc:	2202      	movs	r2, #2
 80140ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80140d0:	f001 fcd8 	bl	8015a84 <vTaskStartScheduler>
      stat = osOK;
 80140d4:	2300      	movs	r3, #0
 80140d6:	607b      	str	r3, [r7, #4]
 80140d8:	e002      	b.n	80140e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80140da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80140de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80140e0:	687b      	ldr	r3, [r7, #4]
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3708      	adds	r7, #8
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	2400114c 	.word	0x2400114c

080140f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b08e      	sub	sp, #56	@ 0x38
 80140f4:	af04      	add	r7, sp, #16
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80140fc:	2300      	movs	r3, #0
 80140fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014100:	f3ef 8305 	mrs	r3, IPSR
 8014104:	617b      	str	r3, [r7, #20]
  return(result);
 8014106:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014108:	2b00      	cmp	r3, #0
 801410a:	d17e      	bne.n	801420a <osThreadNew+0x11a>
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d07b      	beq.n	801420a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014112:	2380      	movs	r3, #128	@ 0x80
 8014114:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014116:	2318      	movs	r3, #24
 8014118:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801411a:	2300      	movs	r3, #0
 801411c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801411e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014122:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d045      	beq.n	80141b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d002      	beq.n	8014138 <osThreadNew+0x48>
        name = attr->name;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	699b      	ldr	r3, [r3, #24]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d002      	beq.n	8014146 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	699b      	ldr	r3, [r3, #24]
 8014144:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d008      	beq.n	801415e <osThreadNew+0x6e>
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	2b38      	cmp	r3, #56	@ 0x38
 8014150:	d805      	bhi.n	801415e <osThreadNew+0x6e>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	f003 0301 	and.w	r3, r3, #1
 801415a:	2b00      	cmp	r3, #0
 801415c:	d001      	beq.n	8014162 <osThreadNew+0x72>
        return (NULL);
 801415e:	2300      	movs	r3, #0
 8014160:	e054      	b.n	801420c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	695b      	ldr	r3, [r3, #20]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d003      	beq.n	8014172 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	695b      	ldr	r3, [r3, #20]
 801416e:	089b      	lsrs	r3, r3, #2
 8014170:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00e      	beq.n	8014198 <osThreadNew+0xa8>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	68db      	ldr	r3, [r3, #12]
 801417e:	2ba7      	cmp	r3, #167	@ 0xa7
 8014180:	d90a      	bls.n	8014198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014186:	2b00      	cmp	r3, #0
 8014188:	d006      	beq.n	8014198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	695b      	ldr	r3, [r3, #20]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d002      	beq.n	8014198 <osThreadNew+0xa8>
        mem = 1;
 8014192:	2301      	movs	r3, #1
 8014194:	61bb      	str	r3, [r7, #24]
 8014196:	e010      	b.n	80141ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	689b      	ldr	r3, [r3, #8]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d10c      	bne.n	80141ba <osThreadNew+0xca>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	68db      	ldr	r3, [r3, #12]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d108      	bne.n	80141ba <osThreadNew+0xca>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	691b      	ldr	r3, [r3, #16]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d104      	bne.n	80141ba <osThreadNew+0xca>
          mem = 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	61bb      	str	r3, [r7, #24]
 80141b4:	e001      	b.n	80141ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80141b6:	2300      	movs	r3, #0
 80141b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d110      	bne.n	80141e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80141c8:	9202      	str	r2, [sp, #8]
 80141ca:	9301      	str	r3, [sp, #4]
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	6a3a      	ldr	r2, [r7, #32]
 80141d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141d6:	68f8      	ldr	r0, [r7, #12]
 80141d8:	f001 f87c 	bl	80152d4 <xTaskCreateStatic>
 80141dc:	4603      	mov	r3, r0
 80141de:	613b      	str	r3, [r7, #16]
 80141e0:	e013      	b.n	801420a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80141e2:	69bb      	ldr	r3, [r7, #24]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d110      	bne.n	801420a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80141e8:	6a3b      	ldr	r3, [r7, #32]
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	f107 0310 	add.w	r3, r7, #16
 80141f0:	9301      	str	r3, [sp, #4]
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	9300      	str	r3, [sp, #0]
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f001 f8ca 	bl	8015394 <xTaskCreate>
 8014200:	4603      	mov	r3, r0
 8014202:	2b01      	cmp	r3, #1
 8014204:	d001      	beq.n	801420a <osThreadNew+0x11a>
            hTask = NULL;
 8014206:	2300      	movs	r3, #0
 8014208:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801420a:	693b      	ldr	r3, [r7, #16]
}
 801420c:	4618      	mov	r0, r3
 801420e:	3728      	adds	r7, #40	@ 0x28
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014220:	f3ef 8305 	mrs	r3, IPSR
 8014224:	60fb      	str	r3, [r7, #12]
  return(result);
 8014226:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014228:	2b00      	cmp	r3, #0
 801422a:	d003      	beq.n	8014234 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801422c:	f06f 0305 	mvn.w	r3, #5
 8014230:	617b      	str	r3, [r7, #20]
 8014232:	e00b      	b.n	801424c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d103      	bne.n	8014242 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801423a:	f06f 0303 	mvn.w	r3, #3
 801423e:	617b      	str	r3, [r7, #20]
 8014240:	e004      	b.n	801424c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8014242:	2300      	movs	r3, #0
 8014244:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8014246:	6938      	ldr	r0, [r7, #16]
 8014248:	f001 fb14 	bl	8015874 <vTaskSuspend>
  }

  return (stat);
 801424c:	697b      	ldr	r3, [r7, #20]
}
 801424e:	4618      	mov	r0, r3
 8014250:	3718      	adds	r7, #24
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}

08014256 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8014256:	b580      	push	{r7, lr}
 8014258:	b086      	sub	sp, #24
 801425a:	af00      	add	r7, sp, #0
 801425c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014262:	f3ef 8305 	mrs	r3, IPSR
 8014266:	60fb      	str	r3, [r7, #12]
  return(result);
 8014268:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801426a:	2b00      	cmp	r3, #0
 801426c:	d003      	beq.n	8014276 <osThreadResume+0x20>
    stat = osErrorISR;
 801426e:	f06f 0305 	mvn.w	r3, #5
 8014272:	617b      	str	r3, [r7, #20]
 8014274:	e00b      	b.n	801428e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d103      	bne.n	8014284 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801427c:	f06f 0303 	mvn.w	r3, #3
 8014280:	617b      	str	r3, [r7, #20]
 8014282:	e004      	b.n	801428e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8014284:	2300      	movs	r3, #0
 8014286:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8014288:	6938      	ldr	r0, [r7, #16]
 801428a:	f001 fb9b 	bl	80159c4 <vTaskResume>
  }

  return (stat);
 801428e:	697b      	ldr	r3, [r7, #20]
}
 8014290:	4618      	mov	r0, r3
 8014292:	3718      	adds	r7, #24
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142a4:	f3ef 8305 	mrs	r3, IPSR
 80142a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80142aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d003      	beq.n	80142b8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80142b0:	f06f 0305 	mvn.w	r3, #5
 80142b4:	617b      	str	r3, [r7, #20]
 80142b6:	e017      	b.n	80142e8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d103      	bne.n	80142c6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80142be:	f06f 0303 	mvn.w	r3, #3
 80142c2:	617b      	str	r3, [r7, #20]
 80142c4:	e010      	b.n	80142e8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80142c6:	6938      	ldr	r0, [r7, #16]
 80142c8:	f001 fa6c 	bl	80157a4 <eTaskGetState>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80142d0:	7bfb      	ldrb	r3, [r7, #15]
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	d005      	beq.n	80142e2 <osThreadTerminate+0x4a>
      stat = osOK;
 80142d6:	2300      	movs	r3, #0
 80142d8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80142da:	6938      	ldr	r0, [r7, #16]
 80142dc:	f001 f9b8 	bl	8015650 <vTaskDelete>
 80142e0:	e002      	b.n	80142e8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80142e2:	f06f 0302 	mvn.w	r3, #2
 80142e6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80142e8:	697b      	ldr	r3, [r7, #20]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3718      	adds	r7, #24
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}

080142f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b084      	sub	sp, #16
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142fa:	f3ef 8305 	mrs	r3, IPSR
 80142fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8014300:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014302:	2b00      	cmp	r3, #0
 8014304:	d003      	beq.n	801430e <osDelay+0x1c>
    stat = osErrorISR;
 8014306:	f06f 0305 	mvn.w	r3, #5
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	e007      	b.n	801431e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801430e:	2300      	movs	r3, #0
 8014310:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d002      	beq.n	801431e <osDelay+0x2c>
      vTaskDelay(ticks);
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f001 fa0d 	bl	8015738 <vTaskDelay>
    }
  }

  return (stat);
 801431e:	68fb      	ldr	r3, [r7, #12]
}
 8014320:	4618      	mov	r0, r3
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014328:	b480      	push	{r7}
 801432a:	b085      	sub	sp, #20
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	4a07      	ldr	r2, [pc, #28]	@ (8014354 <vApplicationGetIdleTaskMemory+0x2c>)
 8014338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	4a06      	ldr	r2, [pc, #24]	@ (8014358 <vApplicationGetIdleTaskMemory+0x30>)
 801433e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2280      	movs	r2, #128	@ 0x80
 8014344:	601a      	str	r2, [r3, #0]
}
 8014346:	bf00      	nop
 8014348:	3714      	adds	r7, #20
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	24001150 	.word	0x24001150
 8014358:	240011f8 	.word	0x240011f8

0801435c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801435c:	b480      	push	{r7}
 801435e:	b085      	sub	sp, #20
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	4a07      	ldr	r2, [pc, #28]	@ (8014388 <vApplicationGetTimerTaskMemory+0x2c>)
 801436c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	4a06      	ldr	r2, [pc, #24]	@ (801438c <vApplicationGetTimerTaskMemory+0x30>)
 8014372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801437a:	601a      	str	r2, [r3, #0]
}
 801437c:	bf00      	nop
 801437e:	3714      	adds	r7, #20
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr
 8014388:	240013f8 	.word	0x240013f8
 801438c:	240014a0 	.word	0x240014a0

08014390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f103 0208 	add.w	r2, r3, #8
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80143a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f103 0208 	add.w	r2, r3, #8
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f103 0208 	add.w	r2, r3, #8
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80143c4:	bf00      	nop
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80143de:	bf00      	nop
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80143ea:	b480      	push	{r7}
 80143ec:	b085      	sub	sp, #20
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	689a      	ldr	r2, [r3, #8]
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	683a      	ldr	r2, [r7, #0]
 801440e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	683a      	ldr	r2, [r7, #0]
 8014414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	1c5a      	adds	r2, r3, #1
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	601a      	str	r2, [r3, #0]
}
 8014426:	bf00      	nop
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014432:	b480      	push	{r7}
 8014434:	b085      	sub	sp, #20
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
 801443a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014448:	d103      	bne.n	8014452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	691b      	ldr	r3, [r3, #16]
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	e00c      	b.n	801446c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	3308      	adds	r3, #8
 8014456:	60fb      	str	r3, [r7, #12]
 8014458:	e002      	b.n	8014460 <vListInsert+0x2e>
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	60fb      	str	r3, [r7, #12]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	429a      	cmp	r2, r3
 801446a:	d2f6      	bcs.n	801445a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	685a      	ldr	r2, [r3, #4]
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	683a      	ldr	r2, [r7, #0]
 801447a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	683a      	ldr	r2, [r7, #0]
 8014486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	1c5a      	adds	r2, r3, #1
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	601a      	str	r2, [r3, #0]
}
 8014498:	bf00      	nop
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr

080144a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80144a4:	b480      	push	{r7}
 80144a6:	b085      	sub	sp, #20
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	691b      	ldr	r3, [r3, #16]
 80144b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	6892      	ldr	r2, [r2, #8]
 80144ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	6852      	ldr	r2, [r2, #4]
 80144c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d103      	bne.n	80144d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	689a      	ldr	r2, [r3, #8]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2200      	movs	r2, #0
 80144dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	1e5a      	subs	r2, r3, #1
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3714      	adds	r7, #20
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d10b      	bne.n	8014524 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014510:	f383 8811 	msr	BASEPRI, r3
 8014514:	f3bf 8f6f 	isb	sy
 8014518:	f3bf 8f4f 	dsb	sy
 801451c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801451e:	bf00      	nop
 8014520:	bf00      	nop
 8014522:	e7fd      	b.n	8014520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014524:	f002 fd80 	bl	8017028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014530:	68f9      	ldr	r1, [r7, #12]
 8014532:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014534:	fb01 f303 	mul.w	r3, r1, r3
 8014538:	441a      	add	r2, r3
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2200      	movs	r2, #0
 8014542:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681a      	ldr	r2, [r3, #0]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014554:	3b01      	subs	r3, #1
 8014556:	68f9      	ldr	r1, [r7, #12]
 8014558:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801455a:	fb01 f303 	mul.w	r3, r1, r3
 801455e:	441a      	add	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	22ff      	movs	r2, #255	@ 0xff
 8014568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	22ff      	movs	r2, #255	@ 0xff
 8014570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d114      	bne.n	80145a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d01a      	beq.n	80145b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	3310      	adds	r3, #16
 8014586:	4618      	mov	r0, r3
 8014588:	f001 fd1a 	bl	8015fc0 <xTaskRemoveFromEventList>
 801458c:	4603      	mov	r3, r0
 801458e:	2b00      	cmp	r3, #0
 8014590:	d012      	beq.n	80145b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014592:	4b0d      	ldr	r3, [pc, #52]	@ (80145c8 <xQueueGenericReset+0xd0>)
 8014594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014598:	601a      	str	r2, [r3, #0]
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	f3bf 8f6f 	isb	sy
 80145a2:	e009      	b.n	80145b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	3310      	adds	r3, #16
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7ff fef1 	bl	8014390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	3324      	adds	r3, #36	@ 0x24
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7ff feec 	bl	8014390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80145b8:	f002 fd68 	bl	801708c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80145bc:	2301      	movs	r3, #1
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	e000ed04 	.word	0xe000ed04

080145cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b08e      	sub	sp, #56	@ 0x38
 80145d0:	af02      	add	r7, sp, #8
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
 80145d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d10b      	bne.n	80145f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80145e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145e4:	f383 8811 	msr	BASEPRI, r3
 80145e8:	f3bf 8f6f 	isb	sy
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80145f2:	bf00      	nop
 80145f4:	bf00      	nop
 80145f6:	e7fd      	b.n	80145f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d10b      	bne.n	8014616 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80145fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014602:	f383 8811 	msr	BASEPRI, r3
 8014606:	f3bf 8f6f 	isb	sy
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014610:	bf00      	nop
 8014612:	bf00      	nop
 8014614:	e7fd      	b.n	8014612 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d002      	beq.n	8014622 <xQueueGenericCreateStatic+0x56>
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d001      	beq.n	8014626 <xQueueGenericCreateStatic+0x5a>
 8014622:	2301      	movs	r3, #1
 8014624:	e000      	b.n	8014628 <xQueueGenericCreateStatic+0x5c>
 8014626:	2300      	movs	r3, #0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d10b      	bne.n	8014644 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014630:	f383 8811 	msr	BASEPRI, r3
 8014634:	f3bf 8f6f 	isb	sy
 8014638:	f3bf 8f4f 	dsb	sy
 801463c:	623b      	str	r3, [r7, #32]
}
 801463e:	bf00      	nop
 8014640:	bf00      	nop
 8014642:	e7fd      	b.n	8014640 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d102      	bne.n	8014650 <xQueueGenericCreateStatic+0x84>
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d101      	bne.n	8014654 <xQueueGenericCreateStatic+0x88>
 8014650:	2301      	movs	r3, #1
 8014652:	e000      	b.n	8014656 <xQueueGenericCreateStatic+0x8a>
 8014654:	2300      	movs	r3, #0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d10b      	bne.n	8014672 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801465a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801465e:	f383 8811 	msr	BASEPRI, r3
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	61fb      	str	r3, [r7, #28]
}
 801466c:	bf00      	nop
 801466e:	bf00      	nop
 8014670:	e7fd      	b.n	801466e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014672:	2350      	movs	r3, #80	@ 0x50
 8014674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	2b50      	cmp	r3, #80	@ 0x50
 801467a:	d00b      	beq.n	8014694 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014680:	f383 8811 	msr	BASEPRI, r3
 8014684:	f3bf 8f6f 	isb	sy
 8014688:	f3bf 8f4f 	dsb	sy
 801468c:	61bb      	str	r3, [r7, #24]
}
 801468e:	bf00      	nop
 8014690:	bf00      	nop
 8014692:	e7fd      	b.n	8014690 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014694:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801469c:	2b00      	cmp	r3, #0
 801469e:	d00d      	beq.n	80146bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80146a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a2:	2201      	movs	r2, #1
 80146a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80146a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80146ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4613      	mov	r3, r2
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	68b9      	ldr	r1, [r7, #8]
 80146b6:	68f8      	ldr	r0, [r7, #12]
 80146b8:	f000 f840 	bl	801473c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80146bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80146be:	4618      	mov	r0, r3
 80146c0:	3730      	adds	r7, #48	@ 0x30
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}

080146c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b08a      	sub	sp, #40	@ 0x28
 80146ca:	af02      	add	r7, sp, #8
 80146cc:	60f8      	str	r0, [r7, #12]
 80146ce:	60b9      	str	r1, [r7, #8]
 80146d0:	4613      	mov	r3, r2
 80146d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d10b      	bne.n	80146f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80146da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146de:	f383 8811 	msr	BASEPRI, r3
 80146e2:	f3bf 8f6f 	isb	sy
 80146e6:	f3bf 8f4f 	dsb	sy
 80146ea:	613b      	str	r3, [r7, #16]
}
 80146ec:	bf00      	nop
 80146ee:	bf00      	nop
 80146f0:	e7fd      	b.n	80146ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	68ba      	ldr	r2, [r7, #8]
 80146f6:	fb02 f303 	mul.w	r3, r2, r3
 80146fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	3350      	adds	r3, #80	@ 0x50
 8014700:	4618      	mov	r0, r3
 8014702:	f002 fdb3 	bl	801726c <pvPortMalloc>
 8014706:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d011      	beq.n	8014732 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	3350      	adds	r3, #80	@ 0x50
 8014716:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	2200      	movs	r2, #0
 801471c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014720:	79fa      	ldrb	r2, [r7, #7]
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	4613      	mov	r3, r2
 8014728:	697a      	ldr	r2, [r7, #20]
 801472a:	68b9      	ldr	r1, [r7, #8]
 801472c:	68f8      	ldr	r0, [r7, #12]
 801472e:	f000 f805 	bl	801473c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014732:	69bb      	ldr	r3, [r7, #24]
	}
 8014734:	4618      	mov	r0, r3
 8014736:	3720      	adds	r7, #32
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
 8014748:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d103      	bne.n	8014758 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	69ba      	ldr	r2, [r7, #24]
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	e002      	b.n	801475e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014764:	69bb      	ldr	r3, [r7, #24]
 8014766:	68ba      	ldr	r2, [r7, #8]
 8014768:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801476a:	2101      	movs	r1, #1
 801476c:	69b8      	ldr	r0, [r7, #24]
 801476e:	f7ff fec3 	bl	80144f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	78fa      	ldrb	r2, [r7, #3]
 8014776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801477a:	bf00      	nop
 801477c:	3710      	adds	r7, #16
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
	...

08014784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b08e      	sub	sp, #56	@ 0x38
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014792:	2300      	movs	r3, #0
 8014794:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479c:	2b00      	cmp	r3, #0
 801479e:	d10b      	bne.n	80147b8 <xQueueGenericSend+0x34>
	__asm volatile
 80147a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147a4:	f383 8811 	msr	BASEPRI, r3
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	f3bf 8f4f 	dsb	sy
 80147b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80147b2:	bf00      	nop
 80147b4:	bf00      	nop
 80147b6:	e7fd      	b.n	80147b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d103      	bne.n	80147c6 <xQueueGenericSend+0x42>
 80147be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d101      	bne.n	80147ca <xQueueGenericSend+0x46>
 80147c6:	2301      	movs	r3, #1
 80147c8:	e000      	b.n	80147cc <xQueueGenericSend+0x48>
 80147ca:	2300      	movs	r3, #0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10b      	bne.n	80147e8 <xQueueGenericSend+0x64>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80147e2:	bf00      	nop
 80147e4:	bf00      	nop
 80147e6:	e7fd      	b.n	80147e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	d103      	bne.n	80147f6 <xQueueGenericSend+0x72>
 80147ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d101      	bne.n	80147fa <xQueueGenericSend+0x76>
 80147f6:	2301      	movs	r3, #1
 80147f8:	e000      	b.n	80147fc <xQueueGenericSend+0x78>
 80147fa:	2300      	movs	r3, #0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d10b      	bne.n	8014818 <xQueueGenericSend+0x94>
	__asm volatile
 8014800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014804:	f383 8811 	msr	BASEPRI, r3
 8014808:	f3bf 8f6f 	isb	sy
 801480c:	f3bf 8f4f 	dsb	sy
 8014810:	623b      	str	r3, [r7, #32]
}
 8014812:	bf00      	nop
 8014814:	bf00      	nop
 8014816:	e7fd      	b.n	8014814 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014818:	f001 fd98 	bl	801634c <xTaskGetSchedulerState>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d102      	bne.n	8014828 <xQueueGenericSend+0xa4>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d101      	bne.n	801482c <xQueueGenericSend+0xa8>
 8014828:	2301      	movs	r3, #1
 801482a:	e000      	b.n	801482e <xQueueGenericSend+0xaa>
 801482c:	2300      	movs	r3, #0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10b      	bne.n	801484a <xQueueGenericSend+0xc6>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014836:	f383 8811 	msr	BASEPRI, r3
 801483a:	f3bf 8f6f 	isb	sy
 801483e:	f3bf 8f4f 	dsb	sy
 8014842:	61fb      	str	r3, [r7, #28]
}
 8014844:	bf00      	nop
 8014846:	bf00      	nop
 8014848:	e7fd      	b.n	8014846 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801484a:	f002 fbed 	bl	8017028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014856:	429a      	cmp	r2, r3
 8014858:	d302      	bcc.n	8014860 <xQueueGenericSend+0xdc>
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	2b02      	cmp	r3, #2
 801485e:	d129      	bne.n	80148b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014860:	683a      	ldr	r2, [r7, #0]
 8014862:	68b9      	ldr	r1, [r7, #8]
 8014864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014866:	f000 fbc7 	bl	8014ff8 <prvCopyDataToQueue>
 801486a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014870:	2b00      	cmp	r3, #0
 8014872:	d010      	beq.n	8014896 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014876:	3324      	adds	r3, #36	@ 0x24
 8014878:	4618      	mov	r0, r3
 801487a:	f001 fba1 	bl	8015fc0 <xTaskRemoveFromEventList>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d013      	beq.n	80148ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014884:	4b3f      	ldr	r3, [pc, #252]	@ (8014984 <xQueueGenericSend+0x200>)
 8014886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801488a:	601a      	str	r2, [r3, #0]
 801488c:	f3bf 8f4f 	dsb	sy
 8014890:	f3bf 8f6f 	isb	sy
 8014894:	e00a      	b.n	80148ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014898:	2b00      	cmp	r3, #0
 801489a:	d007      	beq.n	80148ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801489c:	4b39      	ldr	r3, [pc, #228]	@ (8014984 <xQueueGenericSend+0x200>)
 801489e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148a2:	601a      	str	r2, [r3, #0]
 80148a4:	f3bf 8f4f 	dsb	sy
 80148a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80148ac:	f002 fbee 	bl	801708c <vPortExitCritical>
				return pdPASS;
 80148b0:	2301      	movs	r3, #1
 80148b2:	e063      	b.n	801497c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d103      	bne.n	80148c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80148ba:	f002 fbe7 	bl	801708c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80148be:	2300      	movs	r3, #0
 80148c0:	e05c      	b.n	801497c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80148c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d106      	bne.n	80148d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148c8:	f107 0314 	add.w	r3, r7, #20
 80148cc:	4618      	mov	r0, r3
 80148ce:	f001 fbdb 	bl	8016088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148d2:	2301      	movs	r3, #1
 80148d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148d6:	f002 fbd9 	bl	801708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80148da:	f001 f943 	bl	8015b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148de:	f002 fba3 	bl	8017028 <vPortEnterCritical>
 80148e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80148e8:	b25b      	sxtb	r3, r3
 80148ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80148ee:	d103      	bne.n	80148f8 <xQueueGenericSend+0x174>
 80148f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148f2:	2200      	movs	r2, #0
 80148f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80148f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80148fe:	b25b      	sxtb	r3, r3
 8014900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014904:	d103      	bne.n	801490e <xQueueGenericSend+0x18a>
 8014906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014908:	2200      	movs	r2, #0
 801490a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801490e:	f002 fbbd 	bl	801708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014912:	1d3a      	adds	r2, r7, #4
 8014914:	f107 0314 	add.w	r3, r7, #20
 8014918:	4611      	mov	r1, r2
 801491a:	4618      	mov	r0, r3
 801491c:	f001 fbca 	bl	80160b4 <xTaskCheckForTimeOut>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d124      	bne.n	8014970 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014928:	f000 fc5e 	bl	80151e8 <prvIsQueueFull>
 801492c:	4603      	mov	r3, r0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d018      	beq.n	8014964 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014934:	3310      	adds	r3, #16
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	4611      	mov	r1, r2
 801493a:	4618      	mov	r0, r3
 801493c:	f001 faee 	bl	8015f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014942:	f000 fbe9 	bl	8015118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014946:	f001 f91b 	bl	8015b80 <xTaskResumeAll>
 801494a:	4603      	mov	r3, r0
 801494c:	2b00      	cmp	r3, #0
 801494e:	f47f af7c 	bne.w	801484a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014952:	4b0c      	ldr	r3, [pc, #48]	@ (8014984 <xQueueGenericSend+0x200>)
 8014954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	e772      	b.n	801484a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014966:	f000 fbd7 	bl	8015118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801496a:	f001 f909 	bl	8015b80 <xTaskResumeAll>
 801496e:	e76c      	b.n	801484a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014972:	f000 fbd1 	bl	8015118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014976:	f001 f903 	bl	8015b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801497a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801497c:	4618      	mov	r0, r3
 801497e:	3738      	adds	r7, #56	@ 0x38
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	e000ed04 	.word	0xe000ed04

08014988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b090      	sub	sp, #64	@ 0x40
 801498c:	af00      	add	r7, sp, #0
 801498e:	60f8      	str	r0, [r7, #12]
 8014990:	60b9      	str	r1, [r7, #8]
 8014992:	607a      	str	r2, [r7, #4]
 8014994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801499c:	2b00      	cmp	r3, #0
 801499e:	d10b      	bne.n	80149b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80149a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80149b2:	bf00      	nop
 80149b4:	bf00      	nop
 80149b6:	e7fd      	b.n	80149b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d103      	bne.n	80149c6 <xQueueGenericSendFromISR+0x3e>
 80149be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <xQueueGenericSendFromISR+0x42>
 80149c6:	2301      	movs	r3, #1
 80149c8:	e000      	b.n	80149cc <xQueueGenericSendFromISR+0x44>
 80149ca:	2300      	movs	r3, #0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d10b      	bne.n	80149e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80149d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d4:	f383 8811 	msr	BASEPRI, r3
 80149d8:	f3bf 8f6f 	isb	sy
 80149dc:	f3bf 8f4f 	dsb	sy
 80149e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80149e2:	bf00      	nop
 80149e4:	bf00      	nop
 80149e6:	e7fd      	b.n	80149e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d103      	bne.n	80149f6 <xQueueGenericSendFromISR+0x6e>
 80149ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d101      	bne.n	80149fa <xQueueGenericSendFromISR+0x72>
 80149f6:	2301      	movs	r3, #1
 80149f8:	e000      	b.n	80149fc <xQueueGenericSendFromISR+0x74>
 80149fa:	2300      	movs	r3, #0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10b      	bne.n	8014a18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a04:	f383 8811 	msr	BASEPRI, r3
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	f3bf 8f4f 	dsb	sy
 8014a10:	623b      	str	r3, [r7, #32]
}
 8014a12:	bf00      	nop
 8014a14:	bf00      	nop
 8014a16:	e7fd      	b.n	8014a14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a18:	f002 fbe6 	bl	80171e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014a1c:	f3ef 8211 	mrs	r2, BASEPRI
 8014a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	61fa      	str	r2, [r7, #28]
 8014a32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014a34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d302      	bcc.n	8014a4a <xQueueGenericSendFromISR+0xc2>
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	2b02      	cmp	r3, #2
 8014a48:	d12f      	bne.n	8014aaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	68b9      	ldr	r1, [r7, #8]
 8014a5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014a60:	f000 faca 	bl	8014ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014a64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8014a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014a6c:	d112      	bne.n	8014a94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d016      	beq.n	8014aa4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a78:	3324      	adds	r3, #36	@ 0x24
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f001 faa0 	bl	8015fc0 <xTaskRemoveFromEventList>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00e      	beq.n	8014aa4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d00b      	beq.n	8014aa4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	601a      	str	r2, [r3, #0]
 8014a92:	e007      	b.n	8014aa4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014a98:	3301      	adds	r3, #1
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	b25a      	sxtb	r2, r3
 8014a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014aa8:	e001      	b.n	8014aae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ab0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014ab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3740      	adds	r7, #64	@ 0x40
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b08e      	sub	sp, #56	@ 0x38
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d10b      	bne.n	8014af0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014adc:	f383 8811 	msr	BASEPRI, r3
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	623b      	str	r3, [r7, #32]
}
 8014aea:	bf00      	nop
 8014aec:	bf00      	nop
 8014aee:	e7fd      	b.n	8014aec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d00b      	beq.n	8014b10 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014afc:	f383 8811 	msr	BASEPRI, r3
 8014b00:	f3bf 8f6f 	isb	sy
 8014b04:	f3bf 8f4f 	dsb	sy
 8014b08:	61fb      	str	r3, [r7, #28]
}
 8014b0a:	bf00      	nop
 8014b0c:	bf00      	nop
 8014b0e:	e7fd      	b.n	8014b0c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d103      	bne.n	8014b20 <xQueueGiveFromISR+0x5c>
 8014b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <xQueueGiveFromISR+0x60>
 8014b20:	2301      	movs	r3, #1
 8014b22:	e000      	b.n	8014b26 <xQueueGiveFromISR+0x62>
 8014b24:	2300      	movs	r3, #0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d10b      	bne.n	8014b42 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b2e:	f383 8811 	msr	BASEPRI, r3
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	61bb      	str	r3, [r7, #24]
}
 8014b3c:	bf00      	nop
 8014b3e:	bf00      	nop
 8014b40:	e7fd      	b.n	8014b3e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b42:	f002 fb51 	bl	80171e8 <vPortValidateInterruptPriority>
	__asm volatile
 8014b46:	f3ef 8211 	mrs	r2, BASEPRI
 8014b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	617a      	str	r2, [r7, #20]
 8014b5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014b5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d22b      	bcs.n	8014bca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b7e:	1c5a      	adds	r2, r3, #1
 8014b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b82:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014b84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014b8c:	d112      	bne.n	8014bb4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d016      	beq.n	8014bc4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b98:	3324      	adds	r3, #36	@ 0x24
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f001 fa10 	bl	8015fc0 <xTaskRemoveFromEventList>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d00e      	beq.n	8014bc4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00b      	beq.n	8014bc4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	601a      	str	r2, [r3, #0]
 8014bb2:	e007      	b.n	8014bc4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bb8:	3301      	adds	r3, #1
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	b25a      	sxtb	r2, r3
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bc8:	e001      	b.n	8014bce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	f383 8811 	msr	BASEPRI, r3
}
 8014bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3738      	adds	r7, #56	@ 0x38
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b08c      	sub	sp, #48	@ 0x30
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d10b      	bne.n	8014c16 <xQueueReceive+0x32>
	__asm volatile
 8014bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c02:	f383 8811 	msr	BASEPRI, r3
 8014c06:	f3bf 8f6f 	isb	sy
 8014c0a:	f3bf 8f4f 	dsb	sy
 8014c0e:	623b      	str	r3, [r7, #32]
}
 8014c10:	bf00      	nop
 8014c12:	bf00      	nop
 8014c14:	e7fd      	b.n	8014c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d103      	bne.n	8014c24 <xQueueReceive+0x40>
 8014c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d101      	bne.n	8014c28 <xQueueReceive+0x44>
 8014c24:	2301      	movs	r3, #1
 8014c26:	e000      	b.n	8014c2a <xQueueReceive+0x46>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d10b      	bne.n	8014c46 <xQueueReceive+0x62>
	__asm volatile
 8014c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c32:	f383 8811 	msr	BASEPRI, r3
 8014c36:	f3bf 8f6f 	isb	sy
 8014c3a:	f3bf 8f4f 	dsb	sy
 8014c3e:	61fb      	str	r3, [r7, #28]
}
 8014c40:	bf00      	nop
 8014c42:	bf00      	nop
 8014c44:	e7fd      	b.n	8014c42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c46:	f001 fb81 	bl	801634c <xTaskGetSchedulerState>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d102      	bne.n	8014c56 <xQueueReceive+0x72>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d101      	bne.n	8014c5a <xQueueReceive+0x76>
 8014c56:	2301      	movs	r3, #1
 8014c58:	e000      	b.n	8014c5c <xQueueReceive+0x78>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d10b      	bne.n	8014c78 <xQueueReceive+0x94>
	__asm volatile
 8014c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c64:	f383 8811 	msr	BASEPRI, r3
 8014c68:	f3bf 8f6f 	isb	sy
 8014c6c:	f3bf 8f4f 	dsb	sy
 8014c70:	61bb      	str	r3, [r7, #24]
}
 8014c72:	bf00      	nop
 8014c74:	bf00      	nop
 8014c76:	e7fd      	b.n	8014c74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c78:	f002 f9d6 	bl	8017028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d01f      	beq.n	8014cc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c88:	68b9      	ldr	r1, [r7, #8]
 8014c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c8c:	f000 fa1e 	bl	80150cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c92:	1e5a      	subs	r2, r3, #1
 8014c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c9a:	691b      	ldr	r3, [r3, #16]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d00f      	beq.n	8014cc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca2:	3310      	adds	r3, #16
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f001 f98b 	bl	8015fc0 <xTaskRemoveFromEventList>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d007      	beq.n	8014cc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8014da4 <xQueueReceive+0x1c0>)
 8014cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cb6:	601a      	str	r2, [r3, #0]
 8014cb8:	f3bf 8f4f 	dsb	sy
 8014cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014cc0:	f002 f9e4 	bl	801708c <vPortExitCritical>
				return pdPASS;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e069      	b.n	8014d9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d103      	bne.n	8014cd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014cce:	f002 f9dd 	bl	801708c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	e062      	b.n	8014d9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d106      	bne.n	8014cea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014cdc:	f107 0310 	add.w	r3, r7, #16
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f001 f9d1 	bl	8016088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014cea:	f002 f9cf 	bl	801708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014cee:	f000 ff39 	bl	8015b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014cf2:	f002 f999 	bl	8017028 <vPortEnterCritical>
 8014cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014cfc:	b25b      	sxtb	r3, r3
 8014cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014d02:	d103      	bne.n	8014d0c <xQueueReceive+0x128>
 8014d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d06:	2200      	movs	r2, #0
 8014d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d12:	b25b      	sxtb	r3, r3
 8014d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014d18:	d103      	bne.n	8014d22 <xQueueReceive+0x13e>
 8014d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d22:	f002 f9b3 	bl	801708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d26:	1d3a      	adds	r2, r7, #4
 8014d28:	f107 0310 	add.w	r3, r7, #16
 8014d2c:	4611      	mov	r1, r2
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f001 f9c0 	bl	80160b4 <xTaskCheckForTimeOut>
 8014d34:	4603      	mov	r3, r0
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d123      	bne.n	8014d82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d3c:	f000 fa3e 	bl	80151bc <prvIsQueueEmpty>
 8014d40:	4603      	mov	r3, r0
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d017      	beq.n	8014d76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d48:	3324      	adds	r3, #36	@ 0x24
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f001 f8e4 	bl	8015f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d56:	f000 f9df 	bl	8015118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014d5a:	f000 ff11 	bl	8015b80 <xTaskResumeAll>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d189      	bne.n	8014c78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014d64:	4b0f      	ldr	r3, [pc, #60]	@ (8014da4 <xQueueReceive+0x1c0>)
 8014d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d6a:	601a      	str	r2, [r3, #0]
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	f3bf 8f6f 	isb	sy
 8014d74:	e780      	b.n	8014c78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d78:	f000 f9ce 	bl	8015118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d7c:	f000 ff00 	bl	8015b80 <xTaskResumeAll>
 8014d80:	e77a      	b.n	8014c78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d84:	f000 f9c8 	bl	8015118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d88:	f000 fefa 	bl	8015b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d8e:	f000 fa15 	bl	80151bc <prvIsQueueEmpty>
 8014d92:	4603      	mov	r3, r0
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	f43f af6f 	beq.w	8014c78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3730      	adds	r7, #48	@ 0x30
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	e000ed04 	.word	0xe000ed04

08014da8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	@ 0x38
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014db2:	2300      	movs	r3, #0
 8014db4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10b      	bne.n	8014ddc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	623b      	str	r3, [r7, #32]
}
 8014dd6:	bf00      	nop
 8014dd8:	bf00      	nop
 8014dda:	e7fd      	b.n	8014dd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00b      	beq.n	8014dfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de8:	f383 8811 	msr	BASEPRI, r3
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	61fb      	str	r3, [r7, #28]
}
 8014df6:	bf00      	nop
 8014df8:	bf00      	nop
 8014dfa:	e7fd      	b.n	8014df8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014dfc:	f001 faa6 	bl	801634c <xTaskGetSchedulerState>
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d102      	bne.n	8014e0c <xQueueSemaphoreTake+0x64>
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d101      	bne.n	8014e10 <xQueueSemaphoreTake+0x68>
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	e000      	b.n	8014e12 <xQueueSemaphoreTake+0x6a>
 8014e10:	2300      	movs	r3, #0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d10b      	bne.n	8014e2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e1a:	f383 8811 	msr	BASEPRI, r3
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	f3bf 8f4f 	dsb	sy
 8014e26:	61bb      	str	r3, [r7, #24]
}
 8014e28:	bf00      	nop
 8014e2a:	bf00      	nop
 8014e2c:	e7fd      	b.n	8014e2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e2e:	f002 f8fb 	bl	8017028 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d024      	beq.n	8014e88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e40:	1e5a      	subs	r2, r3, #1
 8014e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d104      	bne.n	8014e58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014e4e:	f001 fbf7 	bl	8016640 <pvTaskIncrementMutexHeldCount>
 8014e52:	4602      	mov	r2, r0
 8014e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e5a:	691b      	ldr	r3, [r3, #16]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d00f      	beq.n	8014e80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e62:	3310      	adds	r3, #16
 8014e64:	4618      	mov	r0, r3
 8014e66:	f001 f8ab 	bl	8015fc0 <xTaskRemoveFromEventList>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d007      	beq.n	8014e80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014e70:	4b54      	ldr	r3, [pc, #336]	@ (8014fc4 <xQueueSemaphoreTake+0x21c>)
 8014e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e76:	601a      	str	r2, [r3, #0]
 8014e78:	f3bf 8f4f 	dsb	sy
 8014e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e80:	f002 f904 	bl	801708c <vPortExitCritical>
				return pdPASS;
 8014e84:	2301      	movs	r3, #1
 8014e86:	e098      	b.n	8014fba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d112      	bne.n	8014eb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d00b      	beq.n	8014eac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8014e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e98:	f383 8811 	msr	BASEPRI, r3
 8014e9c:	f3bf 8f6f 	isb	sy
 8014ea0:	f3bf 8f4f 	dsb	sy
 8014ea4:	617b      	str	r3, [r7, #20]
}
 8014ea6:	bf00      	nop
 8014ea8:	bf00      	nop
 8014eaa:	e7fd      	b.n	8014ea8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014eac:	f002 f8ee 	bl	801708c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	e082      	b.n	8014fba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d106      	bne.n	8014ec8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014eba:	f107 030c 	add.w	r3, r7, #12
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f001 f8e2 	bl	8016088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ec8:	f002 f8e0 	bl	801708c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ecc:	f000 fe4a 	bl	8015b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ed0:	f002 f8aa 	bl	8017028 <vPortEnterCritical>
 8014ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014eda:	b25b      	sxtb	r3, r3
 8014edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014ee0:	d103      	bne.n	8014eea <xQueueSemaphoreTake+0x142>
 8014ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014ef0:	b25b      	sxtb	r3, r3
 8014ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014ef6:	d103      	bne.n	8014f00 <xQueueSemaphoreTake+0x158>
 8014ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014efa:	2200      	movs	r2, #0
 8014efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014f00:	f002 f8c4 	bl	801708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014f04:	463a      	mov	r2, r7
 8014f06:	f107 030c 	add.w	r3, r7, #12
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f001 f8d1 	bl	80160b4 <xTaskCheckForTimeOut>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d132      	bne.n	8014f7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f1a:	f000 f94f 	bl	80151bc <prvIsQueueEmpty>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d026      	beq.n	8014f72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d109      	bne.n	8014f40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014f2c:	f002 f87c 	bl	8017028 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	4618      	mov	r0, r3
 8014f36:	f001 fa27 	bl	8016388 <xTaskPriorityInherit>
 8014f3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014f3c:	f002 f8a6 	bl	801708c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f42:	3324      	adds	r3, #36	@ 0x24
 8014f44:	683a      	ldr	r2, [r7, #0]
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f000 ffe7 	bl	8015f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f50:	f000 f8e2 	bl	8015118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014f54:	f000 fe14 	bl	8015b80 <xTaskResumeAll>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	f47f af67 	bne.w	8014e2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014f60:	4b18      	ldr	r3, [pc, #96]	@ (8014fc4 <xQueueSemaphoreTake+0x21c>)
 8014f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f66:	601a      	str	r2, [r3, #0]
 8014f68:	f3bf 8f4f 	dsb	sy
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	e75d      	b.n	8014e2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f74:	f000 f8d0 	bl	8015118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f78:	f000 fe02 	bl	8015b80 <xTaskResumeAll>
 8014f7c:	e757      	b.n	8014e2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f80:	f000 f8ca 	bl	8015118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f84:	f000 fdfc 	bl	8015b80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f8a:	f000 f917 	bl	80151bc <prvIsQueueEmpty>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f43f af4c 	beq.w	8014e2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00d      	beq.n	8014fb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014f9c:	f002 f844 	bl	8017028 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014fa2:	f000 f811 	bl	8014fc8 <prvGetDisinheritPriorityAfterTimeout>
 8014fa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014faa:	689b      	ldr	r3, [r3, #8]
 8014fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f001 fac2 	bl	8016538 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014fb4:	f002 f86a 	bl	801708c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3738      	adds	r7, #56	@ 0x38
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	e000ed04 	.word	0xe000ed04

08014fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014fc8:	b480      	push	{r7}
 8014fca:	b085      	sub	sp, #20
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d006      	beq.n	8014fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014fe2:	60fb      	str	r3, [r7, #12]
 8014fe4:	e001      	b.n	8014fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014fea:	68fb      	ldr	r3, [r7, #12]
	}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3714      	adds	r7, #20
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr

08014ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015004:	2300      	movs	r3, #0
 8015006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801500c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015012:	2b00      	cmp	r3, #0
 8015014:	d10d      	bne.n	8015032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d14d      	bne.n	80150ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	689b      	ldr	r3, [r3, #8]
 8015022:	4618      	mov	r0, r3
 8015024:	f001 fa18 	bl	8016458 <xTaskPriorityDisinherit>
 8015028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2200      	movs	r2, #0
 801502e:	609a      	str	r2, [r3, #8]
 8015030:	e043      	b.n	80150ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d119      	bne.n	801506c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	6858      	ldr	r0, [r3, #4]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015040:	461a      	mov	r2, r3
 8015042:	68b9      	ldr	r1, [r7, #8]
 8015044:	f003 fa1d 	bl	8018482 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	685a      	ldr	r2, [r3, #4]
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015050:	441a      	add	r2, r3
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	685a      	ldr	r2, [r3, #4]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	689b      	ldr	r3, [r3, #8]
 801505e:	429a      	cmp	r2, r3
 8015060:	d32b      	bcc.n	80150ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	605a      	str	r2, [r3, #4]
 801506a:	e026      	b.n	80150ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68d8      	ldr	r0, [r3, #12]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015074:	461a      	mov	r2, r3
 8015076:	68b9      	ldr	r1, [r7, #8]
 8015078:	f003 fa03 	bl	8018482 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	68da      	ldr	r2, [r3, #12]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015084:	425b      	negs	r3, r3
 8015086:	441a      	add	r2, r3
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	68da      	ldr	r2, [r3, #12]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	429a      	cmp	r2, r3
 8015096:	d207      	bcs.n	80150a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	689a      	ldr	r2, [r3, #8]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150a0:	425b      	negs	r3, r3
 80150a2:	441a      	add	r2, r3
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d105      	bne.n	80150ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d002      	beq.n	80150ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	3b01      	subs	r3, #1
 80150b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	1c5a      	adds	r2, r3, #1
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80150c2:	697b      	ldr	r3, [r7, #20]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3718      	adds	r7, #24
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d018      	beq.n	8015110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	68da      	ldr	r2, [r3, #12]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150e6:	441a      	add	r2, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	68da      	ldr	r2, [r3, #12]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	689b      	ldr	r3, [r3, #8]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d303      	bcc.n	8015100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	68d9      	ldr	r1, [r3, #12]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015108:	461a      	mov	r2, r3
 801510a:	6838      	ldr	r0, [r7, #0]
 801510c:	f003 f9b9 	bl	8018482 <memcpy>
	}
}
 8015110:	bf00      	nop
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015120:	f001 ff82 	bl	8017028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801512a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801512c:	e011      	b.n	8015152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015132:	2b00      	cmp	r3, #0
 8015134:	d012      	beq.n	801515c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	3324      	adds	r3, #36	@ 0x24
 801513a:	4618      	mov	r0, r3
 801513c:	f000 ff40 	bl	8015fc0 <xTaskRemoveFromEventList>
 8015140:	4603      	mov	r3, r0
 8015142:	2b00      	cmp	r3, #0
 8015144:	d001      	beq.n	801514a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015146:	f001 f819 	bl	801617c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801514a:	7bfb      	ldrb	r3, [r7, #15]
 801514c:	3b01      	subs	r3, #1
 801514e:	b2db      	uxtb	r3, r3
 8015150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015156:	2b00      	cmp	r3, #0
 8015158:	dce9      	bgt.n	801512e <prvUnlockQueue+0x16>
 801515a:	e000      	b.n	801515e <prvUnlockQueue+0x46>
					break;
 801515c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	22ff      	movs	r2, #255	@ 0xff
 8015162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015166:	f001 ff91 	bl	801708c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801516a:	f001 ff5d 	bl	8017028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015176:	e011      	b.n	801519c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	691b      	ldr	r3, [r3, #16]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d012      	beq.n	80151a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	3310      	adds	r3, #16
 8015184:	4618      	mov	r0, r3
 8015186:	f000 ff1b 	bl	8015fc0 <xTaskRemoveFromEventList>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d001      	beq.n	8015194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015190:	f000 fff4 	bl	801617c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015194:	7bbb      	ldrb	r3, [r7, #14]
 8015196:	3b01      	subs	r3, #1
 8015198:	b2db      	uxtb	r3, r3
 801519a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801519c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	dce9      	bgt.n	8015178 <prvUnlockQueue+0x60>
 80151a4:	e000      	b.n	80151a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80151a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	22ff      	movs	r2, #255	@ 0xff
 80151ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80151b0:	f001 ff6c 	bl	801708c <vPortExitCritical>
}
 80151b4:	bf00      	nop
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80151c4:	f001 ff30 	bl	8017028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d102      	bne.n	80151d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80151d0:	2301      	movs	r3, #1
 80151d2:	60fb      	str	r3, [r7, #12]
 80151d4:	e001      	b.n	80151da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80151d6:	2300      	movs	r3, #0
 80151d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80151da:	f001 ff57 	bl	801708c <vPortExitCritical>

	return xReturn;
 80151de:	68fb      	ldr	r3, [r7, #12]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80151f0:	f001 ff1a 	bl	8017028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d102      	bne.n	8015206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015200:	2301      	movs	r3, #1
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	e001      	b.n	801520a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015206:	2300      	movs	r3, #0
 8015208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801520a:	f001 ff3f 	bl	801708c <vPortExitCritical>

	return xReturn;
 801520e:	68fb      	ldr	r3, [r7, #12]
}
 8015210:	4618      	mov	r0, r3
 8015212:	3710      	adds	r7, #16
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015218:	b480      	push	{r7}
 801521a:	b085      	sub	sp, #20
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015222:	2300      	movs	r3, #0
 8015224:	60fb      	str	r3, [r7, #12]
 8015226:	e014      	b.n	8015252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015228:	4a0f      	ldr	r2, [pc, #60]	@ (8015268 <vQueueAddToRegistry+0x50>)
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d10b      	bne.n	801524c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015234:	490c      	ldr	r1, [pc, #48]	@ (8015268 <vQueueAddToRegistry+0x50>)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	683a      	ldr	r2, [r7, #0]
 801523a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801523e:	4a0a      	ldr	r2, [pc, #40]	@ (8015268 <vQueueAddToRegistry+0x50>)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	4413      	add	r3, r2
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801524a:	e006      	b.n	801525a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	3301      	adds	r3, #1
 8015250:	60fb      	str	r3, [r7, #12]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2b07      	cmp	r3, #7
 8015256:	d9e7      	bls.n	8015228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015258:	bf00      	nop
 801525a:	bf00      	nop
 801525c:	3714      	adds	r7, #20
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
 8015266:	bf00      	nop
 8015268:	240018a0 	.word	0x240018a0

0801526c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801527c:	f001 fed4 	bl	8017028 <vPortEnterCritical>
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015286:	b25b      	sxtb	r3, r3
 8015288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801528c:	d103      	bne.n	8015296 <vQueueWaitForMessageRestricted+0x2a>
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	2200      	movs	r2, #0
 8015292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801529c:	b25b      	sxtb	r3, r3
 801529e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80152a2:	d103      	bne.n	80152ac <vQueueWaitForMessageRestricted+0x40>
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80152ac:	f001 feee 	bl	801708c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d106      	bne.n	80152c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	3324      	adds	r3, #36	@ 0x24
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	68b9      	ldr	r1, [r7, #8]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f000 fe51 	bl	8015f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80152c6:	6978      	ldr	r0, [r7, #20]
 80152c8:	f7ff ff26 	bl	8015118 <prvUnlockQueue>
	}
 80152cc:	bf00      	nop
 80152ce:	3718      	adds	r7, #24
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b08e      	sub	sp, #56	@ 0x38
 80152d8:	af04      	add	r7, sp, #16
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80152e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10b      	bne.n	8015300 <xTaskCreateStatic+0x2c>
	__asm volatile
 80152e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ec:	f383 8811 	msr	BASEPRI, r3
 80152f0:	f3bf 8f6f 	isb	sy
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	623b      	str	r3, [r7, #32]
}
 80152fa:	bf00      	nop
 80152fc:	bf00      	nop
 80152fe:	e7fd      	b.n	80152fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015302:	2b00      	cmp	r3, #0
 8015304:	d10b      	bne.n	801531e <xTaskCreateStatic+0x4a>
	__asm volatile
 8015306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801530a:	f383 8811 	msr	BASEPRI, r3
 801530e:	f3bf 8f6f 	isb	sy
 8015312:	f3bf 8f4f 	dsb	sy
 8015316:	61fb      	str	r3, [r7, #28]
}
 8015318:	bf00      	nop
 801531a:	bf00      	nop
 801531c:	e7fd      	b.n	801531a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801531e:	23a8      	movs	r3, #168	@ 0xa8
 8015320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	2ba8      	cmp	r3, #168	@ 0xa8
 8015326:	d00b      	beq.n	8015340 <xTaskCreateStatic+0x6c>
	__asm volatile
 8015328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532c:	f383 8811 	msr	BASEPRI, r3
 8015330:	f3bf 8f6f 	isb	sy
 8015334:	f3bf 8f4f 	dsb	sy
 8015338:	61bb      	str	r3, [r7, #24]
}
 801533a:	bf00      	nop
 801533c:	bf00      	nop
 801533e:	e7fd      	b.n	801533c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015340:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015344:	2b00      	cmp	r3, #0
 8015346:	d01e      	beq.n	8015386 <xTaskCreateStatic+0xb2>
 8015348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801534a:	2b00      	cmp	r3, #0
 801534c:	d01b      	beq.n	8015386 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015350:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015356:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801535a:	2202      	movs	r2, #2
 801535c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015360:	2300      	movs	r3, #0
 8015362:	9303      	str	r3, [sp, #12]
 8015364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015366:	9302      	str	r3, [sp, #8]
 8015368:	f107 0314 	add.w	r3, r7, #20
 801536c:	9301      	str	r3, [sp, #4]
 801536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	687a      	ldr	r2, [r7, #4]
 8015376:	68b9      	ldr	r1, [r7, #8]
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f000 f851 	bl	8015420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801537e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015380:	f000 f8f6 	bl	8015570 <prvAddNewTaskToReadyList>
 8015384:	e001      	b.n	801538a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015386:	2300      	movs	r3, #0
 8015388:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801538a:	697b      	ldr	r3, [r7, #20]
	}
 801538c:	4618      	mov	r0, r3
 801538e:	3728      	adds	r7, #40	@ 0x28
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015394:	b580      	push	{r7, lr}
 8015396:	b08c      	sub	sp, #48	@ 0x30
 8015398:	af04      	add	r7, sp, #16
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	603b      	str	r3, [r7, #0]
 80153a0:	4613      	mov	r3, r2
 80153a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80153a4:	88fb      	ldrh	r3, [r7, #6]
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	4618      	mov	r0, r3
 80153aa:	f001 ff5f 	bl	801726c <pvPortMalloc>
 80153ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d00e      	beq.n	80153d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80153b6:	20a8      	movs	r0, #168	@ 0xa8
 80153b8:	f001 ff58 	bl	801726c <pvPortMalloc>
 80153bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d003      	beq.n	80153cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80153ca:	e005      	b.n	80153d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80153cc:	6978      	ldr	r0, [r7, #20]
 80153ce:	f002 f81b 	bl	8017408 <vPortFree>
 80153d2:	e001      	b.n	80153d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80153d4:	2300      	movs	r3, #0
 80153d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d017      	beq.n	801540e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	2200      	movs	r2, #0
 80153e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80153e6:	88fa      	ldrh	r2, [r7, #6]
 80153e8:	2300      	movs	r3, #0
 80153ea:	9303      	str	r3, [sp, #12]
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	9302      	str	r3, [sp, #8]
 80153f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	68b9      	ldr	r1, [r7, #8]
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f000 f80f 	bl	8015420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015402:	69f8      	ldr	r0, [r7, #28]
 8015404:	f000 f8b4 	bl	8015570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015408:	2301      	movs	r3, #1
 801540a:	61bb      	str	r3, [r7, #24]
 801540c:	e002      	b.n	8015414 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801540e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015412:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015414:	69bb      	ldr	r3, [r7, #24]
	}
 8015416:	4618      	mov	r0, r3
 8015418:	3720      	adds	r7, #32
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
	...

08015420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b088      	sub	sp, #32
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015430:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	461a      	mov	r2, r3
 8015438:	21a5      	movs	r1, #165	@ 0xa5
 801543a:	f002 ff45 	bl	80182c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015442:	6879      	ldr	r1, [r7, #4]
 8015444:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015448:	440b      	add	r3, r1
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	4413      	add	r3, r2
 801544e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015450:	69bb      	ldr	r3, [r7, #24]
 8015452:	f023 0307 	bic.w	r3, r3, #7
 8015456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015458:	69bb      	ldr	r3, [r7, #24]
 801545a:	f003 0307 	and.w	r3, r3, #7
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00b      	beq.n	801547a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015466:	f383 8811 	msr	BASEPRI, r3
 801546a:	f3bf 8f6f 	isb	sy
 801546e:	f3bf 8f4f 	dsb	sy
 8015472:	617b      	str	r3, [r7, #20]
}
 8015474:	bf00      	nop
 8015476:	bf00      	nop
 8015478:	e7fd      	b.n	8015476 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d01f      	beq.n	80154c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015480:	2300      	movs	r3, #0
 8015482:	61fb      	str	r3, [r7, #28]
 8015484:	e012      	b.n	80154ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	4413      	add	r3, r2
 801548c:	7819      	ldrb	r1, [r3, #0]
 801548e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	4413      	add	r3, r2
 8015494:	3334      	adds	r3, #52	@ 0x34
 8015496:	460a      	mov	r2, r1
 8015498:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801549a:	68ba      	ldr	r2, [r7, #8]
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	4413      	add	r3, r2
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d006      	beq.n	80154b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	3301      	adds	r3, #1
 80154aa:	61fb      	str	r3, [r7, #28]
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	2b0f      	cmp	r3, #15
 80154b0:	d9e9      	bls.n	8015486 <prvInitialiseNewTask+0x66>
 80154b2:	e000      	b.n	80154b6 <prvInitialiseNewTask+0x96>
			{
				break;
 80154b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80154b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154b8:	2200      	movs	r2, #0
 80154ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80154be:	e003      	b.n	80154c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80154c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c2:	2200      	movs	r2, #0
 80154c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80154c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154ca:	2b37      	cmp	r3, #55	@ 0x37
 80154cc:	d901      	bls.n	80154d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80154ce:	2337      	movs	r3, #55	@ 0x37
 80154d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80154d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80154d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80154de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e0:	2200      	movs	r2, #0
 80154e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80154e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e6:	3304      	adds	r3, #4
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7fe ff71 	bl	80143d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80154ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f0:	3318      	adds	r3, #24
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7fe ff6c 	bl	80143d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80154f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015500:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015506:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801550c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015510:	2200      	movs	r2, #0
 8015512:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015518:	2200      	movs	r2, #0
 801551a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015520:	3354      	adds	r3, #84	@ 0x54
 8015522:	224c      	movs	r2, #76	@ 0x4c
 8015524:	2100      	movs	r1, #0
 8015526:	4618      	mov	r0, r3
 8015528:	f002 fece 	bl	80182c8 <memset>
 801552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552e:	4a0d      	ldr	r2, [pc, #52]	@ (8015564 <prvInitialiseNewTask+0x144>)
 8015530:	659a      	str	r2, [r3, #88]	@ 0x58
 8015532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015534:	4a0c      	ldr	r2, [pc, #48]	@ (8015568 <prvInitialiseNewTask+0x148>)
 8015536:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553a:	4a0c      	ldr	r2, [pc, #48]	@ (801556c <prvInitialiseNewTask+0x14c>)
 801553c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801553e:	683a      	ldr	r2, [r7, #0]
 8015540:	68f9      	ldr	r1, [r7, #12]
 8015542:	69b8      	ldr	r0, [r7, #24]
 8015544:	f001 fc3e 	bl	8016dc4 <pxPortInitialiseStack>
 8015548:	4602      	mov	r2, r0
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015550:	2b00      	cmp	r3, #0
 8015552:	d002      	beq.n	801555a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801555a:	bf00      	nop
 801555c:	3720      	adds	r7, #32
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	24005b34 	.word	0x24005b34
 8015568:	24005b9c 	.word	0x24005b9c
 801556c:	24005c04 	.word	0x24005c04

08015570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015578:	f001 fd56 	bl	8017028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801557c:	4b2d      	ldr	r3, [pc, #180]	@ (8015634 <prvAddNewTaskToReadyList+0xc4>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	3301      	adds	r3, #1
 8015582:	4a2c      	ldr	r2, [pc, #176]	@ (8015634 <prvAddNewTaskToReadyList+0xc4>)
 8015584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015586:	4b2c      	ldr	r3, [pc, #176]	@ (8015638 <prvAddNewTaskToReadyList+0xc8>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d109      	bne.n	80155a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801558e:	4a2a      	ldr	r2, [pc, #168]	@ (8015638 <prvAddNewTaskToReadyList+0xc8>)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015594:	4b27      	ldr	r3, [pc, #156]	@ (8015634 <prvAddNewTaskToReadyList+0xc4>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2b01      	cmp	r3, #1
 801559a:	d110      	bne.n	80155be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801559c:	f000 fe12 	bl	80161c4 <prvInitialiseTaskLists>
 80155a0:	e00d      	b.n	80155be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80155a2:	4b26      	ldr	r3, [pc, #152]	@ (801563c <prvAddNewTaskToReadyList+0xcc>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d109      	bne.n	80155be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80155aa:	4b23      	ldr	r3, [pc, #140]	@ (8015638 <prvAddNewTaskToReadyList+0xc8>)
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d802      	bhi.n	80155be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80155b8:	4a1f      	ldr	r2, [pc, #124]	@ (8015638 <prvAddNewTaskToReadyList+0xc8>)
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80155be:	4b20      	ldr	r3, [pc, #128]	@ (8015640 <prvAddNewTaskToReadyList+0xd0>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	3301      	adds	r3, #1
 80155c4:	4a1e      	ldr	r2, [pc, #120]	@ (8015640 <prvAddNewTaskToReadyList+0xd0>)
 80155c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80155c8:	4b1d      	ldr	r3, [pc, #116]	@ (8015640 <prvAddNewTaskToReadyList+0xd0>)
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155d4:	4b1b      	ldr	r3, [pc, #108]	@ (8015644 <prvAddNewTaskToReadyList+0xd4>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d903      	bls.n	80155e4 <prvAddNewTaskToReadyList+0x74>
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155e0:	4a18      	ldr	r2, [pc, #96]	@ (8015644 <prvAddNewTaskToReadyList+0xd4>)
 80155e2:	6013      	str	r3, [r2, #0]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155e8:	4613      	mov	r3, r2
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	4413      	add	r3, r2
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	4a15      	ldr	r2, [pc, #84]	@ (8015648 <prvAddNewTaskToReadyList+0xd8>)
 80155f2:	441a      	add	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	4619      	mov	r1, r3
 80155fa:	4610      	mov	r0, r2
 80155fc:	f7fe fef5 	bl	80143ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015600:	f001 fd44 	bl	801708c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015604:	4b0d      	ldr	r3, [pc, #52]	@ (801563c <prvAddNewTaskToReadyList+0xcc>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00e      	beq.n	801562a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801560c:	4b0a      	ldr	r3, [pc, #40]	@ (8015638 <prvAddNewTaskToReadyList+0xc8>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015616:	429a      	cmp	r2, r3
 8015618:	d207      	bcs.n	801562a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801561a:	4b0c      	ldr	r3, [pc, #48]	@ (801564c <prvAddNewTaskToReadyList+0xdc>)
 801561c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015620:	601a      	str	r2, [r3, #0]
 8015622:	f3bf 8f4f 	dsb	sy
 8015626:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801562a:	bf00      	nop
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	24001db4 	.word	0x24001db4
 8015638:	240018e0 	.word	0x240018e0
 801563c:	24001dc0 	.word	0x24001dc0
 8015640:	24001dd0 	.word	0x24001dd0
 8015644:	24001dbc 	.word	0x24001dbc
 8015648:	240018e4 	.word	0x240018e4
 801564c:	e000ed04 	.word	0xe000ed04

08015650 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015658:	f001 fce6 	bl	8017028 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d102      	bne.n	8015668 <vTaskDelete+0x18>
 8015662:	4b2d      	ldr	r3, [pc, #180]	@ (8015718 <vTaskDelete+0xc8>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	e000      	b.n	801566a <vTaskDelete+0x1a>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	3304      	adds	r3, #4
 8015670:	4618      	mov	r0, r3
 8015672:	f7fe ff17 	bl	80144a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801567a:	2b00      	cmp	r3, #0
 801567c:	d004      	beq.n	8015688 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	3318      	adds	r3, #24
 8015682:	4618      	mov	r0, r3
 8015684:	f7fe ff0e 	bl	80144a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015688:	4b24      	ldr	r3, [pc, #144]	@ (801571c <vTaskDelete+0xcc>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	3301      	adds	r3, #1
 801568e:	4a23      	ldr	r2, [pc, #140]	@ (801571c <vTaskDelete+0xcc>)
 8015690:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8015692:	4b21      	ldr	r3, [pc, #132]	@ (8015718 <vTaskDelete+0xc8>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	68fa      	ldr	r2, [r7, #12]
 8015698:	429a      	cmp	r2, r3
 801569a:	d10b      	bne.n	80156b4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	3304      	adds	r3, #4
 80156a0:	4619      	mov	r1, r3
 80156a2:	481f      	ldr	r0, [pc, #124]	@ (8015720 <vTaskDelete+0xd0>)
 80156a4:	f7fe fea1 	bl	80143ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80156a8:	4b1e      	ldr	r3, [pc, #120]	@ (8015724 <vTaskDelete+0xd4>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	3301      	adds	r3, #1
 80156ae:	4a1d      	ldr	r2, [pc, #116]	@ (8015724 <vTaskDelete+0xd4>)
 80156b0:	6013      	str	r3, [r2, #0]
 80156b2:	e009      	b.n	80156c8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80156b4:	4b1c      	ldr	r3, [pc, #112]	@ (8015728 <vTaskDelete+0xd8>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	3b01      	subs	r3, #1
 80156ba:	4a1b      	ldr	r2, [pc, #108]	@ (8015728 <vTaskDelete+0xd8>)
 80156bc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f000 fdee 	bl	80162a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80156c4:	f000 fe22 	bl	801630c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80156c8:	f001 fce0 	bl	801708c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80156cc:	4b17      	ldr	r3, [pc, #92]	@ (801572c <vTaskDelete+0xdc>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d01c      	beq.n	801570e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80156d4:	4b10      	ldr	r3, [pc, #64]	@ (8015718 <vTaskDelete+0xc8>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	429a      	cmp	r2, r3
 80156dc:	d117      	bne.n	801570e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80156de:	4b14      	ldr	r3, [pc, #80]	@ (8015730 <vTaskDelete+0xe0>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00b      	beq.n	80156fe <vTaskDelete+0xae>
	__asm volatile
 80156e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ea:	f383 8811 	msr	BASEPRI, r3
 80156ee:	f3bf 8f6f 	isb	sy
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	60bb      	str	r3, [r7, #8]
}
 80156f8:	bf00      	nop
 80156fa:	bf00      	nop
 80156fc:	e7fd      	b.n	80156fa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80156fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015734 <vTaskDelete+0xe4>)
 8015700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015704:	601a      	str	r2, [r3, #0]
 8015706:	f3bf 8f4f 	dsb	sy
 801570a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801570e:	bf00      	nop
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	240018e0 	.word	0x240018e0
 801571c:	24001dd0 	.word	0x24001dd0
 8015720:	24001d88 	.word	0x24001d88
 8015724:	24001d9c 	.word	0x24001d9c
 8015728:	24001db4 	.word	0x24001db4
 801572c:	24001dc0 	.word	0x24001dc0
 8015730:	24001ddc 	.word	0x24001ddc
 8015734:	e000ed04 	.word	0xe000ed04

08015738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015740:	2300      	movs	r3, #0
 8015742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d018      	beq.n	801577c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801574a:	4b14      	ldr	r3, [pc, #80]	@ (801579c <vTaskDelay+0x64>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d00b      	beq.n	801576a <vTaskDelay+0x32>
	__asm volatile
 8015752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015756:	f383 8811 	msr	BASEPRI, r3
 801575a:	f3bf 8f6f 	isb	sy
 801575e:	f3bf 8f4f 	dsb	sy
 8015762:	60bb      	str	r3, [r7, #8]
}
 8015764:	bf00      	nop
 8015766:	bf00      	nop
 8015768:	e7fd      	b.n	8015766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801576a:	f000 f9fb 	bl	8015b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801576e:	2100      	movs	r1, #0
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f000 ff79 	bl	8016668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015776:	f000 fa03 	bl	8015b80 <xTaskResumeAll>
 801577a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d107      	bne.n	8015792 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015782:	4b07      	ldr	r3, [pc, #28]	@ (80157a0 <vTaskDelay+0x68>)
 8015784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	f3bf 8f4f 	dsb	sy
 801578e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015792:	bf00      	nop
 8015794:	3710      	adds	r7, #16
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	24001ddc 	.word	0x24001ddc
 80157a0:	e000ed04 	.word	0xe000ed04

080157a4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b088      	sub	sp, #32
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80157b0:	69bb      	ldr	r3, [r7, #24]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d10b      	bne.n	80157ce <eTaskGetState+0x2a>
	__asm volatile
 80157b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ba:	f383 8811 	msr	BASEPRI, r3
 80157be:	f3bf 8f6f 	isb	sy
 80157c2:	f3bf 8f4f 	dsb	sy
 80157c6:	60bb      	str	r3, [r7, #8]
}
 80157c8:	bf00      	nop
 80157ca:	bf00      	nop
 80157cc:	e7fd      	b.n	80157ca <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80157ce:	4b24      	ldr	r3, [pc, #144]	@ (8015860 <eTaskGetState+0xbc>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	69ba      	ldr	r2, [r7, #24]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d102      	bne.n	80157de <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80157d8:	2300      	movs	r3, #0
 80157da:	77fb      	strb	r3, [r7, #31]
 80157dc:	e03a      	b.n	8015854 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80157de:	f001 fc23 	bl	8017028 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80157e2:	69bb      	ldr	r3, [r7, #24]
 80157e4:	695b      	ldr	r3, [r3, #20]
 80157e6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80157e8:	4b1e      	ldr	r3, [pc, #120]	@ (8015864 <eTaskGetState+0xc0>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80157ee:	4b1e      	ldr	r3, [pc, #120]	@ (8015868 <eTaskGetState+0xc4>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80157f4:	f001 fc4a 	bl	801708c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80157f8:	697a      	ldr	r2, [r7, #20]
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d003      	beq.n	8015808 <eTaskGetState+0x64>
 8015800:	697a      	ldr	r2, [r7, #20]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	429a      	cmp	r2, r3
 8015806:	d102      	bne.n	801580e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8015808:	2302      	movs	r3, #2
 801580a:	77fb      	strb	r3, [r7, #31]
 801580c:	e022      	b.n	8015854 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	4a16      	ldr	r2, [pc, #88]	@ (801586c <eTaskGetState+0xc8>)
 8015812:	4293      	cmp	r3, r2
 8015814:	d112      	bne.n	801583c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8015816:	69bb      	ldr	r3, [r7, #24]
 8015818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801581a:	2b00      	cmp	r3, #0
 801581c:	d10b      	bne.n	8015836 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015824:	b2db      	uxtb	r3, r3
 8015826:	2b01      	cmp	r3, #1
 8015828:	d102      	bne.n	8015830 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 801582a:	2302      	movs	r3, #2
 801582c:	77fb      	strb	r3, [r7, #31]
 801582e:	e011      	b.n	8015854 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8015830:	2303      	movs	r3, #3
 8015832:	77fb      	strb	r3, [r7, #31]
 8015834:	e00e      	b.n	8015854 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8015836:	2302      	movs	r3, #2
 8015838:	77fb      	strb	r3, [r7, #31]
 801583a:	e00b      	b.n	8015854 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	4a0c      	ldr	r2, [pc, #48]	@ (8015870 <eTaskGetState+0xcc>)
 8015840:	4293      	cmp	r3, r2
 8015842:	d002      	beq.n	801584a <eTaskGetState+0xa6>
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d102      	bne.n	8015850 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801584a:	2304      	movs	r3, #4
 801584c:	77fb      	strb	r3, [r7, #31]
 801584e:	e001      	b.n	8015854 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8015850:	2301      	movs	r3, #1
 8015852:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8015854:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015856:	4618      	mov	r0, r3
 8015858:	3720      	adds	r7, #32
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	240018e0 	.word	0x240018e0
 8015864:	24001d6c 	.word	0x24001d6c
 8015868:	24001d70 	.word	0x24001d70
 801586c:	24001da0 	.word	0x24001da0
 8015870:	24001d88 	.word	0x24001d88

08015874 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801587c:	f001 fbd4 	bl	8017028 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d102      	bne.n	801588c <vTaskSuspend+0x18>
 8015886:	4b30      	ldr	r3, [pc, #192]	@ (8015948 <vTaskSuspend+0xd4>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	e000      	b.n	801588e <vTaskSuspend+0x1a>
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	3304      	adds	r3, #4
 8015894:	4618      	mov	r0, r3
 8015896:	f7fe fe05 	bl	80144a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d004      	beq.n	80158ac <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3318      	adds	r3, #24
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7fe fdfc 	bl	80144a4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3304      	adds	r3, #4
 80158b0:	4619      	mov	r1, r3
 80158b2:	4826      	ldr	r0, [pc, #152]	@ (801594c <vTaskSuspend+0xd8>)
 80158b4:	f7fe fd99 	bl	80143ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d103      	bne.n	80158cc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2200      	movs	r2, #0
 80158c8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80158cc:	f001 fbde 	bl	801708c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80158d0:	4b1f      	ldr	r3, [pc, #124]	@ (8015950 <vTaskSuspend+0xdc>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d005      	beq.n	80158e4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80158d8:	f001 fba6 	bl	8017028 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80158dc:	f000 fd16 	bl	801630c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80158e0:	f001 fbd4 	bl	801708c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80158e4:	4b18      	ldr	r3, [pc, #96]	@ (8015948 <vTaskSuspend+0xd4>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d128      	bne.n	8015940 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80158ee:	4b18      	ldr	r3, [pc, #96]	@ (8015950 <vTaskSuspend+0xdc>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d018      	beq.n	8015928 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80158f6:	4b17      	ldr	r3, [pc, #92]	@ (8015954 <vTaskSuspend+0xe0>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00b      	beq.n	8015916 <vTaskSuspend+0xa2>
	__asm volatile
 80158fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015902:	f383 8811 	msr	BASEPRI, r3
 8015906:	f3bf 8f6f 	isb	sy
 801590a:	f3bf 8f4f 	dsb	sy
 801590e:	60bb      	str	r3, [r7, #8]
}
 8015910:	bf00      	nop
 8015912:	bf00      	nop
 8015914:	e7fd      	b.n	8015912 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8015916:	4b10      	ldr	r3, [pc, #64]	@ (8015958 <vTaskSuspend+0xe4>)
 8015918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801591c:	601a      	str	r2, [r3, #0]
 801591e:	f3bf 8f4f 	dsb	sy
 8015922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015926:	e00b      	b.n	8015940 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015928:	4b08      	ldr	r3, [pc, #32]	@ (801594c <vTaskSuspend+0xd8>)
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	4b0b      	ldr	r3, [pc, #44]	@ (801595c <vTaskSuspend+0xe8>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	429a      	cmp	r2, r3
 8015932:	d103      	bne.n	801593c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8015934:	4b04      	ldr	r3, [pc, #16]	@ (8015948 <vTaskSuspend+0xd4>)
 8015936:	2200      	movs	r2, #0
 8015938:	601a      	str	r2, [r3, #0]
	}
 801593a:	e001      	b.n	8015940 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 801593c:	f000 fa88 	bl	8015e50 <vTaskSwitchContext>
	}
 8015940:	bf00      	nop
 8015942:	3710      	adds	r7, #16
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	240018e0 	.word	0x240018e0
 801594c:	24001da0 	.word	0x24001da0
 8015950:	24001dc0 	.word	0x24001dc0
 8015954:	24001ddc 	.word	0x24001ddc
 8015958:	e000ed04 	.word	0xe000ed04
 801595c:	24001db4 	.word	0x24001db4

08015960 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015960:	b480      	push	{r7}
 8015962:	b087      	sub	sp, #28
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015968:	2300      	movs	r3, #0
 801596a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d10b      	bne.n	801598e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8015976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801597a:	f383 8811 	msr	BASEPRI, r3
 801597e:	f3bf 8f6f 	isb	sy
 8015982:	f3bf 8f4f 	dsb	sy
 8015986:	60fb      	str	r3, [r7, #12]
}
 8015988:	bf00      	nop
 801598a:	bf00      	nop
 801598c:	e7fd      	b.n	801598a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	695b      	ldr	r3, [r3, #20]
 8015992:	4a0a      	ldr	r2, [pc, #40]	@ (80159bc <prvTaskIsTaskSuspended+0x5c>)
 8015994:	4293      	cmp	r3, r2
 8015996:	d10a      	bne.n	80159ae <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801599c:	4a08      	ldr	r2, [pc, #32]	@ (80159c0 <prvTaskIsTaskSuspended+0x60>)
 801599e:	4293      	cmp	r3, r2
 80159a0:	d005      	beq.n	80159ae <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d101      	bne.n	80159ae <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80159aa:	2301      	movs	r3, #1
 80159ac:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80159ae:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80159b0:	4618      	mov	r0, r3
 80159b2:	371c      	adds	r7, #28
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr
 80159bc:	24001da0 	.word	0x24001da0
 80159c0:	24001d74 	.word	0x24001d74

080159c4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d10b      	bne.n	80159ee <vTaskResume+0x2a>
	__asm volatile
 80159d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159da:	f383 8811 	msr	BASEPRI, r3
 80159de:	f3bf 8f6f 	isb	sy
 80159e2:	f3bf 8f4f 	dsb	sy
 80159e6:	60bb      	str	r3, [r7, #8]
}
 80159e8:	bf00      	nop
 80159ea:	bf00      	nop
 80159ec:	e7fd      	b.n	80159ea <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80159ee:	4b21      	ldr	r3, [pc, #132]	@ (8015a74 <vTaskResume+0xb0>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	68fa      	ldr	r2, [r7, #12]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d038      	beq.n	8015a6a <vTaskResume+0xa6>
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d035      	beq.n	8015a6a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80159fe:	f001 fb13 	bl	8017028 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015a02:	68f8      	ldr	r0, [r7, #12]
 8015a04:	f7ff ffac 	bl	8015960 <prvTaskIsTaskSuspended>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d02b      	beq.n	8015a66 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	3304      	adds	r3, #4
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7fe fd46 	bl	80144a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a1c:	4b16      	ldr	r3, [pc, #88]	@ (8015a78 <vTaskResume+0xb4>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d903      	bls.n	8015a2c <vTaskResume+0x68>
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a28:	4a13      	ldr	r2, [pc, #76]	@ (8015a78 <vTaskResume+0xb4>)
 8015a2a:	6013      	str	r3, [r2, #0]
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a30:	4613      	mov	r3, r2
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	4413      	add	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	4a10      	ldr	r2, [pc, #64]	@ (8015a7c <vTaskResume+0xb8>)
 8015a3a:	441a      	add	r2, r3
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	3304      	adds	r3, #4
 8015a40:	4619      	mov	r1, r3
 8015a42:	4610      	mov	r0, r2
 8015a44:	f7fe fcd1 	bl	80143ea <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a4c:	4b09      	ldr	r3, [pc, #36]	@ (8015a74 <vTaskResume+0xb0>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d307      	bcc.n	8015a66 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8015a56:	4b0a      	ldr	r3, [pc, #40]	@ (8015a80 <vTaskResume+0xbc>)
 8015a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a5c:	601a      	str	r2, [r3, #0]
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8015a66:	f001 fb11 	bl	801708c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015a6a:	bf00      	nop
 8015a6c:	3710      	adds	r7, #16
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	240018e0 	.word	0x240018e0
 8015a78:	24001dbc 	.word	0x24001dbc
 8015a7c:	240018e4 	.word	0x240018e4
 8015a80:	e000ed04 	.word	0xe000ed04

08015a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b08a      	sub	sp, #40	@ 0x28
 8015a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015a92:	463a      	mov	r2, r7
 8015a94:	1d39      	adds	r1, r7, #4
 8015a96:	f107 0308 	add.w	r3, r7, #8
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7fe fc44 	bl	8014328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	68ba      	ldr	r2, [r7, #8]
 8015aa6:	9202      	str	r2, [sp, #8]
 8015aa8:	9301      	str	r3, [sp, #4]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	9300      	str	r3, [sp, #0]
 8015aae:	2300      	movs	r3, #0
 8015ab0:	460a      	mov	r2, r1
 8015ab2:	4924      	ldr	r1, [pc, #144]	@ (8015b44 <vTaskStartScheduler+0xc0>)
 8015ab4:	4824      	ldr	r0, [pc, #144]	@ (8015b48 <vTaskStartScheduler+0xc4>)
 8015ab6:	f7ff fc0d 	bl	80152d4 <xTaskCreateStatic>
 8015aba:	4603      	mov	r3, r0
 8015abc:	4a23      	ldr	r2, [pc, #140]	@ (8015b4c <vTaskStartScheduler+0xc8>)
 8015abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015ac0:	4b22      	ldr	r3, [pc, #136]	@ (8015b4c <vTaskStartScheduler+0xc8>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d002      	beq.n	8015ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015ac8:	2301      	movs	r3, #1
 8015aca:	617b      	str	r3, [r7, #20]
 8015acc:	e001      	b.n	8015ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	d102      	bne.n	8015ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015ad8:	f000 fe1a 	bl	8016710 <xTimerCreateTimerTask>
 8015adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	2b01      	cmp	r3, #1
 8015ae2:	d11b      	bne.n	8015b1c <vTaskStartScheduler+0x98>
	__asm volatile
 8015ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae8:	f383 8811 	msr	BASEPRI, r3
 8015aec:	f3bf 8f6f 	isb	sy
 8015af0:	f3bf 8f4f 	dsb	sy
 8015af4:	613b      	str	r3, [r7, #16]
}
 8015af6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015af8:	4b15      	ldr	r3, [pc, #84]	@ (8015b50 <vTaskStartScheduler+0xcc>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	3354      	adds	r3, #84	@ 0x54
 8015afe:	4a15      	ldr	r2, [pc, #84]	@ (8015b54 <vTaskStartScheduler+0xd0>)
 8015b00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015b02:	4b15      	ldr	r3, [pc, #84]	@ (8015b58 <vTaskStartScheduler+0xd4>)
 8015b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015b0a:	4b14      	ldr	r3, [pc, #80]	@ (8015b5c <vTaskStartScheduler+0xd8>)
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015b10:	4b13      	ldr	r3, [pc, #76]	@ (8015b60 <vTaskStartScheduler+0xdc>)
 8015b12:	2200      	movs	r2, #0
 8015b14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015b16:	f001 f9e3 	bl	8016ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015b1a:	e00f      	b.n	8015b3c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015b22:	d10b      	bne.n	8015b3c <vTaskStartScheduler+0xb8>
	__asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	60fb      	str	r3, [r7, #12]
}
 8015b36:	bf00      	nop
 8015b38:	bf00      	nop
 8015b3a:	e7fd      	b.n	8015b38 <vTaskStartScheduler+0xb4>
}
 8015b3c:	bf00      	nop
 8015b3e:	3718      	adds	r7, #24
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	0801ad2c 	.word	0x0801ad2c
 8015b48:	08016195 	.word	0x08016195
 8015b4c:	24001dd8 	.word	0x24001dd8
 8015b50:	240018e0 	.word	0x240018e0
 8015b54:	24000030 	.word	0x24000030
 8015b58:	24001dd4 	.word	0x24001dd4
 8015b5c:	24001dc0 	.word	0x24001dc0
 8015b60:	24001db8 	.word	0x24001db8

08015b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015b64:	b480      	push	{r7}
 8015b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015b68:	4b04      	ldr	r3, [pc, #16]	@ (8015b7c <vTaskSuspendAll+0x18>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	4a03      	ldr	r2, [pc, #12]	@ (8015b7c <vTaskSuspendAll+0x18>)
 8015b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015b72:	bf00      	nop
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr
 8015b7c:	24001ddc 	.word	0x24001ddc

08015b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015b86:	2300      	movs	r3, #0
 8015b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015b8e:	4b42      	ldr	r3, [pc, #264]	@ (8015c98 <xTaskResumeAll+0x118>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d10b      	bne.n	8015bae <xTaskResumeAll+0x2e>
	__asm volatile
 8015b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b9a:	f383 8811 	msr	BASEPRI, r3
 8015b9e:	f3bf 8f6f 	isb	sy
 8015ba2:	f3bf 8f4f 	dsb	sy
 8015ba6:	603b      	str	r3, [r7, #0]
}
 8015ba8:	bf00      	nop
 8015baa:	bf00      	nop
 8015bac:	e7fd      	b.n	8015baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015bae:	f001 fa3b 	bl	8017028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015bb2:	4b39      	ldr	r3, [pc, #228]	@ (8015c98 <xTaskResumeAll+0x118>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	3b01      	subs	r3, #1
 8015bb8:	4a37      	ldr	r2, [pc, #220]	@ (8015c98 <xTaskResumeAll+0x118>)
 8015bba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015bbc:	4b36      	ldr	r3, [pc, #216]	@ (8015c98 <xTaskResumeAll+0x118>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d162      	bne.n	8015c8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015bc4:	4b35      	ldr	r3, [pc, #212]	@ (8015c9c <xTaskResumeAll+0x11c>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d05e      	beq.n	8015c8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015bcc:	e02f      	b.n	8015c2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bce:	4b34      	ldr	r3, [pc, #208]	@ (8015ca0 <xTaskResumeAll+0x120>)
 8015bd0:	68db      	ldr	r3, [r3, #12]
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	3318      	adds	r3, #24
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7fe fc62 	bl	80144a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	3304      	adds	r3, #4
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fe fc5d 	bl	80144a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bee:	4b2d      	ldr	r3, [pc, #180]	@ (8015ca4 <xTaskResumeAll+0x124>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d903      	bls.n	8015bfe <xTaskResumeAll+0x7e>
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8015ca4 <xTaskResumeAll+0x124>)
 8015bfc:	6013      	str	r3, [r2, #0]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c02:	4613      	mov	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	4413      	add	r3, r2
 8015c08:	009b      	lsls	r3, r3, #2
 8015c0a:	4a27      	ldr	r2, [pc, #156]	@ (8015ca8 <xTaskResumeAll+0x128>)
 8015c0c:	441a      	add	r2, r3
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	3304      	adds	r3, #4
 8015c12:	4619      	mov	r1, r3
 8015c14:	4610      	mov	r0, r2
 8015c16:	f7fe fbe8 	bl	80143ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c1e:	4b23      	ldr	r3, [pc, #140]	@ (8015cac <xTaskResumeAll+0x12c>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d302      	bcc.n	8015c2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015c28:	4b21      	ldr	r3, [pc, #132]	@ (8015cb0 <xTaskResumeAll+0x130>)
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8015ca0 <xTaskResumeAll+0x120>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d1cb      	bne.n	8015bce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015c3c:	f000 fb66 	bl	801630c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015c40:	4b1c      	ldr	r3, [pc, #112]	@ (8015cb4 <xTaskResumeAll+0x134>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d010      	beq.n	8015c6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015c4c:	f000 f846 	bl	8015cdc <xTaskIncrementTick>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015c56:	4b16      	ldr	r3, [pc, #88]	@ (8015cb0 <xTaskResumeAll+0x130>)
 8015c58:	2201      	movs	r2, #1
 8015c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d1f1      	bne.n	8015c4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015c68:	4b12      	ldr	r3, [pc, #72]	@ (8015cb4 <xTaskResumeAll+0x134>)
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015c6e:	4b10      	ldr	r3, [pc, #64]	@ (8015cb0 <xTaskResumeAll+0x130>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d009      	beq.n	8015c8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015c76:	2301      	movs	r3, #1
 8015c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb8 <xTaskResumeAll+0x138>)
 8015c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015c8a:	f001 f9ff 	bl	801708c <vPortExitCritical>

	return xAlreadyYielded;
 8015c8e:	68bb      	ldr	r3, [r7, #8]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	24001ddc 	.word	0x24001ddc
 8015c9c:	24001db4 	.word	0x24001db4
 8015ca0:	24001d74 	.word	0x24001d74
 8015ca4:	24001dbc 	.word	0x24001dbc
 8015ca8:	240018e4 	.word	0x240018e4
 8015cac:	240018e0 	.word	0x240018e0
 8015cb0:	24001dc8 	.word	0x24001dc8
 8015cb4:	24001dc4 	.word	0x24001dc4
 8015cb8:	e000ed04 	.word	0xe000ed04

08015cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015cc2:	4b05      	ldr	r3, [pc, #20]	@ (8015cd8 <xTaskGetTickCount+0x1c>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015cc8:	687b      	ldr	r3, [r7, #4]
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	370c      	adds	r7, #12
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd4:	4770      	bx	lr
 8015cd6:	bf00      	nop
 8015cd8:	24001db8 	.word	0x24001db8

08015cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8015e24 <xTaskIncrementTick+0x148>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f040 8090 	bne.w	8015e10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8015e28 <xTaskIncrementTick+0x14c>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8015e28 <xTaskIncrementTick+0x14c>)
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d121      	bne.n	8015d48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015d04:	4b49      	ldr	r3, [pc, #292]	@ (8015e2c <xTaskIncrementTick+0x150>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d00b      	beq.n	8015d26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d12:	f383 8811 	msr	BASEPRI, r3
 8015d16:	f3bf 8f6f 	isb	sy
 8015d1a:	f3bf 8f4f 	dsb	sy
 8015d1e:	603b      	str	r3, [r7, #0]
}
 8015d20:	bf00      	nop
 8015d22:	bf00      	nop
 8015d24:	e7fd      	b.n	8015d22 <xTaskIncrementTick+0x46>
 8015d26:	4b41      	ldr	r3, [pc, #260]	@ (8015e2c <xTaskIncrementTick+0x150>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	60fb      	str	r3, [r7, #12]
 8015d2c:	4b40      	ldr	r3, [pc, #256]	@ (8015e30 <xTaskIncrementTick+0x154>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4a3e      	ldr	r2, [pc, #248]	@ (8015e2c <xTaskIncrementTick+0x150>)
 8015d32:	6013      	str	r3, [r2, #0]
 8015d34:	4a3e      	ldr	r2, [pc, #248]	@ (8015e30 <xTaskIncrementTick+0x154>)
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	6013      	str	r3, [r2, #0]
 8015d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8015e34 <xTaskIncrementTick+0x158>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	4a3c      	ldr	r2, [pc, #240]	@ (8015e34 <xTaskIncrementTick+0x158>)
 8015d42:	6013      	str	r3, [r2, #0]
 8015d44:	f000 fae2 	bl	801630c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015d48:	4b3b      	ldr	r3, [pc, #236]	@ (8015e38 <xTaskIncrementTick+0x15c>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	693a      	ldr	r2, [r7, #16]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d349      	bcc.n	8015de6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d52:	4b36      	ldr	r3, [pc, #216]	@ (8015e2c <xTaskIncrementTick+0x150>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d104      	bne.n	8015d66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d5c:	4b36      	ldr	r3, [pc, #216]	@ (8015e38 <xTaskIncrementTick+0x15c>)
 8015d5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015d62:	601a      	str	r2, [r3, #0]
					break;
 8015d64:	e03f      	b.n	8015de6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d66:	4b31      	ldr	r3, [pc, #196]	@ (8015e2c <xTaskIncrementTick+0x150>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	68db      	ldr	r3, [r3, #12]
 8015d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015d76:	693a      	ldr	r2, [r7, #16]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d203      	bcs.n	8015d86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8015e38 <xTaskIncrementTick+0x15c>)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015d84:	e02f      	b.n	8015de6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	3304      	adds	r3, #4
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fe fb8a 	bl	80144a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d004      	beq.n	8015da2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	3318      	adds	r3, #24
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7fe fb81 	bl	80144a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015da2:	68bb      	ldr	r3, [r7, #8]
 8015da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015da6:	4b25      	ldr	r3, [pc, #148]	@ (8015e3c <xTaskIncrementTick+0x160>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d903      	bls.n	8015db6 <xTaskIncrementTick+0xda>
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015db2:	4a22      	ldr	r2, [pc, #136]	@ (8015e3c <xTaskIncrementTick+0x160>)
 8015db4:	6013      	str	r3, [r2, #0]
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dba:	4613      	mov	r3, r2
 8015dbc:	009b      	lsls	r3, r3, #2
 8015dbe:	4413      	add	r3, r2
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8015e40 <xTaskIncrementTick+0x164>)
 8015dc4:	441a      	add	r2, r3
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	3304      	adds	r3, #4
 8015dca:	4619      	mov	r1, r3
 8015dcc:	4610      	mov	r0, r2
 8015dce:	f7fe fb0c 	bl	80143ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8015e44 <xTaskIncrementTick+0x168>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d3b8      	bcc.n	8015d52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015de0:	2301      	movs	r3, #1
 8015de2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015de4:	e7b5      	b.n	8015d52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015de6:	4b17      	ldr	r3, [pc, #92]	@ (8015e44 <xTaskIncrementTick+0x168>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dec:	4914      	ldr	r1, [pc, #80]	@ (8015e40 <xTaskIncrementTick+0x164>)
 8015dee:	4613      	mov	r3, r2
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	4413      	add	r3, r2
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	440b      	add	r3, r1
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d901      	bls.n	8015e02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015e02:	4b11      	ldr	r3, [pc, #68]	@ (8015e48 <xTaskIncrementTick+0x16c>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d007      	beq.n	8015e1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	617b      	str	r3, [r7, #20]
 8015e0e:	e004      	b.n	8015e1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015e10:	4b0e      	ldr	r3, [pc, #56]	@ (8015e4c <xTaskIncrementTick+0x170>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	3301      	adds	r3, #1
 8015e16:	4a0d      	ldr	r2, [pc, #52]	@ (8015e4c <xTaskIncrementTick+0x170>)
 8015e18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015e1a:	697b      	ldr	r3, [r7, #20]
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3718      	adds	r7, #24
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	24001ddc 	.word	0x24001ddc
 8015e28:	24001db8 	.word	0x24001db8
 8015e2c:	24001d6c 	.word	0x24001d6c
 8015e30:	24001d70 	.word	0x24001d70
 8015e34:	24001dcc 	.word	0x24001dcc
 8015e38:	24001dd4 	.word	0x24001dd4
 8015e3c:	24001dbc 	.word	0x24001dbc
 8015e40:	240018e4 	.word	0x240018e4
 8015e44:	240018e0 	.word	0x240018e0
 8015e48:	24001dc8 	.word	0x24001dc8
 8015e4c:	24001dc4 	.word	0x24001dc4

08015e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015e50:	b480      	push	{r7}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015e56:	4b2b      	ldr	r3, [pc, #172]	@ (8015f04 <vTaskSwitchContext+0xb4>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d003      	beq.n	8015e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8015f08 <vTaskSwitchContext+0xb8>)
 8015e60:	2201      	movs	r2, #1
 8015e62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015e64:	e047      	b.n	8015ef6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8015e66:	4b28      	ldr	r3, [pc, #160]	@ (8015f08 <vTaskSwitchContext+0xb8>)
 8015e68:	2200      	movs	r2, #0
 8015e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e6c:	4b27      	ldr	r3, [pc, #156]	@ (8015f0c <vTaskSwitchContext+0xbc>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	60fb      	str	r3, [r7, #12]
 8015e72:	e011      	b.n	8015e98 <vTaskSwitchContext+0x48>
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d10b      	bne.n	8015e92 <vTaskSwitchContext+0x42>
	__asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	607b      	str	r3, [r7, #4]
}
 8015e8c:	bf00      	nop
 8015e8e:	bf00      	nop
 8015e90:	e7fd      	b.n	8015e8e <vTaskSwitchContext+0x3e>
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	3b01      	subs	r3, #1
 8015e96:	60fb      	str	r3, [r7, #12]
 8015e98:	491d      	ldr	r1, [pc, #116]	@ (8015f10 <vTaskSwitchContext+0xc0>)
 8015e9a:	68fa      	ldr	r2, [r7, #12]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	009b      	lsls	r3, r3, #2
 8015ea0:	4413      	add	r3, r2
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	440b      	add	r3, r1
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d0e3      	beq.n	8015e74 <vTaskSwitchContext+0x24>
 8015eac:	68fa      	ldr	r2, [r7, #12]
 8015eae:	4613      	mov	r3, r2
 8015eb0:	009b      	lsls	r3, r3, #2
 8015eb2:	4413      	add	r3, r2
 8015eb4:	009b      	lsls	r3, r3, #2
 8015eb6:	4a16      	ldr	r2, [pc, #88]	@ (8015f10 <vTaskSwitchContext+0xc0>)
 8015eb8:	4413      	add	r3, r2
 8015eba:	60bb      	str	r3, [r7, #8]
 8015ebc:	68bb      	ldr	r3, [r7, #8]
 8015ebe:	685b      	ldr	r3, [r3, #4]
 8015ec0:	685a      	ldr	r2, [r3, #4]
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	605a      	str	r2, [r3, #4]
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	685a      	ldr	r2, [r3, #4]
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	3308      	adds	r3, #8
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d104      	bne.n	8015edc <vTaskSwitchContext+0x8c>
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	685a      	ldr	r2, [r3, #4]
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	605a      	str	r2, [r3, #4]
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	68db      	ldr	r3, [r3, #12]
 8015ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8015f14 <vTaskSwitchContext+0xc4>)
 8015ee4:	6013      	str	r3, [r2, #0]
 8015ee6:	4a09      	ldr	r2, [pc, #36]	@ (8015f0c <vTaskSwitchContext+0xbc>)
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015eec:	4b09      	ldr	r3, [pc, #36]	@ (8015f14 <vTaskSwitchContext+0xc4>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	3354      	adds	r3, #84	@ 0x54
 8015ef2:	4a09      	ldr	r2, [pc, #36]	@ (8015f18 <vTaskSwitchContext+0xc8>)
 8015ef4:	6013      	str	r3, [r2, #0]
}
 8015ef6:	bf00      	nop
 8015ef8:	3714      	adds	r7, #20
 8015efa:	46bd      	mov	sp, r7
 8015efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	24001ddc 	.word	0x24001ddc
 8015f08:	24001dc8 	.word	0x24001dc8
 8015f0c:	24001dbc 	.word	0x24001dbc
 8015f10:	240018e4 	.word	0x240018e4
 8015f14:	240018e0 	.word	0x240018e0
 8015f18:	24000030 	.word	0x24000030

08015f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d10b      	bne.n	8015f44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f30:	f383 8811 	msr	BASEPRI, r3
 8015f34:	f3bf 8f6f 	isb	sy
 8015f38:	f3bf 8f4f 	dsb	sy
 8015f3c:	60fb      	str	r3, [r7, #12]
}
 8015f3e:	bf00      	nop
 8015f40:	bf00      	nop
 8015f42:	e7fd      	b.n	8015f40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f44:	4b07      	ldr	r3, [pc, #28]	@ (8015f64 <vTaskPlaceOnEventList+0x48>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	3318      	adds	r3, #24
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7fe fa70 	bl	8014432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015f52:	2101      	movs	r1, #1
 8015f54:	6838      	ldr	r0, [r7, #0]
 8015f56:	f000 fb87 	bl	8016668 <prvAddCurrentTaskToDelayedList>
}
 8015f5a:	bf00      	nop
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	240018e0 	.word	0x240018e0

08015f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b086      	sub	sp, #24
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d10b      	bne.n	8015f92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f7e:	f383 8811 	msr	BASEPRI, r3
 8015f82:	f3bf 8f6f 	isb	sy
 8015f86:	f3bf 8f4f 	dsb	sy
 8015f8a:	617b      	str	r3, [r7, #20]
}
 8015f8c:	bf00      	nop
 8015f8e:	bf00      	nop
 8015f90:	e7fd      	b.n	8015f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f92:	4b0a      	ldr	r3, [pc, #40]	@ (8015fbc <vTaskPlaceOnEventListRestricted+0x54>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	3318      	adds	r3, #24
 8015f98:	4619      	mov	r1, r3
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f7fe fa25 	bl	80143ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d002      	beq.n	8015fac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015faa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015fac:	6879      	ldr	r1, [r7, #4]
 8015fae:	68b8      	ldr	r0, [r7, #8]
 8015fb0:	f000 fb5a 	bl	8016668 <prvAddCurrentTaskToDelayedList>
	}
 8015fb4:	bf00      	nop
 8015fb6:	3718      	adds	r7, #24
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	240018e0 	.word	0x240018e0

08015fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	68db      	ldr	r3, [r3, #12]
 8015fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d10b      	bne.n	8015fee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fda:	f383 8811 	msr	BASEPRI, r3
 8015fde:	f3bf 8f6f 	isb	sy
 8015fe2:	f3bf 8f4f 	dsb	sy
 8015fe6:	60fb      	str	r3, [r7, #12]
}
 8015fe8:	bf00      	nop
 8015fea:	bf00      	nop
 8015fec:	e7fd      	b.n	8015fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	3318      	adds	r3, #24
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fe fa56 	bl	80144a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8016070 <xTaskRemoveFromEventList+0xb0>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d11d      	bne.n	801603c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	3304      	adds	r3, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7fe fa4d 	bl	80144a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801600e:	4b19      	ldr	r3, [pc, #100]	@ (8016074 <xTaskRemoveFromEventList+0xb4>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	429a      	cmp	r2, r3
 8016014:	d903      	bls.n	801601e <xTaskRemoveFromEventList+0x5e>
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801601a:	4a16      	ldr	r2, [pc, #88]	@ (8016074 <xTaskRemoveFromEventList+0xb4>)
 801601c:	6013      	str	r3, [r2, #0]
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016022:	4613      	mov	r3, r2
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	4413      	add	r3, r2
 8016028:	009b      	lsls	r3, r3, #2
 801602a:	4a13      	ldr	r2, [pc, #76]	@ (8016078 <xTaskRemoveFromEventList+0xb8>)
 801602c:	441a      	add	r2, r3
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	3304      	adds	r3, #4
 8016032:	4619      	mov	r1, r3
 8016034:	4610      	mov	r0, r2
 8016036:	f7fe f9d8 	bl	80143ea <vListInsertEnd>
 801603a:	e005      	b.n	8016048 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	3318      	adds	r3, #24
 8016040:	4619      	mov	r1, r3
 8016042:	480e      	ldr	r0, [pc, #56]	@ (801607c <xTaskRemoveFromEventList+0xbc>)
 8016044:	f7fe f9d1 	bl	80143ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801604c:	4b0c      	ldr	r3, [pc, #48]	@ (8016080 <xTaskRemoveFromEventList+0xc0>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016052:	429a      	cmp	r2, r3
 8016054:	d905      	bls.n	8016062 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016056:	2301      	movs	r3, #1
 8016058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801605a:	4b0a      	ldr	r3, [pc, #40]	@ (8016084 <xTaskRemoveFromEventList+0xc4>)
 801605c:	2201      	movs	r2, #1
 801605e:	601a      	str	r2, [r3, #0]
 8016060:	e001      	b.n	8016066 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016062:	2300      	movs	r3, #0
 8016064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016066:	697b      	ldr	r3, [r7, #20]
}
 8016068:	4618      	mov	r0, r3
 801606a:	3718      	adds	r7, #24
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	24001ddc 	.word	0x24001ddc
 8016074:	24001dbc 	.word	0x24001dbc
 8016078:	240018e4 	.word	0x240018e4
 801607c:	24001d74 	.word	0x24001d74
 8016080:	240018e0 	.word	0x240018e0
 8016084:	24001dc8 	.word	0x24001dc8

08016088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016088:	b480      	push	{r7}
 801608a:	b083      	sub	sp, #12
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016090:	4b06      	ldr	r3, [pc, #24]	@ (80160ac <vTaskInternalSetTimeOutState+0x24>)
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016098:	4b05      	ldr	r3, [pc, #20]	@ (80160b0 <vTaskInternalSetTimeOutState+0x28>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	605a      	str	r2, [r3, #4]
}
 80160a0:	bf00      	nop
 80160a2:	370c      	adds	r7, #12
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr
 80160ac:	24001dcc 	.word	0x24001dcc
 80160b0:	24001db8 	.word	0x24001db8

080160b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b088      	sub	sp, #32
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d10b      	bne.n	80160dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80160c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160c8:	f383 8811 	msr	BASEPRI, r3
 80160cc:	f3bf 8f6f 	isb	sy
 80160d0:	f3bf 8f4f 	dsb	sy
 80160d4:	613b      	str	r3, [r7, #16]
}
 80160d6:	bf00      	nop
 80160d8:	bf00      	nop
 80160da:	e7fd      	b.n	80160d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d10b      	bne.n	80160fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80160e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160e6:	f383 8811 	msr	BASEPRI, r3
 80160ea:	f3bf 8f6f 	isb	sy
 80160ee:	f3bf 8f4f 	dsb	sy
 80160f2:	60fb      	str	r3, [r7, #12]
}
 80160f4:	bf00      	nop
 80160f6:	bf00      	nop
 80160f8:	e7fd      	b.n	80160f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80160fa:	f000 ff95 	bl	8017028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80160fe:	4b1d      	ldr	r3, [pc, #116]	@ (8016174 <xTaskCheckForTimeOut+0xc0>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	69ba      	ldr	r2, [r7, #24]
 801610a:	1ad3      	subs	r3, r2, r3
 801610c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016116:	d102      	bne.n	801611e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016118:	2300      	movs	r3, #0
 801611a:	61fb      	str	r3, [r7, #28]
 801611c:	e023      	b.n	8016166 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	4b15      	ldr	r3, [pc, #84]	@ (8016178 <xTaskCheckForTimeOut+0xc4>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	429a      	cmp	r2, r3
 8016128:	d007      	beq.n	801613a <xTaskCheckForTimeOut+0x86>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	69ba      	ldr	r2, [r7, #24]
 8016130:	429a      	cmp	r2, r3
 8016132:	d302      	bcc.n	801613a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016134:	2301      	movs	r3, #1
 8016136:	61fb      	str	r3, [r7, #28]
 8016138:	e015      	b.n	8016166 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	697a      	ldr	r2, [r7, #20]
 8016140:	429a      	cmp	r2, r3
 8016142:	d20b      	bcs.n	801615c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	1ad2      	subs	r2, r2, r3
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f7ff ff99 	bl	8016088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016156:	2300      	movs	r3, #0
 8016158:	61fb      	str	r3, [r7, #28]
 801615a:	e004      	b.n	8016166 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	2200      	movs	r2, #0
 8016160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016162:	2301      	movs	r3, #1
 8016164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016166:	f000 ff91 	bl	801708c <vPortExitCritical>

	return xReturn;
 801616a:	69fb      	ldr	r3, [r7, #28]
}
 801616c:	4618      	mov	r0, r3
 801616e:	3720      	adds	r7, #32
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	24001db8 	.word	0x24001db8
 8016178:	24001dcc 	.word	0x24001dcc

0801617c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801617c:	b480      	push	{r7}
 801617e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016180:	4b03      	ldr	r3, [pc, #12]	@ (8016190 <vTaskMissedYield+0x14>)
 8016182:	2201      	movs	r2, #1
 8016184:	601a      	str	r2, [r3, #0]
}
 8016186:	bf00      	nop
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	24001dc8 	.word	0x24001dc8

08016194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801619c:	f000 f852 	bl	8016244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80161a0:	4b06      	ldr	r3, [pc, #24]	@ (80161bc <prvIdleTask+0x28>)
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d9f9      	bls.n	801619c <prvIdleTask+0x8>
			{
				taskYIELD();
 80161a8:	4b05      	ldr	r3, [pc, #20]	@ (80161c0 <prvIdleTask+0x2c>)
 80161aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161ae:	601a      	str	r2, [r3, #0]
 80161b0:	f3bf 8f4f 	dsb	sy
 80161b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80161b8:	e7f0      	b.n	801619c <prvIdleTask+0x8>
 80161ba:	bf00      	nop
 80161bc:	240018e4 	.word	0x240018e4
 80161c0:	e000ed04 	.word	0xe000ed04

080161c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80161ca:	2300      	movs	r3, #0
 80161cc:	607b      	str	r3, [r7, #4]
 80161ce:	e00c      	b.n	80161ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80161d0:	687a      	ldr	r2, [r7, #4]
 80161d2:	4613      	mov	r3, r2
 80161d4:	009b      	lsls	r3, r3, #2
 80161d6:	4413      	add	r3, r2
 80161d8:	009b      	lsls	r3, r3, #2
 80161da:	4a12      	ldr	r2, [pc, #72]	@ (8016224 <prvInitialiseTaskLists+0x60>)
 80161dc:	4413      	add	r3, r2
 80161de:	4618      	mov	r0, r3
 80161e0:	f7fe f8d6 	bl	8014390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	3301      	adds	r3, #1
 80161e8:	607b      	str	r3, [r7, #4]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	2b37      	cmp	r3, #55	@ 0x37
 80161ee:	d9ef      	bls.n	80161d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80161f0:	480d      	ldr	r0, [pc, #52]	@ (8016228 <prvInitialiseTaskLists+0x64>)
 80161f2:	f7fe f8cd 	bl	8014390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80161f6:	480d      	ldr	r0, [pc, #52]	@ (801622c <prvInitialiseTaskLists+0x68>)
 80161f8:	f7fe f8ca 	bl	8014390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80161fc:	480c      	ldr	r0, [pc, #48]	@ (8016230 <prvInitialiseTaskLists+0x6c>)
 80161fe:	f7fe f8c7 	bl	8014390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016202:	480c      	ldr	r0, [pc, #48]	@ (8016234 <prvInitialiseTaskLists+0x70>)
 8016204:	f7fe f8c4 	bl	8014390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016208:	480b      	ldr	r0, [pc, #44]	@ (8016238 <prvInitialiseTaskLists+0x74>)
 801620a:	f7fe f8c1 	bl	8014390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801620e:	4b0b      	ldr	r3, [pc, #44]	@ (801623c <prvInitialiseTaskLists+0x78>)
 8016210:	4a05      	ldr	r2, [pc, #20]	@ (8016228 <prvInitialiseTaskLists+0x64>)
 8016212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016214:	4b0a      	ldr	r3, [pc, #40]	@ (8016240 <prvInitialiseTaskLists+0x7c>)
 8016216:	4a05      	ldr	r2, [pc, #20]	@ (801622c <prvInitialiseTaskLists+0x68>)
 8016218:	601a      	str	r2, [r3, #0]
}
 801621a:	bf00      	nop
 801621c:	3708      	adds	r7, #8
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop
 8016224:	240018e4 	.word	0x240018e4
 8016228:	24001d44 	.word	0x24001d44
 801622c:	24001d58 	.word	0x24001d58
 8016230:	24001d74 	.word	0x24001d74
 8016234:	24001d88 	.word	0x24001d88
 8016238:	24001da0 	.word	0x24001da0
 801623c:	24001d6c 	.word	0x24001d6c
 8016240:	24001d70 	.word	0x24001d70

08016244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801624a:	e019      	b.n	8016280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801624c:	f000 feec 	bl	8017028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016250:	4b10      	ldr	r3, [pc, #64]	@ (8016294 <prvCheckTasksWaitingTermination+0x50>)
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	3304      	adds	r3, #4
 801625c:	4618      	mov	r0, r3
 801625e:	f7fe f921 	bl	80144a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016262:	4b0d      	ldr	r3, [pc, #52]	@ (8016298 <prvCheckTasksWaitingTermination+0x54>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	3b01      	subs	r3, #1
 8016268:	4a0b      	ldr	r2, [pc, #44]	@ (8016298 <prvCheckTasksWaitingTermination+0x54>)
 801626a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801626c:	4b0b      	ldr	r3, [pc, #44]	@ (801629c <prvCheckTasksWaitingTermination+0x58>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	3b01      	subs	r3, #1
 8016272:	4a0a      	ldr	r2, [pc, #40]	@ (801629c <prvCheckTasksWaitingTermination+0x58>)
 8016274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016276:	f000 ff09 	bl	801708c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 f810 	bl	80162a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016280:	4b06      	ldr	r3, [pc, #24]	@ (801629c <prvCheckTasksWaitingTermination+0x58>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d1e1      	bne.n	801624c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016288:	bf00      	nop
 801628a:	bf00      	nop
 801628c:	3708      	adds	r7, #8
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
 8016292:	bf00      	nop
 8016294:	24001d88 	.word	0x24001d88
 8016298:	24001db4 	.word	0x24001db4
 801629c:	24001d9c 	.word	0x24001d9c

080162a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	3354      	adds	r3, #84	@ 0x54
 80162ac:	4618      	mov	r0, r3
 80162ae:	f002 f827 	bl	8018300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d108      	bne.n	80162ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162c0:	4618      	mov	r0, r3
 80162c2:	f001 f8a1 	bl	8017408 <vPortFree>
				vPortFree( pxTCB );
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f001 f89e 	bl	8017408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80162cc:	e019      	b.n	8016302 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	d103      	bne.n	80162e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f001 f895 	bl	8017408 <vPortFree>
	}
 80162de:	e010      	b.n	8016302 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d00b      	beq.n	8016302 <prvDeleteTCB+0x62>
	__asm volatile
 80162ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162ee:	f383 8811 	msr	BASEPRI, r3
 80162f2:	f3bf 8f6f 	isb	sy
 80162f6:	f3bf 8f4f 	dsb	sy
 80162fa:	60fb      	str	r3, [r7, #12]
}
 80162fc:	bf00      	nop
 80162fe:	bf00      	nop
 8016300:	e7fd      	b.n	80162fe <prvDeleteTCB+0x5e>
	}
 8016302:	bf00      	nop
 8016304:	3710      	adds	r7, #16
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
	...

0801630c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016312:	4b0c      	ldr	r3, [pc, #48]	@ (8016344 <prvResetNextTaskUnblockTime+0x38>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d104      	bne.n	8016326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801631c:	4b0a      	ldr	r3, [pc, #40]	@ (8016348 <prvResetNextTaskUnblockTime+0x3c>)
 801631e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016324:	e008      	b.n	8016338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016326:	4b07      	ldr	r3, [pc, #28]	@ (8016344 <prvResetNextTaskUnblockTime+0x38>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	685b      	ldr	r3, [r3, #4]
 8016334:	4a04      	ldr	r2, [pc, #16]	@ (8016348 <prvResetNextTaskUnblockTime+0x3c>)
 8016336:	6013      	str	r3, [r2, #0]
}
 8016338:	bf00      	nop
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr
 8016344:	24001d6c 	.word	0x24001d6c
 8016348:	24001dd4 	.word	0x24001dd4

0801634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016352:	4b0b      	ldr	r3, [pc, #44]	@ (8016380 <xTaskGetSchedulerState+0x34>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d102      	bne.n	8016360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801635a:	2301      	movs	r3, #1
 801635c:	607b      	str	r3, [r7, #4]
 801635e:	e008      	b.n	8016372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016360:	4b08      	ldr	r3, [pc, #32]	@ (8016384 <xTaskGetSchedulerState+0x38>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d102      	bne.n	801636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016368:	2302      	movs	r3, #2
 801636a:	607b      	str	r3, [r7, #4]
 801636c:	e001      	b.n	8016372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801636e:	2300      	movs	r3, #0
 8016370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016372:	687b      	ldr	r3, [r7, #4]
	}
 8016374:	4618      	mov	r0, r3
 8016376:	370c      	adds	r7, #12
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr
 8016380:	24001dc0 	.word	0x24001dc0
 8016384:	24001ddc 	.word	0x24001ddc

08016388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016394:	2300      	movs	r3, #0
 8016396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d051      	beq.n	8016442 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163a2:	4b2a      	ldr	r3, [pc, #168]	@ (801644c <xTaskPriorityInherit+0xc4>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d241      	bcs.n	8016430 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	699b      	ldr	r3, [r3, #24]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	db06      	blt.n	80163c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163b4:	4b25      	ldr	r3, [pc, #148]	@ (801644c <xTaskPriorityInherit+0xc4>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	6959      	ldr	r1, [r3, #20]
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163ca:	4613      	mov	r3, r2
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	4413      	add	r3, r2
 80163d0:	009b      	lsls	r3, r3, #2
 80163d2:	4a1f      	ldr	r2, [pc, #124]	@ (8016450 <xTaskPriorityInherit+0xc8>)
 80163d4:	4413      	add	r3, r2
 80163d6:	4299      	cmp	r1, r3
 80163d8:	d122      	bne.n	8016420 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	3304      	adds	r3, #4
 80163de:	4618      	mov	r0, r3
 80163e0:	f7fe f860 	bl	80144a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80163e4:	4b19      	ldr	r3, [pc, #100]	@ (801644c <xTaskPriorityInherit+0xc4>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163f2:	4b18      	ldr	r3, [pc, #96]	@ (8016454 <xTaskPriorityInherit+0xcc>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d903      	bls.n	8016402 <xTaskPriorityInherit+0x7a>
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163fe:	4a15      	ldr	r2, [pc, #84]	@ (8016454 <xTaskPriorityInherit+0xcc>)
 8016400:	6013      	str	r3, [r2, #0]
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016406:	4613      	mov	r3, r2
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	4413      	add	r3, r2
 801640c:	009b      	lsls	r3, r3, #2
 801640e:	4a10      	ldr	r2, [pc, #64]	@ (8016450 <xTaskPriorityInherit+0xc8>)
 8016410:	441a      	add	r2, r3
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	3304      	adds	r3, #4
 8016416:	4619      	mov	r1, r3
 8016418:	4610      	mov	r0, r2
 801641a:	f7fd ffe6 	bl	80143ea <vListInsertEnd>
 801641e:	e004      	b.n	801642a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016420:	4b0a      	ldr	r3, [pc, #40]	@ (801644c <xTaskPriorityInherit+0xc4>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801642a:	2301      	movs	r3, #1
 801642c:	60fb      	str	r3, [r7, #12]
 801642e:	e008      	b.n	8016442 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016434:	4b05      	ldr	r3, [pc, #20]	@ (801644c <xTaskPriorityInherit+0xc4>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801643a:	429a      	cmp	r2, r3
 801643c:	d201      	bcs.n	8016442 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801643e:	2301      	movs	r3, #1
 8016440:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016442:	68fb      	ldr	r3, [r7, #12]
	}
 8016444:	4618      	mov	r0, r3
 8016446:	3710      	adds	r7, #16
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	240018e0 	.word	0x240018e0
 8016450:	240018e4 	.word	0x240018e4
 8016454:	24001dbc 	.word	0x24001dbc

08016458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016458:	b580      	push	{r7, lr}
 801645a:	b086      	sub	sp, #24
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016464:	2300      	movs	r3, #0
 8016466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d058      	beq.n	8016520 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801646e:	4b2f      	ldr	r3, [pc, #188]	@ (801652c <xTaskPriorityDisinherit+0xd4>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	693a      	ldr	r2, [r7, #16]
 8016474:	429a      	cmp	r2, r3
 8016476:	d00b      	beq.n	8016490 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801647c:	f383 8811 	msr	BASEPRI, r3
 8016480:	f3bf 8f6f 	isb	sy
 8016484:	f3bf 8f4f 	dsb	sy
 8016488:	60fb      	str	r3, [r7, #12]
}
 801648a:	bf00      	nop
 801648c:	bf00      	nop
 801648e:	e7fd      	b.n	801648c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016494:	2b00      	cmp	r3, #0
 8016496:	d10b      	bne.n	80164b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801649c:	f383 8811 	msr	BASEPRI, r3
 80164a0:	f3bf 8f6f 	isb	sy
 80164a4:	f3bf 8f4f 	dsb	sy
 80164a8:	60bb      	str	r3, [r7, #8]
}
 80164aa:	bf00      	nop
 80164ac:	bf00      	nop
 80164ae:	e7fd      	b.n	80164ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80164b0:	693b      	ldr	r3, [r7, #16]
 80164b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164b4:	1e5a      	subs	r2, r3, #1
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d02c      	beq.n	8016520 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d128      	bne.n	8016520 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	3304      	adds	r3, #4
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7fd ffe6 	bl	80144a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164e0:	693b      	ldr	r3, [r7, #16]
 80164e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016530 <xTaskPriorityDisinherit+0xd8>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d903      	bls.n	8016500 <xTaskPriorityDisinherit+0xa8>
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164fc:	4a0c      	ldr	r2, [pc, #48]	@ (8016530 <xTaskPriorityDisinherit+0xd8>)
 80164fe:	6013      	str	r3, [r2, #0]
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016504:	4613      	mov	r3, r2
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	4413      	add	r3, r2
 801650a:	009b      	lsls	r3, r3, #2
 801650c:	4a09      	ldr	r2, [pc, #36]	@ (8016534 <xTaskPriorityDisinherit+0xdc>)
 801650e:	441a      	add	r2, r3
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	3304      	adds	r3, #4
 8016514:	4619      	mov	r1, r3
 8016516:	4610      	mov	r0, r2
 8016518:	f7fd ff67 	bl	80143ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801651c:	2301      	movs	r3, #1
 801651e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016520:	697b      	ldr	r3, [r7, #20]
	}
 8016522:	4618      	mov	r0, r3
 8016524:	3718      	adds	r7, #24
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	240018e0 	.word	0x240018e0
 8016530:	24001dbc 	.word	0x24001dbc
 8016534:	240018e4 	.word	0x240018e4

08016538 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016538:	b580      	push	{r7, lr}
 801653a:	b088      	sub	sp, #32
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016546:	2301      	movs	r3, #1
 8016548:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d06c      	beq.n	801662a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016550:	69bb      	ldr	r3, [r7, #24]
 8016552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016554:	2b00      	cmp	r3, #0
 8016556:	d10b      	bne.n	8016570 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801655c:	f383 8811 	msr	BASEPRI, r3
 8016560:	f3bf 8f6f 	isb	sy
 8016564:	f3bf 8f4f 	dsb	sy
 8016568:	60fb      	str	r3, [r7, #12]
}
 801656a:	bf00      	nop
 801656c:	bf00      	nop
 801656e:	e7fd      	b.n	801656c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016574:	683a      	ldr	r2, [r7, #0]
 8016576:	429a      	cmp	r2, r3
 8016578:	d902      	bls.n	8016580 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	61fb      	str	r3, [r7, #28]
 801657e:	e002      	b.n	8016586 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016584:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016586:	69bb      	ldr	r3, [r7, #24]
 8016588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801658a:	69fa      	ldr	r2, [r7, #28]
 801658c:	429a      	cmp	r2, r3
 801658e:	d04c      	beq.n	801662a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016594:	697a      	ldr	r2, [r7, #20]
 8016596:	429a      	cmp	r2, r3
 8016598:	d147      	bne.n	801662a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801659a:	4b26      	ldr	r3, [pc, #152]	@ (8016634 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	69ba      	ldr	r2, [r7, #24]
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d10b      	bne.n	80165bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80165a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165a8:	f383 8811 	msr	BASEPRI, r3
 80165ac:	f3bf 8f6f 	isb	sy
 80165b0:	f3bf 8f4f 	dsb	sy
 80165b4:	60bb      	str	r3, [r7, #8]
}
 80165b6:	bf00      	nop
 80165b8:	bf00      	nop
 80165ba:	e7fd      	b.n	80165b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	69fa      	ldr	r2, [r7, #28]
 80165c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	699b      	ldr	r3, [r3, #24]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	db04      	blt.n	80165da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165d0:	69fb      	ldr	r3, [r7, #28]
 80165d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80165da:	69bb      	ldr	r3, [r7, #24]
 80165dc:	6959      	ldr	r1, [r3, #20]
 80165de:	693a      	ldr	r2, [r7, #16]
 80165e0:	4613      	mov	r3, r2
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	4413      	add	r3, r2
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	4a13      	ldr	r2, [pc, #76]	@ (8016638 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80165ea:	4413      	add	r3, r2
 80165ec:	4299      	cmp	r1, r3
 80165ee:	d11c      	bne.n	801662a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	3304      	adds	r3, #4
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7fd ff55 	bl	80144a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165fe:	4b0f      	ldr	r3, [pc, #60]	@ (801663c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	429a      	cmp	r2, r3
 8016604:	d903      	bls.n	801660e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801660a:	4a0c      	ldr	r2, [pc, #48]	@ (801663c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801660c:	6013      	str	r3, [r2, #0]
 801660e:	69bb      	ldr	r3, [r7, #24]
 8016610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016612:	4613      	mov	r3, r2
 8016614:	009b      	lsls	r3, r3, #2
 8016616:	4413      	add	r3, r2
 8016618:	009b      	lsls	r3, r3, #2
 801661a:	4a07      	ldr	r2, [pc, #28]	@ (8016638 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801661c:	441a      	add	r2, r3
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	3304      	adds	r3, #4
 8016622:	4619      	mov	r1, r3
 8016624:	4610      	mov	r0, r2
 8016626:	f7fd fee0 	bl	80143ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801662a:	bf00      	nop
 801662c:	3720      	adds	r7, #32
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	240018e0 	.word	0x240018e0
 8016638:	240018e4 	.word	0x240018e4
 801663c:	24001dbc 	.word	0x24001dbc

08016640 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016640:	b480      	push	{r7}
 8016642:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016644:	4b07      	ldr	r3, [pc, #28]	@ (8016664 <pvTaskIncrementMutexHeldCount+0x24>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d004      	beq.n	8016656 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801664c:	4b05      	ldr	r3, [pc, #20]	@ (8016664 <pvTaskIncrementMutexHeldCount+0x24>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016652:	3201      	adds	r2, #1
 8016654:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8016656:	4b03      	ldr	r3, [pc, #12]	@ (8016664 <pvTaskIncrementMutexHeldCount+0x24>)
 8016658:	681b      	ldr	r3, [r3, #0]
	}
 801665a:	4618      	mov	r0, r3
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr
 8016664:	240018e0 	.word	0x240018e0

08016668 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b084      	sub	sp, #16
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016672:	4b21      	ldr	r3, [pc, #132]	@ (80166f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016678:	4b20      	ldr	r3, [pc, #128]	@ (80166fc <prvAddCurrentTaskToDelayedList+0x94>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	3304      	adds	r3, #4
 801667e:	4618      	mov	r0, r3
 8016680:	f7fd ff10 	bl	80144a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801668a:	d10a      	bne.n	80166a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d007      	beq.n	80166a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016692:	4b1a      	ldr	r3, [pc, #104]	@ (80166fc <prvAddCurrentTaskToDelayedList+0x94>)
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	3304      	adds	r3, #4
 8016698:	4619      	mov	r1, r3
 801669a:	4819      	ldr	r0, [pc, #100]	@ (8016700 <prvAddCurrentTaskToDelayedList+0x98>)
 801669c:	f7fd fea5 	bl	80143ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80166a0:	e026      	b.n	80166f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80166a2:	68fa      	ldr	r2, [r7, #12]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	4413      	add	r3, r2
 80166a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80166aa:	4b14      	ldr	r3, [pc, #80]	@ (80166fc <prvAddCurrentTaskToDelayedList+0x94>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	68ba      	ldr	r2, [r7, #8]
 80166b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80166b2:	68ba      	ldr	r2, [r7, #8]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d209      	bcs.n	80166ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166ba:	4b12      	ldr	r3, [pc, #72]	@ (8016704 <prvAddCurrentTaskToDelayedList+0x9c>)
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	4b0f      	ldr	r3, [pc, #60]	@ (80166fc <prvAddCurrentTaskToDelayedList+0x94>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	3304      	adds	r3, #4
 80166c4:	4619      	mov	r1, r3
 80166c6:	4610      	mov	r0, r2
 80166c8:	f7fd feb3 	bl	8014432 <vListInsert>
}
 80166cc:	e010      	b.n	80166f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016708 <prvAddCurrentTaskToDelayedList+0xa0>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	4b0a      	ldr	r3, [pc, #40]	@ (80166fc <prvAddCurrentTaskToDelayedList+0x94>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	3304      	adds	r3, #4
 80166d8:	4619      	mov	r1, r3
 80166da:	4610      	mov	r0, r2
 80166dc:	f7fd fea9 	bl	8014432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80166e0:	4b0a      	ldr	r3, [pc, #40]	@ (801670c <prvAddCurrentTaskToDelayedList+0xa4>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	68ba      	ldr	r2, [r7, #8]
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d202      	bcs.n	80166f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80166ea:	4a08      	ldr	r2, [pc, #32]	@ (801670c <prvAddCurrentTaskToDelayedList+0xa4>)
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	6013      	str	r3, [r2, #0]
}
 80166f0:	bf00      	nop
 80166f2:	3710      	adds	r7, #16
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	24001db8 	.word	0x24001db8
 80166fc:	240018e0 	.word	0x240018e0
 8016700:	24001da0 	.word	0x24001da0
 8016704:	24001d70 	.word	0x24001d70
 8016708:	24001d6c 	.word	0x24001d6c
 801670c:	24001dd4 	.word	0x24001dd4

08016710 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08a      	sub	sp, #40	@ 0x28
 8016714:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016716:	2300      	movs	r3, #0
 8016718:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801671a:	f000 fb13 	bl	8016d44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801671e:	4b1d      	ldr	r3, [pc, #116]	@ (8016794 <xTimerCreateTimerTask+0x84>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d021      	beq.n	801676a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016726:	2300      	movs	r3, #0
 8016728:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801672a:	2300      	movs	r3, #0
 801672c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801672e:	1d3a      	adds	r2, r7, #4
 8016730:	f107 0108 	add.w	r1, r7, #8
 8016734:	f107 030c 	add.w	r3, r7, #12
 8016738:	4618      	mov	r0, r3
 801673a:	f7fd fe0f 	bl	801435c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801673e:	6879      	ldr	r1, [r7, #4]
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	68fa      	ldr	r2, [r7, #12]
 8016744:	9202      	str	r2, [sp, #8]
 8016746:	9301      	str	r3, [sp, #4]
 8016748:	2302      	movs	r3, #2
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	2300      	movs	r3, #0
 801674e:	460a      	mov	r2, r1
 8016750:	4911      	ldr	r1, [pc, #68]	@ (8016798 <xTimerCreateTimerTask+0x88>)
 8016752:	4812      	ldr	r0, [pc, #72]	@ (801679c <xTimerCreateTimerTask+0x8c>)
 8016754:	f7fe fdbe 	bl	80152d4 <xTaskCreateStatic>
 8016758:	4603      	mov	r3, r0
 801675a:	4a11      	ldr	r2, [pc, #68]	@ (80167a0 <xTimerCreateTimerTask+0x90>)
 801675c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801675e:	4b10      	ldr	r3, [pc, #64]	@ (80167a0 <xTimerCreateTimerTask+0x90>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d001      	beq.n	801676a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016766:	2301      	movs	r3, #1
 8016768:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d10b      	bne.n	8016788 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016774:	f383 8811 	msr	BASEPRI, r3
 8016778:	f3bf 8f6f 	isb	sy
 801677c:	f3bf 8f4f 	dsb	sy
 8016780:	613b      	str	r3, [r7, #16]
}
 8016782:	bf00      	nop
 8016784:	bf00      	nop
 8016786:	e7fd      	b.n	8016784 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016788:	697b      	ldr	r3, [r7, #20]
}
 801678a:	4618      	mov	r0, r3
 801678c:	3718      	adds	r7, #24
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	24001e10 	.word	0x24001e10
 8016798:	0801ad34 	.word	0x0801ad34
 801679c:	080168dd 	.word	0x080168dd
 80167a0:	24001e14 	.word	0x24001e14

080167a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b08a      	sub	sp, #40	@ 0x28
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	60f8      	str	r0, [r7, #12]
 80167ac:	60b9      	str	r1, [r7, #8]
 80167ae:	607a      	str	r2, [r7, #4]
 80167b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80167b2:	2300      	movs	r3, #0
 80167b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10b      	bne.n	80167d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80167bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c0:	f383 8811 	msr	BASEPRI, r3
 80167c4:	f3bf 8f6f 	isb	sy
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	623b      	str	r3, [r7, #32]
}
 80167ce:	bf00      	nop
 80167d0:	bf00      	nop
 80167d2:	e7fd      	b.n	80167d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80167d4:	4b19      	ldr	r3, [pc, #100]	@ (801683c <xTimerGenericCommand+0x98>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d02a      	beq.n	8016832 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	2b05      	cmp	r3, #5
 80167ec:	dc18      	bgt.n	8016820 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80167ee:	f7ff fdad 	bl	801634c <xTaskGetSchedulerState>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	d109      	bne.n	801680c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80167f8:	4b10      	ldr	r3, [pc, #64]	@ (801683c <xTimerGenericCommand+0x98>)
 80167fa:	6818      	ldr	r0, [r3, #0]
 80167fc:	f107 0110 	add.w	r1, r7, #16
 8016800:	2300      	movs	r3, #0
 8016802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016804:	f7fd ffbe 	bl	8014784 <xQueueGenericSend>
 8016808:	6278      	str	r0, [r7, #36]	@ 0x24
 801680a:	e012      	b.n	8016832 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801680c:	4b0b      	ldr	r3, [pc, #44]	@ (801683c <xTimerGenericCommand+0x98>)
 801680e:	6818      	ldr	r0, [r3, #0]
 8016810:	f107 0110 	add.w	r1, r7, #16
 8016814:	2300      	movs	r3, #0
 8016816:	2200      	movs	r2, #0
 8016818:	f7fd ffb4 	bl	8014784 <xQueueGenericSend>
 801681c:	6278      	str	r0, [r7, #36]	@ 0x24
 801681e:	e008      	b.n	8016832 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016820:	4b06      	ldr	r3, [pc, #24]	@ (801683c <xTimerGenericCommand+0x98>)
 8016822:	6818      	ldr	r0, [r3, #0]
 8016824:	f107 0110 	add.w	r1, r7, #16
 8016828:	2300      	movs	r3, #0
 801682a:	683a      	ldr	r2, [r7, #0]
 801682c:	f7fe f8ac 	bl	8014988 <xQueueGenericSendFromISR>
 8016830:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016834:	4618      	mov	r0, r3
 8016836:	3728      	adds	r7, #40	@ 0x28
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}
 801683c:	24001e10 	.word	0x24001e10

08016840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b088      	sub	sp, #32
 8016844:	af02      	add	r7, sp, #8
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801684a:	4b23      	ldr	r3, [pc, #140]	@ (80168d8 <prvProcessExpiredTimer+0x98>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	68db      	ldr	r3, [r3, #12]
 8016852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	3304      	adds	r3, #4
 8016858:	4618      	mov	r0, r3
 801685a:	f7fd fe23 	bl	80144a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016864:	f003 0304 	and.w	r3, r3, #4
 8016868:	2b00      	cmp	r3, #0
 801686a:	d023      	beq.n	80168b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	699a      	ldr	r2, [r3, #24]
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	18d1      	adds	r1, r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	6978      	ldr	r0, [r7, #20]
 801687a:	f000 f8d5 	bl	8016a28 <prvInsertTimerInActiveList>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d020      	beq.n	80168c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016884:	2300      	movs	r3, #0
 8016886:	9300      	str	r3, [sp, #0]
 8016888:	2300      	movs	r3, #0
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	2100      	movs	r1, #0
 801688e:	6978      	ldr	r0, [r7, #20]
 8016890:	f7ff ff88 	bl	80167a4 <xTimerGenericCommand>
 8016894:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d114      	bne.n	80168c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168a0:	f383 8811 	msr	BASEPRI, r3
 80168a4:	f3bf 8f6f 	isb	sy
 80168a8:	f3bf 8f4f 	dsb	sy
 80168ac:	60fb      	str	r3, [r7, #12]
}
 80168ae:	bf00      	nop
 80168b0:	bf00      	nop
 80168b2:	e7fd      	b.n	80168b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80168ba:	f023 0301 	bic.w	r3, r3, #1
 80168be:	b2da      	uxtb	r2, r3
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	6a1b      	ldr	r3, [r3, #32]
 80168ca:	6978      	ldr	r0, [r7, #20]
 80168cc:	4798      	blx	r3
}
 80168ce:	bf00      	nop
 80168d0:	3718      	adds	r7, #24
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
 80168d6:	bf00      	nop
 80168d8:	24001e08 	.word	0x24001e08

080168dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80168e4:	f107 0308 	add.w	r3, r7, #8
 80168e8:	4618      	mov	r0, r3
 80168ea:	f000 f859 	bl	80169a0 <prvGetNextExpireTime>
 80168ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	4619      	mov	r1, r3
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	f000 f805 	bl	8016904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80168fa:	f000 f8d7 	bl	8016aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80168fe:	bf00      	nop
 8016900:	e7f0      	b.n	80168e4 <prvTimerTask+0x8>
	...

08016904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b084      	sub	sp, #16
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
 801690c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801690e:	f7ff f929 	bl	8015b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016912:	f107 0308 	add.w	r3, r7, #8
 8016916:	4618      	mov	r0, r3
 8016918:	f000 f866 	bl	80169e8 <prvSampleTimeNow>
 801691c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d130      	bne.n	8016986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d10a      	bne.n	8016940 <prvProcessTimerOrBlockTask+0x3c>
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	429a      	cmp	r2, r3
 8016930:	d806      	bhi.n	8016940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016932:	f7ff f925 	bl	8015b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016936:	68f9      	ldr	r1, [r7, #12]
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f7ff ff81 	bl	8016840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801693e:	e024      	b.n	801698a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d008      	beq.n	8016958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016946:	4b13      	ldr	r3, [pc, #76]	@ (8016994 <prvProcessTimerOrBlockTask+0x90>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d101      	bne.n	8016954 <prvProcessTimerOrBlockTask+0x50>
 8016950:	2301      	movs	r3, #1
 8016952:	e000      	b.n	8016956 <prvProcessTimerOrBlockTask+0x52>
 8016954:	2300      	movs	r3, #0
 8016956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016958:	4b0f      	ldr	r3, [pc, #60]	@ (8016998 <prvProcessTimerOrBlockTask+0x94>)
 801695a:	6818      	ldr	r0, [r3, #0]
 801695c:	687a      	ldr	r2, [r7, #4]
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	683a      	ldr	r2, [r7, #0]
 8016964:	4619      	mov	r1, r3
 8016966:	f7fe fc81 	bl	801526c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801696a:	f7ff f909 	bl	8015b80 <xTaskResumeAll>
 801696e:	4603      	mov	r3, r0
 8016970:	2b00      	cmp	r3, #0
 8016972:	d10a      	bne.n	801698a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016974:	4b09      	ldr	r3, [pc, #36]	@ (801699c <prvProcessTimerOrBlockTask+0x98>)
 8016976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801697a:	601a      	str	r2, [r3, #0]
 801697c:	f3bf 8f4f 	dsb	sy
 8016980:	f3bf 8f6f 	isb	sy
}
 8016984:	e001      	b.n	801698a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016986:	f7ff f8fb 	bl	8015b80 <xTaskResumeAll>
}
 801698a:	bf00      	nop
 801698c:	3710      	adds	r7, #16
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
 8016992:	bf00      	nop
 8016994:	24001e0c 	.word	0x24001e0c
 8016998:	24001e10 	.word	0x24001e10
 801699c:	e000ed04 	.word	0xe000ed04

080169a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80169a0:	b480      	push	{r7}
 80169a2:	b085      	sub	sp, #20
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80169a8:	4b0e      	ldr	r3, [pc, #56]	@ (80169e4 <prvGetNextExpireTime+0x44>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d101      	bne.n	80169b6 <prvGetNextExpireTime+0x16>
 80169b2:	2201      	movs	r2, #1
 80169b4:	e000      	b.n	80169b8 <prvGetNextExpireTime+0x18>
 80169b6:	2200      	movs	r2, #0
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d105      	bne.n	80169d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80169c4:	4b07      	ldr	r3, [pc, #28]	@ (80169e4 <prvGetNextExpireTime+0x44>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	60fb      	str	r3, [r7, #12]
 80169ce:	e001      	b.n	80169d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80169d0:	2300      	movs	r3, #0
 80169d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80169d4:	68fb      	ldr	r3, [r7, #12]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3714      	adds	r7, #20
 80169da:	46bd      	mov	sp, r7
 80169dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop
 80169e4:	24001e08 	.word	0x24001e08

080169e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b084      	sub	sp, #16
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80169f0:	f7ff f964 	bl	8015cbc <xTaskGetTickCount>
 80169f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80169f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016a24 <prvSampleTimeNow+0x3c>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	68fa      	ldr	r2, [r7, #12]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d205      	bcs.n	8016a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016a00:	f000 f93a 	bl	8016c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2201      	movs	r2, #1
 8016a08:	601a      	str	r2, [r3, #0]
 8016a0a:	e002      	b.n	8016a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016a12:	4a04      	ldr	r2, [pc, #16]	@ (8016a24 <prvSampleTimeNow+0x3c>)
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016a18:	68fb      	ldr	r3, [r7, #12]
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	24001e18 	.word	0x24001e18

08016a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b086      	sub	sp, #24
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	607a      	str	r2, [r7, #4]
 8016a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016a36:	2300      	movs	r3, #0
 8016a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	68ba      	ldr	r2, [r7, #8]
 8016a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	68fa      	ldr	r2, [r7, #12]
 8016a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016a46:	68ba      	ldr	r2, [r7, #8]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d812      	bhi.n	8016a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a4e:	687a      	ldr	r2, [r7, #4]
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	1ad2      	subs	r2, r2, r3
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	699b      	ldr	r3, [r3, #24]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d302      	bcc.n	8016a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	617b      	str	r3, [r7, #20]
 8016a60:	e01b      	b.n	8016a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016a62:	4b10      	ldr	r3, [pc, #64]	@ (8016aa4 <prvInsertTimerInActiveList+0x7c>)
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	3304      	adds	r3, #4
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	4610      	mov	r0, r2
 8016a6e:	f7fd fce0 	bl	8014432 <vListInsert>
 8016a72:	e012      	b.n	8016a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d206      	bcs.n	8016a8a <prvInsertTimerInActiveList+0x62>
 8016a7c:	68ba      	ldr	r2, [r7, #8]
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d302      	bcc.n	8016a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016a84:	2301      	movs	r3, #1
 8016a86:	617b      	str	r3, [r7, #20]
 8016a88:	e007      	b.n	8016a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016a8a:	4b07      	ldr	r3, [pc, #28]	@ (8016aa8 <prvInsertTimerInActiveList+0x80>)
 8016a8c:	681a      	ldr	r2, [r3, #0]
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	3304      	adds	r3, #4
 8016a92:	4619      	mov	r1, r3
 8016a94:	4610      	mov	r0, r2
 8016a96:	f7fd fccc 	bl	8014432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016a9a:	697b      	ldr	r3, [r7, #20]
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3718      	adds	r7, #24
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	24001e0c 	.word	0x24001e0c
 8016aa8:	24001e08 	.word	0x24001e08

08016aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b08e      	sub	sp, #56	@ 0x38
 8016ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016ab2:	e0ce      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	da19      	bge.n	8016aee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016aba:	1d3b      	adds	r3, r7, #4
 8016abc:	3304      	adds	r3, #4
 8016abe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10b      	bne.n	8016ade <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	61fb      	str	r3, [r7, #28]
}
 8016ad8:	bf00      	nop
 8016ada:	bf00      	nop
 8016adc:	e7fd      	b.n	8016ada <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ae4:	6850      	ldr	r0, [r2, #4]
 8016ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ae8:	6892      	ldr	r2, [r2, #8]
 8016aea:	4611      	mov	r1, r2
 8016aec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	f2c0 80ae 	blt.w	8016c52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016afc:	695b      	ldr	r3, [r3, #20]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d004      	beq.n	8016b0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b04:	3304      	adds	r3, #4
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fd fccc 	bl	80144a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016b0c:	463b      	mov	r3, r7
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7ff ff6a 	bl	80169e8 <prvSampleTimeNow>
 8016b14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2b09      	cmp	r3, #9
 8016b1a:	f200 8097 	bhi.w	8016c4c <prvProcessReceivedCommands+0x1a0>
 8016b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8016b24 <prvProcessReceivedCommands+0x78>)
 8016b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b24:	08016b4d 	.word	0x08016b4d
 8016b28:	08016b4d 	.word	0x08016b4d
 8016b2c:	08016b4d 	.word	0x08016b4d
 8016b30:	08016bc3 	.word	0x08016bc3
 8016b34:	08016bd7 	.word	0x08016bd7
 8016b38:	08016c23 	.word	0x08016c23
 8016b3c:	08016b4d 	.word	0x08016b4d
 8016b40:	08016b4d 	.word	0x08016b4d
 8016b44:	08016bc3 	.word	0x08016bc3
 8016b48:	08016bd7 	.word	0x08016bd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b52:	f043 0301 	orr.w	r3, r3, #1
 8016b56:	b2da      	uxtb	r2, r3
 8016b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016b5e:	68ba      	ldr	r2, [r7, #8]
 8016b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b62:	699b      	ldr	r3, [r3, #24]
 8016b64:	18d1      	adds	r1, r2, r3
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b6c:	f7ff ff5c 	bl	8016a28 <prvInsertTimerInActiveList>
 8016b70:	4603      	mov	r3, r0
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d06c      	beq.n	8016c50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b78:	6a1b      	ldr	r3, [r3, #32]
 8016b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b84:	f003 0304 	and.w	r3, r3, #4
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d061      	beq.n	8016c50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016b8c:	68ba      	ldr	r2, [r7, #8]
 8016b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b90:	699b      	ldr	r3, [r3, #24]
 8016b92:	441a      	add	r2, r3
 8016b94:	2300      	movs	r3, #0
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	2300      	movs	r3, #0
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b9e:	f7ff fe01 	bl	80167a4 <xTimerGenericCommand>
 8016ba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016ba4:	6a3b      	ldr	r3, [r7, #32]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d152      	bne.n	8016c50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8016baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bae:	f383 8811 	msr	BASEPRI, r3
 8016bb2:	f3bf 8f6f 	isb	sy
 8016bb6:	f3bf 8f4f 	dsb	sy
 8016bba:	61bb      	str	r3, [r7, #24]
}
 8016bbc:	bf00      	nop
 8016bbe:	bf00      	nop
 8016bc0:	e7fd      	b.n	8016bbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016bc8:	f023 0301 	bic.w	r3, r3, #1
 8016bcc:	b2da      	uxtb	r2, r3
 8016bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016bd4:	e03d      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016bdc:	f043 0301 	orr.w	r3, r3, #1
 8016be0:	b2da      	uxtb	r2, r3
 8016be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016be8:	68ba      	ldr	r2, [r7, #8]
 8016bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bf0:	699b      	ldr	r3, [r3, #24]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d10b      	bne.n	8016c0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8016bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	617b      	str	r3, [r7, #20]
}
 8016c08:	bf00      	nop
 8016c0a:	bf00      	nop
 8016c0c:	e7fd      	b.n	8016c0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c10:	699a      	ldr	r2, [r3, #24]
 8016c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c14:	18d1      	adds	r1, r2, r3
 8016c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c1c:	f7ff ff04 	bl	8016a28 <prvInsertTimerInActiveList>
					break;
 8016c20:	e017      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016c28:	f003 0302 	and.w	r3, r3, #2
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d103      	bne.n	8016c38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c32:	f000 fbe9 	bl	8017408 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016c36:	e00c      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016c3e:	f023 0301 	bic.w	r3, r3, #1
 8016c42:	b2da      	uxtb	r2, r3
 8016c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016c4a:	e002      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8016c4c:	bf00      	nop
 8016c4e:	e000      	b.n	8016c52 <prvProcessReceivedCommands+0x1a6>
					break;
 8016c50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016c52:	4b08      	ldr	r3, [pc, #32]	@ (8016c74 <prvProcessReceivedCommands+0x1c8>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	1d39      	adds	r1, r7, #4
 8016c58:	2200      	movs	r2, #0
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fd ffc2 	bl	8014be4 <xQueueReceive>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f47f af26 	bne.w	8016ab4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016c68:	bf00      	nop
 8016c6a:	bf00      	nop
 8016c6c:	3730      	adds	r7, #48	@ 0x30
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	24001e10 	.word	0x24001e10

08016c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b088      	sub	sp, #32
 8016c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016c7e:	e049      	b.n	8016d14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016c80:	4b2e      	ldr	r3, [pc, #184]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	68db      	ldr	r3, [r3, #12]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	68db      	ldr	r3, [r3, #12]
 8016c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	3304      	adds	r3, #4
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7fd fc03 	bl	80144a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	6a1b      	ldr	r3, [r3, #32]
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016cac:	f003 0304 	and.w	r3, r3, #4
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d02f      	beq.n	8016d14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	699b      	ldr	r3, [r3, #24]
 8016cb8:	693a      	ldr	r2, [r7, #16]
 8016cba:	4413      	add	r3, r2
 8016cbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016cbe:	68ba      	ldr	r2, [r7, #8]
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d90e      	bls.n	8016ce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	68ba      	ldr	r2, [r7, #8]
 8016cca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	68fa      	ldr	r2, [r7, #12]
 8016cd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	3304      	adds	r3, #4
 8016cda:	4619      	mov	r1, r3
 8016cdc:	4610      	mov	r0, r2
 8016cde:	f7fd fba8 	bl	8014432 <vListInsert>
 8016ce2:	e017      	b.n	8016d14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	9300      	str	r3, [sp, #0]
 8016ce8:	2300      	movs	r3, #0
 8016cea:	693a      	ldr	r2, [r7, #16]
 8016cec:	2100      	movs	r1, #0
 8016cee:	68f8      	ldr	r0, [r7, #12]
 8016cf0:	f7ff fd58 	bl	80167a4 <xTimerGenericCommand>
 8016cf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d10b      	bne.n	8016d14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d00:	f383 8811 	msr	BASEPRI, r3
 8016d04:	f3bf 8f6f 	isb	sy
 8016d08:	f3bf 8f4f 	dsb	sy
 8016d0c:	603b      	str	r3, [r7, #0]
}
 8016d0e:	bf00      	nop
 8016d10:	bf00      	nop
 8016d12:	e7fd      	b.n	8016d10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016d14:	4b09      	ldr	r3, [pc, #36]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d1b0      	bne.n	8016c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016d1e:	4b07      	ldr	r3, [pc, #28]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016d24:	4b06      	ldr	r3, [pc, #24]	@ (8016d40 <prvSwitchTimerLists+0xc8>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	4a04      	ldr	r2, [pc, #16]	@ (8016d3c <prvSwitchTimerLists+0xc4>)
 8016d2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016d2c:	4a04      	ldr	r2, [pc, #16]	@ (8016d40 <prvSwitchTimerLists+0xc8>)
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	6013      	str	r3, [r2, #0]
}
 8016d32:	bf00      	nop
 8016d34:	3718      	adds	r7, #24
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	24001e08 	.word	0x24001e08
 8016d40:	24001e0c 	.word	0x24001e0c

08016d44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016d4a:	f000 f96d 	bl	8017028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016d4e:	4b15      	ldr	r3, [pc, #84]	@ (8016da4 <prvCheckForValidListAndQueue+0x60>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d120      	bne.n	8016d98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016d56:	4814      	ldr	r0, [pc, #80]	@ (8016da8 <prvCheckForValidListAndQueue+0x64>)
 8016d58:	f7fd fb1a 	bl	8014390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016d5c:	4813      	ldr	r0, [pc, #76]	@ (8016dac <prvCheckForValidListAndQueue+0x68>)
 8016d5e:	f7fd fb17 	bl	8014390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016d62:	4b13      	ldr	r3, [pc, #76]	@ (8016db0 <prvCheckForValidListAndQueue+0x6c>)
 8016d64:	4a10      	ldr	r2, [pc, #64]	@ (8016da8 <prvCheckForValidListAndQueue+0x64>)
 8016d66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016d68:	4b12      	ldr	r3, [pc, #72]	@ (8016db4 <prvCheckForValidListAndQueue+0x70>)
 8016d6a:	4a10      	ldr	r2, [pc, #64]	@ (8016dac <prvCheckForValidListAndQueue+0x68>)
 8016d6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9300      	str	r3, [sp, #0]
 8016d72:	4b11      	ldr	r3, [pc, #68]	@ (8016db8 <prvCheckForValidListAndQueue+0x74>)
 8016d74:	4a11      	ldr	r2, [pc, #68]	@ (8016dbc <prvCheckForValidListAndQueue+0x78>)
 8016d76:	2110      	movs	r1, #16
 8016d78:	200a      	movs	r0, #10
 8016d7a:	f7fd fc27 	bl	80145cc <xQueueGenericCreateStatic>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	4a08      	ldr	r2, [pc, #32]	@ (8016da4 <prvCheckForValidListAndQueue+0x60>)
 8016d82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016d84:	4b07      	ldr	r3, [pc, #28]	@ (8016da4 <prvCheckForValidListAndQueue+0x60>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d005      	beq.n	8016d98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016d8c:	4b05      	ldr	r3, [pc, #20]	@ (8016da4 <prvCheckForValidListAndQueue+0x60>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	490b      	ldr	r1, [pc, #44]	@ (8016dc0 <prvCheckForValidListAndQueue+0x7c>)
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7fe fa40 	bl	8015218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016d98:	f000 f978 	bl	801708c <vPortExitCritical>
}
 8016d9c:	bf00      	nop
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	24001e10 	.word	0x24001e10
 8016da8:	24001de0 	.word	0x24001de0
 8016dac:	24001df4 	.word	0x24001df4
 8016db0:	24001e08 	.word	0x24001e08
 8016db4:	24001e0c 	.word	0x24001e0c
 8016db8:	24001ebc 	.word	0x24001ebc
 8016dbc:	24001e1c 	.word	0x24001e1c
 8016dc0:	0801ad3c 	.word	0x0801ad3c

08016dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b085      	sub	sp, #20
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60f8      	str	r0, [r7, #12]
 8016dcc:	60b9      	str	r1, [r7, #8]
 8016dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	3b04      	subs	r3, #4
 8016dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	3b04      	subs	r3, #4
 8016de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	f023 0201 	bic.w	r2, r3, #1
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	3b04      	subs	r3, #4
 8016df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016df4:	4a0c      	ldr	r2, [pc, #48]	@ (8016e28 <pxPortInitialiseStack+0x64>)
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	3b14      	subs	r3, #20
 8016dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016e00:	687a      	ldr	r2, [r7, #4]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3b04      	subs	r3, #4
 8016e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	f06f 0202 	mvn.w	r2, #2
 8016e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	3b20      	subs	r3, #32
 8016e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3714      	adds	r7, #20
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr
 8016e28:	08016e2d 	.word	0x08016e2d

08016e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b085      	sub	sp, #20
 8016e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016e36:	4b13      	ldr	r3, [pc, #76]	@ (8016e84 <prvTaskExitError+0x58>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016e3e:	d00b      	beq.n	8016e58 <prvTaskExitError+0x2c>
	__asm volatile
 8016e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e44:	f383 8811 	msr	BASEPRI, r3
 8016e48:	f3bf 8f6f 	isb	sy
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	60fb      	str	r3, [r7, #12]
}
 8016e52:	bf00      	nop
 8016e54:	bf00      	nop
 8016e56:	e7fd      	b.n	8016e54 <prvTaskExitError+0x28>
	__asm volatile
 8016e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e5c:	f383 8811 	msr	BASEPRI, r3
 8016e60:	f3bf 8f6f 	isb	sy
 8016e64:	f3bf 8f4f 	dsb	sy
 8016e68:	60bb      	str	r3, [r7, #8]
}
 8016e6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016e6c:	bf00      	nop
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d0fc      	beq.n	8016e6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016e74:	bf00      	nop
 8016e76:	bf00      	nop
 8016e78:	3714      	adds	r7, #20
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr
 8016e82:	bf00      	nop
 8016e84:	24000020 	.word	0x24000020
	...

08016e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016e90:	4b07      	ldr	r3, [pc, #28]	@ (8016eb0 <pxCurrentTCBConst2>)
 8016e92:	6819      	ldr	r1, [r3, #0]
 8016e94:	6808      	ldr	r0, [r1, #0]
 8016e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9a:	f380 8809 	msr	PSP, r0
 8016e9e:	f3bf 8f6f 	isb	sy
 8016ea2:	f04f 0000 	mov.w	r0, #0
 8016ea6:	f380 8811 	msr	BASEPRI, r0
 8016eaa:	4770      	bx	lr
 8016eac:	f3af 8000 	nop.w

08016eb0 <pxCurrentTCBConst2>:
 8016eb0:	240018e0 	.word	0x240018e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016eb4:	bf00      	nop
 8016eb6:	bf00      	nop

08016eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016eb8:	4808      	ldr	r0, [pc, #32]	@ (8016edc <prvPortStartFirstTask+0x24>)
 8016eba:	6800      	ldr	r0, [r0, #0]
 8016ebc:	6800      	ldr	r0, [r0, #0]
 8016ebe:	f380 8808 	msr	MSP, r0
 8016ec2:	f04f 0000 	mov.w	r0, #0
 8016ec6:	f380 8814 	msr	CONTROL, r0
 8016eca:	b662      	cpsie	i
 8016ecc:	b661      	cpsie	f
 8016ece:	f3bf 8f4f 	dsb	sy
 8016ed2:	f3bf 8f6f 	isb	sy
 8016ed6:	df00      	svc	0
 8016ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016eda:	bf00      	nop
 8016edc:	e000ed08 	.word	0xe000ed08

08016ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b086      	sub	sp, #24
 8016ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016ee6:	4b47      	ldr	r3, [pc, #284]	@ (8017004 <xPortStartScheduler+0x124>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	4a47      	ldr	r2, [pc, #284]	@ (8017008 <xPortStartScheduler+0x128>)
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d10b      	bne.n	8016f08 <xPortStartScheduler+0x28>
	__asm volatile
 8016ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ef4:	f383 8811 	msr	BASEPRI, r3
 8016ef8:	f3bf 8f6f 	isb	sy
 8016efc:	f3bf 8f4f 	dsb	sy
 8016f00:	60fb      	str	r3, [r7, #12]
}
 8016f02:	bf00      	nop
 8016f04:	bf00      	nop
 8016f06:	e7fd      	b.n	8016f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016f08:	4b3e      	ldr	r3, [pc, #248]	@ (8017004 <xPortStartScheduler+0x124>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	4a3f      	ldr	r2, [pc, #252]	@ (801700c <xPortStartScheduler+0x12c>)
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	d10b      	bne.n	8016f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8016f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f16:	f383 8811 	msr	BASEPRI, r3
 8016f1a:	f3bf 8f6f 	isb	sy
 8016f1e:	f3bf 8f4f 	dsb	sy
 8016f22:	613b      	str	r3, [r7, #16]
}
 8016f24:	bf00      	nop
 8016f26:	bf00      	nop
 8016f28:	e7fd      	b.n	8016f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016f2a:	4b39      	ldr	r3, [pc, #228]	@ (8017010 <xPortStartScheduler+0x130>)
 8016f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	22ff      	movs	r2, #255	@ 0xff
 8016f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016f44:	78fb      	ldrb	r3, [r7, #3]
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016f4c:	b2da      	uxtb	r2, r3
 8016f4e:	4b31      	ldr	r3, [pc, #196]	@ (8017014 <xPortStartScheduler+0x134>)
 8016f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016f52:	4b31      	ldr	r3, [pc, #196]	@ (8017018 <xPortStartScheduler+0x138>)
 8016f54:	2207      	movs	r2, #7
 8016f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f58:	e009      	b.n	8016f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8016f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8017018 <xPortStartScheduler+0x138>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	4a2d      	ldr	r2, [pc, #180]	@ (8017018 <xPortStartScheduler+0x138>)
 8016f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016f64:	78fb      	ldrb	r3, [r7, #3]
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f6e:	78fb      	ldrb	r3, [r7, #3]
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016f76:	2b80      	cmp	r3, #128	@ 0x80
 8016f78:	d0ef      	beq.n	8016f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016f7a:	4b27      	ldr	r3, [pc, #156]	@ (8017018 <xPortStartScheduler+0x138>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f1c3 0307 	rsb	r3, r3, #7
 8016f82:	2b04      	cmp	r3, #4
 8016f84:	d00b      	beq.n	8016f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8016f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f8a:	f383 8811 	msr	BASEPRI, r3
 8016f8e:	f3bf 8f6f 	isb	sy
 8016f92:	f3bf 8f4f 	dsb	sy
 8016f96:	60bb      	str	r3, [r7, #8]
}
 8016f98:	bf00      	nop
 8016f9a:	bf00      	nop
 8016f9c:	e7fd      	b.n	8016f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8017018 <xPortStartScheduler+0x138>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	021b      	lsls	r3, r3, #8
 8016fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8017018 <xPortStartScheduler+0x138>)
 8016fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8017018 <xPortStartScheduler+0x138>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016fb0:	4a19      	ldr	r2, [pc, #100]	@ (8017018 <xPortStartScheduler+0x138>)
 8016fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	b2da      	uxtb	r2, r3
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016fbc:	4b17      	ldr	r3, [pc, #92]	@ (801701c <xPortStartScheduler+0x13c>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	4a16      	ldr	r2, [pc, #88]	@ (801701c <xPortStartScheduler+0x13c>)
 8016fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016fc8:	4b14      	ldr	r3, [pc, #80]	@ (801701c <xPortStartScheduler+0x13c>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	4a13      	ldr	r2, [pc, #76]	@ (801701c <xPortStartScheduler+0x13c>)
 8016fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016fd4:	f000 f8da 	bl	801718c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016fd8:	4b11      	ldr	r3, [pc, #68]	@ (8017020 <xPortStartScheduler+0x140>)
 8016fda:	2200      	movs	r2, #0
 8016fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016fde:	f000 f8f9 	bl	80171d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016fe2:	4b10      	ldr	r3, [pc, #64]	@ (8017024 <xPortStartScheduler+0x144>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8017024 <xPortStartScheduler+0x144>)
 8016fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016fee:	f7ff ff63 	bl	8016eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016ff2:	f7fe ff2d 	bl	8015e50 <vTaskSwitchContext>
	prvTaskExitError();
 8016ff6:	f7ff ff19 	bl	8016e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016ffa:	2300      	movs	r3, #0
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3718      	adds	r7, #24
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	e000ed00 	.word	0xe000ed00
 8017008:	410fc271 	.word	0x410fc271
 801700c:	410fc270 	.word	0x410fc270
 8017010:	e000e400 	.word	0xe000e400
 8017014:	24001f0c 	.word	0x24001f0c
 8017018:	24001f10 	.word	0x24001f10
 801701c:	e000ed20 	.word	0xe000ed20
 8017020:	24000020 	.word	0x24000020
 8017024:	e000ef34 	.word	0xe000ef34

08017028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017028:	b480      	push	{r7}
 801702a:	b083      	sub	sp, #12
 801702c:	af00      	add	r7, sp, #0
	__asm volatile
 801702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017032:	f383 8811 	msr	BASEPRI, r3
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	607b      	str	r3, [r7, #4]
}
 8017040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017042:	4b10      	ldr	r3, [pc, #64]	@ (8017084 <vPortEnterCritical+0x5c>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	3301      	adds	r3, #1
 8017048:	4a0e      	ldr	r2, [pc, #56]	@ (8017084 <vPortEnterCritical+0x5c>)
 801704a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801704c:	4b0d      	ldr	r3, [pc, #52]	@ (8017084 <vPortEnterCritical+0x5c>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2b01      	cmp	r3, #1
 8017052:	d110      	bne.n	8017076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017054:	4b0c      	ldr	r3, [pc, #48]	@ (8017088 <vPortEnterCritical+0x60>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d00b      	beq.n	8017076 <vPortEnterCritical+0x4e>
	__asm volatile
 801705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017062:	f383 8811 	msr	BASEPRI, r3
 8017066:	f3bf 8f6f 	isb	sy
 801706a:	f3bf 8f4f 	dsb	sy
 801706e:	603b      	str	r3, [r7, #0]
}
 8017070:	bf00      	nop
 8017072:	bf00      	nop
 8017074:	e7fd      	b.n	8017072 <vPortEnterCritical+0x4a>
	}
}
 8017076:	bf00      	nop
 8017078:	370c      	adds	r7, #12
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr
 8017082:	bf00      	nop
 8017084:	24000020 	.word	0x24000020
 8017088:	e000ed04 	.word	0xe000ed04

0801708c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801708c:	b480      	push	{r7}
 801708e:	b083      	sub	sp, #12
 8017090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017092:	4b12      	ldr	r3, [pc, #72]	@ (80170dc <vPortExitCritical+0x50>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d10b      	bne.n	80170b2 <vPortExitCritical+0x26>
	__asm volatile
 801709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801709e:	f383 8811 	msr	BASEPRI, r3
 80170a2:	f3bf 8f6f 	isb	sy
 80170a6:	f3bf 8f4f 	dsb	sy
 80170aa:	607b      	str	r3, [r7, #4]
}
 80170ac:	bf00      	nop
 80170ae:	bf00      	nop
 80170b0:	e7fd      	b.n	80170ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80170b2:	4b0a      	ldr	r3, [pc, #40]	@ (80170dc <vPortExitCritical+0x50>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	3b01      	subs	r3, #1
 80170b8:	4a08      	ldr	r2, [pc, #32]	@ (80170dc <vPortExitCritical+0x50>)
 80170ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80170bc:	4b07      	ldr	r3, [pc, #28]	@ (80170dc <vPortExitCritical+0x50>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d105      	bne.n	80170d0 <vPortExitCritical+0x44>
 80170c4:	2300      	movs	r3, #0
 80170c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	f383 8811 	msr	BASEPRI, r3
}
 80170ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80170d0:	bf00      	nop
 80170d2:	370c      	adds	r7, #12
 80170d4:	46bd      	mov	sp, r7
 80170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170da:	4770      	bx	lr
 80170dc:	24000020 	.word	0x24000020

080170e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80170e0:	f3ef 8009 	mrs	r0, PSP
 80170e4:	f3bf 8f6f 	isb	sy
 80170e8:	4b15      	ldr	r3, [pc, #84]	@ (8017140 <pxCurrentTCBConst>)
 80170ea:	681a      	ldr	r2, [r3, #0]
 80170ec:	f01e 0f10 	tst.w	lr, #16
 80170f0:	bf08      	it	eq
 80170f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80170f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170fa:	6010      	str	r0, [r2, #0]
 80170fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017104:	f380 8811 	msr	BASEPRI, r0
 8017108:	f3bf 8f4f 	dsb	sy
 801710c:	f3bf 8f6f 	isb	sy
 8017110:	f7fe fe9e 	bl	8015e50 <vTaskSwitchContext>
 8017114:	f04f 0000 	mov.w	r0, #0
 8017118:	f380 8811 	msr	BASEPRI, r0
 801711c:	bc09      	pop	{r0, r3}
 801711e:	6819      	ldr	r1, [r3, #0]
 8017120:	6808      	ldr	r0, [r1, #0]
 8017122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017126:	f01e 0f10 	tst.w	lr, #16
 801712a:	bf08      	it	eq
 801712c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017130:	f380 8809 	msr	PSP, r0
 8017134:	f3bf 8f6f 	isb	sy
 8017138:	4770      	bx	lr
 801713a:	bf00      	nop
 801713c:	f3af 8000 	nop.w

08017140 <pxCurrentTCBConst>:
 8017140:	240018e0 	.word	0x240018e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017144:	bf00      	nop
 8017146:	bf00      	nop

08017148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
	__asm volatile
 801714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017152:	f383 8811 	msr	BASEPRI, r3
 8017156:	f3bf 8f6f 	isb	sy
 801715a:	f3bf 8f4f 	dsb	sy
 801715e:	607b      	str	r3, [r7, #4]
}
 8017160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017162:	f7fe fdbb 	bl	8015cdc <xTaskIncrementTick>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d003      	beq.n	8017174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801716c:	4b06      	ldr	r3, [pc, #24]	@ (8017188 <xPortSysTickHandler+0x40>)
 801716e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017172:	601a      	str	r2, [r3, #0]
 8017174:	2300      	movs	r3, #0
 8017176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	f383 8811 	msr	BASEPRI, r3
}
 801717e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017180:	bf00      	nop
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	e000ed04 	.word	0xe000ed04

0801718c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801718c:	b480      	push	{r7}
 801718e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017190:	4b0b      	ldr	r3, [pc, #44]	@ (80171c0 <vPortSetupTimerInterrupt+0x34>)
 8017192:	2200      	movs	r2, #0
 8017194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017196:	4b0b      	ldr	r3, [pc, #44]	@ (80171c4 <vPortSetupTimerInterrupt+0x38>)
 8017198:	2200      	movs	r2, #0
 801719a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801719c:	4b0a      	ldr	r3, [pc, #40]	@ (80171c8 <vPortSetupTimerInterrupt+0x3c>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	4a0a      	ldr	r2, [pc, #40]	@ (80171cc <vPortSetupTimerInterrupt+0x40>)
 80171a2:	fba2 2303 	umull	r2, r3, r2, r3
 80171a6:	099b      	lsrs	r3, r3, #6
 80171a8:	4a09      	ldr	r2, [pc, #36]	@ (80171d0 <vPortSetupTimerInterrupt+0x44>)
 80171aa:	3b01      	subs	r3, #1
 80171ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80171ae:	4b04      	ldr	r3, [pc, #16]	@ (80171c0 <vPortSetupTimerInterrupt+0x34>)
 80171b0:	2207      	movs	r2, #7
 80171b2:	601a      	str	r2, [r3, #0]
}
 80171b4:	bf00      	nop
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	e000e010 	.word	0xe000e010
 80171c4:	e000e018 	.word	0xe000e018
 80171c8:	24000010 	.word	0x24000010
 80171cc:	10624dd3 	.word	0x10624dd3
 80171d0:	e000e014 	.word	0xe000e014

080171d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80171d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80171e4 <vPortEnableVFP+0x10>
 80171d8:	6801      	ldr	r1, [r0, #0]
 80171da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80171de:	6001      	str	r1, [r0, #0]
 80171e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80171e2:	bf00      	nop
 80171e4:	e000ed88 	.word	0xe000ed88

080171e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80171e8:	b480      	push	{r7}
 80171ea:	b085      	sub	sp, #20
 80171ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80171ee:	f3ef 8305 	mrs	r3, IPSR
 80171f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2b0f      	cmp	r3, #15
 80171f8:	d915      	bls.n	8017226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80171fa:	4a18      	ldr	r2, [pc, #96]	@ (801725c <vPortValidateInterruptPriority+0x74>)
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	4413      	add	r3, r2
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017204:	4b16      	ldr	r3, [pc, #88]	@ (8017260 <vPortValidateInterruptPriority+0x78>)
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	7afa      	ldrb	r2, [r7, #11]
 801720a:	429a      	cmp	r2, r3
 801720c:	d20b      	bcs.n	8017226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017212:	f383 8811 	msr	BASEPRI, r3
 8017216:	f3bf 8f6f 	isb	sy
 801721a:	f3bf 8f4f 	dsb	sy
 801721e:	607b      	str	r3, [r7, #4]
}
 8017220:	bf00      	nop
 8017222:	bf00      	nop
 8017224:	e7fd      	b.n	8017222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017226:	4b0f      	ldr	r3, [pc, #60]	@ (8017264 <vPortValidateInterruptPriority+0x7c>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801722e:	4b0e      	ldr	r3, [pc, #56]	@ (8017268 <vPortValidateInterruptPriority+0x80>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	429a      	cmp	r2, r3
 8017234:	d90b      	bls.n	801724e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8017236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801723a:	f383 8811 	msr	BASEPRI, r3
 801723e:	f3bf 8f6f 	isb	sy
 8017242:	f3bf 8f4f 	dsb	sy
 8017246:	603b      	str	r3, [r7, #0]
}
 8017248:	bf00      	nop
 801724a:	bf00      	nop
 801724c:	e7fd      	b.n	801724a <vPortValidateInterruptPriority+0x62>
	}
 801724e:	bf00      	nop
 8017250:	3714      	adds	r7, #20
 8017252:	46bd      	mov	sp, r7
 8017254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	e000e3f0 	.word	0xe000e3f0
 8017260:	24001f0c 	.word	0x24001f0c
 8017264:	e000ed0c 	.word	0xe000ed0c
 8017268:	24001f10 	.word	0x24001f10

0801726c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b08a      	sub	sp, #40	@ 0x28
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017274:	2300      	movs	r3, #0
 8017276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017278:	f7fe fc74 	bl	8015b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801727c:	4b5c      	ldr	r3, [pc, #368]	@ (80173f0 <pvPortMalloc+0x184>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d101      	bne.n	8017288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017284:	f000 f924 	bl	80174d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017288:	4b5a      	ldr	r3, [pc, #360]	@ (80173f4 <pvPortMalloc+0x188>)
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	4013      	ands	r3, r2
 8017290:	2b00      	cmp	r3, #0
 8017292:	f040 8095 	bne.w	80173c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d01e      	beq.n	80172da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801729c:	2208      	movs	r2, #8
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4413      	add	r3, r2
 80172a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f003 0307 	and.w	r3, r3, #7
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d015      	beq.n	80172da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f023 0307 	bic.w	r3, r3, #7
 80172b4:	3308      	adds	r3, #8
 80172b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f003 0307 	and.w	r3, r3, #7
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d00b      	beq.n	80172da <pvPortMalloc+0x6e>
	__asm volatile
 80172c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172c6:	f383 8811 	msr	BASEPRI, r3
 80172ca:	f3bf 8f6f 	isb	sy
 80172ce:	f3bf 8f4f 	dsb	sy
 80172d2:	617b      	str	r3, [r7, #20]
}
 80172d4:	bf00      	nop
 80172d6:	bf00      	nop
 80172d8:	e7fd      	b.n	80172d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d06f      	beq.n	80173c0 <pvPortMalloc+0x154>
 80172e0:	4b45      	ldr	r3, [pc, #276]	@ (80173f8 <pvPortMalloc+0x18c>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	687a      	ldr	r2, [r7, #4]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d86a      	bhi.n	80173c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80172ea:	4b44      	ldr	r3, [pc, #272]	@ (80173fc <pvPortMalloc+0x190>)
 80172ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80172ee:	4b43      	ldr	r3, [pc, #268]	@ (80173fc <pvPortMalloc+0x190>)
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80172f4:	e004      	b.n	8017300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80172f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80172fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017302:	685b      	ldr	r3, [r3, #4]
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	429a      	cmp	r2, r3
 8017308:	d903      	bls.n	8017312 <pvPortMalloc+0xa6>
 801730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d1f1      	bne.n	80172f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017312:	4b37      	ldr	r3, [pc, #220]	@ (80173f0 <pvPortMalloc+0x184>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017318:	429a      	cmp	r2, r3
 801731a:	d051      	beq.n	80173c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801731c:	6a3b      	ldr	r3, [r7, #32]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2208      	movs	r2, #8
 8017322:	4413      	add	r3, r2
 8017324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017330:	685a      	ldr	r2, [r3, #4]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	1ad2      	subs	r2, r2, r3
 8017336:	2308      	movs	r3, #8
 8017338:	005b      	lsls	r3, r3, #1
 801733a:	429a      	cmp	r2, r3
 801733c:	d920      	bls.n	8017380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801733e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	4413      	add	r3, r2
 8017344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017346:	69bb      	ldr	r3, [r7, #24]
 8017348:	f003 0307 	and.w	r3, r3, #7
 801734c:	2b00      	cmp	r3, #0
 801734e:	d00b      	beq.n	8017368 <pvPortMalloc+0xfc>
	__asm volatile
 8017350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017354:	f383 8811 	msr	BASEPRI, r3
 8017358:	f3bf 8f6f 	isb	sy
 801735c:	f3bf 8f4f 	dsb	sy
 8017360:	613b      	str	r3, [r7, #16]
}
 8017362:	bf00      	nop
 8017364:	bf00      	nop
 8017366:	e7fd      	b.n	8017364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801736a:	685a      	ldr	r2, [r3, #4]
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	1ad2      	subs	r2, r2, r3
 8017370:	69bb      	ldr	r3, [r7, #24]
 8017372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017376:	687a      	ldr	r2, [r7, #4]
 8017378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801737a:	69b8      	ldr	r0, [r7, #24]
 801737c:	f000 f90a 	bl	8017594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017380:	4b1d      	ldr	r3, [pc, #116]	@ (80173f8 <pvPortMalloc+0x18c>)
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	1ad3      	subs	r3, r2, r3
 801738a:	4a1b      	ldr	r2, [pc, #108]	@ (80173f8 <pvPortMalloc+0x18c>)
 801738c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801738e:	4b1a      	ldr	r3, [pc, #104]	@ (80173f8 <pvPortMalloc+0x18c>)
 8017390:	681a      	ldr	r2, [r3, #0]
 8017392:	4b1b      	ldr	r3, [pc, #108]	@ (8017400 <pvPortMalloc+0x194>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	429a      	cmp	r2, r3
 8017398:	d203      	bcs.n	80173a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801739a:	4b17      	ldr	r3, [pc, #92]	@ (80173f8 <pvPortMalloc+0x18c>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	4a18      	ldr	r2, [pc, #96]	@ (8017400 <pvPortMalloc+0x194>)
 80173a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80173a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a4:	685a      	ldr	r2, [r3, #4]
 80173a6:	4b13      	ldr	r3, [pc, #76]	@ (80173f4 <pvPortMalloc+0x188>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	431a      	orrs	r2, r3
 80173ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80173b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b2:	2200      	movs	r2, #0
 80173b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80173b6:	4b13      	ldr	r3, [pc, #76]	@ (8017404 <pvPortMalloc+0x198>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	3301      	adds	r3, #1
 80173bc:	4a11      	ldr	r2, [pc, #68]	@ (8017404 <pvPortMalloc+0x198>)
 80173be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80173c0:	f7fe fbde 	bl	8015b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80173c4:	69fb      	ldr	r3, [r7, #28]
 80173c6:	f003 0307 	and.w	r3, r3, #7
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d00b      	beq.n	80173e6 <pvPortMalloc+0x17a>
	__asm volatile
 80173ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173d2:	f383 8811 	msr	BASEPRI, r3
 80173d6:	f3bf 8f6f 	isb	sy
 80173da:	f3bf 8f4f 	dsb	sy
 80173de:	60fb      	str	r3, [r7, #12]
}
 80173e0:	bf00      	nop
 80173e2:	bf00      	nop
 80173e4:	e7fd      	b.n	80173e2 <pvPortMalloc+0x176>
	return pvReturn;
 80173e6:	69fb      	ldr	r3, [r7, #28]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3728      	adds	r7, #40	@ 0x28
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	24005b1c 	.word	0x24005b1c
 80173f4:	24005b30 	.word	0x24005b30
 80173f8:	24005b20 	.word	0x24005b20
 80173fc:	24005b14 	.word	0x24005b14
 8017400:	24005b24 	.word	0x24005b24
 8017404:	24005b28 	.word	0x24005b28

08017408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b086      	sub	sp, #24
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d04f      	beq.n	80174ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801741a:	2308      	movs	r3, #8
 801741c:	425b      	negs	r3, r3
 801741e:	697a      	ldr	r2, [r7, #20]
 8017420:	4413      	add	r3, r2
 8017422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	685a      	ldr	r2, [r3, #4]
 801742c:	4b25      	ldr	r3, [pc, #148]	@ (80174c4 <vPortFree+0xbc>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	4013      	ands	r3, r2
 8017432:	2b00      	cmp	r3, #0
 8017434:	d10b      	bne.n	801744e <vPortFree+0x46>
	__asm volatile
 8017436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801743a:	f383 8811 	msr	BASEPRI, r3
 801743e:	f3bf 8f6f 	isb	sy
 8017442:	f3bf 8f4f 	dsb	sy
 8017446:	60fb      	str	r3, [r7, #12]
}
 8017448:	bf00      	nop
 801744a:	bf00      	nop
 801744c:	e7fd      	b.n	801744a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801744e:	693b      	ldr	r3, [r7, #16]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00b      	beq.n	801746e <vPortFree+0x66>
	__asm volatile
 8017456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801745a:	f383 8811 	msr	BASEPRI, r3
 801745e:	f3bf 8f6f 	isb	sy
 8017462:	f3bf 8f4f 	dsb	sy
 8017466:	60bb      	str	r3, [r7, #8]
}
 8017468:	bf00      	nop
 801746a:	bf00      	nop
 801746c:	e7fd      	b.n	801746a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	685a      	ldr	r2, [r3, #4]
 8017472:	4b14      	ldr	r3, [pc, #80]	@ (80174c4 <vPortFree+0xbc>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	4013      	ands	r3, r2
 8017478:	2b00      	cmp	r3, #0
 801747a:	d01e      	beq.n	80174ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d11a      	bne.n	80174ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	685a      	ldr	r2, [r3, #4]
 8017488:	4b0e      	ldr	r3, [pc, #56]	@ (80174c4 <vPortFree+0xbc>)
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	43db      	mvns	r3, r3
 801748e:	401a      	ands	r2, r3
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017494:	f7fe fb66 	bl	8015b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	685a      	ldr	r2, [r3, #4]
 801749c:	4b0a      	ldr	r3, [pc, #40]	@ (80174c8 <vPortFree+0xc0>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	4413      	add	r3, r2
 80174a2:	4a09      	ldr	r2, [pc, #36]	@ (80174c8 <vPortFree+0xc0>)
 80174a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80174a6:	6938      	ldr	r0, [r7, #16]
 80174a8:	f000 f874 	bl	8017594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80174ac:	4b07      	ldr	r3, [pc, #28]	@ (80174cc <vPortFree+0xc4>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	3301      	adds	r3, #1
 80174b2:	4a06      	ldr	r2, [pc, #24]	@ (80174cc <vPortFree+0xc4>)
 80174b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80174b6:	f7fe fb63 	bl	8015b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80174ba:	bf00      	nop
 80174bc:	3718      	adds	r7, #24
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	24005b30 	.word	0x24005b30
 80174c8:	24005b20 	.word	0x24005b20
 80174cc:	24005b2c 	.word	0x24005b2c

080174d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80174d0:	b480      	push	{r7}
 80174d2:	b085      	sub	sp, #20
 80174d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80174d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80174da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80174dc:	4b27      	ldr	r3, [pc, #156]	@ (801757c <prvHeapInit+0xac>)
 80174de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	f003 0307 	and.w	r3, r3, #7
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d00c      	beq.n	8017504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	3307      	adds	r3, #7
 80174ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	f023 0307 	bic.w	r3, r3, #7
 80174f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80174f8:	68ba      	ldr	r2, [r7, #8]
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	1ad3      	subs	r3, r2, r3
 80174fe:	4a1f      	ldr	r2, [pc, #124]	@ (801757c <prvHeapInit+0xac>)
 8017500:	4413      	add	r3, r2
 8017502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017508:	4a1d      	ldr	r2, [pc, #116]	@ (8017580 <prvHeapInit+0xb0>)
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801750e:	4b1c      	ldr	r3, [pc, #112]	@ (8017580 <prvHeapInit+0xb0>)
 8017510:	2200      	movs	r2, #0
 8017512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	68ba      	ldr	r2, [r7, #8]
 8017518:	4413      	add	r3, r2
 801751a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801751c:	2208      	movs	r2, #8
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	1a9b      	subs	r3, r3, r2
 8017522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f023 0307 	bic.w	r3, r3, #7
 801752a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	4a15      	ldr	r2, [pc, #84]	@ (8017584 <prvHeapInit+0xb4>)
 8017530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017532:	4b14      	ldr	r3, [pc, #80]	@ (8017584 <prvHeapInit+0xb4>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	2200      	movs	r2, #0
 8017538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801753a:	4b12      	ldr	r3, [pc, #72]	@ (8017584 <prvHeapInit+0xb4>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2200      	movs	r2, #0
 8017540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	1ad2      	subs	r2, r2, r3
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017550:	4b0c      	ldr	r3, [pc, #48]	@ (8017584 <prvHeapInit+0xb4>)
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	4a0a      	ldr	r2, [pc, #40]	@ (8017588 <prvHeapInit+0xb8>)
 801755e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	4a09      	ldr	r2, [pc, #36]	@ (801758c <prvHeapInit+0xbc>)
 8017566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017568:	4b09      	ldr	r3, [pc, #36]	@ (8017590 <prvHeapInit+0xc0>)
 801756a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801756e:	601a      	str	r2, [r3, #0]
}
 8017570:	bf00      	nop
 8017572:	3714      	adds	r7, #20
 8017574:	46bd      	mov	sp, r7
 8017576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757a:	4770      	bx	lr
 801757c:	24001f14 	.word	0x24001f14
 8017580:	24005b14 	.word	0x24005b14
 8017584:	24005b1c 	.word	0x24005b1c
 8017588:	24005b24 	.word	0x24005b24
 801758c:	24005b20 	.word	0x24005b20
 8017590:	24005b30 	.word	0x24005b30

08017594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017594:	b480      	push	{r7}
 8017596:	b085      	sub	sp, #20
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801759c:	4b28      	ldr	r3, [pc, #160]	@ (8017640 <prvInsertBlockIntoFreeList+0xac>)
 801759e:	60fb      	str	r3, [r7, #12]
 80175a0:	e002      	b.n	80175a8 <prvInsertBlockIntoFreeList+0x14>
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	60fb      	str	r3, [r7, #12]
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	687a      	ldr	r2, [r7, #4]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d8f7      	bhi.n	80175a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	68ba      	ldr	r2, [r7, #8]
 80175bc:	4413      	add	r3, r2
 80175be:	687a      	ldr	r2, [r7, #4]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d108      	bne.n	80175d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	685a      	ldr	r2, [r3, #4]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	441a      	add	r2, r3
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	68ba      	ldr	r2, [r7, #8]
 80175e0:	441a      	add	r2, r3
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d118      	bne.n	801761c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	681a      	ldr	r2, [r3, #0]
 80175ee:	4b15      	ldr	r3, [pc, #84]	@ (8017644 <prvInsertBlockIntoFreeList+0xb0>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d00d      	beq.n	8017612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	685a      	ldr	r2, [r3, #4]
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	441a      	add	r2, r3
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	601a      	str	r2, [r3, #0]
 8017610:	e008      	b.n	8017624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017612:	4b0c      	ldr	r3, [pc, #48]	@ (8017644 <prvInsertBlockIntoFreeList+0xb0>)
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	601a      	str	r2, [r3, #0]
 801761a:	e003      	b.n	8017624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017624:	68fa      	ldr	r2, [r7, #12]
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	429a      	cmp	r2, r3
 801762a:	d002      	beq.n	8017632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	687a      	ldr	r2, [r7, #4]
 8017630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017632:	bf00      	nop
 8017634:	3714      	adds	r7, #20
 8017636:	46bd      	mov	sp, r7
 8017638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763c:	4770      	bx	lr
 801763e:	bf00      	nop
 8017640:	24005b14 	.word	0x24005b14
 8017644:	24005b1c 	.word	0x24005b1c

08017648 <__cvt>:
 8017648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801764a:	ed2d 8b02 	vpush	{d8}
 801764e:	eeb0 8b40 	vmov.f64	d8, d0
 8017652:	b085      	sub	sp, #20
 8017654:	4617      	mov	r7, r2
 8017656:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017658:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801765a:	ee18 2a90 	vmov	r2, s17
 801765e:	f025 0520 	bic.w	r5, r5, #32
 8017662:	2a00      	cmp	r2, #0
 8017664:	bfb6      	itet	lt
 8017666:	222d      	movlt	r2, #45	@ 0x2d
 8017668:	2200      	movge	r2, #0
 801766a:	eeb1 8b40 	vneglt.f64	d8, d0
 801766e:	2d46      	cmp	r5, #70	@ 0x46
 8017670:	460c      	mov	r4, r1
 8017672:	701a      	strb	r2, [r3, #0]
 8017674:	d004      	beq.n	8017680 <__cvt+0x38>
 8017676:	2d45      	cmp	r5, #69	@ 0x45
 8017678:	d100      	bne.n	801767c <__cvt+0x34>
 801767a:	3401      	adds	r4, #1
 801767c:	2102      	movs	r1, #2
 801767e:	e000      	b.n	8017682 <__cvt+0x3a>
 8017680:	2103      	movs	r1, #3
 8017682:	ab03      	add	r3, sp, #12
 8017684:	9301      	str	r3, [sp, #4]
 8017686:	ab02      	add	r3, sp, #8
 8017688:	9300      	str	r3, [sp, #0]
 801768a:	4622      	mov	r2, r4
 801768c:	4633      	mov	r3, r6
 801768e:	eeb0 0b48 	vmov.f64	d0, d8
 8017692:	f000 ff8d 	bl	80185b0 <_dtoa_r>
 8017696:	2d47      	cmp	r5, #71	@ 0x47
 8017698:	d114      	bne.n	80176c4 <__cvt+0x7c>
 801769a:	07fb      	lsls	r3, r7, #31
 801769c:	d50a      	bpl.n	80176b4 <__cvt+0x6c>
 801769e:	1902      	adds	r2, r0, r4
 80176a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80176a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a8:	bf08      	it	eq
 80176aa:	9203      	streq	r2, [sp, #12]
 80176ac:	2130      	movs	r1, #48	@ 0x30
 80176ae:	9b03      	ldr	r3, [sp, #12]
 80176b0:	4293      	cmp	r3, r2
 80176b2:	d319      	bcc.n	80176e8 <__cvt+0xa0>
 80176b4:	9b03      	ldr	r3, [sp, #12]
 80176b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176b8:	1a1b      	subs	r3, r3, r0
 80176ba:	6013      	str	r3, [r2, #0]
 80176bc:	b005      	add	sp, #20
 80176be:	ecbd 8b02 	vpop	{d8}
 80176c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c4:	2d46      	cmp	r5, #70	@ 0x46
 80176c6:	eb00 0204 	add.w	r2, r0, r4
 80176ca:	d1e9      	bne.n	80176a0 <__cvt+0x58>
 80176cc:	7803      	ldrb	r3, [r0, #0]
 80176ce:	2b30      	cmp	r3, #48	@ 0x30
 80176d0:	d107      	bne.n	80176e2 <__cvt+0x9a>
 80176d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80176d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176da:	bf1c      	itt	ne
 80176dc:	f1c4 0401 	rsbne	r4, r4, #1
 80176e0:	6034      	strne	r4, [r6, #0]
 80176e2:	6833      	ldr	r3, [r6, #0]
 80176e4:	441a      	add	r2, r3
 80176e6:	e7db      	b.n	80176a0 <__cvt+0x58>
 80176e8:	1c5c      	adds	r4, r3, #1
 80176ea:	9403      	str	r4, [sp, #12]
 80176ec:	7019      	strb	r1, [r3, #0]
 80176ee:	e7de      	b.n	80176ae <__cvt+0x66>

080176f0 <__exponent>:
 80176f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f2:	2900      	cmp	r1, #0
 80176f4:	bfba      	itte	lt
 80176f6:	4249      	neglt	r1, r1
 80176f8:	232d      	movlt	r3, #45	@ 0x2d
 80176fa:	232b      	movge	r3, #43	@ 0x2b
 80176fc:	2909      	cmp	r1, #9
 80176fe:	7002      	strb	r2, [r0, #0]
 8017700:	7043      	strb	r3, [r0, #1]
 8017702:	dd29      	ble.n	8017758 <__exponent+0x68>
 8017704:	f10d 0307 	add.w	r3, sp, #7
 8017708:	461d      	mov	r5, r3
 801770a:	270a      	movs	r7, #10
 801770c:	461a      	mov	r2, r3
 801770e:	fbb1 f6f7 	udiv	r6, r1, r7
 8017712:	fb07 1416 	mls	r4, r7, r6, r1
 8017716:	3430      	adds	r4, #48	@ 0x30
 8017718:	f802 4c01 	strb.w	r4, [r2, #-1]
 801771c:	460c      	mov	r4, r1
 801771e:	2c63      	cmp	r4, #99	@ 0x63
 8017720:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8017724:	4631      	mov	r1, r6
 8017726:	dcf1      	bgt.n	801770c <__exponent+0x1c>
 8017728:	3130      	adds	r1, #48	@ 0x30
 801772a:	1e94      	subs	r4, r2, #2
 801772c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017730:	1c41      	adds	r1, r0, #1
 8017732:	4623      	mov	r3, r4
 8017734:	42ab      	cmp	r3, r5
 8017736:	d30a      	bcc.n	801774e <__exponent+0x5e>
 8017738:	f10d 0309 	add.w	r3, sp, #9
 801773c:	1a9b      	subs	r3, r3, r2
 801773e:	42ac      	cmp	r4, r5
 8017740:	bf88      	it	hi
 8017742:	2300      	movhi	r3, #0
 8017744:	3302      	adds	r3, #2
 8017746:	4403      	add	r3, r0
 8017748:	1a18      	subs	r0, r3, r0
 801774a:	b003      	add	sp, #12
 801774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801774e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017752:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017756:	e7ed      	b.n	8017734 <__exponent+0x44>
 8017758:	2330      	movs	r3, #48	@ 0x30
 801775a:	3130      	adds	r1, #48	@ 0x30
 801775c:	7083      	strb	r3, [r0, #2]
 801775e:	70c1      	strb	r1, [r0, #3]
 8017760:	1d03      	adds	r3, r0, #4
 8017762:	e7f1      	b.n	8017748 <__exponent+0x58>
 8017764:	0000      	movs	r0, r0
	...

08017768 <_printf_float>:
 8017768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801776c:	b08d      	sub	sp, #52	@ 0x34
 801776e:	460c      	mov	r4, r1
 8017770:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017774:	4616      	mov	r6, r2
 8017776:	461f      	mov	r7, r3
 8017778:	4605      	mov	r5, r0
 801777a:	f000 fdad 	bl	80182d8 <_localeconv_r>
 801777e:	f8d0 b000 	ldr.w	fp, [r0]
 8017782:	4658      	mov	r0, fp
 8017784:	f7e8 fe14 	bl	80003b0 <strlen>
 8017788:	2300      	movs	r3, #0
 801778a:	930a      	str	r3, [sp, #40]	@ 0x28
 801778c:	f8d8 3000 	ldr.w	r3, [r8]
 8017790:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017794:	6822      	ldr	r2, [r4, #0]
 8017796:	9005      	str	r0, [sp, #20]
 8017798:	3307      	adds	r3, #7
 801779a:	f023 0307 	bic.w	r3, r3, #7
 801779e:	f103 0108 	add.w	r1, r3, #8
 80177a2:	f8c8 1000 	str.w	r1, [r8]
 80177a6:	ed93 0b00 	vldr	d0, [r3]
 80177aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8017a08 <_printf_float+0x2a0>
 80177ae:	eeb0 7bc0 	vabs.f64	d7, d0
 80177b2:	eeb4 7b46 	vcmp.f64	d7, d6
 80177b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80177be:	dd24      	ble.n	801780a <_printf_float+0xa2>
 80177c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80177c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c8:	d502      	bpl.n	80177d0 <_printf_float+0x68>
 80177ca:	232d      	movs	r3, #45	@ 0x2d
 80177cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177d0:	498f      	ldr	r1, [pc, #572]	@ (8017a10 <_printf_float+0x2a8>)
 80177d2:	4b90      	ldr	r3, [pc, #576]	@ (8017a14 <_printf_float+0x2ac>)
 80177d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80177d8:	bf8c      	ite	hi
 80177da:	4688      	movhi	r8, r1
 80177dc:	4698      	movls	r8, r3
 80177de:	f022 0204 	bic.w	r2, r2, #4
 80177e2:	2303      	movs	r3, #3
 80177e4:	6123      	str	r3, [r4, #16]
 80177e6:	6022      	str	r2, [r4, #0]
 80177e8:	f04f 0a00 	mov.w	sl, #0
 80177ec:	9700      	str	r7, [sp, #0]
 80177ee:	4633      	mov	r3, r6
 80177f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80177f2:	4621      	mov	r1, r4
 80177f4:	4628      	mov	r0, r5
 80177f6:	f000 f9d1 	bl	8017b9c <_printf_common>
 80177fa:	3001      	adds	r0, #1
 80177fc:	f040 8089 	bne.w	8017912 <_printf_float+0x1aa>
 8017800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017804:	b00d      	add	sp, #52	@ 0x34
 8017806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780a:	eeb4 0b40 	vcmp.f64	d0, d0
 801780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017812:	d709      	bvc.n	8017828 <_printf_float+0xc0>
 8017814:	ee10 3a90 	vmov	r3, s1
 8017818:	2b00      	cmp	r3, #0
 801781a:	bfbc      	itt	lt
 801781c:	232d      	movlt	r3, #45	@ 0x2d
 801781e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017822:	497d      	ldr	r1, [pc, #500]	@ (8017a18 <_printf_float+0x2b0>)
 8017824:	4b7d      	ldr	r3, [pc, #500]	@ (8017a1c <_printf_float+0x2b4>)
 8017826:	e7d5      	b.n	80177d4 <_printf_float+0x6c>
 8017828:	6863      	ldr	r3, [r4, #4]
 801782a:	1c59      	adds	r1, r3, #1
 801782c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017830:	d139      	bne.n	80178a6 <_printf_float+0x13e>
 8017832:	2306      	movs	r3, #6
 8017834:	6063      	str	r3, [r4, #4]
 8017836:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801783a:	2300      	movs	r3, #0
 801783c:	6022      	str	r2, [r4, #0]
 801783e:	9303      	str	r3, [sp, #12]
 8017840:	ab0a      	add	r3, sp, #40	@ 0x28
 8017842:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017846:	ab09      	add	r3, sp, #36	@ 0x24
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	6861      	ldr	r1, [r4, #4]
 801784c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017850:	4628      	mov	r0, r5
 8017852:	f7ff fef9 	bl	8017648 <__cvt>
 8017856:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801785a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801785c:	4680      	mov	r8, r0
 801785e:	d129      	bne.n	80178b4 <_printf_float+0x14c>
 8017860:	1cc8      	adds	r0, r1, #3
 8017862:	db02      	blt.n	801786a <_printf_float+0x102>
 8017864:	6863      	ldr	r3, [r4, #4]
 8017866:	4299      	cmp	r1, r3
 8017868:	dd41      	ble.n	80178ee <_printf_float+0x186>
 801786a:	f1a9 0902 	sub.w	r9, r9, #2
 801786e:	fa5f f989 	uxtb.w	r9, r9
 8017872:	3901      	subs	r1, #1
 8017874:	464a      	mov	r2, r9
 8017876:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801787a:	9109      	str	r1, [sp, #36]	@ 0x24
 801787c:	f7ff ff38 	bl	80176f0 <__exponent>
 8017880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017882:	1813      	adds	r3, r2, r0
 8017884:	2a01      	cmp	r2, #1
 8017886:	4682      	mov	sl, r0
 8017888:	6123      	str	r3, [r4, #16]
 801788a:	dc02      	bgt.n	8017892 <_printf_float+0x12a>
 801788c:	6822      	ldr	r2, [r4, #0]
 801788e:	07d2      	lsls	r2, r2, #31
 8017890:	d501      	bpl.n	8017896 <_printf_float+0x12e>
 8017892:	3301      	adds	r3, #1
 8017894:	6123      	str	r3, [r4, #16]
 8017896:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801789a:	2b00      	cmp	r3, #0
 801789c:	d0a6      	beq.n	80177ec <_printf_float+0x84>
 801789e:	232d      	movs	r3, #45	@ 0x2d
 80178a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80178a4:	e7a2      	b.n	80177ec <_printf_float+0x84>
 80178a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80178aa:	d1c4      	bne.n	8017836 <_printf_float+0xce>
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d1c2      	bne.n	8017836 <_printf_float+0xce>
 80178b0:	2301      	movs	r3, #1
 80178b2:	e7bf      	b.n	8017834 <_printf_float+0xcc>
 80178b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80178b8:	d9db      	bls.n	8017872 <_printf_float+0x10a>
 80178ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80178be:	d118      	bne.n	80178f2 <_printf_float+0x18a>
 80178c0:	2900      	cmp	r1, #0
 80178c2:	6863      	ldr	r3, [r4, #4]
 80178c4:	dd0b      	ble.n	80178de <_printf_float+0x176>
 80178c6:	6121      	str	r1, [r4, #16]
 80178c8:	b913      	cbnz	r3, 80178d0 <_printf_float+0x168>
 80178ca:	6822      	ldr	r2, [r4, #0]
 80178cc:	07d0      	lsls	r0, r2, #31
 80178ce:	d502      	bpl.n	80178d6 <_printf_float+0x16e>
 80178d0:	3301      	adds	r3, #1
 80178d2:	440b      	add	r3, r1
 80178d4:	6123      	str	r3, [r4, #16]
 80178d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80178d8:	f04f 0a00 	mov.w	sl, #0
 80178dc:	e7db      	b.n	8017896 <_printf_float+0x12e>
 80178de:	b913      	cbnz	r3, 80178e6 <_printf_float+0x17e>
 80178e0:	6822      	ldr	r2, [r4, #0]
 80178e2:	07d2      	lsls	r2, r2, #31
 80178e4:	d501      	bpl.n	80178ea <_printf_float+0x182>
 80178e6:	3302      	adds	r3, #2
 80178e8:	e7f4      	b.n	80178d4 <_printf_float+0x16c>
 80178ea:	2301      	movs	r3, #1
 80178ec:	e7f2      	b.n	80178d4 <_printf_float+0x16c>
 80178ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80178f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80178f4:	4299      	cmp	r1, r3
 80178f6:	db05      	blt.n	8017904 <_printf_float+0x19c>
 80178f8:	6823      	ldr	r3, [r4, #0]
 80178fa:	6121      	str	r1, [r4, #16]
 80178fc:	07d8      	lsls	r0, r3, #31
 80178fe:	d5ea      	bpl.n	80178d6 <_printf_float+0x16e>
 8017900:	1c4b      	adds	r3, r1, #1
 8017902:	e7e7      	b.n	80178d4 <_printf_float+0x16c>
 8017904:	2900      	cmp	r1, #0
 8017906:	bfd4      	ite	le
 8017908:	f1c1 0202 	rsble	r2, r1, #2
 801790c:	2201      	movgt	r2, #1
 801790e:	4413      	add	r3, r2
 8017910:	e7e0      	b.n	80178d4 <_printf_float+0x16c>
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	055a      	lsls	r2, r3, #21
 8017916:	d407      	bmi.n	8017928 <_printf_float+0x1c0>
 8017918:	6923      	ldr	r3, [r4, #16]
 801791a:	4642      	mov	r2, r8
 801791c:	4631      	mov	r1, r6
 801791e:	4628      	mov	r0, r5
 8017920:	47b8      	blx	r7
 8017922:	3001      	adds	r0, #1
 8017924:	d12a      	bne.n	801797c <_printf_float+0x214>
 8017926:	e76b      	b.n	8017800 <_printf_float+0x98>
 8017928:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801792c:	f240 80e0 	bls.w	8017af0 <_printf_float+0x388>
 8017930:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801793c:	d133      	bne.n	80179a6 <_printf_float+0x23e>
 801793e:	4a38      	ldr	r2, [pc, #224]	@ (8017a20 <_printf_float+0x2b8>)
 8017940:	2301      	movs	r3, #1
 8017942:	4631      	mov	r1, r6
 8017944:	4628      	mov	r0, r5
 8017946:	47b8      	blx	r7
 8017948:	3001      	adds	r0, #1
 801794a:	f43f af59 	beq.w	8017800 <_printf_float+0x98>
 801794e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017952:	4543      	cmp	r3, r8
 8017954:	db02      	blt.n	801795c <_printf_float+0x1f4>
 8017956:	6823      	ldr	r3, [r4, #0]
 8017958:	07d8      	lsls	r0, r3, #31
 801795a:	d50f      	bpl.n	801797c <_printf_float+0x214>
 801795c:	9b05      	ldr	r3, [sp, #20]
 801795e:	465a      	mov	r2, fp
 8017960:	4631      	mov	r1, r6
 8017962:	4628      	mov	r0, r5
 8017964:	47b8      	blx	r7
 8017966:	3001      	adds	r0, #1
 8017968:	f43f af4a 	beq.w	8017800 <_printf_float+0x98>
 801796c:	f04f 0900 	mov.w	r9, #0
 8017970:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8017974:	f104 0a1a 	add.w	sl, r4, #26
 8017978:	45c8      	cmp	r8, r9
 801797a:	dc09      	bgt.n	8017990 <_printf_float+0x228>
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	079b      	lsls	r3, r3, #30
 8017980:	f100 8107 	bmi.w	8017b92 <_printf_float+0x42a>
 8017984:	68e0      	ldr	r0, [r4, #12]
 8017986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017988:	4298      	cmp	r0, r3
 801798a:	bfb8      	it	lt
 801798c:	4618      	movlt	r0, r3
 801798e:	e739      	b.n	8017804 <_printf_float+0x9c>
 8017990:	2301      	movs	r3, #1
 8017992:	4652      	mov	r2, sl
 8017994:	4631      	mov	r1, r6
 8017996:	4628      	mov	r0, r5
 8017998:	47b8      	blx	r7
 801799a:	3001      	adds	r0, #1
 801799c:	f43f af30 	beq.w	8017800 <_printf_float+0x98>
 80179a0:	f109 0901 	add.w	r9, r9, #1
 80179a4:	e7e8      	b.n	8017978 <_printf_float+0x210>
 80179a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dc3b      	bgt.n	8017a24 <_printf_float+0x2bc>
 80179ac:	4a1c      	ldr	r2, [pc, #112]	@ (8017a20 <_printf_float+0x2b8>)
 80179ae:	2301      	movs	r3, #1
 80179b0:	4631      	mov	r1, r6
 80179b2:	4628      	mov	r0, r5
 80179b4:	47b8      	blx	r7
 80179b6:	3001      	adds	r0, #1
 80179b8:	f43f af22 	beq.w	8017800 <_printf_float+0x98>
 80179bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80179c0:	ea59 0303 	orrs.w	r3, r9, r3
 80179c4:	d102      	bne.n	80179cc <_printf_float+0x264>
 80179c6:	6823      	ldr	r3, [r4, #0]
 80179c8:	07d9      	lsls	r1, r3, #31
 80179ca:	d5d7      	bpl.n	801797c <_printf_float+0x214>
 80179cc:	9b05      	ldr	r3, [sp, #20]
 80179ce:	465a      	mov	r2, fp
 80179d0:	4631      	mov	r1, r6
 80179d2:	4628      	mov	r0, r5
 80179d4:	47b8      	blx	r7
 80179d6:	3001      	adds	r0, #1
 80179d8:	f43f af12 	beq.w	8017800 <_printf_float+0x98>
 80179dc:	f04f 0a00 	mov.w	sl, #0
 80179e0:	f104 0b1a 	add.w	fp, r4, #26
 80179e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179e6:	425b      	negs	r3, r3
 80179e8:	4553      	cmp	r3, sl
 80179ea:	dc01      	bgt.n	80179f0 <_printf_float+0x288>
 80179ec:	464b      	mov	r3, r9
 80179ee:	e794      	b.n	801791a <_printf_float+0x1b2>
 80179f0:	2301      	movs	r3, #1
 80179f2:	465a      	mov	r2, fp
 80179f4:	4631      	mov	r1, r6
 80179f6:	4628      	mov	r0, r5
 80179f8:	47b8      	blx	r7
 80179fa:	3001      	adds	r0, #1
 80179fc:	f43f af00 	beq.w	8017800 <_printf_float+0x98>
 8017a00:	f10a 0a01 	add.w	sl, sl, #1
 8017a04:	e7ee      	b.n	80179e4 <_printf_float+0x27c>
 8017a06:	bf00      	nop
 8017a08:	ffffffff 	.word	0xffffffff
 8017a0c:	7fefffff 	.word	0x7fefffff
 8017a10:	0801af00 	.word	0x0801af00
 8017a14:	0801aefc 	.word	0x0801aefc
 8017a18:	0801af08 	.word	0x0801af08
 8017a1c:	0801af04 	.word	0x0801af04
 8017a20:	0801af0c 	.word	0x0801af0c
 8017a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017a26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017a2a:	4553      	cmp	r3, sl
 8017a2c:	bfa8      	it	ge
 8017a2e:	4653      	movge	r3, sl
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	4699      	mov	r9, r3
 8017a34:	dc37      	bgt.n	8017aa6 <_printf_float+0x33e>
 8017a36:	2300      	movs	r3, #0
 8017a38:	9307      	str	r3, [sp, #28]
 8017a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a3e:	f104 021a 	add.w	r2, r4, #26
 8017a42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017a44:	9907      	ldr	r1, [sp, #28]
 8017a46:	9306      	str	r3, [sp, #24]
 8017a48:	eba3 0309 	sub.w	r3, r3, r9
 8017a4c:	428b      	cmp	r3, r1
 8017a4e:	dc31      	bgt.n	8017ab4 <_printf_float+0x34c>
 8017a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a52:	459a      	cmp	sl, r3
 8017a54:	dc3b      	bgt.n	8017ace <_printf_float+0x366>
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	07da      	lsls	r2, r3, #31
 8017a5a:	d438      	bmi.n	8017ace <_printf_float+0x366>
 8017a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a5e:	ebaa 0903 	sub.w	r9, sl, r3
 8017a62:	9b06      	ldr	r3, [sp, #24]
 8017a64:	ebaa 0303 	sub.w	r3, sl, r3
 8017a68:	4599      	cmp	r9, r3
 8017a6a:	bfa8      	it	ge
 8017a6c:	4699      	movge	r9, r3
 8017a6e:	f1b9 0f00 	cmp.w	r9, #0
 8017a72:	dc34      	bgt.n	8017ade <_printf_float+0x376>
 8017a74:	f04f 0800 	mov.w	r8, #0
 8017a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a7c:	f104 0b1a 	add.w	fp, r4, #26
 8017a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a82:	ebaa 0303 	sub.w	r3, sl, r3
 8017a86:	eba3 0309 	sub.w	r3, r3, r9
 8017a8a:	4543      	cmp	r3, r8
 8017a8c:	f77f af76 	ble.w	801797c <_printf_float+0x214>
 8017a90:	2301      	movs	r3, #1
 8017a92:	465a      	mov	r2, fp
 8017a94:	4631      	mov	r1, r6
 8017a96:	4628      	mov	r0, r5
 8017a98:	47b8      	blx	r7
 8017a9a:	3001      	adds	r0, #1
 8017a9c:	f43f aeb0 	beq.w	8017800 <_printf_float+0x98>
 8017aa0:	f108 0801 	add.w	r8, r8, #1
 8017aa4:	e7ec      	b.n	8017a80 <_printf_float+0x318>
 8017aa6:	4642      	mov	r2, r8
 8017aa8:	4631      	mov	r1, r6
 8017aaa:	4628      	mov	r0, r5
 8017aac:	47b8      	blx	r7
 8017aae:	3001      	adds	r0, #1
 8017ab0:	d1c1      	bne.n	8017a36 <_printf_float+0x2ce>
 8017ab2:	e6a5      	b.n	8017800 <_printf_float+0x98>
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	4631      	mov	r1, r6
 8017ab8:	4628      	mov	r0, r5
 8017aba:	9206      	str	r2, [sp, #24]
 8017abc:	47b8      	blx	r7
 8017abe:	3001      	adds	r0, #1
 8017ac0:	f43f ae9e 	beq.w	8017800 <_printf_float+0x98>
 8017ac4:	9b07      	ldr	r3, [sp, #28]
 8017ac6:	9a06      	ldr	r2, [sp, #24]
 8017ac8:	3301      	adds	r3, #1
 8017aca:	9307      	str	r3, [sp, #28]
 8017acc:	e7b9      	b.n	8017a42 <_printf_float+0x2da>
 8017ace:	9b05      	ldr	r3, [sp, #20]
 8017ad0:	465a      	mov	r2, fp
 8017ad2:	4631      	mov	r1, r6
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	47b8      	blx	r7
 8017ad8:	3001      	adds	r0, #1
 8017ada:	d1bf      	bne.n	8017a5c <_printf_float+0x2f4>
 8017adc:	e690      	b.n	8017800 <_printf_float+0x98>
 8017ade:	9a06      	ldr	r2, [sp, #24]
 8017ae0:	464b      	mov	r3, r9
 8017ae2:	4442      	add	r2, r8
 8017ae4:	4631      	mov	r1, r6
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	47b8      	blx	r7
 8017aea:	3001      	adds	r0, #1
 8017aec:	d1c2      	bne.n	8017a74 <_printf_float+0x30c>
 8017aee:	e687      	b.n	8017800 <_printf_float+0x98>
 8017af0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8017af4:	f1b9 0f01 	cmp.w	r9, #1
 8017af8:	dc01      	bgt.n	8017afe <_printf_float+0x396>
 8017afa:	07db      	lsls	r3, r3, #31
 8017afc:	d536      	bpl.n	8017b6c <_printf_float+0x404>
 8017afe:	2301      	movs	r3, #1
 8017b00:	4642      	mov	r2, r8
 8017b02:	4631      	mov	r1, r6
 8017b04:	4628      	mov	r0, r5
 8017b06:	47b8      	blx	r7
 8017b08:	3001      	adds	r0, #1
 8017b0a:	f43f ae79 	beq.w	8017800 <_printf_float+0x98>
 8017b0e:	9b05      	ldr	r3, [sp, #20]
 8017b10:	465a      	mov	r2, fp
 8017b12:	4631      	mov	r1, r6
 8017b14:	4628      	mov	r0, r5
 8017b16:	47b8      	blx	r7
 8017b18:	3001      	adds	r0, #1
 8017b1a:	f43f ae71 	beq.w	8017800 <_printf_float+0x98>
 8017b1e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017b22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8017b2e:	d018      	beq.n	8017b62 <_printf_float+0x3fa>
 8017b30:	464b      	mov	r3, r9
 8017b32:	f108 0201 	add.w	r2, r8, #1
 8017b36:	4631      	mov	r1, r6
 8017b38:	4628      	mov	r0, r5
 8017b3a:	47b8      	blx	r7
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	d10c      	bne.n	8017b5a <_printf_float+0x3f2>
 8017b40:	e65e      	b.n	8017800 <_printf_float+0x98>
 8017b42:	2301      	movs	r3, #1
 8017b44:	465a      	mov	r2, fp
 8017b46:	4631      	mov	r1, r6
 8017b48:	4628      	mov	r0, r5
 8017b4a:	47b8      	blx	r7
 8017b4c:	3001      	adds	r0, #1
 8017b4e:	f43f ae57 	beq.w	8017800 <_printf_float+0x98>
 8017b52:	f108 0801 	add.w	r8, r8, #1
 8017b56:	45c8      	cmp	r8, r9
 8017b58:	dbf3      	blt.n	8017b42 <_printf_float+0x3da>
 8017b5a:	4653      	mov	r3, sl
 8017b5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017b60:	e6dc      	b.n	801791c <_printf_float+0x1b4>
 8017b62:	f04f 0800 	mov.w	r8, #0
 8017b66:	f104 0b1a 	add.w	fp, r4, #26
 8017b6a:	e7f4      	b.n	8017b56 <_printf_float+0x3ee>
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	4642      	mov	r2, r8
 8017b70:	e7e1      	b.n	8017b36 <_printf_float+0x3ce>
 8017b72:	2301      	movs	r3, #1
 8017b74:	464a      	mov	r2, r9
 8017b76:	4631      	mov	r1, r6
 8017b78:	4628      	mov	r0, r5
 8017b7a:	47b8      	blx	r7
 8017b7c:	3001      	adds	r0, #1
 8017b7e:	f43f ae3f 	beq.w	8017800 <_printf_float+0x98>
 8017b82:	f108 0801 	add.w	r8, r8, #1
 8017b86:	68e3      	ldr	r3, [r4, #12]
 8017b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017b8a:	1a5b      	subs	r3, r3, r1
 8017b8c:	4543      	cmp	r3, r8
 8017b8e:	dcf0      	bgt.n	8017b72 <_printf_float+0x40a>
 8017b90:	e6f8      	b.n	8017984 <_printf_float+0x21c>
 8017b92:	f04f 0800 	mov.w	r8, #0
 8017b96:	f104 0919 	add.w	r9, r4, #25
 8017b9a:	e7f4      	b.n	8017b86 <_printf_float+0x41e>

08017b9c <_printf_common>:
 8017b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ba0:	4616      	mov	r6, r2
 8017ba2:	4698      	mov	r8, r3
 8017ba4:	688a      	ldr	r2, [r1, #8]
 8017ba6:	690b      	ldr	r3, [r1, #16]
 8017ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017bac:	4293      	cmp	r3, r2
 8017bae:	bfb8      	it	lt
 8017bb0:	4613      	movlt	r3, r2
 8017bb2:	6033      	str	r3, [r6, #0]
 8017bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017bb8:	4607      	mov	r7, r0
 8017bba:	460c      	mov	r4, r1
 8017bbc:	b10a      	cbz	r2, 8017bc2 <_printf_common+0x26>
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	6033      	str	r3, [r6, #0]
 8017bc2:	6823      	ldr	r3, [r4, #0]
 8017bc4:	0699      	lsls	r1, r3, #26
 8017bc6:	bf42      	ittt	mi
 8017bc8:	6833      	ldrmi	r3, [r6, #0]
 8017bca:	3302      	addmi	r3, #2
 8017bcc:	6033      	strmi	r3, [r6, #0]
 8017bce:	6825      	ldr	r5, [r4, #0]
 8017bd0:	f015 0506 	ands.w	r5, r5, #6
 8017bd4:	d106      	bne.n	8017be4 <_printf_common+0x48>
 8017bd6:	f104 0a19 	add.w	sl, r4, #25
 8017bda:	68e3      	ldr	r3, [r4, #12]
 8017bdc:	6832      	ldr	r2, [r6, #0]
 8017bde:	1a9b      	subs	r3, r3, r2
 8017be0:	42ab      	cmp	r3, r5
 8017be2:	dc26      	bgt.n	8017c32 <_printf_common+0x96>
 8017be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017be8:	6822      	ldr	r2, [r4, #0]
 8017bea:	3b00      	subs	r3, #0
 8017bec:	bf18      	it	ne
 8017bee:	2301      	movne	r3, #1
 8017bf0:	0692      	lsls	r2, r2, #26
 8017bf2:	d42b      	bmi.n	8017c4c <_printf_common+0xb0>
 8017bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017bf8:	4641      	mov	r1, r8
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	47c8      	blx	r9
 8017bfe:	3001      	adds	r0, #1
 8017c00:	d01e      	beq.n	8017c40 <_printf_common+0xa4>
 8017c02:	6823      	ldr	r3, [r4, #0]
 8017c04:	6922      	ldr	r2, [r4, #16]
 8017c06:	f003 0306 	and.w	r3, r3, #6
 8017c0a:	2b04      	cmp	r3, #4
 8017c0c:	bf02      	ittt	eq
 8017c0e:	68e5      	ldreq	r5, [r4, #12]
 8017c10:	6833      	ldreq	r3, [r6, #0]
 8017c12:	1aed      	subeq	r5, r5, r3
 8017c14:	68a3      	ldr	r3, [r4, #8]
 8017c16:	bf0c      	ite	eq
 8017c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c1c:	2500      	movne	r5, #0
 8017c1e:	4293      	cmp	r3, r2
 8017c20:	bfc4      	itt	gt
 8017c22:	1a9b      	subgt	r3, r3, r2
 8017c24:	18ed      	addgt	r5, r5, r3
 8017c26:	2600      	movs	r6, #0
 8017c28:	341a      	adds	r4, #26
 8017c2a:	42b5      	cmp	r5, r6
 8017c2c:	d11a      	bne.n	8017c64 <_printf_common+0xc8>
 8017c2e:	2000      	movs	r0, #0
 8017c30:	e008      	b.n	8017c44 <_printf_common+0xa8>
 8017c32:	2301      	movs	r3, #1
 8017c34:	4652      	mov	r2, sl
 8017c36:	4641      	mov	r1, r8
 8017c38:	4638      	mov	r0, r7
 8017c3a:	47c8      	blx	r9
 8017c3c:	3001      	adds	r0, #1
 8017c3e:	d103      	bne.n	8017c48 <_printf_common+0xac>
 8017c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c48:	3501      	adds	r5, #1
 8017c4a:	e7c6      	b.n	8017bda <_printf_common+0x3e>
 8017c4c:	18e1      	adds	r1, r4, r3
 8017c4e:	1c5a      	adds	r2, r3, #1
 8017c50:	2030      	movs	r0, #48	@ 0x30
 8017c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017c56:	4422      	add	r2, r4
 8017c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017c60:	3302      	adds	r3, #2
 8017c62:	e7c7      	b.n	8017bf4 <_printf_common+0x58>
 8017c64:	2301      	movs	r3, #1
 8017c66:	4622      	mov	r2, r4
 8017c68:	4641      	mov	r1, r8
 8017c6a:	4638      	mov	r0, r7
 8017c6c:	47c8      	blx	r9
 8017c6e:	3001      	adds	r0, #1
 8017c70:	d0e6      	beq.n	8017c40 <_printf_common+0xa4>
 8017c72:	3601      	adds	r6, #1
 8017c74:	e7d9      	b.n	8017c2a <_printf_common+0x8e>
	...

08017c78 <_printf_i>:
 8017c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c7c:	7e0f      	ldrb	r7, [r1, #24]
 8017c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017c80:	2f78      	cmp	r7, #120	@ 0x78
 8017c82:	4691      	mov	r9, r2
 8017c84:	4680      	mov	r8, r0
 8017c86:	460c      	mov	r4, r1
 8017c88:	469a      	mov	sl, r3
 8017c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017c8e:	d807      	bhi.n	8017ca0 <_printf_i+0x28>
 8017c90:	2f62      	cmp	r7, #98	@ 0x62
 8017c92:	d80a      	bhi.n	8017caa <_printf_i+0x32>
 8017c94:	2f00      	cmp	r7, #0
 8017c96:	f000 80d1 	beq.w	8017e3c <_printf_i+0x1c4>
 8017c9a:	2f58      	cmp	r7, #88	@ 0x58
 8017c9c:	f000 80b8 	beq.w	8017e10 <_printf_i+0x198>
 8017ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017ca8:	e03a      	b.n	8017d20 <_printf_i+0xa8>
 8017caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017cae:	2b15      	cmp	r3, #21
 8017cb0:	d8f6      	bhi.n	8017ca0 <_printf_i+0x28>
 8017cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8017cb8 <_printf_i+0x40>)
 8017cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017cb8:	08017d11 	.word	0x08017d11
 8017cbc:	08017d25 	.word	0x08017d25
 8017cc0:	08017ca1 	.word	0x08017ca1
 8017cc4:	08017ca1 	.word	0x08017ca1
 8017cc8:	08017ca1 	.word	0x08017ca1
 8017ccc:	08017ca1 	.word	0x08017ca1
 8017cd0:	08017d25 	.word	0x08017d25
 8017cd4:	08017ca1 	.word	0x08017ca1
 8017cd8:	08017ca1 	.word	0x08017ca1
 8017cdc:	08017ca1 	.word	0x08017ca1
 8017ce0:	08017ca1 	.word	0x08017ca1
 8017ce4:	08017e23 	.word	0x08017e23
 8017ce8:	08017d4f 	.word	0x08017d4f
 8017cec:	08017ddd 	.word	0x08017ddd
 8017cf0:	08017ca1 	.word	0x08017ca1
 8017cf4:	08017ca1 	.word	0x08017ca1
 8017cf8:	08017e45 	.word	0x08017e45
 8017cfc:	08017ca1 	.word	0x08017ca1
 8017d00:	08017d4f 	.word	0x08017d4f
 8017d04:	08017ca1 	.word	0x08017ca1
 8017d08:	08017ca1 	.word	0x08017ca1
 8017d0c:	08017de5 	.word	0x08017de5
 8017d10:	6833      	ldr	r3, [r6, #0]
 8017d12:	1d1a      	adds	r2, r3, #4
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	6032      	str	r2, [r6, #0]
 8017d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017d20:	2301      	movs	r3, #1
 8017d22:	e09c      	b.n	8017e5e <_printf_i+0x1e6>
 8017d24:	6833      	ldr	r3, [r6, #0]
 8017d26:	6820      	ldr	r0, [r4, #0]
 8017d28:	1d19      	adds	r1, r3, #4
 8017d2a:	6031      	str	r1, [r6, #0]
 8017d2c:	0606      	lsls	r6, r0, #24
 8017d2e:	d501      	bpl.n	8017d34 <_printf_i+0xbc>
 8017d30:	681d      	ldr	r5, [r3, #0]
 8017d32:	e003      	b.n	8017d3c <_printf_i+0xc4>
 8017d34:	0645      	lsls	r5, r0, #25
 8017d36:	d5fb      	bpl.n	8017d30 <_printf_i+0xb8>
 8017d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017d3c:	2d00      	cmp	r5, #0
 8017d3e:	da03      	bge.n	8017d48 <_printf_i+0xd0>
 8017d40:	232d      	movs	r3, #45	@ 0x2d
 8017d42:	426d      	negs	r5, r5
 8017d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d48:	4858      	ldr	r0, [pc, #352]	@ (8017eac <_printf_i+0x234>)
 8017d4a:	230a      	movs	r3, #10
 8017d4c:	e011      	b.n	8017d72 <_printf_i+0xfa>
 8017d4e:	6821      	ldr	r1, [r4, #0]
 8017d50:	6833      	ldr	r3, [r6, #0]
 8017d52:	0608      	lsls	r0, r1, #24
 8017d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d58:	d402      	bmi.n	8017d60 <_printf_i+0xe8>
 8017d5a:	0649      	lsls	r1, r1, #25
 8017d5c:	bf48      	it	mi
 8017d5e:	b2ad      	uxthmi	r5, r5
 8017d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8017d62:	4852      	ldr	r0, [pc, #328]	@ (8017eac <_printf_i+0x234>)
 8017d64:	6033      	str	r3, [r6, #0]
 8017d66:	bf14      	ite	ne
 8017d68:	230a      	movne	r3, #10
 8017d6a:	2308      	moveq	r3, #8
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017d72:	6866      	ldr	r6, [r4, #4]
 8017d74:	60a6      	str	r6, [r4, #8]
 8017d76:	2e00      	cmp	r6, #0
 8017d78:	db05      	blt.n	8017d86 <_printf_i+0x10e>
 8017d7a:	6821      	ldr	r1, [r4, #0]
 8017d7c:	432e      	orrs	r6, r5
 8017d7e:	f021 0104 	bic.w	r1, r1, #4
 8017d82:	6021      	str	r1, [r4, #0]
 8017d84:	d04b      	beq.n	8017e1e <_printf_i+0x1a6>
 8017d86:	4616      	mov	r6, r2
 8017d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8017d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8017d90:	5dc7      	ldrb	r7, [r0, r7]
 8017d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017d96:	462f      	mov	r7, r5
 8017d98:	42bb      	cmp	r3, r7
 8017d9a:	460d      	mov	r5, r1
 8017d9c:	d9f4      	bls.n	8017d88 <_printf_i+0x110>
 8017d9e:	2b08      	cmp	r3, #8
 8017da0:	d10b      	bne.n	8017dba <_printf_i+0x142>
 8017da2:	6823      	ldr	r3, [r4, #0]
 8017da4:	07df      	lsls	r7, r3, #31
 8017da6:	d508      	bpl.n	8017dba <_printf_i+0x142>
 8017da8:	6923      	ldr	r3, [r4, #16]
 8017daa:	6861      	ldr	r1, [r4, #4]
 8017dac:	4299      	cmp	r1, r3
 8017dae:	bfde      	ittt	le
 8017db0:	2330      	movle	r3, #48	@ 0x30
 8017db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017db6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017dba:	1b92      	subs	r2, r2, r6
 8017dbc:	6122      	str	r2, [r4, #16]
 8017dbe:	f8cd a000 	str.w	sl, [sp]
 8017dc2:	464b      	mov	r3, r9
 8017dc4:	aa03      	add	r2, sp, #12
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	4640      	mov	r0, r8
 8017dca:	f7ff fee7 	bl	8017b9c <_printf_common>
 8017dce:	3001      	adds	r0, #1
 8017dd0:	d14a      	bne.n	8017e68 <_printf_i+0x1f0>
 8017dd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017dd6:	b004      	add	sp, #16
 8017dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ddc:	6823      	ldr	r3, [r4, #0]
 8017dde:	f043 0320 	orr.w	r3, r3, #32
 8017de2:	6023      	str	r3, [r4, #0]
 8017de4:	4832      	ldr	r0, [pc, #200]	@ (8017eb0 <_printf_i+0x238>)
 8017de6:	2778      	movs	r7, #120	@ 0x78
 8017de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017dec:	6823      	ldr	r3, [r4, #0]
 8017dee:	6831      	ldr	r1, [r6, #0]
 8017df0:	061f      	lsls	r7, r3, #24
 8017df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8017df6:	d402      	bmi.n	8017dfe <_printf_i+0x186>
 8017df8:	065f      	lsls	r7, r3, #25
 8017dfa:	bf48      	it	mi
 8017dfc:	b2ad      	uxthmi	r5, r5
 8017dfe:	6031      	str	r1, [r6, #0]
 8017e00:	07d9      	lsls	r1, r3, #31
 8017e02:	bf44      	itt	mi
 8017e04:	f043 0320 	orrmi.w	r3, r3, #32
 8017e08:	6023      	strmi	r3, [r4, #0]
 8017e0a:	b11d      	cbz	r5, 8017e14 <_printf_i+0x19c>
 8017e0c:	2310      	movs	r3, #16
 8017e0e:	e7ad      	b.n	8017d6c <_printf_i+0xf4>
 8017e10:	4826      	ldr	r0, [pc, #152]	@ (8017eac <_printf_i+0x234>)
 8017e12:	e7e9      	b.n	8017de8 <_printf_i+0x170>
 8017e14:	6823      	ldr	r3, [r4, #0]
 8017e16:	f023 0320 	bic.w	r3, r3, #32
 8017e1a:	6023      	str	r3, [r4, #0]
 8017e1c:	e7f6      	b.n	8017e0c <_printf_i+0x194>
 8017e1e:	4616      	mov	r6, r2
 8017e20:	e7bd      	b.n	8017d9e <_printf_i+0x126>
 8017e22:	6833      	ldr	r3, [r6, #0]
 8017e24:	6825      	ldr	r5, [r4, #0]
 8017e26:	6961      	ldr	r1, [r4, #20]
 8017e28:	1d18      	adds	r0, r3, #4
 8017e2a:	6030      	str	r0, [r6, #0]
 8017e2c:	062e      	lsls	r6, r5, #24
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	d501      	bpl.n	8017e36 <_printf_i+0x1be>
 8017e32:	6019      	str	r1, [r3, #0]
 8017e34:	e002      	b.n	8017e3c <_printf_i+0x1c4>
 8017e36:	0668      	lsls	r0, r5, #25
 8017e38:	d5fb      	bpl.n	8017e32 <_printf_i+0x1ba>
 8017e3a:	8019      	strh	r1, [r3, #0]
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	6123      	str	r3, [r4, #16]
 8017e40:	4616      	mov	r6, r2
 8017e42:	e7bc      	b.n	8017dbe <_printf_i+0x146>
 8017e44:	6833      	ldr	r3, [r6, #0]
 8017e46:	1d1a      	adds	r2, r3, #4
 8017e48:	6032      	str	r2, [r6, #0]
 8017e4a:	681e      	ldr	r6, [r3, #0]
 8017e4c:	6862      	ldr	r2, [r4, #4]
 8017e4e:	2100      	movs	r1, #0
 8017e50:	4630      	mov	r0, r6
 8017e52:	f7e8 fa5d 	bl	8000310 <memchr>
 8017e56:	b108      	cbz	r0, 8017e5c <_printf_i+0x1e4>
 8017e58:	1b80      	subs	r0, r0, r6
 8017e5a:	6060      	str	r0, [r4, #4]
 8017e5c:	6863      	ldr	r3, [r4, #4]
 8017e5e:	6123      	str	r3, [r4, #16]
 8017e60:	2300      	movs	r3, #0
 8017e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e66:	e7aa      	b.n	8017dbe <_printf_i+0x146>
 8017e68:	6923      	ldr	r3, [r4, #16]
 8017e6a:	4632      	mov	r2, r6
 8017e6c:	4649      	mov	r1, r9
 8017e6e:	4640      	mov	r0, r8
 8017e70:	47d0      	blx	sl
 8017e72:	3001      	adds	r0, #1
 8017e74:	d0ad      	beq.n	8017dd2 <_printf_i+0x15a>
 8017e76:	6823      	ldr	r3, [r4, #0]
 8017e78:	079b      	lsls	r3, r3, #30
 8017e7a:	d413      	bmi.n	8017ea4 <_printf_i+0x22c>
 8017e7c:	68e0      	ldr	r0, [r4, #12]
 8017e7e:	9b03      	ldr	r3, [sp, #12]
 8017e80:	4298      	cmp	r0, r3
 8017e82:	bfb8      	it	lt
 8017e84:	4618      	movlt	r0, r3
 8017e86:	e7a6      	b.n	8017dd6 <_printf_i+0x15e>
 8017e88:	2301      	movs	r3, #1
 8017e8a:	4632      	mov	r2, r6
 8017e8c:	4649      	mov	r1, r9
 8017e8e:	4640      	mov	r0, r8
 8017e90:	47d0      	blx	sl
 8017e92:	3001      	adds	r0, #1
 8017e94:	d09d      	beq.n	8017dd2 <_printf_i+0x15a>
 8017e96:	3501      	adds	r5, #1
 8017e98:	68e3      	ldr	r3, [r4, #12]
 8017e9a:	9903      	ldr	r1, [sp, #12]
 8017e9c:	1a5b      	subs	r3, r3, r1
 8017e9e:	42ab      	cmp	r3, r5
 8017ea0:	dcf2      	bgt.n	8017e88 <_printf_i+0x210>
 8017ea2:	e7eb      	b.n	8017e7c <_printf_i+0x204>
 8017ea4:	2500      	movs	r5, #0
 8017ea6:	f104 0619 	add.w	r6, r4, #25
 8017eaa:	e7f5      	b.n	8017e98 <_printf_i+0x220>
 8017eac:	0801af0e 	.word	0x0801af0e
 8017eb0:	0801af1f 	.word	0x0801af1f

08017eb4 <std>:
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	4604      	mov	r4, r0
 8017eba:	e9c0 3300 	strd	r3, r3, [r0]
 8017ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ec2:	6083      	str	r3, [r0, #8]
 8017ec4:	8181      	strh	r1, [r0, #12]
 8017ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8017ec8:	81c2      	strh	r2, [r0, #14]
 8017eca:	6183      	str	r3, [r0, #24]
 8017ecc:	4619      	mov	r1, r3
 8017ece:	2208      	movs	r2, #8
 8017ed0:	305c      	adds	r0, #92	@ 0x5c
 8017ed2:	f000 f9f9 	bl	80182c8 <memset>
 8017ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8017f0c <std+0x58>)
 8017ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8017eda:	4b0d      	ldr	r3, [pc, #52]	@ (8017f10 <std+0x5c>)
 8017edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017ede:	4b0d      	ldr	r3, [pc, #52]	@ (8017f14 <std+0x60>)
 8017ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8017f18 <std+0x64>)
 8017ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8017ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8017f1c <std+0x68>)
 8017ee8:	6224      	str	r4, [r4, #32]
 8017eea:	429c      	cmp	r4, r3
 8017eec:	d006      	beq.n	8017efc <std+0x48>
 8017eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017ef2:	4294      	cmp	r4, r2
 8017ef4:	d002      	beq.n	8017efc <std+0x48>
 8017ef6:	33d0      	adds	r3, #208	@ 0xd0
 8017ef8:	429c      	cmp	r4, r3
 8017efa:	d105      	bne.n	8017f08 <std+0x54>
 8017efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f04:	f000 baba 	b.w	801847c <__retarget_lock_init_recursive>
 8017f08:	bd10      	pop	{r4, pc}
 8017f0a:	bf00      	nop
 8017f0c:	08018119 	.word	0x08018119
 8017f10:	0801813b 	.word	0x0801813b
 8017f14:	08018173 	.word	0x08018173
 8017f18:	08018197 	.word	0x08018197
 8017f1c:	24005b34 	.word	0x24005b34

08017f20 <stdio_exit_handler>:
 8017f20:	4a02      	ldr	r2, [pc, #8]	@ (8017f2c <stdio_exit_handler+0xc>)
 8017f22:	4903      	ldr	r1, [pc, #12]	@ (8017f30 <stdio_exit_handler+0x10>)
 8017f24:	4803      	ldr	r0, [pc, #12]	@ (8017f34 <stdio_exit_handler+0x14>)
 8017f26:	f000 b869 	b.w	8017ffc <_fwalk_sglue>
 8017f2a:	bf00      	nop
 8017f2c:	24000024 	.word	0x24000024
 8017f30:	08019ced 	.word	0x08019ced
 8017f34:	24000034 	.word	0x24000034

08017f38 <cleanup_stdio>:
 8017f38:	6841      	ldr	r1, [r0, #4]
 8017f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8017f6c <cleanup_stdio+0x34>)
 8017f3c:	4299      	cmp	r1, r3
 8017f3e:	b510      	push	{r4, lr}
 8017f40:	4604      	mov	r4, r0
 8017f42:	d001      	beq.n	8017f48 <cleanup_stdio+0x10>
 8017f44:	f001 fed2 	bl	8019cec <_fflush_r>
 8017f48:	68a1      	ldr	r1, [r4, #8]
 8017f4a:	4b09      	ldr	r3, [pc, #36]	@ (8017f70 <cleanup_stdio+0x38>)
 8017f4c:	4299      	cmp	r1, r3
 8017f4e:	d002      	beq.n	8017f56 <cleanup_stdio+0x1e>
 8017f50:	4620      	mov	r0, r4
 8017f52:	f001 fecb 	bl	8019cec <_fflush_r>
 8017f56:	68e1      	ldr	r1, [r4, #12]
 8017f58:	4b06      	ldr	r3, [pc, #24]	@ (8017f74 <cleanup_stdio+0x3c>)
 8017f5a:	4299      	cmp	r1, r3
 8017f5c:	d004      	beq.n	8017f68 <cleanup_stdio+0x30>
 8017f5e:	4620      	mov	r0, r4
 8017f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f64:	f001 bec2 	b.w	8019cec <_fflush_r>
 8017f68:	bd10      	pop	{r4, pc}
 8017f6a:	bf00      	nop
 8017f6c:	24005b34 	.word	0x24005b34
 8017f70:	24005b9c 	.word	0x24005b9c
 8017f74:	24005c04 	.word	0x24005c04

08017f78 <global_stdio_init.part.0>:
 8017f78:	b510      	push	{r4, lr}
 8017f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8017fa8 <global_stdio_init.part.0+0x30>)
 8017f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8017fac <global_stdio_init.part.0+0x34>)
 8017f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8017fb0 <global_stdio_init.part.0+0x38>)
 8017f80:	601a      	str	r2, [r3, #0]
 8017f82:	4620      	mov	r0, r4
 8017f84:	2200      	movs	r2, #0
 8017f86:	2104      	movs	r1, #4
 8017f88:	f7ff ff94 	bl	8017eb4 <std>
 8017f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017f90:	2201      	movs	r2, #1
 8017f92:	2109      	movs	r1, #9
 8017f94:	f7ff ff8e 	bl	8017eb4 <std>
 8017f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017f9c:	2202      	movs	r2, #2
 8017f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fa2:	2112      	movs	r1, #18
 8017fa4:	f7ff bf86 	b.w	8017eb4 <std>
 8017fa8:	24005c6c 	.word	0x24005c6c
 8017fac:	24005b34 	.word	0x24005b34
 8017fb0:	08017f21 	.word	0x08017f21

08017fb4 <__sfp_lock_acquire>:
 8017fb4:	4801      	ldr	r0, [pc, #4]	@ (8017fbc <__sfp_lock_acquire+0x8>)
 8017fb6:	f000 ba62 	b.w	801847e <__retarget_lock_acquire_recursive>
 8017fba:	bf00      	nop
 8017fbc:	24005c75 	.word	0x24005c75

08017fc0 <__sfp_lock_release>:
 8017fc0:	4801      	ldr	r0, [pc, #4]	@ (8017fc8 <__sfp_lock_release+0x8>)
 8017fc2:	f000 ba5d 	b.w	8018480 <__retarget_lock_release_recursive>
 8017fc6:	bf00      	nop
 8017fc8:	24005c75 	.word	0x24005c75

08017fcc <__sinit>:
 8017fcc:	b510      	push	{r4, lr}
 8017fce:	4604      	mov	r4, r0
 8017fd0:	f7ff fff0 	bl	8017fb4 <__sfp_lock_acquire>
 8017fd4:	6a23      	ldr	r3, [r4, #32]
 8017fd6:	b11b      	cbz	r3, 8017fe0 <__sinit+0x14>
 8017fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fdc:	f7ff bff0 	b.w	8017fc0 <__sfp_lock_release>
 8017fe0:	4b04      	ldr	r3, [pc, #16]	@ (8017ff4 <__sinit+0x28>)
 8017fe2:	6223      	str	r3, [r4, #32]
 8017fe4:	4b04      	ldr	r3, [pc, #16]	@ (8017ff8 <__sinit+0x2c>)
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d1f5      	bne.n	8017fd8 <__sinit+0xc>
 8017fec:	f7ff ffc4 	bl	8017f78 <global_stdio_init.part.0>
 8017ff0:	e7f2      	b.n	8017fd8 <__sinit+0xc>
 8017ff2:	bf00      	nop
 8017ff4:	08017f39 	.word	0x08017f39
 8017ff8:	24005c6c 	.word	0x24005c6c

08017ffc <_fwalk_sglue>:
 8017ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018000:	4607      	mov	r7, r0
 8018002:	4688      	mov	r8, r1
 8018004:	4614      	mov	r4, r2
 8018006:	2600      	movs	r6, #0
 8018008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801800c:	f1b9 0901 	subs.w	r9, r9, #1
 8018010:	d505      	bpl.n	801801e <_fwalk_sglue+0x22>
 8018012:	6824      	ldr	r4, [r4, #0]
 8018014:	2c00      	cmp	r4, #0
 8018016:	d1f7      	bne.n	8018008 <_fwalk_sglue+0xc>
 8018018:	4630      	mov	r0, r6
 801801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801801e:	89ab      	ldrh	r3, [r5, #12]
 8018020:	2b01      	cmp	r3, #1
 8018022:	d907      	bls.n	8018034 <_fwalk_sglue+0x38>
 8018024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018028:	3301      	adds	r3, #1
 801802a:	d003      	beq.n	8018034 <_fwalk_sglue+0x38>
 801802c:	4629      	mov	r1, r5
 801802e:	4638      	mov	r0, r7
 8018030:	47c0      	blx	r8
 8018032:	4306      	orrs	r6, r0
 8018034:	3568      	adds	r5, #104	@ 0x68
 8018036:	e7e9      	b.n	801800c <_fwalk_sglue+0x10>

08018038 <iprintf>:
 8018038:	b40f      	push	{r0, r1, r2, r3}
 801803a:	b507      	push	{r0, r1, r2, lr}
 801803c:	4906      	ldr	r1, [pc, #24]	@ (8018058 <iprintf+0x20>)
 801803e:	ab04      	add	r3, sp, #16
 8018040:	6808      	ldr	r0, [r1, #0]
 8018042:	f853 2b04 	ldr.w	r2, [r3], #4
 8018046:	6881      	ldr	r1, [r0, #8]
 8018048:	9301      	str	r3, [sp, #4]
 801804a:	f001 fcb3 	bl	80199b4 <_vfiprintf_r>
 801804e:	b003      	add	sp, #12
 8018050:	f85d eb04 	ldr.w	lr, [sp], #4
 8018054:	b004      	add	sp, #16
 8018056:	4770      	bx	lr
 8018058:	24000030 	.word	0x24000030

0801805c <_puts_r>:
 801805c:	6a03      	ldr	r3, [r0, #32]
 801805e:	b570      	push	{r4, r5, r6, lr}
 8018060:	6884      	ldr	r4, [r0, #8]
 8018062:	4605      	mov	r5, r0
 8018064:	460e      	mov	r6, r1
 8018066:	b90b      	cbnz	r3, 801806c <_puts_r+0x10>
 8018068:	f7ff ffb0 	bl	8017fcc <__sinit>
 801806c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801806e:	07db      	lsls	r3, r3, #31
 8018070:	d405      	bmi.n	801807e <_puts_r+0x22>
 8018072:	89a3      	ldrh	r3, [r4, #12]
 8018074:	0598      	lsls	r0, r3, #22
 8018076:	d402      	bmi.n	801807e <_puts_r+0x22>
 8018078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801807a:	f000 fa00 	bl	801847e <__retarget_lock_acquire_recursive>
 801807e:	89a3      	ldrh	r3, [r4, #12]
 8018080:	0719      	lsls	r1, r3, #28
 8018082:	d502      	bpl.n	801808a <_puts_r+0x2e>
 8018084:	6923      	ldr	r3, [r4, #16]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d135      	bne.n	80180f6 <_puts_r+0x9a>
 801808a:	4621      	mov	r1, r4
 801808c:	4628      	mov	r0, r5
 801808e:	f000 f8c5 	bl	801821c <__swsetup_r>
 8018092:	b380      	cbz	r0, 80180f6 <_puts_r+0x9a>
 8018094:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801809a:	07da      	lsls	r2, r3, #31
 801809c:	d405      	bmi.n	80180aa <_puts_r+0x4e>
 801809e:	89a3      	ldrh	r3, [r4, #12]
 80180a0:	059b      	lsls	r3, r3, #22
 80180a2:	d402      	bmi.n	80180aa <_puts_r+0x4e>
 80180a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80180a6:	f000 f9eb 	bl	8018480 <__retarget_lock_release_recursive>
 80180aa:	4628      	mov	r0, r5
 80180ac:	bd70      	pop	{r4, r5, r6, pc}
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	da04      	bge.n	80180bc <_puts_r+0x60>
 80180b2:	69a2      	ldr	r2, [r4, #24]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	dc17      	bgt.n	80180e8 <_puts_r+0x8c>
 80180b8:	290a      	cmp	r1, #10
 80180ba:	d015      	beq.n	80180e8 <_puts_r+0x8c>
 80180bc:	6823      	ldr	r3, [r4, #0]
 80180be:	1c5a      	adds	r2, r3, #1
 80180c0:	6022      	str	r2, [r4, #0]
 80180c2:	7019      	strb	r1, [r3, #0]
 80180c4:	68a3      	ldr	r3, [r4, #8]
 80180c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80180ca:	3b01      	subs	r3, #1
 80180cc:	60a3      	str	r3, [r4, #8]
 80180ce:	2900      	cmp	r1, #0
 80180d0:	d1ed      	bne.n	80180ae <_puts_r+0x52>
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	da11      	bge.n	80180fa <_puts_r+0x9e>
 80180d6:	4622      	mov	r2, r4
 80180d8:	210a      	movs	r1, #10
 80180da:	4628      	mov	r0, r5
 80180dc:	f000 f85f 	bl	801819e <__swbuf_r>
 80180e0:	3001      	adds	r0, #1
 80180e2:	d0d7      	beq.n	8018094 <_puts_r+0x38>
 80180e4:	250a      	movs	r5, #10
 80180e6:	e7d7      	b.n	8018098 <_puts_r+0x3c>
 80180e8:	4622      	mov	r2, r4
 80180ea:	4628      	mov	r0, r5
 80180ec:	f000 f857 	bl	801819e <__swbuf_r>
 80180f0:	3001      	adds	r0, #1
 80180f2:	d1e7      	bne.n	80180c4 <_puts_r+0x68>
 80180f4:	e7ce      	b.n	8018094 <_puts_r+0x38>
 80180f6:	3e01      	subs	r6, #1
 80180f8:	e7e4      	b.n	80180c4 <_puts_r+0x68>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	1c5a      	adds	r2, r3, #1
 80180fe:	6022      	str	r2, [r4, #0]
 8018100:	220a      	movs	r2, #10
 8018102:	701a      	strb	r2, [r3, #0]
 8018104:	e7ee      	b.n	80180e4 <_puts_r+0x88>
	...

08018108 <puts>:
 8018108:	4b02      	ldr	r3, [pc, #8]	@ (8018114 <puts+0xc>)
 801810a:	4601      	mov	r1, r0
 801810c:	6818      	ldr	r0, [r3, #0]
 801810e:	f7ff bfa5 	b.w	801805c <_puts_r>
 8018112:	bf00      	nop
 8018114:	24000030 	.word	0x24000030

08018118 <__sread>:
 8018118:	b510      	push	{r4, lr}
 801811a:	460c      	mov	r4, r1
 801811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018120:	f000 f95e 	bl	80183e0 <_read_r>
 8018124:	2800      	cmp	r0, #0
 8018126:	bfab      	itete	ge
 8018128:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801812a:	89a3      	ldrhlt	r3, [r4, #12]
 801812c:	181b      	addge	r3, r3, r0
 801812e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018132:	bfac      	ite	ge
 8018134:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018136:	81a3      	strhlt	r3, [r4, #12]
 8018138:	bd10      	pop	{r4, pc}

0801813a <__swrite>:
 801813a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801813e:	461f      	mov	r7, r3
 8018140:	898b      	ldrh	r3, [r1, #12]
 8018142:	05db      	lsls	r3, r3, #23
 8018144:	4605      	mov	r5, r0
 8018146:	460c      	mov	r4, r1
 8018148:	4616      	mov	r6, r2
 801814a:	d505      	bpl.n	8018158 <__swrite+0x1e>
 801814c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018150:	2302      	movs	r3, #2
 8018152:	2200      	movs	r2, #0
 8018154:	f000 f932 	bl	80183bc <_lseek_r>
 8018158:	89a3      	ldrh	r3, [r4, #12]
 801815a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801815e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	4632      	mov	r2, r6
 8018166:	463b      	mov	r3, r7
 8018168:	4628      	mov	r0, r5
 801816a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801816e:	f000 b949 	b.w	8018404 <_write_r>

08018172 <__sseek>:
 8018172:	b510      	push	{r4, lr}
 8018174:	460c      	mov	r4, r1
 8018176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801817a:	f000 f91f 	bl	80183bc <_lseek_r>
 801817e:	1c43      	adds	r3, r0, #1
 8018180:	89a3      	ldrh	r3, [r4, #12]
 8018182:	bf15      	itete	ne
 8018184:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018186:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801818a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801818e:	81a3      	strheq	r3, [r4, #12]
 8018190:	bf18      	it	ne
 8018192:	81a3      	strhne	r3, [r4, #12]
 8018194:	bd10      	pop	{r4, pc}

08018196 <__sclose>:
 8018196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801819a:	f000 b8a1 	b.w	80182e0 <_close_r>

0801819e <__swbuf_r>:
 801819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181a0:	460e      	mov	r6, r1
 80181a2:	4614      	mov	r4, r2
 80181a4:	4605      	mov	r5, r0
 80181a6:	b118      	cbz	r0, 80181b0 <__swbuf_r+0x12>
 80181a8:	6a03      	ldr	r3, [r0, #32]
 80181aa:	b90b      	cbnz	r3, 80181b0 <__swbuf_r+0x12>
 80181ac:	f7ff ff0e 	bl	8017fcc <__sinit>
 80181b0:	69a3      	ldr	r3, [r4, #24]
 80181b2:	60a3      	str	r3, [r4, #8]
 80181b4:	89a3      	ldrh	r3, [r4, #12]
 80181b6:	071a      	lsls	r2, r3, #28
 80181b8:	d501      	bpl.n	80181be <__swbuf_r+0x20>
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	b943      	cbnz	r3, 80181d0 <__swbuf_r+0x32>
 80181be:	4621      	mov	r1, r4
 80181c0:	4628      	mov	r0, r5
 80181c2:	f000 f82b 	bl	801821c <__swsetup_r>
 80181c6:	b118      	cbz	r0, 80181d0 <__swbuf_r+0x32>
 80181c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80181cc:	4638      	mov	r0, r7
 80181ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181d0:	6823      	ldr	r3, [r4, #0]
 80181d2:	6922      	ldr	r2, [r4, #16]
 80181d4:	1a98      	subs	r0, r3, r2
 80181d6:	6963      	ldr	r3, [r4, #20]
 80181d8:	b2f6      	uxtb	r6, r6
 80181da:	4283      	cmp	r3, r0
 80181dc:	4637      	mov	r7, r6
 80181de:	dc05      	bgt.n	80181ec <__swbuf_r+0x4e>
 80181e0:	4621      	mov	r1, r4
 80181e2:	4628      	mov	r0, r5
 80181e4:	f001 fd82 	bl	8019cec <_fflush_r>
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d1ed      	bne.n	80181c8 <__swbuf_r+0x2a>
 80181ec:	68a3      	ldr	r3, [r4, #8]
 80181ee:	3b01      	subs	r3, #1
 80181f0:	60a3      	str	r3, [r4, #8]
 80181f2:	6823      	ldr	r3, [r4, #0]
 80181f4:	1c5a      	adds	r2, r3, #1
 80181f6:	6022      	str	r2, [r4, #0]
 80181f8:	701e      	strb	r6, [r3, #0]
 80181fa:	6962      	ldr	r2, [r4, #20]
 80181fc:	1c43      	adds	r3, r0, #1
 80181fe:	429a      	cmp	r2, r3
 8018200:	d004      	beq.n	801820c <__swbuf_r+0x6e>
 8018202:	89a3      	ldrh	r3, [r4, #12]
 8018204:	07db      	lsls	r3, r3, #31
 8018206:	d5e1      	bpl.n	80181cc <__swbuf_r+0x2e>
 8018208:	2e0a      	cmp	r6, #10
 801820a:	d1df      	bne.n	80181cc <__swbuf_r+0x2e>
 801820c:	4621      	mov	r1, r4
 801820e:	4628      	mov	r0, r5
 8018210:	f001 fd6c 	bl	8019cec <_fflush_r>
 8018214:	2800      	cmp	r0, #0
 8018216:	d0d9      	beq.n	80181cc <__swbuf_r+0x2e>
 8018218:	e7d6      	b.n	80181c8 <__swbuf_r+0x2a>
	...

0801821c <__swsetup_r>:
 801821c:	b538      	push	{r3, r4, r5, lr}
 801821e:	4b29      	ldr	r3, [pc, #164]	@ (80182c4 <__swsetup_r+0xa8>)
 8018220:	4605      	mov	r5, r0
 8018222:	6818      	ldr	r0, [r3, #0]
 8018224:	460c      	mov	r4, r1
 8018226:	b118      	cbz	r0, 8018230 <__swsetup_r+0x14>
 8018228:	6a03      	ldr	r3, [r0, #32]
 801822a:	b90b      	cbnz	r3, 8018230 <__swsetup_r+0x14>
 801822c:	f7ff fece 	bl	8017fcc <__sinit>
 8018230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018234:	0719      	lsls	r1, r3, #28
 8018236:	d422      	bmi.n	801827e <__swsetup_r+0x62>
 8018238:	06da      	lsls	r2, r3, #27
 801823a:	d407      	bmi.n	801824c <__swsetup_r+0x30>
 801823c:	2209      	movs	r2, #9
 801823e:	602a      	str	r2, [r5, #0]
 8018240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018244:	81a3      	strh	r3, [r4, #12]
 8018246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801824a:	e033      	b.n	80182b4 <__swsetup_r+0x98>
 801824c:	0758      	lsls	r0, r3, #29
 801824e:	d512      	bpl.n	8018276 <__swsetup_r+0x5a>
 8018250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018252:	b141      	cbz	r1, 8018266 <__swsetup_r+0x4a>
 8018254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018258:	4299      	cmp	r1, r3
 801825a:	d002      	beq.n	8018262 <__swsetup_r+0x46>
 801825c:	4628      	mov	r0, r5
 801825e:	f000 ff05 	bl	801906c <_free_r>
 8018262:	2300      	movs	r3, #0
 8018264:	6363      	str	r3, [r4, #52]	@ 0x34
 8018266:	89a3      	ldrh	r3, [r4, #12]
 8018268:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801826c:	81a3      	strh	r3, [r4, #12]
 801826e:	2300      	movs	r3, #0
 8018270:	6063      	str	r3, [r4, #4]
 8018272:	6923      	ldr	r3, [r4, #16]
 8018274:	6023      	str	r3, [r4, #0]
 8018276:	89a3      	ldrh	r3, [r4, #12]
 8018278:	f043 0308 	orr.w	r3, r3, #8
 801827c:	81a3      	strh	r3, [r4, #12]
 801827e:	6923      	ldr	r3, [r4, #16]
 8018280:	b94b      	cbnz	r3, 8018296 <__swsetup_r+0x7a>
 8018282:	89a3      	ldrh	r3, [r4, #12]
 8018284:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801828c:	d003      	beq.n	8018296 <__swsetup_r+0x7a>
 801828e:	4621      	mov	r1, r4
 8018290:	4628      	mov	r0, r5
 8018292:	f001 fd79 	bl	8019d88 <__smakebuf_r>
 8018296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801829a:	f013 0201 	ands.w	r2, r3, #1
 801829e:	d00a      	beq.n	80182b6 <__swsetup_r+0x9a>
 80182a0:	2200      	movs	r2, #0
 80182a2:	60a2      	str	r2, [r4, #8]
 80182a4:	6962      	ldr	r2, [r4, #20]
 80182a6:	4252      	negs	r2, r2
 80182a8:	61a2      	str	r2, [r4, #24]
 80182aa:	6922      	ldr	r2, [r4, #16]
 80182ac:	b942      	cbnz	r2, 80182c0 <__swsetup_r+0xa4>
 80182ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80182b2:	d1c5      	bne.n	8018240 <__swsetup_r+0x24>
 80182b4:	bd38      	pop	{r3, r4, r5, pc}
 80182b6:	0799      	lsls	r1, r3, #30
 80182b8:	bf58      	it	pl
 80182ba:	6962      	ldrpl	r2, [r4, #20]
 80182bc:	60a2      	str	r2, [r4, #8]
 80182be:	e7f4      	b.n	80182aa <__swsetup_r+0x8e>
 80182c0:	2000      	movs	r0, #0
 80182c2:	e7f7      	b.n	80182b4 <__swsetup_r+0x98>
 80182c4:	24000030 	.word	0x24000030

080182c8 <memset>:
 80182c8:	4402      	add	r2, r0
 80182ca:	4603      	mov	r3, r0
 80182cc:	4293      	cmp	r3, r2
 80182ce:	d100      	bne.n	80182d2 <memset+0xa>
 80182d0:	4770      	bx	lr
 80182d2:	f803 1b01 	strb.w	r1, [r3], #1
 80182d6:	e7f9      	b.n	80182cc <memset+0x4>

080182d8 <_localeconv_r>:
 80182d8:	4800      	ldr	r0, [pc, #0]	@ (80182dc <_localeconv_r+0x4>)
 80182da:	4770      	bx	lr
 80182dc:	24000170 	.word	0x24000170

080182e0 <_close_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4d06      	ldr	r5, [pc, #24]	@ (80182fc <_close_r+0x1c>)
 80182e4:	2300      	movs	r3, #0
 80182e6:	4604      	mov	r4, r0
 80182e8:	4608      	mov	r0, r1
 80182ea:	602b      	str	r3, [r5, #0]
 80182ec:	f7eb fe06 	bl	8003efc <_close>
 80182f0:	1c43      	adds	r3, r0, #1
 80182f2:	d102      	bne.n	80182fa <_close_r+0x1a>
 80182f4:	682b      	ldr	r3, [r5, #0]
 80182f6:	b103      	cbz	r3, 80182fa <_close_r+0x1a>
 80182f8:	6023      	str	r3, [r4, #0]
 80182fa:	bd38      	pop	{r3, r4, r5, pc}
 80182fc:	24005c70 	.word	0x24005c70

08018300 <_reclaim_reent>:
 8018300:	4b2d      	ldr	r3, [pc, #180]	@ (80183b8 <_reclaim_reent+0xb8>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	4283      	cmp	r3, r0
 8018306:	b570      	push	{r4, r5, r6, lr}
 8018308:	4604      	mov	r4, r0
 801830a:	d053      	beq.n	80183b4 <_reclaim_reent+0xb4>
 801830c:	69c3      	ldr	r3, [r0, #28]
 801830e:	b31b      	cbz	r3, 8018358 <_reclaim_reent+0x58>
 8018310:	68db      	ldr	r3, [r3, #12]
 8018312:	b163      	cbz	r3, 801832e <_reclaim_reent+0x2e>
 8018314:	2500      	movs	r5, #0
 8018316:	69e3      	ldr	r3, [r4, #28]
 8018318:	68db      	ldr	r3, [r3, #12]
 801831a:	5959      	ldr	r1, [r3, r5]
 801831c:	b9b1      	cbnz	r1, 801834c <_reclaim_reent+0x4c>
 801831e:	3504      	adds	r5, #4
 8018320:	2d80      	cmp	r5, #128	@ 0x80
 8018322:	d1f8      	bne.n	8018316 <_reclaim_reent+0x16>
 8018324:	69e3      	ldr	r3, [r4, #28]
 8018326:	4620      	mov	r0, r4
 8018328:	68d9      	ldr	r1, [r3, #12]
 801832a:	f000 fe9f 	bl	801906c <_free_r>
 801832e:	69e3      	ldr	r3, [r4, #28]
 8018330:	6819      	ldr	r1, [r3, #0]
 8018332:	b111      	cbz	r1, 801833a <_reclaim_reent+0x3a>
 8018334:	4620      	mov	r0, r4
 8018336:	f000 fe99 	bl	801906c <_free_r>
 801833a:	69e3      	ldr	r3, [r4, #28]
 801833c:	689d      	ldr	r5, [r3, #8]
 801833e:	b15d      	cbz	r5, 8018358 <_reclaim_reent+0x58>
 8018340:	4629      	mov	r1, r5
 8018342:	4620      	mov	r0, r4
 8018344:	682d      	ldr	r5, [r5, #0]
 8018346:	f000 fe91 	bl	801906c <_free_r>
 801834a:	e7f8      	b.n	801833e <_reclaim_reent+0x3e>
 801834c:	680e      	ldr	r6, [r1, #0]
 801834e:	4620      	mov	r0, r4
 8018350:	f000 fe8c 	bl	801906c <_free_r>
 8018354:	4631      	mov	r1, r6
 8018356:	e7e1      	b.n	801831c <_reclaim_reent+0x1c>
 8018358:	6961      	ldr	r1, [r4, #20]
 801835a:	b111      	cbz	r1, 8018362 <_reclaim_reent+0x62>
 801835c:	4620      	mov	r0, r4
 801835e:	f000 fe85 	bl	801906c <_free_r>
 8018362:	69e1      	ldr	r1, [r4, #28]
 8018364:	b111      	cbz	r1, 801836c <_reclaim_reent+0x6c>
 8018366:	4620      	mov	r0, r4
 8018368:	f000 fe80 	bl	801906c <_free_r>
 801836c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801836e:	b111      	cbz	r1, 8018376 <_reclaim_reent+0x76>
 8018370:	4620      	mov	r0, r4
 8018372:	f000 fe7b 	bl	801906c <_free_r>
 8018376:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018378:	b111      	cbz	r1, 8018380 <_reclaim_reent+0x80>
 801837a:	4620      	mov	r0, r4
 801837c:	f000 fe76 	bl	801906c <_free_r>
 8018380:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018382:	b111      	cbz	r1, 801838a <_reclaim_reent+0x8a>
 8018384:	4620      	mov	r0, r4
 8018386:	f000 fe71 	bl	801906c <_free_r>
 801838a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801838c:	b111      	cbz	r1, 8018394 <_reclaim_reent+0x94>
 801838e:	4620      	mov	r0, r4
 8018390:	f000 fe6c 	bl	801906c <_free_r>
 8018394:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018396:	b111      	cbz	r1, 801839e <_reclaim_reent+0x9e>
 8018398:	4620      	mov	r0, r4
 801839a:	f000 fe67 	bl	801906c <_free_r>
 801839e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80183a0:	b111      	cbz	r1, 80183a8 <_reclaim_reent+0xa8>
 80183a2:	4620      	mov	r0, r4
 80183a4:	f000 fe62 	bl	801906c <_free_r>
 80183a8:	6a23      	ldr	r3, [r4, #32]
 80183aa:	b11b      	cbz	r3, 80183b4 <_reclaim_reent+0xb4>
 80183ac:	4620      	mov	r0, r4
 80183ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183b2:	4718      	bx	r3
 80183b4:	bd70      	pop	{r4, r5, r6, pc}
 80183b6:	bf00      	nop
 80183b8:	24000030 	.word	0x24000030

080183bc <_lseek_r>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4d07      	ldr	r5, [pc, #28]	@ (80183dc <_lseek_r+0x20>)
 80183c0:	4604      	mov	r4, r0
 80183c2:	4608      	mov	r0, r1
 80183c4:	4611      	mov	r1, r2
 80183c6:	2200      	movs	r2, #0
 80183c8:	602a      	str	r2, [r5, #0]
 80183ca:	461a      	mov	r2, r3
 80183cc:	f7eb fdbd 	bl	8003f4a <_lseek>
 80183d0:	1c43      	adds	r3, r0, #1
 80183d2:	d102      	bne.n	80183da <_lseek_r+0x1e>
 80183d4:	682b      	ldr	r3, [r5, #0]
 80183d6:	b103      	cbz	r3, 80183da <_lseek_r+0x1e>
 80183d8:	6023      	str	r3, [r4, #0]
 80183da:	bd38      	pop	{r3, r4, r5, pc}
 80183dc:	24005c70 	.word	0x24005c70

080183e0 <_read_r>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	4d07      	ldr	r5, [pc, #28]	@ (8018400 <_read_r+0x20>)
 80183e4:	4604      	mov	r4, r0
 80183e6:	4608      	mov	r0, r1
 80183e8:	4611      	mov	r1, r2
 80183ea:	2200      	movs	r2, #0
 80183ec:	602a      	str	r2, [r5, #0]
 80183ee:	461a      	mov	r2, r3
 80183f0:	f7eb fd67 	bl	8003ec2 <_read>
 80183f4:	1c43      	adds	r3, r0, #1
 80183f6:	d102      	bne.n	80183fe <_read_r+0x1e>
 80183f8:	682b      	ldr	r3, [r5, #0]
 80183fa:	b103      	cbz	r3, 80183fe <_read_r+0x1e>
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	bd38      	pop	{r3, r4, r5, pc}
 8018400:	24005c70 	.word	0x24005c70

08018404 <_write_r>:
 8018404:	b538      	push	{r3, r4, r5, lr}
 8018406:	4d07      	ldr	r5, [pc, #28]	@ (8018424 <_write_r+0x20>)
 8018408:	4604      	mov	r4, r0
 801840a:	4608      	mov	r0, r1
 801840c:	4611      	mov	r1, r2
 801840e:	2200      	movs	r2, #0
 8018410:	602a      	str	r2, [r5, #0]
 8018412:	461a      	mov	r2, r3
 8018414:	f7ea f9c2 	bl	800279c <_write>
 8018418:	1c43      	adds	r3, r0, #1
 801841a:	d102      	bne.n	8018422 <_write_r+0x1e>
 801841c:	682b      	ldr	r3, [r5, #0]
 801841e:	b103      	cbz	r3, 8018422 <_write_r+0x1e>
 8018420:	6023      	str	r3, [r4, #0]
 8018422:	bd38      	pop	{r3, r4, r5, pc}
 8018424:	24005c70 	.word	0x24005c70

08018428 <__errno>:
 8018428:	4b01      	ldr	r3, [pc, #4]	@ (8018430 <__errno+0x8>)
 801842a:	6818      	ldr	r0, [r3, #0]
 801842c:	4770      	bx	lr
 801842e:	bf00      	nop
 8018430:	24000030 	.word	0x24000030

08018434 <__libc_init_array>:
 8018434:	b570      	push	{r4, r5, r6, lr}
 8018436:	4d0d      	ldr	r5, [pc, #52]	@ (801846c <__libc_init_array+0x38>)
 8018438:	4c0d      	ldr	r4, [pc, #52]	@ (8018470 <__libc_init_array+0x3c>)
 801843a:	1b64      	subs	r4, r4, r5
 801843c:	10a4      	asrs	r4, r4, #2
 801843e:	2600      	movs	r6, #0
 8018440:	42a6      	cmp	r6, r4
 8018442:	d109      	bne.n	8018458 <__libc_init_array+0x24>
 8018444:	4d0b      	ldr	r5, [pc, #44]	@ (8018474 <__libc_init_array+0x40>)
 8018446:	4c0c      	ldr	r4, [pc, #48]	@ (8018478 <__libc_init_array+0x44>)
 8018448:	f001 fdbc 	bl	8019fc4 <_init>
 801844c:	1b64      	subs	r4, r4, r5
 801844e:	10a4      	asrs	r4, r4, #2
 8018450:	2600      	movs	r6, #0
 8018452:	42a6      	cmp	r6, r4
 8018454:	d105      	bne.n	8018462 <__libc_init_array+0x2e>
 8018456:	bd70      	pop	{r4, r5, r6, pc}
 8018458:	f855 3b04 	ldr.w	r3, [r5], #4
 801845c:	4798      	blx	r3
 801845e:	3601      	adds	r6, #1
 8018460:	e7ee      	b.n	8018440 <__libc_init_array+0xc>
 8018462:	f855 3b04 	ldr.w	r3, [r5], #4
 8018466:	4798      	blx	r3
 8018468:	3601      	adds	r6, #1
 801846a:	e7f2      	b.n	8018452 <__libc_init_array+0x1e>
 801846c:	0801b27c 	.word	0x0801b27c
 8018470:	0801b27c 	.word	0x0801b27c
 8018474:	0801b27c 	.word	0x0801b27c
 8018478:	0801b280 	.word	0x0801b280

0801847c <__retarget_lock_init_recursive>:
 801847c:	4770      	bx	lr

0801847e <__retarget_lock_acquire_recursive>:
 801847e:	4770      	bx	lr

08018480 <__retarget_lock_release_recursive>:
 8018480:	4770      	bx	lr

08018482 <memcpy>:
 8018482:	440a      	add	r2, r1
 8018484:	4291      	cmp	r1, r2
 8018486:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801848a:	d100      	bne.n	801848e <memcpy+0xc>
 801848c:	4770      	bx	lr
 801848e:	b510      	push	{r4, lr}
 8018490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018498:	4291      	cmp	r1, r2
 801849a:	d1f9      	bne.n	8018490 <memcpy+0xe>
 801849c:	bd10      	pop	{r4, pc}

0801849e <quorem>:
 801849e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a2:	6903      	ldr	r3, [r0, #16]
 80184a4:	690c      	ldr	r4, [r1, #16]
 80184a6:	42a3      	cmp	r3, r4
 80184a8:	4607      	mov	r7, r0
 80184aa:	db7e      	blt.n	80185aa <quorem+0x10c>
 80184ac:	3c01      	subs	r4, #1
 80184ae:	f101 0814 	add.w	r8, r1, #20
 80184b2:	00a3      	lsls	r3, r4, #2
 80184b4:	f100 0514 	add.w	r5, r0, #20
 80184b8:	9300      	str	r3, [sp, #0]
 80184ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80184be:	9301      	str	r3, [sp, #4]
 80184c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80184c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80184c8:	3301      	adds	r3, #1
 80184ca:	429a      	cmp	r2, r3
 80184cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80184d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80184d4:	d32e      	bcc.n	8018534 <quorem+0x96>
 80184d6:	f04f 0a00 	mov.w	sl, #0
 80184da:	46c4      	mov	ip, r8
 80184dc:	46ae      	mov	lr, r5
 80184de:	46d3      	mov	fp, sl
 80184e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80184e4:	b298      	uxth	r0, r3
 80184e6:	fb06 a000 	mla	r0, r6, r0, sl
 80184ea:	0c02      	lsrs	r2, r0, #16
 80184ec:	0c1b      	lsrs	r3, r3, #16
 80184ee:	fb06 2303 	mla	r3, r6, r3, r2
 80184f2:	f8de 2000 	ldr.w	r2, [lr]
 80184f6:	b280      	uxth	r0, r0
 80184f8:	b292      	uxth	r2, r2
 80184fa:	1a12      	subs	r2, r2, r0
 80184fc:	445a      	add	r2, fp
 80184fe:	f8de 0000 	ldr.w	r0, [lr]
 8018502:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018506:	b29b      	uxth	r3, r3
 8018508:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801850c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018510:	b292      	uxth	r2, r2
 8018512:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018516:	45e1      	cmp	r9, ip
 8018518:	f84e 2b04 	str.w	r2, [lr], #4
 801851c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018520:	d2de      	bcs.n	80184e0 <quorem+0x42>
 8018522:	9b00      	ldr	r3, [sp, #0]
 8018524:	58eb      	ldr	r3, [r5, r3]
 8018526:	b92b      	cbnz	r3, 8018534 <quorem+0x96>
 8018528:	9b01      	ldr	r3, [sp, #4]
 801852a:	3b04      	subs	r3, #4
 801852c:	429d      	cmp	r5, r3
 801852e:	461a      	mov	r2, r3
 8018530:	d32f      	bcc.n	8018592 <quorem+0xf4>
 8018532:	613c      	str	r4, [r7, #16]
 8018534:	4638      	mov	r0, r7
 8018536:	f001 f90b 	bl	8019750 <__mcmp>
 801853a:	2800      	cmp	r0, #0
 801853c:	db25      	blt.n	801858a <quorem+0xec>
 801853e:	4629      	mov	r1, r5
 8018540:	2000      	movs	r0, #0
 8018542:	f858 2b04 	ldr.w	r2, [r8], #4
 8018546:	f8d1 c000 	ldr.w	ip, [r1]
 801854a:	fa1f fe82 	uxth.w	lr, r2
 801854e:	fa1f f38c 	uxth.w	r3, ip
 8018552:	eba3 030e 	sub.w	r3, r3, lr
 8018556:	4403      	add	r3, r0
 8018558:	0c12      	lsrs	r2, r2, #16
 801855a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801855e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018562:	b29b      	uxth	r3, r3
 8018564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018568:	45c1      	cmp	r9, r8
 801856a:	f841 3b04 	str.w	r3, [r1], #4
 801856e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018572:	d2e6      	bcs.n	8018542 <quorem+0xa4>
 8018574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018578:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801857c:	b922      	cbnz	r2, 8018588 <quorem+0xea>
 801857e:	3b04      	subs	r3, #4
 8018580:	429d      	cmp	r5, r3
 8018582:	461a      	mov	r2, r3
 8018584:	d30b      	bcc.n	801859e <quorem+0x100>
 8018586:	613c      	str	r4, [r7, #16]
 8018588:	3601      	adds	r6, #1
 801858a:	4630      	mov	r0, r6
 801858c:	b003      	add	sp, #12
 801858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018592:	6812      	ldr	r2, [r2, #0]
 8018594:	3b04      	subs	r3, #4
 8018596:	2a00      	cmp	r2, #0
 8018598:	d1cb      	bne.n	8018532 <quorem+0x94>
 801859a:	3c01      	subs	r4, #1
 801859c:	e7c6      	b.n	801852c <quorem+0x8e>
 801859e:	6812      	ldr	r2, [r2, #0]
 80185a0:	3b04      	subs	r3, #4
 80185a2:	2a00      	cmp	r2, #0
 80185a4:	d1ef      	bne.n	8018586 <quorem+0xe8>
 80185a6:	3c01      	subs	r4, #1
 80185a8:	e7ea      	b.n	8018580 <quorem+0xe2>
 80185aa:	2000      	movs	r0, #0
 80185ac:	e7ee      	b.n	801858c <quorem+0xee>
	...

080185b0 <_dtoa_r>:
 80185b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b4:	ed2d 8b02 	vpush	{d8}
 80185b8:	69c7      	ldr	r7, [r0, #28]
 80185ba:	b091      	sub	sp, #68	@ 0x44
 80185bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80185c0:	ec55 4b10 	vmov	r4, r5, d0
 80185c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80185c6:	9107      	str	r1, [sp, #28]
 80185c8:	4681      	mov	r9, r0
 80185ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80185cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80185ce:	b97f      	cbnz	r7, 80185f0 <_dtoa_r+0x40>
 80185d0:	2010      	movs	r0, #16
 80185d2:	f000 fd95 	bl	8019100 <malloc>
 80185d6:	4602      	mov	r2, r0
 80185d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80185dc:	b920      	cbnz	r0, 80185e8 <_dtoa_r+0x38>
 80185de:	4ba0      	ldr	r3, [pc, #640]	@ (8018860 <_dtoa_r+0x2b0>)
 80185e0:	21ef      	movs	r1, #239	@ 0xef
 80185e2:	48a0      	ldr	r0, [pc, #640]	@ (8018864 <_dtoa_r+0x2b4>)
 80185e4:	f001 fc3e 	bl	8019e64 <__assert_func>
 80185e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80185ec:	6007      	str	r7, [r0, #0]
 80185ee:	60c7      	str	r7, [r0, #12]
 80185f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80185f4:	6819      	ldr	r1, [r3, #0]
 80185f6:	b159      	cbz	r1, 8018610 <_dtoa_r+0x60>
 80185f8:	685a      	ldr	r2, [r3, #4]
 80185fa:	604a      	str	r2, [r1, #4]
 80185fc:	2301      	movs	r3, #1
 80185fe:	4093      	lsls	r3, r2
 8018600:	608b      	str	r3, [r1, #8]
 8018602:	4648      	mov	r0, r9
 8018604:	f000 fe72 	bl	80192ec <_Bfree>
 8018608:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801860c:	2200      	movs	r2, #0
 801860e:	601a      	str	r2, [r3, #0]
 8018610:	1e2b      	subs	r3, r5, #0
 8018612:	bfbb      	ittet	lt
 8018614:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018618:	9303      	strlt	r3, [sp, #12]
 801861a:	2300      	movge	r3, #0
 801861c:	2201      	movlt	r2, #1
 801861e:	bfac      	ite	ge
 8018620:	6033      	strge	r3, [r6, #0]
 8018622:	6032      	strlt	r2, [r6, #0]
 8018624:	4b90      	ldr	r3, [pc, #576]	@ (8018868 <_dtoa_r+0x2b8>)
 8018626:	9e03      	ldr	r6, [sp, #12]
 8018628:	43b3      	bics	r3, r6
 801862a:	d110      	bne.n	801864e <_dtoa_r+0x9e>
 801862c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801862e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018632:	6013      	str	r3, [r2, #0]
 8018634:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8018638:	4323      	orrs	r3, r4
 801863a:	f000 84e6 	beq.w	801900a <_dtoa_r+0xa5a>
 801863e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018640:	4f8a      	ldr	r7, [pc, #552]	@ (801886c <_dtoa_r+0x2bc>)
 8018642:	2b00      	cmp	r3, #0
 8018644:	f000 84e8 	beq.w	8019018 <_dtoa_r+0xa68>
 8018648:	1cfb      	adds	r3, r7, #3
 801864a:	f000 bce3 	b.w	8019014 <_dtoa_r+0xa64>
 801864e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018652:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801865a:	d10a      	bne.n	8018672 <_dtoa_r+0xc2>
 801865c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801865e:	2301      	movs	r3, #1
 8018660:	6013      	str	r3, [r2, #0]
 8018662:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018664:	b113      	cbz	r3, 801866c <_dtoa_r+0xbc>
 8018666:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018668:	4b81      	ldr	r3, [pc, #516]	@ (8018870 <_dtoa_r+0x2c0>)
 801866a:	6013      	str	r3, [r2, #0]
 801866c:	4f81      	ldr	r7, [pc, #516]	@ (8018874 <_dtoa_r+0x2c4>)
 801866e:	f000 bcd3 	b.w	8019018 <_dtoa_r+0xa68>
 8018672:	aa0e      	add	r2, sp, #56	@ 0x38
 8018674:	a90f      	add	r1, sp, #60	@ 0x3c
 8018676:	4648      	mov	r0, r9
 8018678:	eeb0 0b48 	vmov.f64	d0, d8
 801867c:	f001 f918 	bl	80198b0 <__d2b>
 8018680:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018686:	9001      	str	r0, [sp, #4]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d045      	beq.n	8018718 <_dtoa_r+0x168>
 801868c:	eeb0 7b48 	vmov.f64	d7, d8
 8018690:	ee18 1a90 	vmov	r1, s17
 8018694:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018698:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801869c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80186a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80186a4:	2500      	movs	r5, #0
 80186a6:	ee07 1a90 	vmov	s15, r1
 80186aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80186ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018848 <_dtoa_r+0x298>
 80186b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80186b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018850 <_dtoa_r+0x2a0>
 80186ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80186be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018858 <_dtoa_r+0x2a8>
 80186c2:	ee07 3a90 	vmov	s15, r3
 80186c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80186ca:	eeb0 7b46 	vmov.f64	d7, d6
 80186ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80186d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80186d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80186da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186de:	ee16 8a90 	vmov	r8, s13
 80186e2:	d508      	bpl.n	80186f6 <_dtoa_r+0x146>
 80186e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80186e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80186ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186f0:	bf18      	it	ne
 80186f2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80186f6:	f1b8 0f16 	cmp.w	r8, #22
 80186fa:	d82b      	bhi.n	8018754 <_dtoa_r+0x1a4>
 80186fc:	495e      	ldr	r1, [pc, #376]	@ (8018878 <_dtoa_r+0x2c8>)
 80186fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018702:	ed91 7b00 	vldr	d7, [r1]
 8018706:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801870a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801870e:	d501      	bpl.n	8018714 <_dtoa_r+0x164>
 8018710:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8018714:	2100      	movs	r1, #0
 8018716:	e01e      	b.n	8018756 <_dtoa_r+0x1a6>
 8018718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801871a:	4413      	add	r3, r2
 801871c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018720:	2920      	cmp	r1, #32
 8018722:	bfc1      	itttt	gt
 8018724:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018728:	408e      	lslgt	r6, r1
 801872a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801872e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018732:	bfd6      	itet	le
 8018734:	f1c1 0120 	rsble	r1, r1, #32
 8018738:	4331      	orrgt	r1, r6
 801873a:	fa04 f101 	lslle.w	r1, r4, r1
 801873e:	ee07 1a90 	vmov	s15, r1
 8018742:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018746:	3b01      	subs	r3, #1
 8018748:	ee17 1a90 	vmov	r1, s15
 801874c:	2501      	movs	r5, #1
 801874e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018752:	e7a8      	b.n	80186a6 <_dtoa_r+0xf6>
 8018754:	2101      	movs	r1, #1
 8018756:	1ad2      	subs	r2, r2, r3
 8018758:	1e53      	subs	r3, r2, #1
 801875a:	9306      	str	r3, [sp, #24]
 801875c:	bf45      	ittet	mi
 801875e:	f1c2 0301 	rsbmi	r3, r2, #1
 8018762:	9304      	strmi	r3, [sp, #16]
 8018764:	2300      	movpl	r3, #0
 8018766:	2300      	movmi	r3, #0
 8018768:	bf4c      	ite	mi
 801876a:	9306      	strmi	r3, [sp, #24]
 801876c:	9304      	strpl	r3, [sp, #16]
 801876e:	f1b8 0f00 	cmp.w	r8, #0
 8018772:	910c      	str	r1, [sp, #48]	@ 0x30
 8018774:	db18      	blt.n	80187a8 <_dtoa_r+0x1f8>
 8018776:	9b06      	ldr	r3, [sp, #24]
 8018778:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801877c:	4443      	add	r3, r8
 801877e:	9306      	str	r3, [sp, #24]
 8018780:	2300      	movs	r3, #0
 8018782:	9a07      	ldr	r2, [sp, #28]
 8018784:	2a09      	cmp	r2, #9
 8018786:	d845      	bhi.n	8018814 <_dtoa_r+0x264>
 8018788:	2a05      	cmp	r2, #5
 801878a:	bfc4      	itt	gt
 801878c:	3a04      	subgt	r2, #4
 801878e:	9207      	strgt	r2, [sp, #28]
 8018790:	9a07      	ldr	r2, [sp, #28]
 8018792:	f1a2 0202 	sub.w	r2, r2, #2
 8018796:	bfcc      	ite	gt
 8018798:	2400      	movgt	r4, #0
 801879a:	2401      	movle	r4, #1
 801879c:	2a03      	cmp	r2, #3
 801879e:	d844      	bhi.n	801882a <_dtoa_r+0x27a>
 80187a0:	e8df f002 	tbb	[pc, r2]
 80187a4:	0b173634 	.word	0x0b173634
 80187a8:	9b04      	ldr	r3, [sp, #16]
 80187aa:	2200      	movs	r2, #0
 80187ac:	eba3 0308 	sub.w	r3, r3, r8
 80187b0:	9304      	str	r3, [sp, #16]
 80187b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80187b4:	f1c8 0300 	rsb	r3, r8, #0
 80187b8:	e7e3      	b.n	8018782 <_dtoa_r+0x1d2>
 80187ba:	2201      	movs	r2, #1
 80187bc:	9208      	str	r2, [sp, #32]
 80187be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187c0:	eb08 0b02 	add.w	fp, r8, r2
 80187c4:	f10b 0a01 	add.w	sl, fp, #1
 80187c8:	4652      	mov	r2, sl
 80187ca:	2a01      	cmp	r2, #1
 80187cc:	bfb8      	it	lt
 80187ce:	2201      	movlt	r2, #1
 80187d0:	e006      	b.n	80187e0 <_dtoa_r+0x230>
 80187d2:	2201      	movs	r2, #1
 80187d4:	9208      	str	r2, [sp, #32]
 80187d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187d8:	2a00      	cmp	r2, #0
 80187da:	dd29      	ble.n	8018830 <_dtoa_r+0x280>
 80187dc:	4693      	mov	fp, r2
 80187de:	4692      	mov	sl, r2
 80187e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80187e4:	2100      	movs	r1, #0
 80187e6:	2004      	movs	r0, #4
 80187e8:	f100 0614 	add.w	r6, r0, #20
 80187ec:	4296      	cmp	r6, r2
 80187ee:	d926      	bls.n	801883e <_dtoa_r+0x28e>
 80187f0:	6079      	str	r1, [r7, #4]
 80187f2:	4648      	mov	r0, r9
 80187f4:	9305      	str	r3, [sp, #20]
 80187f6:	f000 fd39 	bl	801926c <_Balloc>
 80187fa:	9b05      	ldr	r3, [sp, #20]
 80187fc:	4607      	mov	r7, r0
 80187fe:	2800      	cmp	r0, #0
 8018800:	d13e      	bne.n	8018880 <_dtoa_r+0x2d0>
 8018802:	4b1e      	ldr	r3, [pc, #120]	@ (801887c <_dtoa_r+0x2cc>)
 8018804:	4602      	mov	r2, r0
 8018806:	f240 11af 	movw	r1, #431	@ 0x1af
 801880a:	e6ea      	b.n	80185e2 <_dtoa_r+0x32>
 801880c:	2200      	movs	r2, #0
 801880e:	e7e1      	b.n	80187d4 <_dtoa_r+0x224>
 8018810:	2200      	movs	r2, #0
 8018812:	e7d3      	b.n	80187bc <_dtoa_r+0x20c>
 8018814:	2401      	movs	r4, #1
 8018816:	2200      	movs	r2, #0
 8018818:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801881c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8018820:	2100      	movs	r1, #0
 8018822:	46da      	mov	sl, fp
 8018824:	2212      	movs	r2, #18
 8018826:	9109      	str	r1, [sp, #36]	@ 0x24
 8018828:	e7da      	b.n	80187e0 <_dtoa_r+0x230>
 801882a:	2201      	movs	r2, #1
 801882c:	9208      	str	r2, [sp, #32]
 801882e:	e7f5      	b.n	801881c <_dtoa_r+0x26c>
 8018830:	f04f 0b01 	mov.w	fp, #1
 8018834:	46da      	mov	sl, fp
 8018836:	465a      	mov	r2, fp
 8018838:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801883c:	e7d0      	b.n	80187e0 <_dtoa_r+0x230>
 801883e:	3101      	adds	r1, #1
 8018840:	0040      	lsls	r0, r0, #1
 8018842:	e7d1      	b.n	80187e8 <_dtoa_r+0x238>
 8018844:	f3af 8000 	nop.w
 8018848:	636f4361 	.word	0x636f4361
 801884c:	3fd287a7 	.word	0x3fd287a7
 8018850:	8b60c8b3 	.word	0x8b60c8b3
 8018854:	3fc68a28 	.word	0x3fc68a28
 8018858:	509f79fb 	.word	0x509f79fb
 801885c:	3fd34413 	.word	0x3fd34413
 8018860:	0801af3d 	.word	0x0801af3d
 8018864:	0801af54 	.word	0x0801af54
 8018868:	7ff00000 	.word	0x7ff00000
 801886c:	0801af39 	.word	0x0801af39
 8018870:	0801af0d 	.word	0x0801af0d
 8018874:	0801af0c 	.word	0x0801af0c
 8018878:	0801b0a8 	.word	0x0801b0a8
 801887c:	0801afac 	.word	0x0801afac
 8018880:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018884:	f1ba 0f0e 	cmp.w	sl, #14
 8018888:	6010      	str	r0, [r2, #0]
 801888a:	d86e      	bhi.n	801896a <_dtoa_r+0x3ba>
 801888c:	2c00      	cmp	r4, #0
 801888e:	d06c      	beq.n	801896a <_dtoa_r+0x3ba>
 8018890:	f1b8 0f00 	cmp.w	r8, #0
 8018894:	f340 80b4 	ble.w	8018a00 <_dtoa_r+0x450>
 8018898:	4ac8      	ldr	r2, [pc, #800]	@ (8018bbc <_dtoa_r+0x60c>)
 801889a:	f008 010f 	and.w	r1, r8, #15
 801889e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80188a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80188a6:	ed92 7b00 	vldr	d7, [r2]
 80188aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80188ae:	f000 809b 	beq.w	80189e8 <_dtoa_r+0x438>
 80188b2:	4ac3      	ldr	r2, [pc, #780]	@ (8018bc0 <_dtoa_r+0x610>)
 80188b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80188b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80188bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80188c0:	f001 010f 	and.w	r1, r1, #15
 80188c4:	2203      	movs	r2, #3
 80188c6:	48be      	ldr	r0, [pc, #760]	@ (8018bc0 <_dtoa_r+0x610>)
 80188c8:	2900      	cmp	r1, #0
 80188ca:	f040 808f 	bne.w	80189ec <_dtoa_r+0x43c>
 80188ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80188d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80188d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80188da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80188dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80188e0:	2900      	cmp	r1, #0
 80188e2:	f000 80b3 	beq.w	8018a4c <_dtoa_r+0x49c>
 80188e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80188ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80188ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f2:	f140 80ab 	bpl.w	8018a4c <_dtoa_r+0x49c>
 80188f6:	f1ba 0f00 	cmp.w	sl, #0
 80188fa:	f000 80a7 	beq.w	8018a4c <_dtoa_r+0x49c>
 80188fe:	f1bb 0f00 	cmp.w	fp, #0
 8018902:	dd30      	ble.n	8018966 <_dtoa_r+0x3b6>
 8018904:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018908:	ee27 7b06 	vmul.f64	d7, d7, d6
 801890c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018910:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8018914:	9105      	str	r1, [sp, #20]
 8018916:	3201      	adds	r2, #1
 8018918:	465c      	mov	r4, fp
 801891a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801891e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018922:	ee07 2a90 	vmov	s15, r2
 8018926:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801892a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801892e:	ee15 2a90 	vmov	r2, s11
 8018932:	ec51 0b15 	vmov	r0, r1, d5
 8018936:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801893a:	2c00      	cmp	r4, #0
 801893c:	f040 808a 	bne.w	8018a54 <_dtoa_r+0x4a4>
 8018940:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018944:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018948:	ec41 0b17 	vmov	d7, r0, r1
 801894c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018954:	f300 826a 	bgt.w	8018e2c <_dtoa_r+0x87c>
 8018958:	eeb1 7b47 	vneg.f64	d7, d7
 801895c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018964:	d423      	bmi.n	80189ae <_dtoa_r+0x3fe>
 8018966:	ed8d 8b02 	vstr	d8, [sp, #8]
 801896a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801896c:	2a00      	cmp	r2, #0
 801896e:	f2c0 8129 	blt.w	8018bc4 <_dtoa_r+0x614>
 8018972:	f1b8 0f0e 	cmp.w	r8, #14
 8018976:	f300 8125 	bgt.w	8018bc4 <_dtoa_r+0x614>
 801897a:	4b90      	ldr	r3, [pc, #576]	@ (8018bbc <_dtoa_r+0x60c>)
 801897c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018980:	ed93 6b00 	vldr	d6, [r3]
 8018984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018986:	2b00      	cmp	r3, #0
 8018988:	f280 80c8 	bge.w	8018b1c <_dtoa_r+0x56c>
 801898c:	f1ba 0f00 	cmp.w	sl, #0
 8018990:	f300 80c4 	bgt.w	8018b1c <_dtoa_r+0x56c>
 8018994:	d10b      	bne.n	80189ae <_dtoa_r+0x3fe>
 8018996:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801899a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801899e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80189a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80189a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189aa:	f2c0 823c 	blt.w	8018e26 <_dtoa_r+0x876>
 80189ae:	2400      	movs	r4, #0
 80189b0:	4625      	mov	r5, r4
 80189b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189b4:	43db      	mvns	r3, r3
 80189b6:	9305      	str	r3, [sp, #20]
 80189b8:	463e      	mov	r6, r7
 80189ba:	f04f 0800 	mov.w	r8, #0
 80189be:	4621      	mov	r1, r4
 80189c0:	4648      	mov	r0, r9
 80189c2:	f000 fc93 	bl	80192ec <_Bfree>
 80189c6:	2d00      	cmp	r5, #0
 80189c8:	f000 80a2 	beq.w	8018b10 <_dtoa_r+0x560>
 80189cc:	f1b8 0f00 	cmp.w	r8, #0
 80189d0:	d005      	beq.n	80189de <_dtoa_r+0x42e>
 80189d2:	45a8      	cmp	r8, r5
 80189d4:	d003      	beq.n	80189de <_dtoa_r+0x42e>
 80189d6:	4641      	mov	r1, r8
 80189d8:	4648      	mov	r0, r9
 80189da:	f000 fc87 	bl	80192ec <_Bfree>
 80189de:	4629      	mov	r1, r5
 80189e0:	4648      	mov	r0, r9
 80189e2:	f000 fc83 	bl	80192ec <_Bfree>
 80189e6:	e093      	b.n	8018b10 <_dtoa_r+0x560>
 80189e8:	2202      	movs	r2, #2
 80189ea:	e76c      	b.n	80188c6 <_dtoa_r+0x316>
 80189ec:	07cc      	lsls	r4, r1, #31
 80189ee:	d504      	bpl.n	80189fa <_dtoa_r+0x44a>
 80189f0:	ed90 6b00 	vldr	d6, [r0]
 80189f4:	3201      	adds	r2, #1
 80189f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80189fa:	1049      	asrs	r1, r1, #1
 80189fc:	3008      	adds	r0, #8
 80189fe:	e763      	b.n	80188c8 <_dtoa_r+0x318>
 8018a00:	d022      	beq.n	8018a48 <_dtoa_r+0x498>
 8018a02:	f1c8 0100 	rsb	r1, r8, #0
 8018a06:	4a6d      	ldr	r2, [pc, #436]	@ (8018bbc <_dtoa_r+0x60c>)
 8018a08:	f001 000f 	and.w	r0, r1, #15
 8018a0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018a10:	ed92 7b00 	vldr	d7, [r2]
 8018a14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018a18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018a1c:	4868      	ldr	r0, [pc, #416]	@ (8018bc0 <_dtoa_r+0x610>)
 8018a1e:	1109      	asrs	r1, r1, #4
 8018a20:	2400      	movs	r4, #0
 8018a22:	2202      	movs	r2, #2
 8018a24:	b929      	cbnz	r1, 8018a32 <_dtoa_r+0x482>
 8018a26:	2c00      	cmp	r4, #0
 8018a28:	f43f af57 	beq.w	80188da <_dtoa_r+0x32a>
 8018a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018a30:	e753      	b.n	80188da <_dtoa_r+0x32a>
 8018a32:	07ce      	lsls	r6, r1, #31
 8018a34:	d505      	bpl.n	8018a42 <_dtoa_r+0x492>
 8018a36:	ed90 6b00 	vldr	d6, [r0]
 8018a3a:	3201      	adds	r2, #1
 8018a3c:	2401      	movs	r4, #1
 8018a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018a42:	1049      	asrs	r1, r1, #1
 8018a44:	3008      	adds	r0, #8
 8018a46:	e7ed      	b.n	8018a24 <_dtoa_r+0x474>
 8018a48:	2202      	movs	r2, #2
 8018a4a:	e746      	b.n	80188da <_dtoa_r+0x32a>
 8018a4c:	f8cd 8014 	str.w	r8, [sp, #20]
 8018a50:	4654      	mov	r4, sl
 8018a52:	e762      	b.n	801891a <_dtoa_r+0x36a>
 8018a54:	4a59      	ldr	r2, [pc, #356]	@ (8018bbc <_dtoa_r+0x60c>)
 8018a56:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018a5a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018a5e:	9a08      	ldr	r2, [sp, #32]
 8018a60:	ec41 0b17 	vmov	d7, r0, r1
 8018a64:	443c      	add	r4, r7
 8018a66:	b34a      	cbz	r2, 8018abc <_dtoa_r+0x50c>
 8018a68:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018a6c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8018a70:	463e      	mov	r6, r7
 8018a72:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018a76:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018a7a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018a7e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018a82:	ee14 2a90 	vmov	r2, s9
 8018a86:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018a8a:	3230      	adds	r2, #48	@ 0x30
 8018a8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018a90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a98:	f806 2b01 	strb.w	r2, [r6], #1
 8018a9c:	d438      	bmi.n	8018b10 <_dtoa_r+0x560>
 8018a9e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018aa2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aaa:	d46e      	bmi.n	8018b8a <_dtoa_r+0x5da>
 8018aac:	42a6      	cmp	r6, r4
 8018aae:	f43f af5a 	beq.w	8018966 <_dtoa_r+0x3b6>
 8018ab2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018ab6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018aba:	e7e0      	b.n	8018a7e <_dtoa_r+0x4ce>
 8018abc:	4621      	mov	r1, r4
 8018abe:	463e      	mov	r6, r7
 8018ac0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018ac4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018ac8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018acc:	ee14 2a90 	vmov	r2, s9
 8018ad0:	3230      	adds	r2, #48	@ 0x30
 8018ad2:	f806 2b01 	strb.w	r2, [r6], #1
 8018ad6:	42a6      	cmp	r6, r4
 8018ad8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018adc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018ae0:	d119      	bne.n	8018b16 <_dtoa_r+0x566>
 8018ae2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018ae6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018aea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af2:	dc4a      	bgt.n	8018b8a <_dtoa_r+0x5da>
 8018af4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018af8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b00:	f57f af31 	bpl.w	8018966 <_dtoa_r+0x3b6>
 8018b04:	460e      	mov	r6, r1
 8018b06:	3901      	subs	r1, #1
 8018b08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018b0c:	2b30      	cmp	r3, #48	@ 0x30
 8018b0e:	d0f9      	beq.n	8018b04 <_dtoa_r+0x554>
 8018b10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018b14:	e027      	b.n	8018b66 <_dtoa_r+0x5b6>
 8018b16:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018b1a:	e7d5      	b.n	8018ac8 <_dtoa_r+0x518>
 8018b1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b20:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018b24:	463e      	mov	r6, r7
 8018b26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018b2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018b2e:	ee15 3a10 	vmov	r3, s10
 8018b32:	3330      	adds	r3, #48	@ 0x30
 8018b34:	f806 3b01 	strb.w	r3, [r6], #1
 8018b38:	1bf3      	subs	r3, r6, r7
 8018b3a:	459a      	cmp	sl, r3
 8018b3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018b40:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018b44:	d132      	bne.n	8018bac <_dtoa_r+0x5fc>
 8018b46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b52:	dc18      	bgt.n	8018b86 <_dtoa_r+0x5d6>
 8018b54:	eeb4 7b46 	vcmp.f64	d7, d6
 8018b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b5c:	d103      	bne.n	8018b66 <_dtoa_r+0x5b6>
 8018b5e:	ee15 3a10 	vmov	r3, s10
 8018b62:	07db      	lsls	r3, r3, #31
 8018b64:	d40f      	bmi.n	8018b86 <_dtoa_r+0x5d6>
 8018b66:	9901      	ldr	r1, [sp, #4]
 8018b68:	4648      	mov	r0, r9
 8018b6a:	f000 fbbf 	bl	80192ec <_Bfree>
 8018b6e:	2300      	movs	r3, #0
 8018b70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018b72:	7033      	strb	r3, [r6, #0]
 8018b74:	f108 0301 	add.w	r3, r8, #1
 8018b78:	6013      	str	r3, [r2, #0]
 8018b7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	f000 824b 	beq.w	8019018 <_dtoa_r+0xa68>
 8018b82:	601e      	str	r6, [r3, #0]
 8018b84:	e248      	b.n	8019018 <_dtoa_r+0xa68>
 8018b86:	f8cd 8014 	str.w	r8, [sp, #20]
 8018b8a:	4633      	mov	r3, r6
 8018b8c:	461e      	mov	r6, r3
 8018b8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b92:	2a39      	cmp	r2, #57	@ 0x39
 8018b94:	d106      	bne.n	8018ba4 <_dtoa_r+0x5f4>
 8018b96:	429f      	cmp	r7, r3
 8018b98:	d1f8      	bne.n	8018b8c <_dtoa_r+0x5dc>
 8018b9a:	9a05      	ldr	r2, [sp, #20]
 8018b9c:	3201      	adds	r2, #1
 8018b9e:	9205      	str	r2, [sp, #20]
 8018ba0:	2230      	movs	r2, #48	@ 0x30
 8018ba2:	703a      	strb	r2, [r7, #0]
 8018ba4:	781a      	ldrb	r2, [r3, #0]
 8018ba6:	3201      	adds	r2, #1
 8018ba8:	701a      	strb	r2, [r3, #0]
 8018baa:	e7b1      	b.n	8018b10 <_dtoa_r+0x560>
 8018bac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018bb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bb8:	d1b5      	bne.n	8018b26 <_dtoa_r+0x576>
 8018bba:	e7d4      	b.n	8018b66 <_dtoa_r+0x5b6>
 8018bbc:	0801b0a8 	.word	0x0801b0a8
 8018bc0:	0801b080 	.word	0x0801b080
 8018bc4:	9908      	ldr	r1, [sp, #32]
 8018bc6:	2900      	cmp	r1, #0
 8018bc8:	f000 80e9 	beq.w	8018d9e <_dtoa_r+0x7ee>
 8018bcc:	9907      	ldr	r1, [sp, #28]
 8018bce:	2901      	cmp	r1, #1
 8018bd0:	f300 80cb 	bgt.w	8018d6a <_dtoa_r+0x7ba>
 8018bd4:	2d00      	cmp	r5, #0
 8018bd6:	f000 80c4 	beq.w	8018d62 <_dtoa_r+0x7b2>
 8018bda:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018bde:	9e04      	ldr	r6, [sp, #16]
 8018be0:	461c      	mov	r4, r3
 8018be2:	9305      	str	r3, [sp, #20]
 8018be4:	9b04      	ldr	r3, [sp, #16]
 8018be6:	4413      	add	r3, r2
 8018be8:	9304      	str	r3, [sp, #16]
 8018bea:	9b06      	ldr	r3, [sp, #24]
 8018bec:	2101      	movs	r1, #1
 8018bee:	4413      	add	r3, r2
 8018bf0:	4648      	mov	r0, r9
 8018bf2:	9306      	str	r3, [sp, #24]
 8018bf4:	f000 fc2e 	bl	8019454 <__i2b>
 8018bf8:	9b05      	ldr	r3, [sp, #20]
 8018bfa:	4605      	mov	r5, r0
 8018bfc:	b166      	cbz	r6, 8018c18 <_dtoa_r+0x668>
 8018bfe:	9a06      	ldr	r2, [sp, #24]
 8018c00:	2a00      	cmp	r2, #0
 8018c02:	dd09      	ble.n	8018c18 <_dtoa_r+0x668>
 8018c04:	42b2      	cmp	r2, r6
 8018c06:	9904      	ldr	r1, [sp, #16]
 8018c08:	bfa8      	it	ge
 8018c0a:	4632      	movge	r2, r6
 8018c0c:	1a89      	subs	r1, r1, r2
 8018c0e:	9104      	str	r1, [sp, #16]
 8018c10:	9906      	ldr	r1, [sp, #24]
 8018c12:	1ab6      	subs	r6, r6, r2
 8018c14:	1a8a      	subs	r2, r1, r2
 8018c16:	9206      	str	r2, [sp, #24]
 8018c18:	b30b      	cbz	r3, 8018c5e <_dtoa_r+0x6ae>
 8018c1a:	9a08      	ldr	r2, [sp, #32]
 8018c1c:	2a00      	cmp	r2, #0
 8018c1e:	f000 80c5 	beq.w	8018dac <_dtoa_r+0x7fc>
 8018c22:	2c00      	cmp	r4, #0
 8018c24:	f000 80bf 	beq.w	8018da6 <_dtoa_r+0x7f6>
 8018c28:	4629      	mov	r1, r5
 8018c2a:	4622      	mov	r2, r4
 8018c2c:	4648      	mov	r0, r9
 8018c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018c30:	f000 fcc8 	bl	80195c4 <__pow5mult>
 8018c34:	9a01      	ldr	r2, [sp, #4]
 8018c36:	4601      	mov	r1, r0
 8018c38:	4605      	mov	r5, r0
 8018c3a:	4648      	mov	r0, r9
 8018c3c:	f000 fc20 	bl	8019480 <__multiply>
 8018c40:	9901      	ldr	r1, [sp, #4]
 8018c42:	9005      	str	r0, [sp, #20]
 8018c44:	4648      	mov	r0, r9
 8018c46:	f000 fb51 	bl	80192ec <_Bfree>
 8018c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c4c:	1b1b      	subs	r3, r3, r4
 8018c4e:	f000 80b0 	beq.w	8018db2 <_dtoa_r+0x802>
 8018c52:	9905      	ldr	r1, [sp, #20]
 8018c54:	461a      	mov	r2, r3
 8018c56:	4648      	mov	r0, r9
 8018c58:	f000 fcb4 	bl	80195c4 <__pow5mult>
 8018c5c:	9001      	str	r0, [sp, #4]
 8018c5e:	2101      	movs	r1, #1
 8018c60:	4648      	mov	r0, r9
 8018c62:	f000 fbf7 	bl	8019454 <__i2b>
 8018c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c68:	4604      	mov	r4, r0
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	f000 81da 	beq.w	8019024 <_dtoa_r+0xa74>
 8018c70:	461a      	mov	r2, r3
 8018c72:	4601      	mov	r1, r0
 8018c74:	4648      	mov	r0, r9
 8018c76:	f000 fca5 	bl	80195c4 <__pow5mult>
 8018c7a:	9b07      	ldr	r3, [sp, #28]
 8018c7c:	2b01      	cmp	r3, #1
 8018c7e:	4604      	mov	r4, r0
 8018c80:	f300 80a0 	bgt.w	8018dc4 <_dtoa_r+0x814>
 8018c84:	9b02      	ldr	r3, [sp, #8]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	f040 8096 	bne.w	8018db8 <_dtoa_r+0x808>
 8018c8c:	9b03      	ldr	r3, [sp, #12]
 8018c8e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018c92:	2a00      	cmp	r2, #0
 8018c94:	f040 8092 	bne.w	8018dbc <_dtoa_r+0x80c>
 8018c98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018c9c:	0d12      	lsrs	r2, r2, #20
 8018c9e:	0512      	lsls	r2, r2, #20
 8018ca0:	2a00      	cmp	r2, #0
 8018ca2:	f000 808d 	beq.w	8018dc0 <_dtoa_r+0x810>
 8018ca6:	9b04      	ldr	r3, [sp, #16]
 8018ca8:	3301      	adds	r3, #1
 8018caa:	9304      	str	r3, [sp, #16]
 8018cac:	9b06      	ldr	r3, [sp, #24]
 8018cae:	3301      	adds	r3, #1
 8018cb0:	9306      	str	r3, [sp, #24]
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	f000 81b9 	beq.w	8019030 <_dtoa_r+0xa80>
 8018cbe:	6922      	ldr	r2, [r4, #16]
 8018cc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018cc4:	6910      	ldr	r0, [r2, #16]
 8018cc6:	f000 fb79 	bl	80193bc <__hi0bits>
 8018cca:	f1c0 0020 	rsb	r0, r0, #32
 8018cce:	9b06      	ldr	r3, [sp, #24]
 8018cd0:	4418      	add	r0, r3
 8018cd2:	f010 001f 	ands.w	r0, r0, #31
 8018cd6:	f000 8081 	beq.w	8018ddc <_dtoa_r+0x82c>
 8018cda:	f1c0 0220 	rsb	r2, r0, #32
 8018cde:	2a04      	cmp	r2, #4
 8018ce0:	dd73      	ble.n	8018dca <_dtoa_r+0x81a>
 8018ce2:	9b04      	ldr	r3, [sp, #16]
 8018ce4:	f1c0 001c 	rsb	r0, r0, #28
 8018ce8:	4403      	add	r3, r0
 8018cea:	9304      	str	r3, [sp, #16]
 8018cec:	9b06      	ldr	r3, [sp, #24]
 8018cee:	4406      	add	r6, r0
 8018cf0:	4403      	add	r3, r0
 8018cf2:	9306      	str	r3, [sp, #24]
 8018cf4:	9b04      	ldr	r3, [sp, #16]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	dd05      	ble.n	8018d06 <_dtoa_r+0x756>
 8018cfa:	9901      	ldr	r1, [sp, #4]
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	4648      	mov	r0, r9
 8018d00:	f000 fcba 	bl	8019678 <__lshift>
 8018d04:	9001      	str	r0, [sp, #4]
 8018d06:	9b06      	ldr	r3, [sp, #24]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	dd05      	ble.n	8018d18 <_dtoa_r+0x768>
 8018d0c:	4621      	mov	r1, r4
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4648      	mov	r0, r9
 8018d12:	f000 fcb1 	bl	8019678 <__lshift>
 8018d16:	4604      	mov	r4, r0
 8018d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d060      	beq.n	8018de0 <_dtoa_r+0x830>
 8018d1e:	9801      	ldr	r0, [sp, #4]
 8018d20:	4621      	mov	r1, r4
 8018d22:	f000 fd15 	bl	8019750 <__mcmp>
 8018d26:	2800      	cmp	r0, #0
 8018d28:	da5a      	bge.n	8018de0 <_dtoa_r+0x830>
 8018d2a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8018d2e:	9305      	str	r3, [sp, #20]
 8018d30:	9901      	ldr	r1, [sp, #4]
 8018d32:	2300      	movs	r3, #0
 8018d34:	220a      	movs	r2, #10
 8018d36:	4648      	mov	r0, r9
 8018d38:	f000 fafa 	bl	8019330 <__multadd>
 8018d3c:	9b08      	ldr	r3, [sp, #32]
 8018d3e:	9001      	str	r0, [sp, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f000 8177 	beq.w	8019034 <_dtoa_r+0xa84>
 8018d46:	4629      	mov	r1, r5
 8018d48:	2300      	movs	r3, #0
 8018d4a:	220a      	movs	r2, #10
 8018d4c:	4648      	mov	r0, r9
 8018d4e:	f000 faef 	bl	8019330 <__multadd>
 8018d52:	f1bb 0f00 	cmp.w	fp, #0
 8018d56:	4605      	mov	r5, r0
 8018d58:	dc6e      	bgt.n	8018e38 <_dtoa_r+0x888>
 8018d5a:	9b07      	ldr	r3, [sp, #28]
 8018d5c:	2b02      	cmp	r3, #2
 8018d5e:	dc48      	bgt.n	8018df2 <_dtoa_r+0x842>
 8018d60:	e06a      	b.n	8018e38 <_dtoa_r+0x888>
 8018d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8018d68:	e739      	b.n	8018bde <_dtoa_r+0x62e>
 8018d6a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8018d6e:	42a3      	cmp	r3, r4
 8018d70:	db07      	blt.n	8018d82 <_dtoa_r+0x7d2>
 8018d72:	f1ba 0f00 	cmp.w	sl, #0
 8018d76:	eba3 0404 	sub.w	r4, r3, r4
 8018d7a:	db0b      	blt.n	8018d94 <_dtoa_r+0x7e4>
 8018d7c:	9e04      	ldr	r6, [sp, #16]
 8018d7e:	4652      	mov	r2, sl
 8018d80:	e72f      	b.n	8018be2 <_dtoa_r+0x632>
 8018d82:	1ae2      	subs	r2, r4, r3
 8018d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018d86:	9e04      	ldr	r6, [sp, #16]
 8018d88:	4413      	add	r3, r2
 8018d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d8c:	4652      	mov	r2, sl
 8018d8e:	4623      	mov	r3, r4
 8018d90:	2400      	movs	r4, #0
 8018d92:	e726      	b.n	8018be2 <_dtoa_r+0x632>
 8018d94:	9a04      	ldr	r2, [sp, #16]
 8018d96:	eba2 060a 	sub.w	r6, r2, sl
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	e721      	b.n	8018be2 <_dtoa_r+0x632>
 8018d9e:	9e04      	ldr	r6, [sp, #16]
 8018da0:	9d08      	ldr	r5, [sp, #32]
 8018da2:	461c      	mov	r4, r3
 8018da4:	e72a      	b.n	8018bfc <_dtoa_r+0x64c>
 8018da6:	9a01      	ldr	r2, [sp, #4]
 8018da8:	9205      	str	r2, [sp, #20]
 8018daa:	e752      	b.n	8018c52 <_dtoa_r+0x6a2>
 8018dac:	9901      	ldr	r1, [sp, #4]
 8018dae:	461a      	mov	r2, r3
 8018db0:	e751      	b.n	8018c56 <_dtoa_r+0x6a6>
 8018db2:	9b05      	ldr	r3, [sp, #20]
 8018db4:	9301      	str	r3, [sp, #4]
 8018db6:	e752      	b.n	8018c5e <_dtoa_r+0x6ae>
 8018db8:	2300      	movs	r3, #0
 8018dba:	e77b      	b.n	8018cb4 <_dtoa_r+0x704>
 8018dbc:	9b02      	ldr	r3, [sp, #8]
 8018dbe:	e779      	b.n	8018cb4 <_dtoa_r+0x704>
 8018dc0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018dc2:	e778      	b.n	8018cb6 <_dtoa_r+0x706>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018dc8:	e779      	b.n	8018cbe <_dtoa_r+0x70e>
 8018dca:	d093      	beq.n	8018cf4 <_dtoa_r+0x744>
 8018dcc:	9b04      	ldr	r3, [sp, #16]
 8018dce:	321c      	adds	r2, #28
 8018dd0:	4413      	add	r3, r2
 8018dd2:	9304      	str	r3, [sp, #16]
 8018dd4:	9b06      	ldr	r3, [sp, #24]
 8018dd6:	4416      	add	r6, r2
 8018dd8:	4413      	add	r3, r2
 8018dda:	e78a      	b.n	8018cf2 <_dtoa_r+0x742>
 8018ddc:	4602      	mov	r2, r0
 8018dde:	e7f5      	b.n	8018dcc <_dtoa_r+0x81c>
 8018de0:	f1ba 0f00 	cmp.w	sl, #0
 8018de4:	f8cd 8014 	str.w	r8, [sp, #20]
 8018de8:	46d3      	mov	fp, sl
 8018dea:	dc21      	bgt.n	8018e30 <_dtoa_r+0x880>
 8018dec:	9b07      	ldr	r3, [sp, #28]
 8018dee:	2b02      	cmp	r3, #2
 8018df0:	dd1e      	ble.n	8018e30 <_dtoa_r+0x880>
 8018df2:	f1bb 0f00 	cmp.w	fp, #0
 8018df6:	f47f addc 	bne.w	80189b2 <_dtoa_r+0x402>
 8018dfa:	4621      	mov	r1, r4
 8018dfc:	465b      	mov	r3, fp
 8018dfe:	2205      	movs	r2, #5
 8018e00:	4648      	mov	r0, r9
 8018e02:	f000 fa95 	bl	8019330 <__multadd>
 8018e06:	4601      	mov	r1, r0
 8018e08:	4604      	mov	r4, r0
 8018e0a:	9801      	ldr	r0, [sp, #4]
 8018e0c:	f000 fca0 	bl	8019750 <__mcmp>
 8018e10:	2800      	cmp	r0, #0
 8018e12:	f77f adce 	ble.w	80189b2 <_dtoa_r+0x402>
 8018e16:	463e      	mov	r6, r7
 8018e18:	2331      	movs	r3, #49	@ 0x31
 8018e1a:	f806 3b01 	strb.w	r3, [r6], #1
 8018e1e:	9b05      	ldr	r3, [sp, #20]
 8018e20:	3301      	adds	r3, #1
 8018e22:	9305      	str	r3, [sp, #20]
 8018e24:	e5c9      	b.n	80189ba <_dtoa_r+0x40a>
 8018e26:	f8cd 8014 	str.w	r8, [sp, #20]
 8018e2a:	4654      	mov	r4, sl
 8018e2c:	4625      	mov	r5, r4
 8018e2e:	e7f2      	b.n	8018e16 <_dtoa_r+0x866>
 8018e30:	9b08      	ldr	r3, [sp, #32]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	f000 8102 	beq.w	801903c <_dtoa_r+0xa8c>
 8018e38:	2e00      	cmp	r6, #0
 8018e3a:	dd05      	ble.n	8018e48 <_dtoa_r+0x898>
 8018e3c:	4629      	mov	r1, r5
 8018e3e:	4632      	mov	r2, r6
 8018e40:	4648      	mov	r0, r9
 8018e42:	f000 fc19 	bl	8019678 <__lshift>
 8018e46:	4605      	mov	r5, r0
 8018e48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d058      	beq.n	8018f00 <_dtoa_r+0x950>
 8018e4e:	6869      	ldr	r1, [r5, #4]
 8018e50:	4648      	mov	r0, r9
 8018e52:	f000 fa0b 	bl	801926c <_Balloc>
 8018e56:	4606      	mov	r6, r0
 8018e58:	b928      	cbnz	r0, 8018e66 <_dtoa_r+0x8b6>
 8018e5a:	4b82      	ldr	r3, [pc, #520]	@ (8019064 <_dtoa_r+0xab4>)
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8018e62:	f7ff bbbe 	b.w	80185e2 <_dtoa_r+0x32>
 8018e66:	692a      	ldr	r2, [r5, #16]
 8018e68:	3202      	adds	r2, #2
 8018e6a:	0092      	lsls	r2, r2, #2
 8018e6c:	f105 010c 	add.w	r1, r5, #12
 8018e70:	300c      	adds	r0, #12
 8018e72:	f7ff fb06 	bl	8018482 <memcpy>
 8018e76:	2201      	movs	r2, #1
 8018e78:	4631      	mov	r1, r6
 8018e7a:	4648      	mov	r0, r9
 8018e7c:	f000 fbfc 	bl	8019678 <__lshift>
 8018e80:	1c7b      	adds	r3, r7, #1
 8018e82:	9304      	str	r3, [sp, #16]
 8018e84:	eb07 030b 	add.w	r3, r7, fp
 8018e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e8a:	9b02      	ldr	r3, [sp, #8]
 8018e8c:	f003 0301 	and.w	r3, r3, #1
 8018e90:	46a8      	mov	r8, r5
 8018e92:	9308      	str	r3, [sp, #32]
 8018e94:	4605      	mov	r5, r0
 8018e96:	9b04      	ldr	r3, [sp, #16]
 8018e98:	9801      	ldr	r0, [sp, #4]
 8018e9a:	4621      	mov	r1, r4
 8018e9c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8018ea0:	f7ff fafd 	bl	801849e <quorem>
 8018ea4:	4641      	mov	r1, r8
 8018ea6:	9002      	str	r0, [sp, #8]
 8018ea8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8018eac:	9801      	ldr	r0, [sp, #4]
 8018eae:	f000 fc4f 	bl	8019750 <__mcmp>
 8018eb2:	462a      	mov	r2, r5
 8018eb4:	9006      	str	r0, [sp, #24]
 8018eb6:	4621      	mov	r1, r4
 8018eb8:	4648      	mov	r0, r9
 8018eba:	f000 fc65 	bl	8019788 <__mdiff>
 8018ebe:	68c2      	ldr	r2, [r0, #12]
 8018ec0:	4606      	mov	r6, r0
 8018ec2:	b9fa      	cbnz	r2, 8018f04 <_dtoa_r+0x954>
 8018ec4:	4601      	mov	r1, r0
 8018ec6:	9801      	ldr	r0, [sp, #4]
 8018ec8:	f000 fc42 	bl	8019750 <__mcmp>
 8018ecc:	4602      	mov	r2, r0
 8018ece:	4631      	mov	r1, r6
 8018ed0:	4648      	mov	r0, r9
 8018ed2:	920a      	str	r2, [sp, #40]	@ 0x28
 8018ed4:	f000 fa0a 	bl	80192ec <_Bfree>
 8018ed8:	9b07      	ldr	r3, [sp, #28]
 8018eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018edc:	9e04      	ldr	r6, [sp, #16]
 8018ede:	ea42 0103 	orr.w	r1, r2, r3
 8018ee2:	9b08      	ldr	r3, [sp, #32]
 8018ee4:	4319      	orrs	r1, r3
 8018ee6:	d10f      	bne.n	8018f08 <_dtoa_r+0x958>
 8018ee8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018eec:	d028      	beq.n	8018f40 <_dtoa_r+0x990>
 8018eee:	9b06      	ldr	r3, [sp, #24]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	dd02      	ble.n	8018efa <_dtoa_r+0x94a>
 8018ef4:	9b02      	ldr	r3, [sp, #8]
 8018ef6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8018efa:	f88b a000 	strb.w	sl, [fp]
 8018efe:	e55e      	b.n	80189be <_dtoa_r+0x40e>
 8018f00:	4628      	mov	r0, r5
 8018f02:	e7bd      	b.n	8018e80 <_dtoa_r+0x8d0>
 8018f04:	2201      	movs	r2, #1
 8018f06:	e7e2      	b.n	8018ece <_dtoa_r+0x91e>
 8018f08:	9b06      	ldr	r3, [sp, #24]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	db04      	blt.n	8018f18 <_dtoa_r+0x968>
 8018f0e:	9907      	ldr	r1, [sp, #28]
 8018f10:	430b      	orrs	r3, r1
 8018f12:	9908      	ldr	r1, [sp, #32]
 8018f14:	430b      	orrs	r3, r1
 8018f16:	d120      	bne.n	8018f5a <_dtoa_r+0x9aa>
 8018f18:	2a00      	cmp	r2, #0
 8018f1a:	ddee      	ble.n	8018efa <_dtoa_r+0x94a>
 8018f1c:	9901      	ldr	r1, [sp, #4]
 8018f1e:	2201      	movs	r2, #1
 8018f20:	4648      	mov	r0, r9
 8018f22:	f000 fba9 	bl	8019678 <__lshift>
 8018f26:	4621      	mov	r1, r4
 8018f28:	9001      	str	r0, [sp, #4]
 8018f2a:	f000 fc11 	bl	8019750 <__mcmp>
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	dc03      	bgt.n	8018f3a <_dtoa_r+0x98a>
 8018f32:	d1e2      	bne.n	8018efa <_dtoa_r+0x94a>
 8018f34:	f01a 0f01 	tst.w	sl, #1
 8018f38:	d0df      	beq.n	8018efa <_dtoa_r+0x94a>
 8018f3a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018f3e:	d1d9      	bne.n	8018ef4 <_dtoa_r+0x944>
 8018f40:	2339      	movs	r3, #57	@ 0x39
 8018f42:	f88b 3000 	strb.w	r3, [fp]
 8018f46:	4633      	mov	r3, r6
 8018f48:	461e      	mov	r6, r3
 8018f4a:	3b01      	subs	r3, #1
 8018f4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018f50:	2a39      	cmp	r2, #57	@ 0x39
 8018f52:	d052      	beq.n	8018ffa <_dtoa_r+0xa4a>
 8018f54:	3201      	adds	r2, #1
 8018f56:	701a      	strb	r2, [r3, #0]
 8018f58:	e531      	b.n	80189be <_dtoa_r+0x40e>
 8018f5a:	2a00      	cmp	r2, #0
 8018f5c:	dd07      	ble.n	8018f6e <_dtoa_r+0x9be>
 8018f5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018f62:	d0ed      	beq.n	8018f40 <_dtoa_r+0x990>
 8018f64:	f10a 0301 	add.w	r3, sl, #1
 8018f68:	f88b 3000 	strb.w	r3, [fp]
 8018f6c:	e527      	b.n	80189be <_dtoa_r+0x40e>
 8018f6e:	9b04      	ldr	r3, [sp, #16]
 8018f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f72:	f803 ac01 	strb.w	sl, [r3, #-1]
 8018f76:	4293      	cmp	r3, r2
 8018f78:	d029      	beq.n	8018fce <_dtoa_r+0xa1e>
 8018f7a:	9901      	ldr	r1, [sp, #4]
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	220a      	movs	r2, #10
 8018f80:	4648      	mov	r0, r9
 8018f82:	f000 f9d5 	bl	8019330 <__multadd>
 8018f86:	45a8      	cmp	r8, r5
 8018f88:	9001      	str	r0, [sp, #4]
 8018f8a:	f04f 0300 	mov.w	r3, #0
 8018f8e:	f04f 020a 	mov.w	r2, #10
 8018f92:	4641      	mov	r1, r8
 8018f94:	4648      	mov	r0, r9
 8018f96:	d107      	bne.n	8018fa8 <_dtoa_r+0x9f8>
 8018f98:	f000 f9ca 	bl	8019330 <__multadd>
 8018f9c:	4680      	mov	r8, r0
 8018f9e:	4605      	mov	r5, r0
 8018fa0:	9b04      	ldr	r3, [sp, #16]
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	9304      	str	r3, [sp, #16]
 8018fa6:	e776      	b.n	8018e96 <_dtoa_r+0x8e6>
 8018fa8:	f000 f9c2 	bl	8019330 <__multadd>
 8018fac:	4629      	mov	r1, r5
 8018fae:	4680      	mov	r8, r0
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	220a      	movs	r2, #10
 8018fb4:	4648      	mov	r0, r9
 8018fb6:	f000 f9bb 	bl	8019330 <__multadd>
 8018fba:	4605      	mov	r5, r0
 8018fbc:	e7f0      	b.n	8018fa0 <_dtoa_r+0x9f0>
 8018fbe:	f1bb 0f00 	cmp.w	fp, #0
 8018fc2:	bfcc      	ite	gt
 8018fc4:	465e      	movgt	r6, fp
 8018fc6:	2601      	movle	r6, #1
 8018fc8:	443e      	add	r6, r7
 8018fca:	f04f 0800 	mov.w	r8, #0
 8018fce:	9901      	ldr	r1, [sp, #4]
 8018fd0:	2201      	movs	r2, #1
 8018fd2:	4648      	mov	r0, r9
 8018fd4:	f000 fb50 	bl	8019678 <__lshift>
 8018fd8:	4621      	mov	r1, r4
 8018fda:	9001      	str	r0, [sp, #4]
 8018fdc:	f000 fbb8 	bl	8019750 <__mcmp>
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	dcb0      	bgt.n	8018f46 <_dtoa_r+0x996>
 8018fe4:	d102      	bne.n	8018fec <_dtoa_r+0xa3c>
 8018fe6:	f01a 0f01 	tst.w	sl, #1
 8018fea:	d1ac      	bne.n	8018f46 <_dtoa_r+0x996>
 8018fec:	4633      	mov	r3, r6
 8018fee:	461e      	mov	r6, r3
 8018ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ff4:	2a30      	cmp	r2, #48	@ 0x30
 8018ff6:	d0fa      	beq.n	8018fee <_dtoa_r+0xa3e>
 8018ff8:	e4e1      	b.n	80189be <_dtoa_r+0x40e>
 8018ffa:	429f      	cmp	r7, r3
 8018ffc:	d1a4      	bne.n	8018f48 <_dtoa_r+0x998>
 8018ffe:	9b05      	ldr	r3, [sp, #20]
 8019000:	3301      	adds	r3, #1
 8019002:	9305      	str	r3, [sp, #20]
 8019004:	2331      	movs	r3, #49	@ 0x31
 8019006:	703b      	strb	r3, [r7, #0]
 8019008:	e4d9      	b.n	80189be <_dtoa_r+0x40e>
 801900a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801900c:	4f16      	ldr	r7, [pc, #88]	@ (8019068 <_dtoa_r+0xab8>)
 801900e:	b11b      	cbz	r3, 8019018 <_dtoa_r+0xa68>
 8019010:	f107 0308 	add.w	r3, r7, #8
 8019014:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019016:	6013      	str	r3, [r2, #0]
 8019018:	4638      	mov	r0, r7
 801901a:	b011      	add	sp, #68	@ 0x44
 801901c:	ecbd 8b02 	vpop	{d8}
 8019020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019024:	9b07      	ldr	r3, [sp, #28]
 8019026:	2b01      	cmp	r3, #1
 8019028:	f77f ae2c 	ble.w	8018c84 <_dtoa_r+0x6d4>
 801902c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801902e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019030:	2001      	movs	r0, #1
 8019032:	e64c      	b.n	8018cce <_dtoa_r+0x71e>
 8019034:	f1bb 0f00 	cmp.w	fp, #0
 8019038:	f77f aed8 	ble.w	8018dec <_dtoa_r+0x83c>
 801903c:	463e      	mov	r6, r7
 801903e:	9801      	ldr	r0, [sp, #4]
 8019040:	4621      	mov	r1, r4
 8019042:	f7ff fa2c 	bl	801849e <quorem>
 8019046:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801904a:	f806 ab01 	strb.w	sl, [r6], #1
 801904e:	1bf2      	subs	r2, r6, r7
 8019050:	4593      	cmp	fp, r2
 8019052:	ddb4      	ble.n	8018fbe <_dtoa_r+0xa0e>
 8019054:	9901      	ldr	r1, [sp, #4]
 8019056:	2300      	movs	r3, #0
 8019058:	220a      	movs	r2, #10
 801905a:	4648      	mov	r0, r9
 801905c:	f000 f968 	bl	8019330 <__multadd>
 8019060:	9001      	str	r0, [sp, #4]
 8019062:	e7ec      	b.n	801903e <_dtoa_r+0xa8e>
 8019064:	0801afac 	.word	0x0801afac
 8019068:	0801af30 	.word	0x0801af30

0801906c <_free_r>:
 801906c:	b538      	push	{r3, r4, r5, lr}
 801906e:	4605      	mov	r5, r0
 8019070:	2900      	cmp	r1, #0
 8019072:	d041      	beq.n	80190f8 <_free_r+0x8c>
 8019074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019078:	1f0c      	subs	r4, r1, #4
 801907a:	2b00      	cmp	r3, #0
 801907c:	bfb8      	it	lt
 801907e:	18e4      	addlt	r4, r4, r3
 8019080:	f000 f8e8 	bl	8019254 <__malloc_lock>
 8019084:	4a1d      	ldr	r2, [pc, #116]	@ (80190fc <_free_r+0x90>)
 8019086:	6813      	ldr	r3, [r2, #0]
 8019088:	b933      	cbnz	r3, 8019098 <_free_r+0x2c>
 801908a:	6063      	str	r3, [r4, #4]
 801908c:	6014      	str	r4, [r2, #0]
 801908e:	4628      	mov	r0, r5
 8019090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019094:	f000 b8e4 	b.w	8019260 <__malloc_unlock>
 8019098:	42a3      	cmp	r3, r4
 801909a:	d908      	bls.n	80190ae <_free_r+0x42>
 801909c:	6820      	ldr	r0, [r4, #0]
 801909e:	1821      	adds	r1, r4, r0
 80190a0:	428b      	cmp	r3, r1
 80190a2:	bf01      	itttt	eq
 80190a4:	6819      	ldreq	r1, [r3, #0]
 80190a6:	685b      	ldreq	r3, [r3, #4]
 80190a8:	1809      	addeq	r1, r1, r0
 80190aa:	6021      	streq	r1, [r4, #0]
 80190ac:	e7ed      	b.n	801908a <_free_r+0x1e>
 80190ae:	461a      	mov	r2, r3
 80190b0:	685b      	ldr	r3, [r3, #4]
 80190b2:	b10b      	cbz	r3, 80190b8 <_free_r+0x4c>
 80190b4:	42a3      	cmp	r3, r4
 80190b6:	d9fa      	bls.n	80190ae <_free_r+0x42>
 80190b8:	6811      	ldr	r1, [r2, #0]
 80190ba:	1850      	adds	r0, r2, r1
 80190bc:	42a0      	cmp	r0, r4
 80190be:	d10b      	bne.n	80190d8 <_free_r+0x6c>
 80190c0:	6820      	ldr	r0, [r4, #0]
 80190c2:	4401      	add	r1, r0
 80190c4:	1850      	adds	r0, r2, r1
 80190c6:	4283      	cmp	r3, r0
 80190c8:	6011      	str	r1, [r2, #0]
 80190ca:	d1e0      	bne.n	801908e <_free_r+0x22>
 80190cc:	6818      	ldr	r0, [r3, #0]
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	6053      	str	r3, [r2, #4]
 80190d2:	4408      	add	r0, r1
 80190d4:	6010      	str	r0, [r2, #0]
 80190d6:	e7da      	b.n	801908e <_free_r+0x22>
 80190d8:	d902      	bls.n	80190e0 <_free_r+0x74>
 80190da:	230c      	movs	r3, #12
 80190dc:	602b      	str	r3, [r5, #0]
 80190de:	e7d6      	b.n	801908e <_free_r+0x22>
 80190e0:	6820      	ldr	r0, [r4, #0]
 80190e2:	1821      	adds	r1, r4, r0
 80190e4:	428b      	cmp	r3, r1
 80190e6:	bf04      	itt	eq
 80190e8:	6819      	ldreq	r1, [r3, #0]
 80190ea:	685b      	ldreq	r3, [r3, #4]
 80190ec:	6063      	str	r3, [r4, #4]
 80190ee:	bf04      	itt	eq
 80190f0:	1809      	addeq	r1, r1, r0
 80190f2:	6021      	streq	r1, [r4, #0]
 80190f4:	6054      	str	r4, [r2, #4]
 80190f6:	e7ca      	b.n	801908e <_free_r+0x22>
 80190f8:	bd38      	pop	{r3, r4, r5, pc}
 80190fa:	bf00      	nop
 80190fc:	24005c7c 	.word	0x24005c7c

08019100 <malloc>:
 8019100:	4b02      	ldr	r3, [pc, #8]	@ (801910c <malloc+0xc>)
 8019102:	4601      	mov	r1, r0
 8019104:	6818      	ldr	r0, [r3, #0]
 8019106:	f000 b825 	b.w	8019154 <_malloc_r>
 801910a:	bf00      	nop
 801910c:	24000030 	.word	0x24000030

08019110 <sbrk_aligned>:
 8019110:	b570      	push	{r4, r5, r6, lr}
 8019112:	4e0f      	ldr	r6, [pc, #60]	@ (8019150 <sbrk_aligned+0x40>)
 8019114:	460c      	mov	r4, r1
 8019116:	6831      	ldr	r1, [r6, #0]
 8019118:	4605      	mov	r5, r0
 801911a:	b911      	cbnz	r1, 8019122 <sbrk_aligned+0x12>
 801911c:	f000 fe92 	bl	8019e44 <_sbrk_r>
 8019120:	6030      	str	r0, [r6, #0]
 8019122:	4621      	mov	r1, r4
 8019124:	4628      	mov	r0, r5
 8019126:	f000 fe8d 	bl	8019e44 <_sbrk_r>
 801912a:	1c43      	adds	r3, r0, #1
 801912c:	d103      	bne.n	8019136 <sbrk_aligned+0x26>
 801912e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019132:	4620      	mov	r0, r4
 8019134:	bd70      	pop	{r4, r5, r6, pc}
 8019136:	1cc4      	adds	r4, r0, #3
 8019138:	f024 0403 	bic.w	r4, r4, #3
 801913c:	42a0      	cmp	r0, r4
 801913e:	d0f8      	beq.n	8019132 <sbrk_aligned+0x22>
 8019140:	1a21      	subs	r1, r4, r0
 8019142:	4628      	mov	r0, r5
 8019144:	f000 fe7e 	bl	8019e44 <_sbrk_r>
 8019148:	3001      	adds	r0, #1
 801914a:	d1f2      	bne.n	8019132 <sbrk_aligned+0x22>
 801914c:	e7ef      	b.n	801912e <sbrk_aligned+0x1e>
 801914e:	bf00      	nop
 8019150:	24005c78 	.word	0x24005c78

08019154 <_malloc_r>:
 8019154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019158:	1ccd      	adds	r5, r1, #3
 801915a:	f025 0503 	bic.w	r5, r5, #3
 801915e:	3508      	adds	r5, #8
 8019160:	2d0c      	cmp	r5, #12
 8019162:	bf38      	it	cc
 8019164:	250c      	movcc	r5, #12
 8019166:	2d00      	cmp	r5, #0
 8019168:	4606      	mov	r6, r0
 801916a:	db01      	blt.n	8019170 <_malloc_r+0x1c>
 801916c:	42a9      	cmp	r1, r5
 801916e:	d904      	bls.n	801917a <_malloc_r+0x26>
 8019170:	230c      	movs	r3, #12
 8019172:	6033      	str	r3, [r6, #0]
 8019174:	2000      	movs	r0, #0
 8019176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801917a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019250 <_malloc_r+0xfc>
 801917e:	f000 f869 	bl	8019254 <__malloc_lock>
 8019182:	f8d8 3000 	ldr.w	r3, [r8]
 8019186:	461c      	mov	r4, r3
 8019188:	bb44      	cbnz	r4, 80191dc <_malloc_r+0x88>
 801918a:	4629      	mov	r1, r5
 801918c:	4630      	mov	r0, r6
 801918e:	f7ff ffbf 	bl	8019110 <sbrk_aligned>
 8019192:	1c43      	adds	r3, r0, #1
 8019194:	4604      	mov	r4, r0
 8019196:	d158      	bne.n	801924a <_malloc_r+0xf6>
 8019198:	f8d8 4000 	ldr.w	r4, [r8]
 801919c:	4627      	mov	r7, r4
 801919e:	2f00      	cmp	r7, #0
 80191a0:	d143      	bne.n	801922a <_malloc_r+0xd6>
 80191a2:	2c00      	cmp	r4, #0
 80191a4:	d04b      	beq.n	801923e <_malloc_r+0xea>
 80191a6:	6823      	ldr	r3, [r4, #0]
 80191a8:	4639      	mov	r1, r7
 80191aa:	4630      	mov	r0, r6
 80191ac:	eb04 0903 	add.w	r9, r4, r3
 80191b0:	f000 fe48 	bl	8019e44 <_sbrk_r>
 80191b4:	4581      	cmp	r9, r0
 80191b6:	d142      	bne.n	801923e <_malloc_r+0xea>
 80191b8:	6821      	ldr	r1, [r4, #0]
 80191ba:	1a6d      	subs	r5, r5, r1
 80191bc:	4629      	mov	r1, r5
 80191be:	4630      	mov	r0, r6
 80191c0:	f7ff ffa6 	bl	8019110 <sbrk_aligned>
 80191c4:	3001      	adds	r0, #1
 80191c6:	d03a      	beq.n	801923e <_malloc_r+0xea>
 80191c8:	6823      	ldr	r3, [r4, #0]
 80191ca:	442b      	add	r3, r5
 80191cc:	6023      	str	r3, [r4, #0]
 80191ce:	f8d8 3000 	ldr.w	r3, [r8]
 80191d2:	685a      	ldr	r2, [r3, #4]
 80191d4:	bb62      	cbnz	r2, 8019230 <_malloc_r+0xdc>
 80191d6:	f8c8 7000 	str.w	r7, [r8]
 80191da:	e00f      	b.n	80191fc <_malloc_r+0xa8>
 80191dc:	6822      	ldr	r2, [r4, #0]
 80191de:	1b52      	subs	r2, r2, r5
 80191e0:	d420      	bmi.n	8019224 <_malloc_r+0xd0>
 80191e2:	2a0b      	cmp	r2, #11
 80191e4:	d917      	bls.n	8019216 <_malloc_r+0xc2>
 80191e6:	1961      	adds	r1, r4, r5
 80191e8:	42a3      	cmp	r3, r4
 80191ea:	6025      	str	r5, [r4, #0]
 80191ec:	bf18      	it	ne
 80191ee:	6059      	strne	r1, [r3, #4]
 80191f0:	6863      	ldr	r3, [r4, #4]
 80191f2:	bf08      	it	eq
 80191f4:	f8c8 1000 	streq.w	r1, [r8]
 80191f8:	5162      	str	r2, [r4, r5]
 80191fa:	604b      	str	r3, [r1, #4]
 80191fc:	4630      	mov	r0, r6
 80191fe:	f000 f82f 	bl	8019260 <__malloc_unlock>
 8019202:	f104 000b 	add.w	r0, r4, #11
 8019206:	1d23      	adds	r3, r4, #4
 8019208:	f020 0007 	bic.w	r0, r0, #7
 801920c:	1ac2      	subs	r2, r0, r3
 801920e:	bf1c      	itt	ne
 8019210:	1a1b      	subne	r3, r3, r0
 8019212:	50a3      	strne	r3, [r4, r2]
 8019214:	e7af      	b.n	8019176 <_malloc_r+0x22>
 8019216:	6862      	ldr	r2, [r4, #4]
 8019218:	42a3      	cmp	r3, r4
 801921a:	bf0c      	ite	eq
 801921c:	f8c8 2000 	streq.w	r2, [r8]
 8019220:	605a      	strne	r2, [r3, #4]
 8019222:	e7eb      	b.n	80191fc <_malloc_r+0xa8>
 8019224:	4623      	mov	r3, r4
 8019226:	6864      	ldr	r4, [r4, #4]
 8019228:	e7ae      	b.n	8019188 <_malloc_r+0x34>
 801922a:	463c      	mov	r4, r7
 801922c:	687f      	ldr	r7, [r7, #4]
 801922e:	e7b6      	b.n	801919e <_malloc_r+0x4a>
 8019230:	461a      	mov	r2, r3
 8019232:	685b      	ldr	r3, [r3, #4]
 8019234:	42a3      	cmp	r3, r4
 8019236:	d1fb      	bne.n	8019230 <_malloc_r+0xdc>
 8019238:	2300      	movs	r3, #0
 801923a:	6053      	str	r3, [r2, #4]
 801923c:	e7de      	b.n	80191fc <_malloc_r+0xa8>
 801923e:	230c      	movs	r3, #12
 8019240:	6033      	str	r3, [r6, #0]
 8019242:	4630      	mov	r0, r6
 8019244:	f000 f80c 	bl	8019260 <__malloc_unlock>
 8019248:	e794      	b.n	8019174 <_malloc_r+0x20>
 801924a:	6005      	str	r5, [r0, #0]
 801924c:	e7d6      	b.n	80191fc <_malloc_r+0xa8>
 801924e:	bf00      	nop
 8019250:	24005c7c 	.word	0x24005c7c

08019254 <__malloc_lock>:
 8019254:	4801      	ldr	r0, [pc, #4]	@ (801925c <__malloc_lock+0x8>)
 8019256:	f7ff b912 	b.w	801847e <__retarget_lock_acquire_recursive>
 801925a:	bf00      	nop
 801925c:	24005c74 	.word	0x24005c74

08019260 <__malloc_unlock>:
 8019260:	4801      	ldr	r0, [pc, #4]	@ (8019268 <__malloc_unlock+0x8>)
 8019262:	f7ff b90d 	b.w	8018480 <__retarget_lock_release_recursive>
 8019266:	bf00      	nop
 8019268:	24005c74 	.word	0x24005c74

0801926c <_Balloc>:
 801926c:	b570      	push	{r4, r5, r6, lr}
 801926e:	69c6      	ldr	r6, [r0, #28]
 8019270:	4604      	mov	r4, r0
 8019272:	460d      	mov	r5, r1
 8019274:	b976      	cbnz	r6, 8019294 <_Balloc+0x28>
 8019276:	2010      	movs	r0, #16
 8019278:	f7ff ff42 	bl	8019100 <malloc>
 801927c:	4602      	mov	r2, r0
 801927e:	61e0      	str	r0, [r4, #28]
 8019280:	b920      	cbnz	r0, 801928c <_Balloc+0x20>
 8019282:	4b18      	ldr	r3, [pc, #96]	@ (80192e4 <_Balloc+0x78>)
 8019284:	4818      	ldr	r0, [pc, #96]	@ (80192e8 <_Balloc+0x7c>)
 8019286:	216b      	movs	r1, #107	@ 0x6b
 8019288:	f000 fdec 	bl	8019e64 <__assert_func>
 801928c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019290:	6006      	str	r6, [r0, #0]
 8019292:	60c6      	str	r6, [r0, #12]
 8019294:	69e6      	ldr	r6, [r4, #28]
 8019296:	68f3      	ldr	r3, [r6, #12]
 8019298:	b183      	cbz	r3, 80192bc <_Balloc+0x50>
 801929a:	69e3      	ldr	r3, [r4, #28]
 801929c:	68db      	ldr	r3, [r3, #12]
 801929e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80192a2:	b9b8      	cbnz	r0, 80192d4 <_Balloc+0x68>
 80192a4:	2101      	movs	r1, #1
 80192a6:	fa01 f605 	lsl.w	r6, r1, r5
 80192aa:	1d72      	adds	r2, r6, #5
 80192ac:	0092      	lsls	r2, r2, #2
 80192ae:	4620      	mov	r0, r4
 80192b0:	f000 fdf6 	bl	8019ea0 <_calloc_r>
 80192b4:	b160      	cbz	r0, 80192d0 <_Balloc+0x64>
 80192b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80192ba:	e00e      	b.n	80192da <_Balloc+0x6e>
 80192bc:	2221      	movs	r2, #33	@ 0x21
 80192be:	2104      	movs	r1, #4
 80192c0:	4620      	mov	r0, r4
 80192c2:	f000 fded 	bl	8019ea0 <_calloc_r>
 80192c6:	69e3      	ldr	r3, [r4, #28]
 80192c8:	60f0      	str	r0, [r6, #12]
 80192ca:	68db      	ldr	r3, [r3, #12]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d1e4      	bne.n	801929a <_Balloc+0x2e>
 80192d0:	2000      	movs	r0, #0
 80192d2:	bd70      	pop	{r4, r5, r6, pc}
 80192d4:	6802      	ldr	r2, [r0, #0]
 80192d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192da:	2300      	movs	r3, #0
 80192dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192e0:	e7f7      	b.n	80192d2 <_Balloc+0x66>
 80192e2:	bf00      	nop
 80192e4:	0801af3d 	.word	0x0801af3d
 80192e8:	0801afbd 	.word	0x0801afbd

080192ec <_Bfree>:
 80192ec:	b570      	push	{r4, r5, r6, lr}
 80192ee:	69c6      	ldr	r6, [r0, #28]
 80192f0:	4605      	mov	r5, r0
 80192f2:	460c      	mov	r4, r1
 80192f4:	b976      	cbnz	r6, 8019314 <_Bfree+0x28>
 80192f6:	2010      	movs	r0, #16
 80192f8:	f7ff ff02 	bl	8019100 <malloc>
 80192fc:	4602      	mov	r2, r0
 80192fe:	61e8      	str	r0, [r5, #28]
 8019300:	b920      	cbnz	r0, 801930c <_Bfree+0x20>
 8019302:	4b09      	ldr	r3, [pc, #36]	@ (8019328 <_Bfree+0x3c>)
 8019304:	4809      	ldr	r0, [pc, #36]	@ (801932c <_Bfree+0x40>)
 8019306:	218f      	movs	r1, #143	@ 0x8f
 8019308:	f000 fdac 	bl	8019e64 <__assert_func>
 801930c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019310:	6006      	str	r6, [r0, #0]
 8019312:	60c6      	str	r6, [r0, #12]
 8019314:	b13c      	cbz	r4, 8019326 <_Bfree+0x3a>
 8019316:	69eb      	ldr	r3, [r5, #28]
 8019318:	6862      	ldr	r2, [r4, #4]
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019320:	6021      	str	r1, [r4, #0]
 8019322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019326:	bd70      	pop	{r4, r5, r6, pc}
 8019328:	0801af3d 	.word	0x0801af3d
 801932c:	0801afbd 	.word	0x0801afbd

08019330 <__multadd>:
 8019330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019334:	690d      	ldr	r5, [r1, #16]
 8019336:	4607      	mov	r7, r0
 8019338:	460c      	mov	r4, r1
 801933a:	461e      	mov	r6, r3
 801933c:	f101 0c14 	add.w	ip, r1, #20
 8019340:	2000      	movs	r0, #0
 8019342:	f8dc 3000 	ldr.w	r3, [ip]
 8019346:	b299      	uxth	r1, r3
 8019348:	fb02 6101 	mla	r1, r2, r1, r6
 801934c:	0c1e      	lsrs	r6, r3, #16
 801934e:	0c0b      	lsrs	r3, r1, #16
 8019350:	fb02 3306 	mla	r3, r2, r6, r3
 8019354:	b289      	uxth	r1, r1
 8019356:	3001      	adds	r0, #1
 8019358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801935c:	4285      	cmp	r5, r0
 801935e:	f84c 1b04 	str.w	r1, [ip], #4
 8019362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019366:	dcec      	bgt.n	8019342 <__multadd+0x12>
 8019368:	b30e      	cbz	r6, 80193ae <__multadd+0x7e>
 801936a:	68a3      	ldr	r3, [r4, #8]
 801936c:	42ab      	cmp	r3, r5
 801936e:	dc19      	bgt.n	80193a4 <__multadd+0x74>
 8019370:	6861      	ldr	r1, [r4, #4]
 8019372:	4638      	mov	r0, r7
 8019374:	3101      	adds	r1, #1
 8019376:	f7ff ff79 	bl	801926c <_Balloc>
 801937a:	4680      	mov	r8, r0
 801937c:	b928      	cbnz	r0, 801938a <__multadd+0x5a>
 801937e:	4602      	mov	r2, r0
 8019380:	4b0c      	ldr	r3, [pc, #48]	@ (80193b4 <__multadd+0x84>)
 8019382:	480d      	ldr	r0, [pc, #52]	@ (80193b8 <__multadd+0x88>)
 8019384:	21ba      	movs	r1, #186	@ 0xba
 8019386:	f000 fd6d 	bl	8019e64 <__assert_func>
 801938a:	6922      	ldr	r2, [r4, #16]
 801938c:	3202      	adds	r2, #2
 801938e:	f104 010c 	add.w	r1, r4, #12
 8019392:	0092      	lsls	r2, r2, #2
 8019394:	300c      	adds	r0, #12
 8019396:	f7ff f874 	bl	8018482 <memcpy>
 801939a:	4621      	mov	r1, r4
 801939c:	4638      	mov	r0, r7
 801939e:	f7ff ffa5 	bl	80192ec <_Bfree>
 80193a2:	4644      	mov	r4, r8
 80193a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80193a8:	3501      	adds	r5, #1
 80193aa:	615e      	str	r6, [r3, #20]
 80193ac:	6125      	str	r5, [r4, #16]
 80193ae:	4620      	mov	r0, r4
 80193b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b4:	0801afac 	.word	0x0801afac
 80193b8:	0801afbd 	.word	0x0801afbd

080193bc <__hi0bits>:
 80193bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80193c0:	4603      	mov	r3, r0
 80193c2:	bf36      	itet	cc
 80193c4:	0403      	lslcc	r3, r0, #16
 80193c6:	2000      	movcs	r0, #0
 80193c8:	2010      	movcc	r0, #16
 80193ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80193ce:	bf3c      	itt	cc
 80193d0:	021b      	lslcc	r3, r3, #8
 80193d2:	3008      	addcc	r0, #8
 80193d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80193d8:	bf3c      	itt	cc
 80193da:	011b      	lslcc	r3, r3, #4
 80193dc:	3004      	addcc	r0, #4
 80193de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80193e2:	bf3c      	itt	cc
 80193e4:	009b      	lslcc	r3, r3, #2
 80193e6:	3002      	addcc	r0, #2
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	db05      	blt.n	80193f8 <__hi0bits+0x3c>
 80193ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80193f0:	f100 0001 	add.w	r0, r0, #1
 80193f4:	bf08      	it	eq
 80193f6:	2020      	moveq	r0, #32
 80193f8:	4770      	bx	lr

080193fa <__lo0bits>:
 80193fa:	6803      	ldr	r3, [r0, #0]
 80193fc:	4602      	mov	r2, r0
 80193fe:	f013 0007 	ands.w	r0, r3, #7
 8019402:	d00b      	beq.n	801941c <__lo0bits+0x22>
 8019404:	07d9      	lsls	r1, r3, #31
 8019406:	d421      	bmi.n	801944c <__lo0bits+0x52>
 8019408:	0798      	lsls	r0, r3, #30
 801940a:	bf49      	itett	mi
 801940c:	085b      	lsrmi	r3, r3, #1
 801940e:	089b      	lsrpl	r3, r3, #2
 8019410:	2001      	movmi	r0, #1
 8019412:	6013      	strmi	r3, [r2, #0]
 8019414:	bf5c      	itt	pl
 8019416:	6013      	strpl	r3, [r2, #0]
 8019418:	2002      	movpl	r0, #2
 801941a:	4770      	bx	lr
 801941c:	b299      	uxth	r1, r3
 801941e:	b909      	cbnz	r1, 8019424 <__lo0bits+0x2a>
 8019420:	0c1b      	lsrs	r3, r3, #16
 8019422:	2010      	movs	r0, #16
 8019424:	b2d9      	uxtb	r1, r3
 8019426:	b909      	cbnz	r1, 801942c <__lo0bits+0x32>
 8019428:	3008      	adds	r0, #8
 801942a:	0a1b      	lsrs	r3, r3, #8
 801942c:	0719      	lsls	r1, r3, #28
 801942e:	bf04      	itt	eq
 8019430:	091b      	lsreq	r3, r3, #4
 8019432:	3004      	addeq	r0, #4
 8019434:	0799      	lsls	r1, r3, #30
 8019436:	bf04      	itt	eq
 8019438:	089b      	lsreq	r3, r3, #2
 801943a:	3002      	addeq	r0, #2
 801943c:	07d9      	lsls	r1, r3, #31
 801943e:	d403      	bmi.n	8019448 <__lo0bits+0x4e>
 8019440:	085b      	lsrs	r3, r3, #1
 8019442:	f100 0001 	add.w	r0, r0, #1
 8019446:	d003      	beq.n	8019450 <__lo0bits+0x56>
 8019448:	6013      	str	r3, [r2, #0]
 801944a:	4770      	bx	lr
 801944c:	2000      	movs	r0, #0
 801944e:	4770      	bx	lr
 8019450:	2020      	movs	r0, #32
 8019452:	4770      	bx	lr

08019454 <__i2b>:
 8019454:	b510      	push	{r4, lr}
 8019456:	460c      	mov	r4, r1
 8019458:	2101      	movs	r1, #1
 801945a:	f7ff ff07 	bl	801926c <_Balloc>
 801945e:	4602      	mov	r2, r0
 8019460:	b928      	cbnz	r0, 801946e <__i2b+0x1a>
 8019462:	4b05      	ldr	r3, [pc, #20]	@ (8019478 <__i2b+0x24>)
 8019464:	4805      	ldr	r0, [pc, #20]	@ (801947c <__i2b+0x28>)
 8019466:	f240 1145 	movw	r1, #325	@ 0x145
 801946a:	f000 fcfb 	bl	8019e64 <__assert_func>
 801946e:	2301      	movs	r3, #1
 8019470:	6144      	str	r4, [r0, #20]
 8019472:	6103      	str	r3, [r0, #16]
 8019474:	bd10      	pop	{r4, pc}
 8019476:	bf00      	nop
 8019478:	0801afac 	.word	0x0801afac
 801947c:	0801afbd 	.word	0x0801afbd

08019480 <__multiply>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	4617      	mov	r7, r2
 8019486:	690a      	ldr	r2, [r1, #16]
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	429a      	cmp	r2, r3
 801948c:	bfa8      	it	ge
 801948e:	463b      	movge	r3, r7
 8019490:	4689      	mov	r9, r1
 8019492:	bfa4      	itt	ge
 8019494:	460f      	movge	r7, r1
 8019496:	4699      	movge	r9, r3
 8019498:	693d      	ldr	r5, [r7, #16]
 801949a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	6879      	ldr	r1, [r7, #4]
 80194a2:	eb05 060a 	add.w	r6, r5, sl
 80194a6:	42b3      	cmp	r3, r6
 80194a8:	b085      	sub	sp, #20
 80194aa:	bfb8      	it	lt
 80194ac:	3101      	addlt	r1, #1
 80194ae:	f7ff fedd 	bl	801926c <_Balloc>
 80194b2:	b930      	cbnz	r0, 80194c2 <__multiply+0x42>
 80194b4:	4602      	mov	r2, r0
 80194b6:	4b41      	ldr	r3, [pc, #260]	@ (80195bc <__multiply+0x13c>)
 80194b8:	4841      	ldr	r0, [pc, #260]	@ (80195c0 <__multiply+0x140>)
 80194ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80194be:	f000 fcd1 	bl	8019e64 <__assert_func>
 80194c2:	f100 0414 	add.w	r4, r0, #20
 80194c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80194ca:	4623      	mov	r3, r4
 80194cc:	2200      	movs	r2, #0
 80194ce:	4573      	cmp	r3, lr
 80194d0:	d320      	bcc.n	8019514 <__multiply+0x94>
 80194d2:	f107 0814 	add.w	r8, r7, #20
 80194d6:	f109 0114 	add.w	r1, r9, #20
 80194da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80194de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80194e2:	9302      	str	r3, [sp, #8]
 80194e4:	1beb      	subs	r3, r5, r7
 80194e6:	3b15      	subs	r3, #21
 80194e8:	f023 0303 	bic.w	r3, r3, #3
 80194ec:	3304      	adds	r3, #4
 80194ee:	3715      	adds	r7, #21
 80194f0:	42bd      	cmp	r5, r7
 80194f2:	bf38      	it	cc
 80194f4:	2304      	movcc	r3, #4
 80194f6:	9301      	str	r3, [sp, #4]
 80194f8:	9b02      	ldr	r3, [sp, #8]
 80194fa:	9103      	str	r1, [sp, #12]
 80194fc:	428b      	cmp	r3, r1
 80194fe:	d80c      	bhi.n	801951a <__multiply+0x9a>
 8019500:	2e00      	cmp	r6, #0
 8019502:	dd03      	ble.n	801950c <__multiply+0x8c>
 8019504:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019508:	2b00      	cmp	r3, #0
 801950a:	d055      	beq.n	80195b8 <__multiply+0x138>
 801950c:	6106      	str	r6, [r0, #16]
 801950e:	b005      	add	sp, #20
 8019510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019514:	f843 2b04 	str.w	r2, [r3], #4
 8019518:	e7d9      	b.n	80194ce <__multiply+0x4e>
 801951a:	f8b1 a000 	ldrh.w	sl, [r1]
 801951e:	f1ba 0f00 	cmp.w	sl, #0
 8019522:	d01f      	beq.n	8019564 <__multiply+0xe4>
 8019524:	46c4      	mov	ip, r8
 8019526:	46a1      	mov	r9, r4
 8019528:	2700      	movs	r7, #0
 801952a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801952e:	f8d9 3000 	ldr.w	r3, [r9]
 8019532:	fa1f fb82 	uxth.w	fp, r2
 8019536:	b29b      	uxth	r3, r3
 8019538:	fb0a 330b 	mla	r3, sl, fp, r3
 801953c:	443b      	add	r3, r7
 801953e:	f8d9 7000 	ldr.w	r7, [r9]
 8019542:	0c12      	lsrs	r2, r2, #16
 8019544:	0c3f      	lsrs	r7, r7, #16
 8019546:	fb0a 7202 	mla	r2, sl, r2, r7
 801954a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801954e:	b29b      	uxth	r3, r3
 8019550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019554:	4565      	cmp	r5, ip
 8019556:	f849 3b04 	str.w	r3, [r9], #4
 801955a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801955e:	d8e4      	bhi.n	801952a <__multiply+0xaa>
 8019560:	9b01      	ldr	r3, [sp, #4]
 8019562:	50e7      	str	r7, [r4, r3]
 8019564:	9b03      	ldr	r3, [sp, #12]
 8019566:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801956a:	3104      	adds	r1, #4
 801956c:	f1b9 0f00 	cmp.w	r9, #0
 8019570:	d020      	beq.n	80195b4 <__multiply+0x134>
 8019572:	6823      	ldr	r3, [r4, #0]
 8019574:	4647      	mov	r7, r8
 8019576:	46a4      	mov	ip, r4
 8019578:	f04f 0a00 	mov.w	sl, #0
 801957c:	f8b7 b000 	ldrh.w	fp, [r7]
 8019580:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8019584:	fb09 220b 	mla	r2, r9, fp, r2
 8019588:	4452      	add	r2, sl
 801958a:	b29b      	uxth	r3, r3
 801958c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019590:	f84c 3b04 	str.w	r3, [ip], #4
 8019594:	f857 3b04 	ldr.w	r3, [r7], #4
 8019598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801959c:	f8bc 3000 	ldrh.w	r3, [ip]
 80195a0:	fb09 330a 	mla	r3, r9, sl, r3
 80195a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80195a8:	42bd      	cmp	r5, r7
 80195aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80195ae:	d8e5      	bhi.n	801957c <__multiply+0xfc>
 80195b0:	9a01      	ldr	r2, [sp, #4]
 80195b2:	50a3      	str	r3, [r4, r2]
 80195b4:	3404      	adds	r4, #4
 80195b6:	e79f      	b.n	80194f8 <__multiply+0x78>
 80195b8:	3e01      	subs	r6, #1
 80195ba:	e7a1      	b.n	8019500 <__multiply+0x80>
 80195bc:	0801afac 	.word	0x0801afac
 80195c0:	0801afbd 	.word	0x0801afbd

080195c4 <__pow5mult>:
 80195c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195c8:	4615      	mov	r5, r2
 80195ca:	f012 0203 	ands.w	r2, r2, #3
 80195ce:	4607      	mov	r7, r0
 80195d0:	460e      	mov	r6, r1
 80195d2:	d007      	beq.n	80195e4 <__pow5mult+0x20>
 80195d4:	4c25      	ldr	r4, [pc, #148]	@ (801966c <__pow5mult+0xa8>)
 80195d6:	3a01      	subs	r2, #1
 80195d8:	2300      	movs	r3, #0
 80195da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195de:	f7ff fea7 	bl	8019330 <__multadd>
 80195e2:	4606      	mov	r6, r0
 80195e4:	10ad      	asrs	r5, r5, #2
 80195e6:	d03d      	beq.n	8019664 <__pow5mult+0xa0>
 80195e8:	69fc      	ldr	r4, [r7, #28]
 80195ea:	b97c      	cbnz	r4, 801960c <__pow5mult+0x48>
 80195ec:	2010      	movs	r0, #16
 80195ee:	f7ff fd87 	bl	8019100 <malloc>
 80195f2:	4602      	mov	r2, r0
 80195f4:	61f8      	str	r0, [r7, #28]
 80195f6:	b928      	cbnz	r0, 8019604 <__pow5mult+0x40>
 80195f8:	4b1d      	ldr	r3, [pc, #116]	@ (8019670 <__pow5mult+0xac>)
 80195fa:	481e      	ldr	r0, [pc, #120]	@ (8019674 <__pow5mult+0xb0>)
 80195fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019600:	f000 fc30 	bl	8019e64 <__assert_func>
 8019604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019608:	6004      	str	r4, [r0, #0]
 801960a:	60c4      	str	r4, [r0, #12]
 801960c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019614:	b94c      	cbnz	r4, 801962a <__pow5mult+0x66>
 8019616:	f240 2171 	movw	r1, #625	@ 0x271
 801961a:	4638      	mov	r0, r7
 801961c:	f7ff ff1a 	bl	8019454 <__i2b>
 8019620:	2300      	movs	r3, #0
 8019622:	f8c8 0008 	str.w	r0, [r8, #8]
 8019626:	4604      	mov	r4, r0
 8019628:	6003      	str	r3, [r0, #0]
 801962a:	f04f 0900 	mov.w	r9, #0
 801962e:	07eb      	lsls	r3, r5, #31
 8019630:	d50a      	bpl.n	8019648 <__pow5mult+0x84>
 8019632:	4631      	mov	r1, r6
 8019634:	4622      	mov	r2, r4
 8019636:	4638      	mov	r0, r7
 8019638:	f7ff ff22 	bl	8019480 <__multiply>
 801963c:	4631      	mov	r1, r6
 801963e:	4680      	mov	r8, r0
 8019640:	4638      	mov	r0, r7
 8019642:	f7ff fe53 	bl	80192ec <_Bfree>
 8019646:	4646      	mov	r6, r8
 8019648:	106d      	asrs	r5, r5, #1
 801964a:	d00b      	beq.n	8019664 <__pow5mult+0xa0>
 801964c:	6820      	ldr	r0, [r4, #0]
 801964e:	b938      	cbnz	r0, 8019660 <__pow5mult+0x9c>
 8019650:	4622      	mov	r2, r4
 8019652:	4621      	mov	r1, r4
 8019654:	4638      	mov	r0, r7
 8019656:	f7ff ff13 	bl	8019480 <__multiply>
 801965a:	6020      	str	r0, [r4, #0]
 801965c:	f8c0 9000 	str.w	r9, [r0]
 8019660:	4604      	mov	r4, r0
 8019662:	e7e4      	b.n	801962e <__pow5mult+0x6a>
 8019664:	4630      	mov	r0, r6
 8019666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801966a:	bf00      	nop
 801966c:	0801b070 	.word	0x0801b070
 8019670:	0801af3d 	.word	0x0801af3d
 8019674:	0801afbd 	.word	0x0801afbd

08019678 <__lshift>:
 8019678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801967c:	460c      	mov	r4, r1
 801967e:	6849      	ldr	r1, [r1, #4]
 8019680:	6923      	ldr	r3, [r4, #16]
 8019682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019686:	68a3      	ldr	r3, [r4, #8]
 8019688:	4607      	mov	r7, r0
 801968a:	4691      	mov	r9, r2
 801968c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019690:	f108 0601 	add.w	r6, r8, #1
 8019694:	42b3      	cmp	r3, r6
 8019696:	db0b      	blt.n	80196b0 <__lshift+0x38>
 8019698:	4638      	mov	r0, r7
 801969a:	f7ff fde7 	bl	801926c <_Balloc>
 801969e:	4605      	mov	r5, r0
 80196a0:	b948      	cbnz	r0, 80196b6 <__lshift+0x3e>
 80196a2:	4602      	mov	r2, r0
 80196a4:	4b28      	ldr	r3, [pc, #160]	@ (8019748 <__lshift+0xd0>)
 80196a6:	4829      	ldr	r0, [pc, #164]	@ (801974c <__lshift+0xd4>)
 80196a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80196ac:	f000 fbda 	bl	8019e64 <__assert_func>
 80196b0:	3101      	adds	r1, #1
 80196b2:	005b      	lsls	r3, r3, #1
 80196b4:	e7ee      	b.n	8019694 <__lshift+0x1c>
 80196b6:	2300      	movs	r3, #0
 80196b8:	f100 0114 	add.w	r1, r0, #20
 80196bc:	f100 0210 	add.w	r2, r0, #16
 80196c0:	4618      	mov	r0, r3
 80196c2:	4553      	cmp	r3, sl
 80196c4:	db33      	blt.n	801972e <__lshift+0xb6>
 80196c6:	6920      	ldr	r0, [r4, #16]
 80196c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196cc:	f104 0314 	add.w	r3, r4, #20
 80196d0:	f019 091f 	ands.w	r9, r9, #31
 80196d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196dc:	d02b      	beq.n	8019736 <__lshift+0xbe>
 80196de:	f1c9 0e20 	rsb	lr, r9, #32
 80196e2:	468a      	mov	sl, r1
 80196e4:	2200      	movs	r2, #0
 80196e6:	6818      	ldr	r0, [r3, #0]
 80196e8:	fa00 f009 	lsl.w	r0, r0, r9
 80196ec:	4310      	orrs	r0, r2
 80196ee:	f84a 0b04 	str.w	r0, [sl], #4
 80196f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196f6:	459c      	cmp	ip, r3
 80196f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80196fc:	d8f3      	bhi.n	80196e6 <__lshift+0x6e>
 80196fe:	ebac 0304 	sub.w	r3, ip, r4
 8019702:	3b15      	subs	r3, #21
 8019704:	f023 0303 	bic.w	r3, r3, #3
 8019708:	3304      	adds	r3, #4
 801970a:	f104 0015 	add.w	r0, r4, #21
 801970e:	4560      	cmp	r0, ip
 8019710:	bf88      	it	hi
 8019712:	2304      	movhi	r3, #4
 8019714:	50ca      	str	r2, [r1, r3]
 8019716:	b10a      	cbz	r2, 801971c <__lshift+0xa4>
 8019718:	f108 0602 	add.w	r6, r8, #2
 801971c:	3e01      	subs	r6, #1
 801971e:	4638      	mov	r0, r7
 8019720:	612e      	str	r6, [r5, #16]
 8019722:	4621      	mov	r1, r4
 8019724:	f7ff fde2 	bl	80192ec <_Bfree>
 8019728:	4628      	mov	r0, r5
 801972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801972e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019732:	3301      	adds	r3, #1
 8019734:	e7c5      	b.n	80196c2 <__lshift+0x4a>
 8019736:	3904      	subs	r1, #4
 8019738:	f853 2b04 	ldr.w	r2, [r3], #4
 801973c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019740:	459c      	cmp	ip, r3
 8019742:	d8f9      	bhi.n	8019738 <__lshift+0xc0>
 8019744:	e7ea      	b.n	801971c <__lshift+0xa4>
 8019746:	bf00      	nop
 8019748:	0801afac 	.word	0x0801afac
 801974c:	0801afbd 	.word	0x0801afbd

08019750 <__mcmp>:
 8019750:	690a      	ldr	r2, [r1, #16]
 8019752:	4603      	mov	r3, r0
 8019754:	6900      	ldr	r0, [r0, #16]
 8019756:	1a80      	subs	r0, r0, r2
 8019758:	b530      	push	{r4, r5, lr}
 801975a:	d10e      	bne.n	801977a <__mcmp+0x2a>
 801975c:	3314      	adds	r3, #20
 801975e:	3114      	adds	r1, #20
 8019760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801976c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019770:	4295      	cmp	r5, r2
 8019772:	d003      	beq.n	801977c <__mcmp+0x2c>
 8019774:	d205      	bcs.n	8019782 <__mcmp+0x32>
 8019776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801977a:	bd30      	pop	{r4, r5, pc}
 801977c:	42a3      	cmp	r3, r4
 801977e:	d3f3      	bcc.n	8019768 <__mcmp+0x18>
 8019780:	e7fb      	b.n	801977a <__mcmp+0x2a>
 8019782:	2001      	movs	r0, #1
 8019784:	e7f9      	b.n	801977a <__mcmp+0x2a>
	...

08019788 <__mdiff>:
 8019788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801978c:	4689      	mov	r9, r1
 801978e:	4606      	mov	r6, r0
 8019790:	4611      	mov	r1, r2
 8019792:	4648      	mov	r0, r9
 8019794:	4614      	mov	r4, r2
 8019796:	f7ff ffdb 	bl	8019750 <__mcmp>
 801979a:	1e05      	subs	r5, r0, #0
 801979c:	d112      	bne.n	80197c4 <__mdiff+0x3c>
 801979e:	4629      	mov	r1, r5
 80197a0:	4630      	mov	r0, r6
 80197a2:	f7ff fd63 	bl	801926c <_Balloc>
 80197a6:	4602      	mov	r2, r0
 80197a8:	b928      	cbnz	r0, 80197b6 <__mdiff+0x2e>
 80197aa:	4b3f      	ldr	r3, [pc, #252]	@ (80198a8 <__mdiff+0x120>)
 80197ac:	f240 2137 	movw	r1, #567	@ 0x237
 80197b0:	483e      	ldr	r0, [pc, #248]	@ (80198ac <__mdiff+0x124>)
 80197b2:	f000 fb57 	bl	8019e64 <__assert_func>
 80197b6:	2301      	movs	r3, #1
 80197b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80197bc:	4610      	mov	r0, r2
 80197be:	b003      	add	sp, #12
 80197c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197c4:	bfbc      	itt	lt
 80197c6:	464b      	movlt	r3, r9
 80197c8:	46a1      	movlt	r9, r4
 80197ca:	4630      	mov	r0, r6
 80197cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80197d0:	bfba      	itte	lt
 80197d2:	461c      	movlt	r4, r3
 80197d4:	2501      	movlt	r5, #1
 80197d6:	2500      	movge	r5, #0
 80197d8:	f7ff fd48 	bl	801926c <_Balloc>
 80197dc:	4602      	mov	r2, r0
 80197de:	b918      	cbnz	r0, 80197e8 <__mdiff+0x60>
 80197e0:	4b31      	ldr	r3, [pc, #196]	@ (80198a8 <__mdiff+0x120>)
 80197e2:	f240 2145 	movw	r1, #581	@ 0x245
 80197e6:	e7e3      	b.n	80197b0 <__mdiff+0x28>
 80197e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80197ec:	6926      	ldr	r6, [r4, #16]
 80197ee:	60c5      	str	r5, [r0, #12]
 80197f0:	f109 0310 	add.w	r3, r9, #16
 80197f4:	f109 0514 	add.w	r5, r9, #20
 80197f8:	f104 0e14 	add.w	lr, r4, #20
 80197fc:	f100 0b14 	add.w	fp, r0, #20
 8019800:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019804:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019808:	9301      	str	r3, [sp, #4]
 801980a:	46d9      	mov	r9, fp
 801980c:	f04f 0c00 	mov.w	ip, #0
 8019810:	9b01      	ldr	r3, [sp, #4]
 8019812:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019816:	f853 af04 	ldr.w	sl, [r3, #4]!
 801981a:	9301      	str	r3, [sp, #4]
 801981c:	fa1f f38a 	uxth.w	r3, sl
 8019820:	4619      	mov	r1, r3
 8019822:	b283      	uxth	r3, r0
 8019824:	1acb      	subs	r3, r1, r3
 8019826:	0c00      	lsrs	r0, r0, #16
 8019828:	4463      	add	r3, ip
 801982a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801982e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019832:	b29b      	uxth	r3, r3
 8019834:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019838:	4576      	cmp	r6, lr
 801983a:	f849 3b04 	str.w	r3, [r9], #4
 801983e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019842:	d8e5      	bhi.n	8019810 <__mdiff+0x88>
 8019844:	1b33      	subs	r3, r6, r4
 8019846:	3b15      	subs	r3, #21
 8019848:	f023 0303 	bic.w	r3, r3, #3
 801984c:	3415      	adds	r4, #21
 801984e:	3304      	adds	r3, #4
 8019850:	42a6      	cmp	r6, r4
 8019852:	bf38      	it	cc
 8019854:	2304      	movcc	r3, #4
 8019856:	441d      	add	r5, r3
 8019858:	445b      	add	r3, fp
 801985a:	461e      	mov	r6, r3
 801985c:	462c      	mov	r4, r5
 801985e:	4544      	cmp	r4, r8
 8019860:	d30e      	bcc.n	8019880 <__mdiff+0xf8>
 8019862:	f108 0103 	add.w	r1, r8, #3
 8019866:	1b49      	subs	r1, r1, r5
 8019868:	f021 0103 	bic.w	r1, r1, #3
 801986c:	3d03      	subs	r5, #3
 801986e:	45a8      	cmp	r8, r5
 8019870:	bf38      	it	cc
 8019872:	2100      	movcc	r1, #0
 8019874:	440b      	add	r3, r1
 8019876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801987a:	b191      	cbz	r1, 80198a2 <__mdiff+0x11a>
 801987c:	6117      	str	r7, [r2, #16]
 801987e:	e79d      	b.n	80197bc <__mdiff+0x34>
 8019880:	f854 1b04 	ldr.w	r1, [r4], #4
 8019884:	46e6      	mov	lr, ip
 8019886:	0c08      	lsrs	r0, r1, #16
 8019888:	fa1c fc81 	uxtah	ip, ip, r1
 801988c:	4471      	add	r1, lr
 801988e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019892:	b289      	uxth	r1, r1
 8019894:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019898:	f846 1b04 	str.w	r1, [r6], #4
 801989c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80198a0:	e7dd      	b.n	801985e <__mdiff+0xd6>
 80198a2:	3f01      	subs	r7, #1
 80198a4:	e7e7      	b.n	8019876 <__mdiff+0xee>
 80198a6:	bf00      	nop
 80198a8:	0801afac 	.word	0x0801afac
 80198ac:	0801afbd 	.word	0x0801afbd

080198b0 <__d2b>:
 80198b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80198b4:	460f      	mov	r7, r1
 80198b6:	2101      	movs	r1, #1
 80198b8:	ec59 8b10 	vmov	r8, r9, d0
 80198bc:	4616      	mov	r6, r2
 80198be:	f7ff fcd5 	bl	801926c <_Balloc>
 80198c2:	4604      	mov	r4, r0
 80198c4:	b930      	cbnz	r0, 80198d4 <__d2b+0x24>
 80198c6:	4602      	mov	r2, r0
 80198c8:	4b23      	ldr	r3, [pc, #140]	@ (8019958 <__d2b+0xa8>)
 80198ca:	4824      	ldr	r0, [pc, #144]	@ (801995c <__d2b+0xac>)
 80198cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80198d0:	f000 fac8 	bl	8019e64 <__assert_func>
 80198d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80198d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198dc:	b10d      	cbz	r5, 80198e2 <__d2b+0x32>
 80198de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80198e2:	9301      	str	r3, [sp, #4]
 80198e4:	f1b8 0300 	subs.w	r3, r8, #0
 80198e8:	d023      	beq.n	8019932 <__d2b+0x82>
 80198ea:	4668      	mov	r0, sp
 80198ec:	9300      	str	r3, [sp, #0]
 80198ee:	f7ff fd84 	bl	80193fa <__lo0bits>
 80198f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80198f6:	b1d0      	cbz	r0, 801992e <__d2b+0x7e>
 80198f8:	f1c0 0320 	rsb	r3, r0, #32
 80198fc:	fa02 f303 	lsl.w	r3, r2, r3
 8019900:	430b      	orrs	r3, r1
 8019902:	40c2      	lsrs	r2, r0
 8019904:	6163      	str	r3, [r4, #20]
 8019906:	9201      	str	r2, [sp, #4]
 8019908:	9b01      	ldr	r3, [sp, #4]
 801990a:	61a3      	str	r3, [r4, #24]
 801990c:	2b00      	cmp	r3, #0
 801990e:	bf0c      	ite	eq
 8019910:	2201      	moveq	r2, #1
 8019912:	2202      	movne	r2, #2
 8019914:	6122      	str	r2, [r4, #16]
 8019916:	b1a5      	cbz	r5, 8019942 <__d2b+0x92>
 8019918:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801991c:	4405      	add	r5, r0
 801991e:	603d      	str	r5, [r7, #0]
 8019920:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019924:	6030      	str	r0, [r6, #0]
 8019926:	4620      	mov	r0, r4
 8019928:	b003      	add	sp, #12
 801992a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801992e:	6161      	str	r1, [r4, #20]
 8019930:	e7ea      	b.n	8019908 <__d2b+0x58>
 8019932:	a801      	add	r0, sp, #4
 8019934:	f7ff fd61 	bl	80193fa <__lo0bits>
 8019938:	9b01      	ldr	r3, [sp, #4]
 801993a:	6163      	str	r3, [r4, #20]
 801993c:	3020      	adds	r0, #32
 801993e:	2201      	movs	r2, #1
 8019940:	e7e8      	b.n	8019914 <__d2b+0x64>
 8019942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019946:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801994a:	6038      	str	r0, [r7, #0]
 801994c:	6918      	ldr	r0, [r3, #16]
 801994e:	f7ff fd35 	bl	80193bc <__hi0bits>
 8019952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019956:	e7e5      	b.n	8019924 <__d2b+0x74>
 8019958:	0801afac 	.word	0x0801afac
 801995c:	0801afbd 	.word	0x0801afbd

08019960 <__sfputc_r>:
 8019960:	6893      	ldr	r3, [r2, #8]
 8019962:	3b01      	subs	r3, #1
 8019964:	2b00      	cmp	r3, #0
 8019966:	b410      	push	{r4}
 8019968:	6093      	str	r3, [r2, #8]
 801996a:	da08      	bge.n	801997e <__sfputc_r+0x1e>
 801996c:	6994      	ldr	r4, [r2, #24]
 801996e:	42a3      	cmp	r3, r4
 8019970:	db01      	blt.n	8019976 <__sfputc_r+0x16>
 8019972:	290a      	cmp	r1, #10
 8019974:	d103      	bne.n	801997e <__sfputc_r+0x1e>
 8019976:	f85d 4b04 	ldr.w	r4, [sp], #4
 801997a:	f7fe bc10 	b.w	801819e <__swbuf_r>
 801997e:	6813      	ldr	r3, [r2, #0]
 8019980:	1c58      	adds	r0, r3, #1
 8019982:	6010      	str	r0, [r2, #0]
 8019984:	7019      	strb	r1, [r3, #0]
 8019986:	4608      	mov	r0, r1
 8019988:	f85d 4b04 	ldr.w	r4, [sp], #4
 801998c:	4770      	bx	lr

0801998e <__sfputs_r>:
 801998e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019990:	4606      	mov	r6, r0
 8019992:	460f      	mov	r7, r1
 8019994:	4614      	mov	r4, r2
 8019996:	18d5      	adds	r5, r2, r3
 8019998:	42ac      	cmp	r4, r5
 801999a:	d101      	bne.n	80199a0 <__sfputs_r+0x12>
 801999c:	2000      	movs	r0, #0
 801999e:	e007      	b.n	80199b0 <__sfputs_r+0x22>
 80199a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199a4:	463a      	mov	r2, r7
 80199a6:	4630      	mov	r0, r6
 80199a8:	f7ff ffda 	bl	8019960 <__sfputc_r>
 80199ac:	1c43      	adds	r3, r0, #1
 80199ae:	d1f3      	bne.n	8019998 <__sfputs_r+0xa>
 80199b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080199b4 <_vfiprintf_r>:
 80199b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b8:	460d      	mov	r5, r1
 80199ba:	b09d      	sub	sp, #116	@ 0x74
 80199bc:	4614      	mov	r4, r2
 80199be:	4698      	mov	r8, r3
 80199c0:	4606      	mov	r6, r0
 80199c2:	b118      	cbz	r0, 80199cc <_vfiprintf_r+0x18>
 80199c4:	6a03      	ldr	r3, [r0, #32]
 80199c6:	b90b      	cbnz	r3, 80199cc <_vfiprintf_r+0x18>
 80199c8:	f7fe fb00 	bl	8017fcc <__sinit>
 80199cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199ce:	07d9      	lsls	r1, r3, #31
 80199d0:	d405      	bmi.n	80199de <_vfiprintf_r+0x2a>
 80199d2:	89ab      	ldrh	r3, [r5, #12]
 80199d4:	059a      	lsls	r2, r3, #22
 80199d6:	d402      	bmi.n	80199de <_vfiprintf_r+0x2a>
 80199d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199da:	f7fe fd50 	bl	801847e <__retarget_lock_acquire_recursive>
 80199de:	89ab      	ldrh	r3, [r5, #12]
 80199e0:	071b      	lsls	r3, r3, #28
 80199e2:	d501      	bpl.n	80199e8 <_vfiprintf_r+0x34>
 80199e4:	692b      	ldr	r3, [r5, #16]
 80199e6:	b99b      	cbnz	r3, 8019a10 <_vfiprintf_r+0x5c>
 80199e8:	4629      	mov	r1, r5
 80199ea:	4630      	mov	r0, r6
 80199ec:	f7fe fc16 	bl	801821c <__swsetup_r>
 80199f0:	b170      	cbz	r0, 8019a10 <_vfiprintf_r+0x5c>
 80199f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199f4:	07dc      	lsls	r4, r3, #31
 80199f6:	d504      	bpl.n	8019a02 <_vfiprintf_r+0x4e>
 80199f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199fc:	b01d      	add	sp, #116	@ 0x74
 80199fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a02:	89ab      	ldrh	r3, [r5, #12]
 8019a04:	0598      	lsls	r0, r3, #22
 8019a06:	d4f7      	bmi.n	80199f8 <_vfiprintf_r+0x44>
 8019a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a0a:	f7fe fd39 	bl	8018480 <__retarget_lock_release_recursive>
 8019a0e:	e7f3      	b.n	80199f8 <_vfiprintf_r+0x44>
 8019a10:	2300      	movs	r3, #0
 8019a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a14:	2320      	movs	r3, #32
 8019a16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a1e:	2330      	movs	r3, #48	@ 0x30
 8019a20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019bd0 <_vfiprintf_r+0x21c>
 8019a24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019a28:	f04f 0901 	mov.w	r9, #1
 8019a2c:	4623      	mov	r3, r4
 8019a2e:	469a      	mov	sl, r3
 8019a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a34:	b10a      	cbz	r2, 8019a3a <_vfiprintf_r+0x86>
 8019a36:	2a25      	cmp	r2, #37	@ 0x25
 8019a38:	d1f9      	bne.n	8019a2e <_vfiprintf_r+0x7a>
 8019a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8019a3e:	d00b      	beq.n	8019a58 <_vfiprintf_r+0xa4>
 8019a40:	465b      	mov	r3, fp
 8019a42:	4622      	mov	r2, r4
 8019a44:	4629      	mov	r1, r5
 8019a46:	4630      	mov	r0, r6
 8019a48:	f7ff ffa1 	bl	801998e <__sfputs_r>
 8019a4c:	3001      	adds	r0, #1
 8019a4e:	f000 80a7 	beq.w	8019ba0 <_vfiprintf_r+0x1ec>
 8019a52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a54:	445a      	add	r2, fp
 8019a56:	9209      	str	r2, [sp, #36]	@ 0x24
 8019a58:	f89a 3000 	ldrb.w	r3, [sl]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f000 809f 	beq.w	8019ba0 <_vfiprintf_r+0x1ec>
 8019a62:	2300      	movs	r3, #0
 8019a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a6c:	f10a 0a01 	add.w	sl, sl, #1
 8019a70:	9304      	str	r3, [sp, #16]
 8019a72:	9307      	str	r3, [sp, #28]
 8019a74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019a78:	931a      	str	r3, [sp, #104]	@ 0x68
 8019a7a:	4654      	mov	r4, sl
 8019a7c:	2205      	movs	r2, #5
 8019a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a82:	4853      	ldr	r0, [pc, #332]	@ (8019bd0 <_vfiprintf_r+0x21c>)
 8019a84:	f7e6 fc44 	bl	8000310 <memchr>
 8019a88:	9a04      	ldr	r2, [sp, #16]
 8019a8a:	b9d8      	cbnz	r0, 8019ac4 <_vfiprintf_r+0x110>
 8019a8c:	06d1      	lsls	r1, r2, #27
 8019a8e:	bf44      	itt	mi
 8019a90:	2320      	movmi	r3, #32
 8019a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a96:	0713      	lsls	r3, r2, #28
 8019a98:	bf44      	itt	mi
 8019a9a:	232b      	movmi	r3, #43	@ 0x2b
 8019a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8019aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8019aa6:	d015      	beq.n	8019ad4 <_vfiprintf_r+0x120>
 8019aa8:	9a07      	ldr	r2, [sp, #28]
 8019aaa:	4654      	mov	r4, sl
 8019aac:	2000      	movs	r0, #0
 8019aae:	f04f 0c0a 	mov.w	ip, #10
 8019ab2:	4621      	mov	r1, r4
 8019ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ab8:	3b30      	subs	r3, #48	@ 0x30
 8019aba:	2b09      	cmp	r3, #9
 8019abc:	d94b      	bls.n	8019b56 <_vfiprintf_r+0x1a2>
 8019abe:	b1b0      	cbz	r0, 8019aee <_vfiprintf_r+0x13a>
 8019ac0:	9207      	str	r2, [sp, #28]
 8019ac2:	e014      	b.n	8019aee <_vfiprintf_r+0x13a>
 8019ac4:	eba0 0308 	sub.w	r3, r0, r8
 8019ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8019acc:	4313      	orrs	r3, r2
 8019ace:	9304      	str	r3, [sp, #16]
 8019ad0:	46a2      	mov	sl, r4
 8019ad2:	e7d2      	b.n	8019a7a <_vfiprintf_r+0xc6>
 8019ad4:	9b03      	ldr	r3, [sp, #12]
 8019ad6:	1d19      	adds	r1, r3, #4
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	9103      	str	r1, [sp, #12]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bfbb      	ittet	lt
 8019ae0:	425b      	neglt	r3, r3
 8019ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8019ae6:	9307      	strge	r3, [sp, #28]
 8019ae8:	9307      	strlt	r3, [sp, #28]
 8019aea:	bfb8      	it	lt
 8019aec:	9204      	strlt	r2, [sp, #16]
 8019aee:	7823      	ldrb	r3, [r4, #0]
 8019af0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019af2:	d10a      	bne.n	8019b0a <_vfiprintf_r+0x156>
 8019af4:	7863      	ldrb	r3, [r4, #1]
 8019af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019af8:	d132      	bne.n	8019b60 <_vfiprintf_r+0x1ac>
 8019afa:	9b03      	ldr	r3, [sp, #12]
 8019afc:	1d1a      	adds	r2, r3, #4
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	9203      	str	r2, [sp, #12]
 8019b02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019b06:	3402      	adds	r4, #2
 8019b08:	9305      	str	r3, [sp, #20]
 8019b0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019be0 <_vfiprintf_r+0x22c>
 8019b0e:	7821      	ldrb	r1, [r4, #0]
 8019b10:	2203      	movs	r2, #3
 8019b12:	4650      	mov	r0, sl
 8019b14:	f7e6 fbfc 	bl	8000310 <memchr>
 8019b18:	b138      	cbz	r0, 8019b2a <_vfiprintf_r+0x176>
 8019b1a:	9b04      	ldr	r3, [sp, #16]
 8019b1c:	eba0 000a 	sub.w	r0, r0, sl
 8019b20:	2240      	movs	r2, #64	@ 0x40
 8019b22:	4082      	lsls	r2, r0
 8019b24:	4313      	orrs	r3, r2
 8019b26:	3401      	adds	r4, #1
 8019b28:	9304      	str	r3, [sp, #16]
 8019b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b2e:	4829      	ldr	r0, [pc, #164]	@ (8019bd4 <_vfiprintf_r+0x220>)
 8019b30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019b34:	2206      	movs	r2, #6
 8019b36:	f7e6 fbeb 	bl	8000310 <memchr>
 8019b3a:	2800      	cmp	r0, #0
 8019b3c:	d03f      	beq.n	8019bbe <_vfiprintf_r+0x20a>
 8019b3e:	4b26      	ldr	r3, [pc, #152]	@ (8019bd8 <_vfiprintf_r+0x224>)
 8019b40:	bb1b      	cbnz	r3, 8019b8a <_vfiprintf_r+0x1d6>
 8019b42:	9b03      	ldr	r3, [sp, #12]
 8019b44:	3307      	adds	r3, #7
 8019b46:	f023 0307 	bic.w	r3, r3, #7
 8019b4a:	3308      	adds	r3, #8
 8019b4c:	9303      	str	r3, [sp, #12]
 8019b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b50:	443b      	add	r3, r7
 8019b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b54:	e76a      	b.n	8019a2c <_vfiprintf_r+0x78>
 8019b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	2001      	movs	r0, #1
 8019b5e:	e7a8      	b.n	8019ab2 <_vfiprintf_r+0xfe>
 8019b60:	2300      	movs	r3, #0
 8019b62:	3401      	adds	r4, #1
 8019b64:	9305      	str	r3, [sp, #20]
 8019b66:	4619      	mov	r1, r3
 8019b68:	f04f 0c0a 	mov.w	ip, #10
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b72:	3a30      	subs	r2, #48	@ 0x30
 8019b74:	2a09      	cmp	r2, #9
 8019b76:	d903      	bls.n	8019b80 <_vfiprintf_r+0x1cc>
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d0c6      	beq.n	8019b0a <_vfiprintf_r+0x156>
 8019b7c:	9105      	str	r1, [sp, #20]
 8019b7e:	e7c4      	b.n	8019b0a <_vfiprintf_r+0x156>
 8019b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b84:	4604      	mov	r4, r0
 8019b86:	2301      	movs	r3, #1
 8019b88:	e7f0      	b.n	8019b6c <_vfiprintf_r+0x1b8>
 8019b8a:	ab03      	add	r3, sp, #12
 8019b8c:	9300      	str	r3, [sp, #0]
 8019b8e:	462a      	mov	r2, r5
 8019b90:	4b12      	ldr	r3, [pc, #72]	@ (8019bdc <_vfiprintf_r+0x228>)
 8019b92:	a904      	add	r1, sp, #16
 8019b94:	4630      	mov	r0, r6
 8019b96:	f7fd fde7 	bl	8017768 <_printf_float>
 8019b9a:	4607      	mov	r7, r0
 8019b9c:	1c78      	adds	r0, r7, #1
 8019b9e:	d1d6      	bne.n	8019b4e <_vfiprintf_r+0x19a>
 8019ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ba2:	07d9      	lsls	r1, r3, #31
 8019ba4:	d405      	bmi.n	8019bb2 <_vfiprintf_r+0x1fe>
 8019ba6:	89ab      	ldrh	r3, [r5, #12]
 8019ba8:	059a      	lsls	r2, r3, #22
 8019baa:	d402      	bmi.n	8019bb2 <_vfiprintf_r+0x1fe>
 8019bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019bae:	f7fe fc67 	bl	8018480 <__retarget_lock_release_recursive>
 8019bb2:	89ab      	ldrh	r3, [r5, #12]
 8019bb4:	065b      	lsls	r3, r3, #25
 8019bb6:	f53f af1f 	bmi.w	80199f8 <_vfiprintf_r+0x44>
 8019bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bbc:	e71e      	b.n	80199fc <_vfiprintf_r+0x48>
 8019bbe:	ab03      	add	r3, sp, #12
 8019bc0:	9300      	str	r3, [sp, #0]
 8019bc2:	462a      	mov	r2, r5
 8019bc4:	4b05      	ldr	r3, [pc, #20]	@ (8019bdc <_vfiprintf_r+0x228>)
 8019bc6:	a904      	add	r1, sp, #16
 8019bc8:	4630      	mov	r0, r6
 8019bca:	f7fe f855 	bl	8017c78 <_printf_i>
 8019bce:	e7e4      	b.n	8019b9a <_vfiprintf_r+0x1e6>
 8019bd0:	0801b016 	.word	0x0801b016
 8019bd4:	0801b020 	.word	0x0801b020
 8019bd8:	08017769 	.word	0x08017769
 8019bdc:	0801998f 	.word	0x0801998f
 8019be0:	0801b01c 	.word	0x0801b01c

08019be4 <__sflush_r>:
 8019be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bec:	0716      	lsls	r6, r2, #28
 8019bee:	4605      	mov	r5, r0
 8019bf0:	460c      	mov	r4, r1
 8019bf2:	d454      	bmi.n	8019c9e <__sflush_r+0xba>
 8019bf4:	684b      	ldr	r3, [r1, #4]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	dc02      	bgt.n	8019c00 <__sflush_r+0x1c>
 8019bfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	dd48      	ble.n	8019c92 <__sflush_r+0xae>
 8019c00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c02:	2e00      	cmp	r6, #0
 8019c04:	d045      	beq.n	8019c92 <__sflush_r+0xae>
 8019c06:	2300      	movs	r3, #0
 8019c08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019c0c:	682f      	ldr	r7, [r5, #0]
 8019c0e:	6a21      	ldr	r1, [r4, #32]
 8019c10:	602b      	str	r3, [r5, #0]
 8019c12:	d030      	beq.n	8019c76 <__sflush_r+0x92>
 8019c14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019c16:	89a3      	ldrh	r3, [r4, #12]
 8019c18:	0759      	lsls	r1, r3, #29
 8019c1a:	d505      	bpl.n	8019c28 <__sflush_r+0x44>
 8019c1c:	6863      	ldr	r3, [r4, #4]
 8019c1e:	1ad2      	subs	r2, r2, r3
 8019c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019c22:	b10b      	cbz	r3, 8019c28 <__sflush_r+0x44>
 8019c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019c26:	1ad2      	subs	r2, r2, r3
 8019c28:	2300      	movs	r3, #0
 8019c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c2c:	6a21      	ldr	r1, [r4, #32]
 8019c2e:	4628      	mov	r0, r5
 8019c30:	47b0      	blx	r6
 8019c32:	1c43      	adds	r3, r0, #1
 8019c34:	89a3      	ldrh	r3, [r4, #12]
 8019c36:	d106      	bne.n	8019c46 <__sflush_r+0x62>
 8019c38:	6829      	ldr	r1, [r5, #0]
 8019c3a:	291d      	cmp	r1, #29
 8019c3c:	d82b      	bhi.n	8019c96 <__sflush_r+0xb2>
 8019c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8019ce8 <__sflush_r+0x104>)
 8019c40:	40ca      	lsrs	r2, r1
 8019c42:	07d6      	lsls	r6, r2, #31
 8019c44:	d527      	bpl.n	8019c96 <__sflush_r+0xb2>
 8019c46:	2200      	movs	r2, #0
 8019c48:	6062      	str	r2, [r4, #4]
 8019c4a:	04d9      	lsls	r1, r3, #19
 8019c4c:	6922      	ldr	r2, [r4, #16]
 8019c4e:	6022      	str	r2, [r4, #0]
 8019c50:	d504      	bpl.n	8019c5c <__sflush_r+0x78>
 8019c52:	1c42      	adds	r2, r0, #1
 8019c54:	d101      	bne.n	8019c5a <__sflush_r+0x76>
 8019c56:	682b      	ldr	r3, [r5, #0]
 8019c58:	b903      	cbnz	r3, 8019c5c <__sflush_r+0x78>
 8019c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c5e:	602f      	str	r7, [r5, #0]
 8019c60:	b1b9      	cbz	r1, 8019c92 <__sflush_r+0xae>
 8019c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c66:	4299      	cmp	r1, r3
 8019c68:	d002      	beq.n	8019c70 <__sflush_r+0x8c>
 8019c6a:	4628      	mov	r0, r5
 8019c6c:	f7ff f9fe 	bl	801906c <_free_r>
 8019c70:	2300      	movs	r3, #0
 8019c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c74:	e00d      	b.n	8019c92 <__sflush_r+0xae>
 8019c76:	2301      	movs	r3, #1
 8019c78:	4628      	mov	r0, r5
 8019c7a:	47b0      	blx	r6
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	1c50      	adds	r0, r2, #1
 8019c80:	d1c9      	bne.n	8019c16 <__sflush_r+0x32>
 8019c82:	682b      	ldr	r3, [r5, #0]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d0c6      	beq.n	8019c16 <__sflush_r+0x32>
 8019c88:	2b1d      	cmp	r3, #29
 8019c8a:	d001      	beq.n	8019c90 <__sflush_r+0xac>
 8019c8c:	2b16      	cmp	r3, #22
 8019c8e:	d11e      	bne.n	8019cce <__sflush_r+0xea>
 8019c90:	602f      	str	r7, [r5, #0]
 8019c92:	2000      	movs	r0, #0
 8019c94:	e022      	b.n	8019cdc <__sflush_r+0xf8>
 8019c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c9a:	b21b      	sxth	r3, r3
 8019c9c:	e01b      	b.n	8019cd6 <__sflush_r+0xf2>
 8019c9e:	690f      	ldr	r7, [r1, #16]
 8019ca0:	2f00      	cmp	r7, #0
 8019ca2:	d0f6      	beq.n	8019c92 <__sflush_r+0xae>
 8019ca4:	0793      	lsls	r3, r2, #30
 8019ca6:	680e      	ldr	r6, [r1, #0]
 8019ca8:	bf08      	it	eq
 8019caa:	694b      	ldreq	r3, [r1, #20]
 8019cac:	600f      	str	r7, [r1, #0]
 8019cae:	bf18      	it	ne
 8019cb0:	2300      	movne	r3, #0
 8019cb2:	eba6 0807 	sub.w	r8, r6, r7
 8019cb6:	608b      	str	r3, [r1, #8]
 8019cb8:	f1b8 0f00 	cmp.w	r8, #0
 8019cbc:	dde9      	ble.n	8019c92 <__sflush_r+0xae>
 8019cbe:	6a21      	ldr	r1, [r4, #32]
 8019cc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019cc2:	4643      	mov	r3, r8
 8019cc4:	463a      	mov	r2, r7
 8019cc6:	4628      	mov	r0, r5
 8019cc8:	47b0      	blx	r6
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	dc08      	bgt.n	8019ce0 <__sflush_r+0xfc>
 8019cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019cd6:	81a3      	strh	r3, [r4, #12]
 8019cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ce0:	4407      	add	r7, r0
 8019ce2:	eba8 0800 	sub.w	r8, r8, r0
 8019ce6:	e7e7      	b.n	8019cb8 <__sflush_r+0xd4>
 8019ce8:	20400001 	.word	0x20400001

08019cec <_fflush_r>:
 8019cec:	b538      	push	{r3, r4, r5, lr}
 8019cee:	690b      	ldr	r3, [r1, #16]
 8019cf0:	4605      	mov	r5, r0
 8019cf2:	460c      	mov	r4, r1
 8019cf4:	b913      	cbnz	r3, 8019cfc <_fflush_r+0x10>
 8019cf6:	2500      	movs	r5, #0
 8019cf8:	4628      	mov	r0, r5
 8019cfa:	bd38      	pop	{r3, r4, r5, pc}
 8019cfc:	b118      	cbz	r0, 8019d06 <_fflush_r+0x1a>
 8019cfe:	6a03      	ldr	r3, [r0, #32]
 8019d00:	b90b      	cbnz	r3, 8019d06 <_fflush_r+0x1a>
 8019d02:	f7fe f963 	bl	8017fcc <__sinit>
 8019d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d0f3      	beq.n	8019cf6 <_fflush_r+0xa>
 8019d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019d10:	07d0      	lsls	r0, r2, #31
 8019d12:	d404      	bmi.n	8019d1e <_fflush_r+0x32>
 8019d14:	0599      	lsls	r1, r3, #22
 8019d16:	d402      	bmi.n	8019d1e <_fflush_r+0x32>
 8019d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d1a:	f7fe fbb0 	bl	801847e <__retarget_lock_acquire_recursive>
 8019d1e:	4628      	mov	r0, r5
 8019d20:	4621      	mov	r1, r4
 8019d22:	f7ff ff5f 	bl	8019be4 <__sflush_r>
 8019d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d28:	07da      	lsls	r2, r3, #31
 8019d2a:	4605      	mov	r5, r0
 8019d2c:	d4e4      	bmi.n	8019cf8 <_fflush_r+0xc>
 8019d2e:	89a3      	ldrh	r3, [r4, #12]
 8019d30:	059b      	lsls	r3, r3, #22
 8019d32:	d4e1      	bmi.n	8019cf8 <_fflush_r+0xc>
 8019d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d36:	f7fe fba3 	bl	8018480 <__retarget_lock_release_recursive>
 8019d3a:	e7dd      	b.n	8019cf8 <_fflush_r+0xc>

08019d3c <__swhatbuf_r>:
 8019d3c:	b570      	push	{r4, r5, r6, lr}
 8019d3e:	460c      	mov	r4, r1
 8019d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d44:	2900      	cmp	r1, #0
 8019d46:	b096      	sub	sp, #88	@ 0x58
 8019d48:	4615      	mov	r5, r2
 8019d4a:	461e      	mov	r6, r3
 8019d4c:	da0d      	bge.n	8019d6a <__swhatbuf_r+0x2e>
 8019d4e:	89a3      	ldrh	r3, [r4, #12]
 8019d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019d54:	f04f 0100 	mov.w	r1, #0
 8019d58:	bf14      	ite	ne
 8019d5a:	2340      	movne	r3, #64	@ 0x40
 8019d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019d60:	2000      	movs	r0, #0
 8019d62:	6031      	str	r1, [r6, #0]
 8019d64:	602b      	str	r3, [r5, #0]
 8019d66:	b016      	add	sp, #88	@ 0x58
 8019d68:	bd70      	pop	{r4, r5, r6, pc}
 8019d6a:	466a      	mov	r2, sp
 8019d6c:	f000 f848 	bl	8019e00 <_fstat_r>
 8019d70:	2800      	cmp	r0, #0
 8019d72:	dbec      	blt.n	8019d4e <__swhatbuf_r+0x12>
 8019d74:	9901      	ldr	r1, [sp, #4]
 8019d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019d7e:	4259      	negs	r1, r3
 8019d80:	4159      	adcs	r1, r3
 8019d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d86:	e7eb      	b.n	8019d60 <__swhatbuf_r+0x24>

08019d88 <__smakebuf_r>:
 8019d88:	898b      	ldrh	r3, [r1, #12]
 8019d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d8c:	079d      	lsls	r5, r3, #30
 8019d8e:	4606      	mov	r6, r0
 8019d90:	460c      	mov	r4, r1
 8019d92:	d507      	bpl.n	8019da4 <__smakebuf_r+0x1c>
 8019d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019d98:	6023      	str	r3, [r4, #0]
 8019d9a:	6123      	str	r3, [r4, #16]
 8019d9c:	2301      	movs	r3, #1
 8019d9e:	6163      	str	r3, [r4, #20]
 8019da0:	b003      	add	sp, #12
 8019da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019da4:	ab01      	add	r3, sp, #4
 8019da6:	466a      	mov	r2, sp
 8019da8:	f7ff ffc8 	bl	8019d3c <__swhatbuf_r>
 8019dac:	9f00      	ldr	r7, [sp, #0]
 8019dae:	4605      	mov	r5, r0
 8019db0:	4639      	mov	r1, r7
 8019db2:	4630      	mov	r0, r6
 8019db4:	f7ff f9ce 	bl	8019154 <_malloc_r>
 8019db8:	b948      	cbnz	r0, 8019dce <__smakebuf_r+0x46>
 8019dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dbe:	059a      	lsls	r2, r3, #22
 8019dc0:	d4ee      	bmi.n	8019da0 <__smakebuf_r+0x18>
 8019dc2:	f023 0303 	bic.w	r3, r3, #3
 8019dc6:	f043 0302 	orr.w	r3, r3, #2
 8019dca:	81a3      	strh	r3, [r4, #12]
 8019dcc:	e7e2      	b.n	8019d94 <__smakebuf_r+0xc>
 8019dce:	89a3      	ldrh	r3, [r4, #12]
 8019dd0:	6020      	str	r0, [r4, #0]
 8019dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019dd6:	81a3      	strh	r3, [r4, #12]
 8019dd8:	9b01      	ldr	r3, [sp, #4]
 8019dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019dde:	b15b      	cbz	r3, 8019df8 <__smakebuf_r+0x70>
 8019de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019de4:	4630      	mov	r0, r6
 8019de6:	f000 f81d 	bl	8019e24 <_isatty_r>
 8019dea:	b128      	cbz	r0, 8019df8 <__smakebuf_r+0x70>
 8019dec:	89a3      	ldrh	r3, [r4, #12]
 8019dee:	f023 0303 	bic.w	r3, r3, #3
 8019df2:	f043 0301 	orr.w	r3, r3, #1
 8019df6:	81a3      	strh	r3, [r4, #12]
 8019df8:	89a3      	ldrh	r3, [r4, #12]
 8019dfa:	431d      	orrs	r5, r3
 8019dfc:	81a5      	strh	r5, [r4, #12]
 8019dfe:	e7cf      	b.n	8019da0 <__smakebuf_r+0x18>

08019e00 <_fstat_r>:
 8019e00:	b538      	push	{r3, r4, r5, lr}
 8019e02:	4d07      	ldr	r5, [pc, #28]	@ (8019e20 <_fstat_r+0x20>)
 8019e04:	2300      	movs	r3, #0
 8019e06:	4604      	mov	r4, r0
 8019e08:	4608      	mov	r0, r1
 8019e0a:	4611      	mov	r1, r2
 8019e0c:	602b      	str	r3, [r5, #0]
 8019e0e:	f7ea f881 	bl	8003f14 <_fstat>
 8019e12:	1c43      	adds	r3, r0, #1
 8019e14:	d102      	bne.n	8019e1c <_fstat_r+0x1c>
 8019e16:	682b      	ldr	r3, [r5, #0]
 8019e18:	b103      	cbz	r3, 8019e1c <_fstat_r+0x1c>
 8019e1a:	6023      	str	r3, [r4, #0]
 8019e1c:	bd38      	pop	{r3, r4, r5, pc}
 8019e1e:	bf00      	nop
 8019e20:	24005c70 	.word	0x24005c70

08019e24 <_isatty_r>:
 8019e24:	b538      	push	{r3, r4, r5, lr}
 8019e26:	4d06      	ldr	r5, [pc, #24]	@ (8019e40 <_isatty_r+0x1c>)
 8019e28:	2300      	movs	r3, #0
 8019e2a:	4604      	mov	r4, r0
 8019e2c:	4608      	mov	r0, r1
 8019e2e:	602b      	str	r3, [r5, #0]
 8019e30:	f7ea f880 	bl	8003f34 <_isatty>
 8019e34:	1c43      	adds	r3, r0, #1
 8019e36:	d102      	bne.n	8019e3e <_isatty_r+0x1a>
 8019e38:	682b      	ldr	r3, [r5, #0]
 8019e3a:	b103      	cbz	r3, 8019e3e <_isatty_r+0x1a>
 8019e3c:	6023      	str	r3, [r4, #0]
 8019e3e:	bd38      	pop	{r3, r4, r5, pc}
 8019e40:	24005c70 	.word	0x24005c70

08019e44 <_sbrk_r>:
 8019e44:	b538      	push	{r3, r4, r5, lr}
 8019e46:	4d06      	ldr	r5, [pc, #24]	@ (8019e60 <_sbrk_r+0x1c>)
 8019e48:	2300      	movs	r3, #0
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	4608      	mov	r0, r1
 8019e4e:	602b      	str	r3, [r5, #0]
 8019e50:	f7ea f888 	bl	8003f64 <_sbrk>
 8019e54:	1c43      	adds	r3, r0, #1
 8019e56:	d102      	bne.n	8019e5e <_sbrk_r+0x1a>
 8019e58:	682b      	ldr	r3, [r5, #0]
 8019e5a:	b103      	cbz	r3, 8019e5e <_sbrk_r+0x1a>
 8019e5c:	6023      	str	r3, [r4, #0]
 8019e5e:	bd38      	pop	{r3, r4, r5, pc}
 8019e60:	24005c70 	.word	0x24005c70

08019e64 <__assert_func>:
 8019e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e66:	4614      	mov	r4, r2
 8019e68:	461a      	mov	r2, r3
 8019e6a:	4b09      	ldr	r3, [pc, #36]	@ (8019e90 <__assert_func+0x2c>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4605      	mov	r5, r0
 8019e70:	68d8      	ldr	r0, [r3, #12]
 8019e72:	b14c      	cbz	r4, 8019e88 <__assert_func+0x24>
 8019e74:	4b07      	ldr	r3, [pc, #28]	@ (8019e94 <__assert_func+0x30>)
 8019e76:	9100      	str	r1, [sp, #0]
 8019e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e7c:	4906      	ldr	r1, [pc, #24]	@ (8019e98 <__assert_func+0x34>)
 8019e7e:	462b      	mov	r3, r5
 8019e80:	f000 f842 	bl	8019f08 <fiprintf>
 8019e84:	f000 f852 	bl	8019f2c <abort>
 8019e88:	4b04      	ldr	r3, [pc, #16]	@ (8019e9c <__assert_func+0x38>)
 8019e8a:	461c      	mov	r4, r3
 8019e8c:	e7f3      	b.n	8019e76 <__assert_func+0x12>
 8019e8e:	bf00      	nop
 8019e90:	24000030 	.word	0x24000030
 8019e94:	0801b031 	.word	0x0801b031
 8019e98:	0801b03e 	.word	0x0801b03e
 8019e9c:	0801b06c 	.word	0x0801b06c

08019ea0 <_calloc_r>:
 8019ea0:	b570      	push	{r4, r5, r6, lr}
 8019ea2:	fba1 5402 	umull	r5, r4, r1, r2
 8019ea6:	b934      	cbnz	r4, 8019eb6 <_calloc_r+0x16>
 8019ea8:	4629      	mov	r1, r5
 8019eaa:	f7ff f953 	bl	8019154 <_malloc_r>
 8019eae:	4606      	mov	r6, r0
 8019eb0:	b928      	cbnz	r0, 8019ebe <_calloc_r+0x1e>
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	bd70      	pop	{r4, r5, r6, pc}
 8019eb6:	220c      	movs	r2, #12
 8019eb8:	6002      	str	r2, [r0, #0]
 8019eba:	2600      	movs	r6, #0
 8019ebc:	e7f9      	b.n	8019eb2 <_calloc_r+0x12>
 8019ebe:	462a      	mov	r2, r5
 8019ec0:	4621      	mov	r1, r4
 8019ec2:	f7fe fa01 	bl	80182c8 <memset>
 8019ec6:	e7f4      	b.n	8019eb2 <_calloc_r+0x12>

08019ec8 <__ascii_mbtowc>:
 8019ec8:	b082      	sub	sp, #8
 8019eca:	b901      	cbnz	r1, 8019ece <__ascii_mbtowc+0x6>
 8019ecc:	a901      	add	r1, sp, #4
 8019ece:	b142      	cbz	r2, 8019ee2 <__ascii_mbtowc+0x1a>
 8019ed0:	b14b      	cbz	r3, 8019ee6 <__ascii_mbtowc+0x1e>
 8019ed2:	7813      	ldrb	r3, [r2, #0]
 8019ed4:	600b      	str	r3, [r1, #0]
 8019ed6:	7812      	ldrb	r2, [r2, #0]
 8019ed8:	1e10      	subs	r0, r2, #0
 8019eda:	bf18      	it	ne
 8019edc:	2001      	movne	r0, #1
 8019ede:	b002      	add	sp, #8
 8019ee0:	4770      	bx	lr
 8019ee2:	4610      	mov	r0, r2
 8019ee4:	e7fb      	b.n	8019ede <__ascii_mbtowc+0x16>
 8019ee6:	f06f 0001 	mvn.w	r0, #1
 8019eea:	e7f8      	b.n	8019ede <__ascii_mbtowc+0x16>

08019eec <__ascii_wctomb>:
 8019eec:	4603      	mov	r3, r0
 8019eee:	4608      	mov	r0, r1
 8019ef0:	b141      	cbz	r1, 8019f04 <__ascii_wctomb+0x18>
 8019ef2:	2aff      	cmp	r2, #255	@ 0xff
 8019ef4:	d904      	bls.n	8019f00 <__ascii_wctomb+0x14>
 8019ef6:	228a      	movs	r2, #138	@ 0x8a
 8019ef8:	601a      	str	r2, [r3, #0]
 8019efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019efe:	4770      	bx	lr
 8019f00:	700a      	strb	r2, [r1, #0]
 8019f02:	2001      	movs	r0, #1
 8019f04:	4770      	bx	lr
	...

08019f08 <fiprintf>:
 8019f08:	b40e      	push	{r1, r2, r3}
 8019f0a:	b503      	push	{r0, r1, lr}
 8019f0c:	4601      	mov	r1, r0
 8019f0e:	ab03      	add	r3, sp, #12
 8019f10:	4805      	ldr	r0, [pc, #20]	@ (8019f28 <fiprintf+0x20>)
 8019f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f16:	6800      	ldr	r0, [r0, #0]
 8019f18:	9301      	str	r3, [sp, #4]
 8019f1a:	f7ff fd4b 	bl	80199b4 <_vfiprintf_r>
 8019f1e:	b002      	add	sp, #8
 8019f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f24:	b003      	add	sp, #12
 8019f26:	4770      	bx	lr
 8019f28:	24000030 	.word	0x24000030

08019f2c <abort>:
 8019f2c:	b508      	push	{r3, lr}
 8019f2e:	2006      	movs	r0, #6
 8019f30:	f000 f82c 	bl	8019f8c <raise>
 8019f34:	2001      	movs	r0, #1
 8019f36:	f7e9 ffb9 	bl	8003eac <_exit>

08019f3a <_raise_r>:
 8019f3a:	291f      	cmp	r1, #31
 8019f3c:	b538      	push	{r3, r4, r5, lr}
 8019f3e:	4605      	mov	r5, r0
 8019f40:	460c      	mov	r4, r1
 8019f42:	d904      	bls.n	8019f4e <_raise_r+0x14>
 8019f44:	2316      	movs	r3, #22
 8019f46:	6003      	str	r3, [r0, #0]
 8019f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f4c:	bd38      	pop	{r3, r4, r5, pc}
 8019f4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019f50:	b112      	cbz	r2, 8019f58 <_raise_r+0x1e>
 8019f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019f56:	b94b      	cbnz	r3, 8019f6c <_raise_r+0x32>
 8019f58:	4628      	mov	r0, r5
 8019f5a:	f000 f831 	bl	8019fc0 <_getpid_r>
 8019f5e:	4622      	mov	r2, r4
 8019f60:	4601      	mov	r1, r0
 8019f62:	4628      	mov	r0, r5
 8019f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f68:	f000 b818 	b.w	8019f9c <_kill_r>
 8019f6c:	2b01      	cmp	r3, #1
 8019f6e:	d00a      	beq.n	8019f86 <_raise_r+0x4c>
 8019f70:	1c59      	adds	r1, r3, #1
 8019f72:	d103      	bne.n	8019f7c <_raise_r+0x42>
 8019f74:	2316      	movs	r3, #22
 8019f76:	6003      	str	r3, [r0, #0]
 8019f78:	2001      	movs	r0, #1
 8019f7a:	e7e7      	b.n	8019f4c <_raise_r+0x12>
 8019f7c:	2100      	movs	r1, #0
 8019f7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019f82:	4620      	mov	r0, r4
 8019f84:	4798      	blx	r3
 8019f86:	2000      	movs	r0, #0
 8019f88:	e7e0      	b.n	8019f4c <_raise_r+0x12>
	...

08019f8c <raise>:
 8019f8c:	4b02      	ldr	r3, [pc, #8]	@ (8019f98 <raise+0xc>)
 8019f8e:	4601      	mov	r1, r0
 8019f90:	6818      	ldr	r0, [r3, #0]
 8019f92:	f7ff bfd2 	b.w	8019f3a <_raise_r>
 8019f96:	bf00      	nop
 8019f98:	24000030 	.word	0x24000030

08019f9c <_kill_r>:
 8019f9c:	b538      	push	{r3, r4, r5, lr}
 8019f9e:	4d07      	ldr	r5, [pc, #28]	@ (8019fbc <_kill_r+0x20>)
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	4608      	mov	r0, r1
 8019fa6:	4611      	mov	r1, r2
 8019fa8:	602b      	str	r3, [r5, #0]
 8019faa:	f7e9 ff6f 	bl	8003e8c <_kill>
 8019fae:	1c43      	adds	r3, r0, #1
 8019fb0:	d102      	bne.n	8019fb8 <_kill_r+0x1c>
 8019fb2:	682b      	ldr	r3, [r5, #0]
 8019fb4:	b103      	cbz	r3, 8019fb8 <_kill_r+0x1c>
 8019fb6:	6023      	str	r3, [r4, #0]
 8019fb8:	bd38      	pop	{r3, r4, r5, pc}
 8019fba:	bf00      	nop
 8019fbc:	24005c70 	.word	0x24005c70

08019fc0 <_getpid_r>:
 8019fc0:	f7e9 bf5c 	b.w	8003e7c <_getpid>

08019fc4 <_init>:
 8019fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc6:	bf00      	nop
 8019fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fca:	bc08      	pop	{r3}
 8019fcc:	469e      	mov	lr, r3
 8019fce:	4770      	bx	lr

08019fd0 <_fini>:
 8019fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fd2:	bf00      	nop
 8019fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fd6:	bc08      	pop	{r3}
 8019fd8:	469e      	mov	lr, r3
 8019fda:	4770      	bx	lr
